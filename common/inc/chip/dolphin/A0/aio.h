//////
/// don't edit! auto-generated by docc: aio.h
////////////////////////////////////////////////////////////
#ifndef aio_h
#define aio_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE SPDIFRX_CTRL            biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL1                (RW)
///               %unsigned 1  ERR0_CLR                  0x0
///                                    ###
///                                    * Preamble Miss Error clear.
///                                    * When this bit is set, It clears the preamble miss error bit in the SPDIF_ERROR register Bit0
///                                    * Clear is effective, when Error is disabled. If source of error is not cleared, re-enable will post the error back.
///                                    ###
///               %unsigned 1  ERR1_CLR                  0x0
///                                    ###
///                                    * Early Preamble Error clear.
///                                    * When this bit is set, It clears the early preamble error bit in the SPDIF_ERROR register Bit1
///                                    * Clear is effective, when Error is disabled. If source of error is not cleared, re-enable will post the error back.
///                                    ###
///               %unsigned 1  ERR2_CLR                  0x0
///                                    ###
///                                    * Bi-phase Error clear.
///                                    * When this bit is set, It clears the bi-phase error bit in the SPDIF_ERROR register bit 2
///                                    * Clear is effective, when Error is disabled. If source of error is not cleared, re-enable will post the error back.
///                                    ###
///               %unsigned 1  ERR3_CLR                  0x0
///                                    ###
///                                    * Parity Error clear.
///                                    * When this bit is set, It clears the parity error bit in the SPDIF_ERROR register bit 3
///                                    * Clear is effective, when Error is disabled. If source of error is not cleared, re-enable will post the error back.
///                                    ###
///               %unsigned 1  ERR4_CLR                  0x0
///                                    ###
///                                    * Sync lock error clear.
///                                    * When this bit is set, It clears the sync lock error bit in the SPDIF_ERROR register bit 4
///                                    * Clear is effective, when Error is disabled. If source of error is not cleared, re-enable will post the error back.
///                                    ###
///               %unsigned 1  ERR5_CLR                  0x0
///                                    ###
///                                    * Period check error clear.
///                                    * When this bit is set, It clears the period check error bit in the SPDIF_ERROR register bit 5
///                                    * Clear is effective, when Error is disabled. If source of error is not cleared, re-enable will post the error back.
///                                    ###
///               %unsigned 1  ERR0_EN                   0x1
///                                    ###
///                                    * Preamble Miss Error Enable.
///                                    * SPDIF_ERROR register Bit0 Enable register
///                                    * 1 : enabled   0 : disabled.
///                                    ###
///               %unsigned 1  ERR1_EN                   0x1
///                                    ###
///                                    * Early Preamble Error enable.
///                                    * SPDIF_ERROR register Bit1 Enable register
///                                    * 1 : enabled   0 : disabled.
///                                    ###
///               %unsigned 1  ERR2_EN                   0x1
///                                    ###
///                                    * Bi-phase Error Enable.
///                                    * SPDIF_ERROR register Bit2 Enable register
///                                    * 1 : enabled   0 : disabled.
///                                    ###
///               %unsigned 1  ERR3_EN                   0x1
///                                    ###
///                                    * Parity Error enable.
///                                    * SPDIF_ERROR register Bit3 Enable register
///                                    * 1 : enabled   0 : disabled.
///                                    ###
///               %unsigned 1  ERR4_EN                   0x1
///                                    ###
///                                    * Sync lock error Enable.
///                                    * SPDIF_ERROR register Bit4 Enable register
///                                    * 1 : enabled   0 : disabled.
///                                    ###
///               %unsigned 1  ERR5_EN                   0x1
///                                    ###
///                                    * Period check error Enable.
///                                    * SPDIF_ERROR register Bit5 Enable register
///                                    * 1 : enabled   0 : disabled.
///                                    ###
///               %unsigned 1  SW_LOCK_EN                0x0
///                                    ###
///                                    * Software lock enable bit.
///                                    * 1 : SW_LOCK register bit will become the lock signal
///                                    * 0 : Lock bit from the FPLL becomes the lock signal
///                                    ###
///               %unsigned 1  SW_LOCK                   0x0
///                                    ###
///                                    * Software lock bit. - hacking the h/w lock bit
///                                    * 1 : FPLL Locked 0 : FPLL Not locked
///                                    ###
///               %unsigned 1  LOCK_POL                  0x0
///                                    ###
///                                    * Lock polarity register. Controls the lock status polarity of FPLL
///                                    * Lock signal is low when FPLL is locked.
///                                    * 1 : Lock signal without inversion
///                                    * 0 : Lock signal is inverted.
///                                    ###
///               %unsigned 5  SW_TRIG                   0x0
///                                    ###
///                                    * Software trigger for checking the frequency change.
///                                    * Bit0: software trigger.
///                                    * 0 to 1 Transition is detected on this register and is taken to restart the frequency calculation FSM.
///                                    * Bit1: Reset edge counters.
///                                    * 0 : No change
///                                    * 1 : based on hardware , the rise/fall edge counters will be reset to '0'
///                                    * Bit2: Trigger hardware auto detection
///                                    * 0 to 1 Transition is detected on this register and is taken to trigger the hardware auto detection mode.
///                                    * Bit3: Use spdif Poll registers or not
///                                    * 0 : terminal waiting for advanced auto is programmed as 32 bit '1's
///                                    * 1: Value loaded in SPDIFRX_POLL registers will be applicable
///                                    * Bit4: hardware autodetection mode select
///                                    * 0 : Normal operation mode. Required to change to advanced auto , if frequency change over happens or unplug -plugin happens.
///                                    * 1 : advanced auto detection.
///                                    ###
///               %unsigned 1  SW_LOAD                   0x0
///                                    ###
///                                    * Software load register to load the values of bit 0 count and bit 1 count from the registers.
///                                    * 1: Use the value from ONE_COUNT &
///                                    * ZERO_COUNT registers
///                                    * 0 : Use the internal count values calculated
///                                    ###
///               %unsigned 1  SW_TRIG_FIFO              0x0
///                                    ###
///                                    * Software trigger for FIFO.
///                                    * 0 to 1 Transition is detected on this register and is taken to trigger for the data FIFO.
///                                    ###
///               %unsigned 1  SW_RDEN_CTRL              0x0
///                                    ###
///                                    * software Read enable control bit
///                                    * 0: use internal read enable signal generated to read data from FIFO
///                                    * 1: use the S/W programmed read enable to read data from FIFO
///                                    ###
///               %unsigned 1  SW_RDEN                   0x0
///                                    ###
///                                    * Software read enable bit
///                                    * 0 : reads are disabled 1 : reads are enabled.
///                                    ###
///               %unsigned 1  AUTOCALIB                 0x0
///                                    ###
///                                    * When enabled, SPDIF receiver will autocalibrate the values for bit 0 and bit 1 counts by sampling the input.
///                                    * 0 : Disabled auto calibration. In this mode, the values of zero period and One period is given by the registers.
///                                    * 1 : Enable the autocalibration.
///                                    ###
///               %unsigned 1  OP_DISABLE                0x0
///                                    ###
///                                    * Disable all the outputs of SPDIF receiver
///                                    * 0: Dont disable the outputs
///                                    * 1: Disable the outputs
///                                    ###
///               %unsigned 2  OP_CTRL                   0x0
///                                    ###
///                                    * Output control on SPDIF Decoder.
///                                    * 0x00 : Send single bit B_pulse indication on 29th bit of data.
///                                    * 0x01 : Send Zero on [31:28] bits of data from SPDIF decoder
///                                    * 0x02 or 0x03 : send B,M,W pulses on bit[ 31:28] of SPDIF decoder.
///                                    ###
///               %unsigned 1  CLK_CTRL                  0x0
///                                    ###
///                                    * Clock selection
///                                    * 0: spdif ref clock 1: eARC Rx clock
///                                    * Not used , if eARC Rx does not provide Clock
///                                    ###
///               %unsigned 1  DATA_CTRL                 0x0
///                                    ###
///                                    * Data Selection
///                                    * 0: Spdif pin data 1: eARC RX data
///                                    ###
///               %unsigned 1  REFCLK_GATE               0x1
///                                    ###
///                                    * Clock Gating for Reference clock.
///                                    * 0 : Clock Switched off
///                                    * 1 : Clock ON (default)
///                                    ###
///               %unsigned 1  CLK_GATE                  0x0
///                                    ###
///                                    * Clock Gating for sysClk for SPDIFRX.
///                                    * 0 : Clock Switched off (default)
///                                    * 1 : Clock ON
///                                    ###
///     @ 0x00004 CTRL2                (RW)
///               %unsigned 8  REF_PULSE                 0xFA
///                                    ###
///                                    * Width of Reference pulse to FPLL.
///                                    * Reference pulse is generated on over sampling clock.
///                                    * The width of this reference pulse can be controlled by this register.
///                                    * Minimum value 0x10
///                                    ###
///               %unsigned 8  ZERO_COUNT                0xF
///                                    ###
///                                    * To find out the frequency the data is over sampled with high frequency clock. The counter value is automatically used inside the FSM.
///                                    * This register is S/W programming of the count value in bit zero period of the SPDIF line.
///                                    ###
///               %unsigned 8  ONE_COUNT                 0xF
///                                    ###
///                                    * To find out the frequency the data is over sampled with high frequency clock. The counter value is automatically used inside the FSM.
///                                    * This register is S/W programming of the count value in bit one period of the SPDIF line.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00008 CTRL3                (RW)
///               %unsigned 8  MARGIN1                   0x7
///                                    ###
///                                    * Margin value for single One or single Zero detection
///                                    ###
///               %unsigned 8  MARGIN2                   0x7
///                                    ###
///                                    * Margin value for single One or single zero detection
///                                    ###
///               %unsigned 8  MARGIN3                   0x7
///                                    ###
///                                    * Margin value for single One or single zero detection
///                                    ###
///               %unsigned 8  MARGIN4                   0xF
///                                    ###
///                                    * Margin value for single One or single zero detection
///                                    ###
///     @ 0x0000C CTRL4                (RW)
///               %unsigned 6  RD_PTR                    0x20
///                                    ###
///                                    * Data FIFO initial read pointer value.
///                                    ###
///               %unsigned 6  WR_PTR                    0x0
///                                    ###
///                                    * Data FIFO initial write pointer value.
///                                    ###
///               %unsigned 8  DIV_CNT_0                 0xFF
///                                    ###
///                                    * To wait for the Lock signal from FPLL and detect at least 16 B-pulse.
///                                    * The counter associated will count for the number of clock cycles indicated by this register and at the expiry of the counter generates the pulse.
///                                    ###
///               %unsigned 8  DIV_CNT_1                 0xFF
///                                    ###
///                                    * Same as DIV_CNT_0
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00010 CTRL5                (RW)
///               %unsigned 32 POLL_REGS                 0x1000
///                                    ###
///                                    * SPDIF line can come with different audio formats and on the fly the frequency of the incoming signal can change.
///                                    * There is a 32 bit polling counter, whose terminal count is programmed by this register. At the expiry of the counter the FSM automatically detects if there is any change in the incoming data rate i.e. sampling frequency.
///                                    ###
///     @ 0x00014 CTRL6                (RW)
///               %unsigned 8  VAL_32K                   0x62
///                                    ###
///                                    * On the SPDIF line, when encoded with 32khz sampling, the count value of bit 0 and bit 1 sampled at high frequency clock is represented in this register.
///                                    * Sampling clock = 32Khz
///                                    * SPDIF line frequency = 32k * 2 * 128 = 8.192Mhz
///                                    * Since only high or low period is of the interest,
///                                    * sample time = 8.192M/2 = 4.096Mhz.
///                                    * If reference clock = 400Mhz
///                                    * Value = 244.1ns/ 2.5ns = 98 (decimal)
///                                    ###
///               %unsigned 8  VAL_44K                   0x46
///                                    ###
///                                    * Calculations similar to VAL_32K.
///                                    ###
///               %unsigned 8  VAL_88K                   0x23
///                                    ###
///                                    * Calculations similar to VAL_32K.
///                                    ###
///               %unsigned 8  VAL_176K                  0x11
///                                    ###
///                                    * Calculations similar to VAL_32K.
///                                    ###
///     @ 0x00018 CTRL7                (RW)
///               %unsigned 8  LOCKWAIT_0                0xFF
///                                    ###
///                                    * To wait for the Lock signal from FPLL and detect at least 16 B-pulse.
///                                    * If the lock signal has not come within the expiry of this counter which is incremented on every pulse created by div_cnt register expiry.
///                                    * If the lock has not happened then auto calibration will move to next value for calibration.
///                                    ###
///               %unsigned 8  LOCKWAIT_1                0x7
///                                    ###
///                                    * Same as LOCK_WAIT_0
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x0001C CTRL8                (RW)
///               %unsigned 24 FPLL_N_REGS               0x6000
///                                    ###
///                                    * Desired number of output clocks in input reference signal in FPLL.
///                                    * The frequency of the output clock in the closed loop mode is as follows.
///                                    * F = rf * N      Where F = output clock frequency
///                                    * rf = frequency of the reference signal
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00020 CTRL9                (RW)
///               %unsigned 29 FPLL_W_REGS               0x0
///                                    ###
///                                    * Control word in dig PLL 1 (Least Significant byte)
///                                    * Manual Frequency control word. Used only when the FPLL is put in open loop mode. In the open loop mode the output clock frequency is depends directly on this value, in the following manner.
///                                    * F= f * W/ (2^25)
///                                    * Where F= output clock frequency.
///                                    * f = base clock frequency from the analog PLL
///                                    ###
///               %%        3          # Stuffing bits...
///     @ 0x00024 CTRL10               (RW)
///               %unsigned 8  FPLL_THRESH0              0x1
///                                    ###
///                                    * Threshold for (huge) frequency error in FPLLbeyond which fast acquisition is forced
///                                    * The loop error measure module sets the huge error. flag when the measured value of the reference signal in terms of output clocks is different from the target N by more than this value
///                                    ###
///               %unsigned 8  FPLL_THRESH1              0x5
///                                    ###
///                                    * Threshold for (small) frequency error in FPLL after which interval the normal closed loop acquisition takes place.
///                                    * The number of base clocks n in the reference signal, is updated at the end of the reference signal cycle provided the current value is different from the stored value by more than this threshold.
///                                    ###
///               %unsigned 6  FPLL_GAIN                 0x0
///                                    ###
///                                    * Manual loop error gain. This value is used when the auto-gain is disabled. In the manual gain mode the loop error is gained up as shown below and added to the frequency control word.W = W + (err << Gain)
///                                    ###
///               %%        10         # Stuffing bits...
///     @ 0x00028 CTRL11               (RW)
///               %unsigned 1  FPLL_ENABLE               0x1
///                                    ###
///                                    * Enable FPLL
///                                    * 0: Disable 1: Enable
///                                    ###
///               %unsigned 1  OPEN_LOOP                 0x0
///                                    ###
///                                    * When set the FPLL1 is put in the open-loop mode. The frequency of the output clock is directly dependent on the programmed frequency Control word W. When cleared the Frequency of the output clock is depends on the set number of output clocks N in the reference signal and the frequency of the reference signal.
///                                    ###
///               %unsigned 1  AUTO_GAIN                 0x1
///                                    ###
///                                    * When set, enables the auto-gain in the closed loop mode. The loop error is gained up by an internally generated optimum value for fast locking, based on the frequency of the reference signal.
///                                    ###
///               %unsigned 2  CLOSED_LOOP               0x0
///                                    ###
///                                    * Controls what happens when the Loop Error Measure module comes up with a huge error condition.
///                                    * 0x00: Frequency control word is initialized by the auto estimated value.
///                                    * 0x01: Frequency control word is initialized from the Manual control word register W
///                                    * 0x02: Frequency control word is updated with Loop Error Correction. Normal closed loop mode.
///                                    * 0x03: Reserved.
///                                    ###
///               %unsigned 1  COAST                     0x0
///                                    ###
///                                    * 0: No coast
///                                    * 1: Coasting enabled. The internal control word does not get modified.
///                                    ###
///               %unsigned 3  RESOLUTION                0x4
///                                    ###
///                                    * Phase resolution used. This value indicates the number of phases
///                                    * used input clock to create the output clock.
///                                    * 0x00: 1 phase used
///                                    * 0x01: 2 phases used
///                                    * 0x02: 4 phases used
///                                    * 0x03: 8 phases used
///                                    * 0x04: 16 phases used
///                                    * 0x05 to 0x07 : Reserved
///                                    ###
///               %%        23         # Stuffing bits...
///     @ 0x0002C CTRL12               (RW)
///               %unsigned 2  FRAME_WIDTH               0x0
///                                    ###
///                                    * Defines Audio frame width interms of BCLK
///                                    * 0x00 : 16bit
///                                    * 0x01 : 24 bit
///                                    * 0x02 : 32 bit
///                                    * 0x03 : reserved
///                                    ###
///               %unsigned 3  DATAVALID_WIDTH           0x0
///                                    ###
///                                    * Defines how many valid data bits in one audio output frame
///                                    * 0x00: 16-bit
///                                    * 0x01: 18-bit
///                                    * 0x02: 20-bit
///                                    * 0x03: 24-bit
///                                    * 0x04: 32-bit
///                                    * Others : reserved
///                                    ###
///               %unsigned 2  OP_MODE                   0x0
///                                    ###
///                                    * Defines the operation mode.
///                                    * 0x01: Justified
///                                    * 0x02: I2S
///                                    ###
///               %unsigned 1  RCV_MODE                  0x0
///                                    ###
///                                    * Receive mode.
///                                    * 0: MSB first received
///                                    * 1: LSB being received
///                                    ###
///               %unsigned 1  JUSTIFY_MODE              0x0
///                                    ###
///                                    * Defines audio justify output mode,
///                                    * 0: Left and 1: Right
///                                    ###
///               %unsigned 1  L_R_SWITCH                0x0
///                                    ###
///                                    * Switch between L and R channel data
///                                    * 0 : No switch
///                                    * 1: switch left channel data with right channel data.
///                                    ###
///               %unsigned 1  MUTE                      0x0
///                                    ###
///                                    * Mute the Rx data
///                                    * 0: No Mute
///                                    * 1: Mute audio
///                                    ###
///               %unsigned 1  I2SFIFO_FLUSH             0x0
///                                    ###
///                                    * Flush the I2S FIFO
///                                    * 0: No Flush 1: Flush the FIFO of I2S module.
///                                    ###
///               %%        20         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      48B, bits:     292b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SPDIFRX_CTRL
#define h_SPDIFRX_CTRL (){}

    #define     RA_SPDIFRX_CTRL_CTRL1                          0x0000

    #define     BA_SPDIFRX_CTRL_CTRL1_ERR0_CLR                 0x0000
    #define     B16SPDIFRX_CTRL_CTRL1_ERR0_CLR                 0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_ERR0_CLR                    0
    #define   LSb16SPDIFRX_CTRL_CTRL1_ERR0_CLR                    0
    #define       bSPDIFRX_CTRL_CTRL1_ERR0_CLR                 1
    #define   MSK32SPDIFRX_CTRL_CTRL1_ERR0_CLR                    0x00000001

    #define     BA_SPDIFRX_CTRL_CTRL1_ERR1_CLR                 0x0000
    #define     B16SPDIFRX_CTRL_CTRL1_ERR1_CLR                 0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_ERR1_CLR                    1
    #define   LSb16SPDIFRX_CTRL_CTRL1_ERR1_CLR                    1
    #define       bSPDIFRX_CTRL_CTRL1_ERR1_CLR                 1
    #define   MSK32SPDIFRX_CTRL_CTRL1_ERR1_CLR                    0x00000002

    #define     BA_SPDIFRX_CTRL_CTRL1_ERR2_CLR                 0x0000
    #define     B16SPDIFRX_CTRL_CTRL1_ERR2_CLR                 0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_ERR2_CLR                    2
    #define   LSb16SPDIFRX_CTRL_CTRL1_ERR2_CLR                    2
    #define       bSPDIFRX_CTRL_CTRL1_ERR2_CLR                 1
    #define   MSK32SPDIFRX_CTRL_CTRL1_ERR2_CLR                    0x00000004

    #define     BA_SPDIFRX_CTRL_CTRL1_ERR3_CLR                 0x0000
    #define     B16SPDIFRX_CTRL_CTRL1_ERR3_CLR                 0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_ERR3_CLR                    3
    #define   LSb16SPDIFRX_CTRL_CTRL1_ERR3_CLR                    3
    #define       bSPDIFRX_CTRL_CTRL1_ERR3_CLR                 1
    #define   MSK32SPDIFRX_CTRL_CTRL1_ERR3_CLR                    0x00000008

    #define     BA_SPDIFRX_CTRL_CTRL1_ERR4_CLR                 0x0000
    #define     B16SPDIFRX_CTRL_CTRL1_ERR4_CLR                 0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_ERR4_CLR                    4
    #define   LSb16SPDIFRX_CTRL_CTRL1_ERR4_CLR                    4
    #define       bSPDIFRX_CTRL_CTRL1_ERR4_CLR                 1
    #define   MSK32SPDIFRX_CTRL_CTRL1_ERR4_CLR                    0x00000010

    #define     BA_SPDIFRX_CTRL_CTRL1_ERR5_CLR                 0x0000
    #define     B16SPDIFRX_CTRL_CTRL1_ERR5_CLR                 0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_ERR5_CLR                    5
    #define   LSb16SPDIFRX_CTRL_CTRL1_ERR5_CLR                    5
    #define       bSPDIFRX_CTRL_CTRL1_ERR5_CLR                 1
    #define   MSK32SPDIFRX_CTRL_CTRL1_ERR5_CLR                    0x00000020

    #define     BA_SPDIFRX_CTRL_CTRL1_ERR0_EN                  0x0000
    #define     B16SPDIFRX_CTRL_CTRL1_ERR0_EN                  0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_ERR0_EN                     6
    #define   LSb16SPDIFRX_CTRL_CTRL1_ERR0_EN                     6
    #define       bSPDIFRX_CTRL_CTRL1_ERR0_EN                  1
    #define   MSK32SPDIFRX_CTRL_CTRL1_ERR0_EN                     0x00000040

    #define     BA_SPDIFRX_CTRL_CTRL1_ERR1_EN                  0x0000
    #define     B16SPDIFRX_CTRL_CTRL1_ERR1_EN                  0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_ERR1_EN                     7
    #define   LSb16SPDIFRX_CTRL_CTRL1_ERR1_EN                     7
    #define       bSPDIFRX_CTRL_CTRL1_ERR1_EN                  1
    #define   MSK32SPDIFRX_CTRL_CTRL1_ERR1_EN                     0x00000080

    #define     BA_SPDIFRX_CTRL_CTRL1_ERR2_EN                  0x0001
    #define     B16SPDIFRX_CTRL_CTRL1_ERR2_EN                  0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_ERR2_EN                     8
    #define   LSb16SPDIFRX_CTRL_CTRL1_ERR2_EN                     8
    #define       bSPDIFRX_CTRL_CTRL1_ERR2_EN                  1
    #define   MSK32SPDIFRX_CTRL_CTRL1_ERR2_EN                     0x00000100

    #define     BA_SPDIFRX_CTRL_CTRL1_ERR3_EN                  0x0001
    #define     B16SPDIFRX_CTRL_CTRL1_ERR3_EN                  0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_ERR3_EN                     9
    #define   LSb16SPDIFRX_CTRL_CTRL1_ERR3_EN                     9
    #define       bSPDIFRX_CTRL_CTRL1_ERR3_EN                  1
    #define   MSK32SPDIFRX_CTRL_CTRL1_ERR3_EN                     0x00000200

    #define     BA_SPDIFRX_CTRL_CTRL1_ERR4_EN                  0x0001
    #define     B16SPDIFRX_CTRL_CTRL1_ERR4_EN                  0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_ERR4_EN                     10
    #define   LSb16SPDIFRX_CTRL_CTRL1_ERR4_EN                     10
    #define       bSPDIFRX_CTRL_CTRL1_ERR4_EN                  1
    #define   MSK32SPDIFRX_CTRL_CTRL1_ERR4_EN                     0x00000400

    #define     BA_SPDIFRX_CTRL_CTRL1_ERR5_EN                  0x0001
    #define     B16SPDIFRX_CTRL_CTRL1_ERR5_EN                  0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_ERR5_EN                     11
    #define   LSb16SPDIFRX_CTRL_CTRL1_ERR5_EN                     11
    #define       bSPDIFRX_CTRL_CTRL1_ERR5_EN                  1
    #define   MSK32SPDIFRX_CTRL_CTRL1_ERR5_EN                     0x00000800

    #define     BA_SPDIFRX_CTRL_CTRL1_SW_LOCK_EN               0x0001
    #define     B16SPDIFRX_CTRL_CTRL1_SW_LOCK_EN               0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_SW_LOCK_EN                  12
    #define   LSb16SPDIFRX_CTRL_CTRL1_SW_LOCK_EN                  12
    #define       bSPDIFRX_CTRL_CTRL1_SW_LOCK_EN               1
    #define   MSK32SPDIFRX_CTRL_CTRL1_SW_LOCK_EN                  0x00001000

    #define     BA_SPDIFRX_CTRL_CTRL1_SW_LOCK                  0x0001
    #define     B16SPDIFRX_CTRL_CTRL1_SW_LOCK                  0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_SW_LOCK                     13
    #define   LSb16SPDIFRX_CTRL_CTRL1_SW_LOCK                     13
    #define       bSPDIFRX_CTRL_CTRL1_SW_LOCK                  1
    #define   MSK32SPDIFRX_CTRL_CTRL1_SW_LOCK                     0x00002000

    #define     BA_SPDIFRX_CTRL_CTRL1_LOCK_POL                 0x0001
    #define     B16SPDIFRX_CTRL_CTRL1_LOCK_POL                 0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_LOCK_POL                    14
    #define   LSb16SPDIFRX_CTRL_CTRL1_LOCK_POL                    14
    #define       bSPDIFRX_CTRL_CTRL1_LOCK_POL                 1
    #define   MSK32SPDIFRX_CTRL_CTRL1_LOCK_POL                    0x00004000

    #define     BA_SPDIFRX_CTRL_CTRL1_SW_TRIG                  0x0001
    #define     B16SPDIFRX_CTRL_CTRL1_SW_TRIG                  0x0000
    #define   LSb32SPDIFRX_CTRL_CTRL1_SW_TRIG                     15
    #define   LSb16SPDIFRX_CTRL_CTRL1_SW_TRIG                     15
    #define       bSPDIFRX_CTRL_CTRL1_SW_TRIG                  5
    #define   MSK32SPDIFRX_CTRL_CTRL1_SW_TRIG                     0x000F8000

    #define     BA_SPDIFRX_CTRL_CTRL1_SW_LOAD                  0x0002
    #define     B16SPDIFRX_CTRL_CTRL1_SW_LOAD                  0x0002
    #define   LSb32SPDIFRX_CTRL_CTRL1_SW_LOAD                     20
    #define   LSb16SPDIFRX_CTRL_CTRL1_SW_LOAD                     4
    #define       bSPDIFRX_CTRL_CTRL1_SW_LOAD                  1
    #define   MSK32SPDIFRX_CTRL_CTRL1_SW_LOAD                     0x00100000

    #define     BA_SPDIFRX_CTRL_CTRL1_SW_TRIG_FIFO             0x0002
    #define     B16SPDIFRX_CTRL_CTRL1_SW_TRIG_FIFO             0x0002
    #define   LSb32SPDIFRX_CTRL_CTRL1_SW_TRIG_FIFO                21
    #define   LSb16SPDIFRX_CTRL_CTRL1_SW_TRIG_FIFO                5
    #define       bSPDIFRX_CTRL_CTRL1_SW_TRIG_FIFO             1
    #define   MSK32SPDIFRX_CTRL_CTRL1_SW_TRIG_FIFO                0x00200000

    #define     BA_SPDIFRX_CTRL_CTRL1_SW_RDEN_CTRL             0x0002
    #define     B16SPDIFRX_CTRL_CTRL1_SW_RDEN_CTRL             0x0002
    #define   LSb32SPDIFRX_CTRL_CTRL1_SW_RDEN_CTRL                22
    #define   LSb16SPDIFRX_CTRL_CTRL1_SW_RDEN_CTRL                6
    #define       bSPDIFRX_CTRL_CTRL1_SW_RDEN_CTRL             1
    #define   MSK32SPDIFRX_CTRL_CTRL1_SW_RDEN_CTRL                0x00400000

    #define     BA_SPDIFRX_CTRL_CTRL1_SW_RDEN                  0x0002
    #define     B16SPDIFRX_CTRL_CTRL1_SW_RDEN                  0x0002
    #define   LSb32SPDIFRX_CTRL_CTRL1_SW_RDEN                     23
    #define   LSb16SPDIFRX_CTRL_CTRL1_SW_RDEN                     7
    #define       bSPDIFRX_CTRL_CTRL1_SW_RDEN                  1
    #define   MSK32SPDIFRX_CTRL_CTRL1_SW_RDEN                     0x00800000

    #define     BA_SPDIFRX_CTRL_CTRL1_AUTOCALIB                0x0003
    #define     B16SPDIFRX_CTRL_CTRL1_AUTOCALIB                0x0002
    #define   LSb32SPDIFRX_CTRL_CTRL1_AUTOCALIB                   24
    #define   LSb16SPDIFRX_CTRL_CTRL1_AUTOCALIB                   8
    #define       bSPDIFRX_CTRL_CTRL1_AUTOCALIB                1
    #define   MSK32SPDIFRX_CTRL_CTRL1_AUTOCALIB                   0x01000000

    #define     BA_SPDIFRX_CTRL_CTRL1_OP_DISABLE               0x0003
    #define     B16SPDIFRX_CTRL_CTRL1_OP_DISABLE               0x0002
    #define   LSb32SPDIFRX_CTRL_CTRL1_OP_DISABLE                  25
    #define   LSb16SPDIFRX_CTRL_CTRL1_OP_DISABLE                  9
    #define       bSPDIFRX_CTRL_CTRL1_OP_DISABLE               1
    #define   MSK32SPDIFRX_CTRL_CTRL1_OP_DISABLE                  0x02000000

    #define     BA_SPDIFRX_CTRL_CTRL1_OP_CTRL                  0x0003
    #define     B16SPDIFRX_CTRL_CTRL1_OP_CTRL                  0x0002
    #define   LSb32SPDIFRX_CTRL_CTRL1_OP_CTRL                     26
    #define   LSb16SPDIFRX_CTRL_CTRL1_OP_CTRL                     10
    #define       bSPDIFRX_CTRL_CTRL1_OP_CTRL                  2
    #define   MSK32SPDIFRX_CTRL_CTRL1_OP_CTRL                     0x0C000000

    #define     BA_SPDIFRX_CTRL_CTRL1_CLK_CTRL                 0x0003
    #define     B16SPDIFRX_CTRL_CTRL1_CLK_CTRL                 0x0002
    #define   LSb32SPDIFRX_CTRL_CTRL1_CLK_CTRL                    28
    #define   LSb16SPDIFRX_CTRL_CTRL1_CLK_CTRL                    12
    #define       bSPDIFRX_CTRL_CTRL1_CLK_CTRL                 1
    #define   MSK32SPDIFRX_CTRL_CTRL1_CLK_CTRL                    0x10000000

    #define     BA_SPDIFRX_CTRL_CTRL1_DATA_CTRL                0x0003
    #define     B16SPDIFRX_CTRL_CTRL1_DATA_CTRL                0x0002
    #define   LSb32SPDIFRX_CTRL_CTRL1_DATA_CTRL                   29
    #define   LSb16SPDIFRX_CTRL_CTRL1_DATA_CTRL                   13
    #define       bSPDIFRX_CTRL_CTRL1_DATA_CTRL                1
    #define   MSK32SPDIFRX_CTRL_CTRL1_DATA_CTRL                   0x20000000

    #define     BA_SPDIFRX_CTRL_CTRL1_REFCLK_GATE              0x0003
    #define     B16SPDIFRX_CTRL_CTRL1_REFCLK_GATE              0x0002
    #define   LSb32SPDIFRX_CTRL_CTRL1_REFCLK_GATE                 30
    #define   LSb16SPDIFRX_CTRL_CTRL1_REFCLK_GATE                 14
    #define       bSPDIFRX_CTRL_CTRL1_REFCLK_GATE              1
    #define   MSK32SPDIFRX_CTRL_CTRL1_REFCLK_GATE                 0x40000000

    #define     BA_SPDIFRX_CTRL_CTRL1_CLK_GATE                 0x0003
    #define     B16SPDIFRX_CTRL_CTRL1_CLK_GATE                 0x0002
    #define   LSb32SPDIFRX_CTRL_CTRL1_CLK_GATE                    31
    #define   LSb16SPDIFRX_CTRL_CTRL1_CLK_GATE                    15
    #define       bSPDIFRX_CTRL_CTRL1_CLK_GATE                 1
    #define   MSK32SPDIFRX_CTRL_CTRL1_CLK_GATE                    0x80000000
    ///////////////////////////////////////////////////////////
    #define     RA_SPDIFRX_CTRL_CTRL2                          0x0004

    #define     BA_SPDIFRX_CTRL_CTRL2_REF_PULSE                0x0004
    #define     B16SPDIFRX_CTRL_CTRL2_REF_PULSE                0x0004
    #define   LSb32SPDIFRX_CTRL_CTRL2_REF_PULSE                   0
    #define   LSb16SPDIFRX_CTRL_CTRL2_REF_PULSE                   0
    #define       bSPDIFRX_CTRL_CTRL2_REF_PULSE                8
    #define   MSK32SPDIFRX_CTRL_CTRL2_REF_PULSE                   0x000000FF

    #define     BA_SPDIFRX_CTRL_CTRL2_ZERO_COUNT               0x0005
    #define     B16SPDIFRX_CTRL_CTRL2_ZERO_COUNT               0x0004
    #define   LSb32SPDIFRX_CTRL_CTRL2_ZERO_COUNT                  8
    #define   LSb16SPDIFRX_CTRL_CTRL2_ZERO_COUNT                  8
    #define       bSPDIFRX_CTRL_CTRL2_ZERO_COUNT               8
    #define   MSK32SPDIFRX_CTRL_CTRL2_ZERO_COUNT                  0x0000FF00

    #define     BA_SPDIFRX_CTRL_CTRL2_ONE_COUNT                0x0006
    #define     B16SPDIFRX_CTRL_CTRL2_ONE_COUNT                0x0006
    #define   LSb32SPDIFRX_CTRL_CTRL2_ONE_COUNT                   16
    #define   LSb16SPDIFRX_CTRL_CTRL2_ONE_COUNT                   0
    #define       bSPDIFRX_CTRL_CTRL2_ONE_COUNT                8
    #define   MSK32SPDIFRX_CTRL_CTRL2_ONE_COUNT                   0x00FF0000
    ///////////////////////////////////////////////////////////
    #define     RA_SPDIFRX_CTRL_CTRL3                          0x0008

    #define     BA_SPDIFRX_CTRL_CTRL3_MARGIN1                  0x0008
    #define     B16SPDIFRX_CTRL_CTRL3_MARGIN1                  0x0008
    #define   LSb32SPDIFRX_CTRL_CTRL3_MARGIN1                     0
    #define   LSb16SPDIFRX_CTRL_CTRL3_MARGIN1                     0
    #define       bSPDIFRX_CTRL_CTRL3_MARGIN1                  8
    #define   MSK32SPDIFRX_CTRL_CTRL3_MARGIN1                     0x000000FF

    #define     BA_SPDIFRX_CTRL_CTRL3_MARGIN2                  0x0009
    #define     B16SPDIFRX_CTRL_CTRL3_MARGIN2                  0x0008
    #define   LSb32SPDIFRX_CTRL_CTRL3_MARGIN2                     8
    #define   LSb16SPDIFRX_CTRL_CTRL3_MARGIN2                     8
    #define       bSPDIFRX_CTRL_CTRL3_MARGIN2                  8
    #define   MSK32SPDIFRX_CTRL_CTRL3_MARGIN2                     0x0000FF00

    #define     BA_SPDIFRX_CTRL_CTRL3_MARGIN3                  0x000A
    #define     B16SPDIFRX_CTRL_CTRL3_MARGIN3                  0x000A
    #define   LSb32SPDIFRX_CTRL_CTRL3_MARGIN3                     16
    #define   LSb16SPDIFRX_CTRL_CTRL3_MARGIN3                     0
    #define       bSPDIFRX_CTRL_CTRL3_MARGIN3                  8
    #define   MSK32SPDIFRX_CTRL_CTRL3_MARGIN3                     0x00FF0000

    #define     BA_SPDIFRX_CTRL_CTRL3_MARGIN4                  0x000B
    #define     B16SPDIFRX_CTRL_CTRL3_MARGIN4                  0x000A
    #define   LSb32SPDIFRX_CTRL_CTRL3_MARGIN4                     24
    #define   LSb16SPDIFRX_CTRL_CTRL3_MARGIN4                     8
    #define       bSPDIFRX_CTRL_CTRL3_MARGIN4                  8
    #define   MSK32SPDIFRX_CTRL_CTRL3_MARGIN4                     0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_SPDIFRX_CTRL_CTRL4                          0x000C

    #define     BA_SPDIFRX_CTRL_CTRL4_RD_PTR                   0x000C
    #define     B16SPDIFRX_CTRL_CTRL4_RD_PTR                   0x000C
    #define   LSb32SPDIFRX_CTRL_CTRL4_RD_PTR                      0
    #define   LSb16SPDIFRX_CTRL_CTRL4_RD_PTR                      0
    #define       bSPDIFRX_CTRL_CTRL4_RD_PTR                   6
    #define   MSK32SPDIFRX_CTRL_CTRL4_RD_PTR                      0x0000003F

    #define     BA_SPDIFRX_CTRL_CTRL4_WR_PTR                   0x000C
    #define     B16SPDIFRX_CTRL_CTRL4_WR_PTR                   0x000C
    #define   LSb32SPDIFRX_CTRL_CTRL4_WR_PTR                      6
    #define   LSb16SPDIFRX_CTRL_CTRL4_WR_PTR                      6
    #define       bSPDIFRX_CTRL_CTRL4_WR_PTR                   6
    #define   MSK32SPDIFRX_CTRL_CTRL4_WR_PTR                      0x00000FC0

    #define     BA_SPDIFRX_CTRL_CTRL4_DIV_CNT_0                0x000D
    #define     B16SPDIFRX_CTRL_CTRL4_DIV_CNT_0                0x000C
    #define   LSb32SPDIFRX_CTRL_CTRL4_DIV_CNT_0                   12
    #define   LSb16SPDIFRX_CTRL_CTRL4_DIV_CNT_0                   12
    #define       bSPDIFRX_CTRL_CTRL4_DIV_CNT_0                8
    #define   MSK32SPDIFRX_CTRL_CTRL4_DIV_CNT_0                   0x000FF000

    #define     BA_SPDIFRX_CTRL_CTRL4_DIV_CNT_1                0x000E
    #define     B16SPDIFRX_CTRL_CTRL4_DIV_CNT_1                0x000E
    #define   LSb32SPDIFRX_CTRL_CTRL4_DIV_CNT_1                   20
    #define   LSb16SPDIFRX_CTRL_CTRL4_DIV_CNT_1                   4
    #define       bSPDIFRX_CTRL_CTRL4_DIV_CNT_1                8
    #define   MSK32SPDIFRX_CTRL_CTRL4_DIV_CNT_1                   0x0FF00000
    ///////////////////////////////////////////////////////////
    #define     RA_SPDIFRX_CTRL_CTRL5                          0x0010

    #define     BA_SPDIFRX_CTRL_CTRL5_POLL_REGS                0x0010
    #define     B16SPDIFRX_CTRL_CTRL5_POLL_REGS                0x0010
    #define   LSb32SPDIFRX_CTRL_CTRL5_POLL_REGS                   0
    #define   LSb16SPDIFRX_CTRL_CTRL5_POLL_REGS                   0
    #define       bSPDIFRX_CTRL_CTRL5_POLL_REGS                32
    #define   MSK32SPDIFRX_CTRL_CTRL5_POLL_REGS                   0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_SPDIFRX_CTRL_CTRL6                          0x0014

    #define     BA_SPDIFRX_CTRL_CTRL6_VAL_32K                  0x0014
    #define     B16SPDIFRX_CTRL_CTRL6_VAL_32K                  0x0014
    #define   LSb32SPDIFRX_CTRL_CTRL6_VAL_32K                     0
    #define   LSb16SPDIFRX_CTRL_CTRL6_VAL_32K                     0
    #define       bSPDIFRX_CTRL_CTRL6_VAL_32K                  8
    #define   MSK32SPDIFRX_CTRL_CTRL6_VAL_32K                     0x000000FF

    #define     BA_SPDIFRX_CTRL_CTRL6_VAL_44K                  0x0015
    #define     B16SPDIFRX_CTRL_CTRL6_VAL_44K                  0x0014
    #define   LSb32SPDIFRX_CTRL_CTRL6_VAL_44K                     8
    #define   LSb16SPDIFRX_CTRL_CTRL6_VAL_44K                     8
    #define       bSPDIFRX_CTRL_CTRL6_VAL_44K                  8
    #define   MSK32SPDIFRX_CTRL_CTRL6_VAL_44K                     0x0000FF00

    #define     BA_SPDIFRX_CTRL_CTRL6_VAL_88K                  0x0016
    #define     B16SPDIFRX_CTRL_CTRL6_VAL_88K                  0x0016
    #define   LSb32SPDIFRX_CTRL_CTRL6_VAL_88K                     16
    #define   LSb16SPDIFRX_CTRL_CTRL6_VAL_88K                     0
    #define       bSPDIFRX_CTRL_CTRL6_VAL_88K                  8
    #define   MSK32SPDIFRX_CTRL_CTRL6_VAL_88K                     0x00FF0000

    #define     BA_SPDIFRX_CTRL_CTRL6_VAL_176K                 0x0017
    #define     B16SPDIFRX_CTRL_CTRL6_VAL_176K                 0x0016
    #define   LSb32SPDIFRX_CTRL_CTRL6_VAL_176K                    24
    #define   LSb16SPDIFRX_CTRL_CTRL6_VAL_176K                    8
    #define       bSPDIFRX_CTRL_CTRL6_VAL_176K                 8
    #define   MSK32SPDIFRX_CTRL_CTRL6_VAL_176K                    0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_SPDIFRX_CTRL_CTRL7                          0x0018

    #define     BA_SPDIFRX_CTRL_CTRL7_LOCKWAIT_0               0x0018
    #define     B16SPDIFRX_CTRL_CTRL7_LOCKWAIT_0               0x0018
    #define   LSb32SPDIFRX_CTRL_CTRL7_LOCKWAIT_0                  0
    #define   LSb16SPDIFRX_CTRL_CTRL7_LOCKWAIT_0                  0
    #define       bSPDIFRX_CTRL_CTRL7_LOCKWAIT_0               8
    #define   MSK32SPDIFRX_CTRL_CTRL7_LOCKWAIT_0                  0x000000FF

    #define     BA_SPDIFRX_CTRL_CTRL7_LOCKWAIT_1               0x0019
    #define     B16SPDIFRX_CTRL_CTRL7_LOCKWAIT_1               0x0018
    #define   LSb32SPDIFRX_CTRL_CTRL7_LOCKWAIT_1                  8
    #define   LSb16SPDIFRX_CTRL_CTRL7_LOCKWAIT_1                  8
    #define       bSPDIFRX_CTRL_CTRL7_LOCKWAIT_1               8
    #define   MSK32SPDIFRX_CTRL_CTRL7_LOCKWAIT_1                  0x0000FF00
    ///////////////////////////////////////////////////////////
    #define     RA_SPDIFRX_CTRL_CTRL8                          0x001C

    #define     BA_SPDIFRX_CTRL_CTRL8_FPLL_N_REGS              0x001C
    #define     B16SPDIFRX_CTRL_CTRL8_FPLL_N_REGS              0x001C
    #define   LSb32SPDIFRX_CTRL_CTRL8_FPLL_N_REGS                 0
    #define   LSb16SPDIFRX_CTRL_CTRL8_FPLL_N_REGS                 0
    #define       bSPDIFRX_CTRL_CTRL8_FPLL_N_REGS              24
    #define   MSK32SPDIFRX_CTRL_CTRL8_FPLL_N_REGS                 0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_SPDIFRX_CTRL_CTRL9                          0x0020

    #define     BA_SPDIFRX_CTRL_CTRL9_FPLL_W_REGS              0x0020
    #define     B16SPDIFRX_CTRL_CTRL9_FPLL_W_REGS              0x0020
    #define   LSb32SPDIFRX_CTRL_CTRL9_FPLL_W_REGS                 0
    #define   LSb16SPDIFRX_CTRL_CTRL9_FPLL_W_REGS                 0
    #define       bSPDIFRX_CTRL_CTRL9_FPLL_W_REGS              29
    #define   MSK32SPDIFRX_CTRL_CTRL9_FPLL_W_REGS                 0x1FFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_SPDIFRX_CTRL_CTRL10                         0x0024

    #define     BA_SPDIFRX_CTRL_CTRL10_FPLL_THRESH0            0x0024
    #define     B16SPDIFRX_CTRL_CTRL10_FPLL_THRESH0            0x0024
    #define   LSb32SPDIFRX_CTRL_CTRL10_FPLL_THRESH0               0
    #define   LSb16SPDIFRX_CTRL_CTRL10_FPLL_THRESH0               0
    #define       bSPDIFRX_CTRL_CTRL10_FPLL_THRESH0            8
    #define   MSK32SPDIFRX_CTRL_CTRL10_FPLL_THRESH0               0x000000FF

    #define     BA_SPDIFRX_CTRL_CTRL10_FPLL_THRESH1            0x0025
    #define     B16SPDIFRX_CTRL_CTRL10_FPLL_THRESH1            0x0024
    #define   LSb32SPDIFRX_CTRL_CTRL10_FPLL_THRESH1               8
    #define   LSb16SPDIFRX_CTRL_CTRL10_FPLL_THRESH1               8
    #define       bSPDIFRX_CTRL_CTRL10_FPLL_THRESH1            8
    #define   MSK32SPDIFRX_CTRL_CTRL10_FPLL_THRESH1               0x0000FF00

    #define     BA_SPDIFRX_CTRL_CTRL10_FPLL_GAIN               0x0026
    #define     B16SPDIFRX_CTRL_CTRL10_FPLL_GAIN               0x0026
    #define   LSb32SPDIFRX_CTRL_CTRL10_FPLL_GAIN                  16
    #define   LSb16SPDIFRX_CTRL_CTRL10_FPLL_GAIN                  0
    #define       bSPDIFRX_CTRL_CTRL10_FPLL_GAIN               6
    #define   MSK32SPDIFRX_CTRL_CTRL10_FPLL_GAIN                  0x003F0000
    ///////////////////////////////////////////////////////////
    #define     RA_SPDIFRX_CTRL_CTRL11                         0x0028

    #define     BA_SPDIFRX_CTRL_CTRL11_FPLL_ENABLE             0x0028
    #define     B16SPDIFRX_CTRL_CTRL11_FPLL_ENABLE             0x0028
    #define   LSb32SPDIFRX_CTRL_CTRL11_FPLL_ENABLE                0
    #define   LSb16SPDIFRX_CTRL_CTRL11_FPLL_ENABLE                0
    #define       bSPDIFRX_CTRL_CTRL11_FPLL_ENABLE             1
    #define   MSK32SPDIFRX_CTRL_CTRL11_FPLL_ENABLE                0x00000001

    #define     BA_SPDIFRX_CTRL_CTRL11_OPEN_LOOP               0x0028
    #define     B16SPDIFRX_CTRL_CTRL11_OPEN_LOOP               0x0028
    #define   LSb32SPDIFRX_CTRL_CTRL11_OPEN_LOOP                  1
    #define   LSb16SPDIFRX_CTRL_CTRL11_OPEN_LOOP                  1
    #define       bSPDIFRX_CTRL_CTRL11_OPEN_LOOP               1
    #define   MSK32SPDIFRX_CTRL_CTRL11_OPEN_LOOP                  0x00000002

    #define     BA_SPDIFRX_CTRL_CTRL11_AUTO_GAIN               0x0028
    #define     B16SPDIFRX_CTRL_CTRL11_AUTO_GAIN               0x0028
    #define   LSb32SPDIFRX_CTRL_CTRL11_AUTO_GAIN                  2
    #define   LSb16SPDIFRX_CTRL_CTRL11_AUTO_GAIN                  2
    #define       bSPDIFRX_CTRL_CTRL11_AUTO_GAIN               1
    #define   MSK32SPDIFRX_CTRL_CTRL11_AUTO_GAIN                  0x00000004

    #define     BA_SPDIFRX_CTRL_CTRL11_CLOSED_LOOP             0x0028
    #define     B16SPDIFRX_CTRL_CTRL11_CLOSED_LOOP             0x0028
    #define   LSb32SPDIFRX_CTRL_CTRL11_CLOSED_LOOP                3
    #define   LSb16SPDIFRX_CTRL_CTRL11_CLOSED_LOOP                3
    #define       bSPDIFRX_CTRL_CTRL11_CLOSED_LOOP             2
    #define   MSK32SPDIFRX_CTRL_CTRL11_CLOSED_LOOP                0x00000018

    #define     BA_SPDIFRX_CTRL_CTRL11_COAST                   0x0028
    #define     B16SPDIFRX_CTRL_CTRL11_COAST                   0x0028
    #define   LSb32SPDIFRX_CTRL_CTRL11_COAST                      5
    #define   LSb16SPDIFRX_CTRL_CTRL11_COAST                      5
    #define       bSPDIFRX_CTRL_CTRL11_COAST                   1
    #define   MSK32SPDIFRX_CTRL_CTRL11_COAST                      0x00000020

    #define     BA_SPDIFRX_CTRL_CTRL11_RESOLUTION              0x0028
    #define     B16SPDIFRX_CTRL_CTRL11_RESOLUTION              0x0028
    #define   LSb32SPDIFRX_CTRL_CTRL11_RESOLUTION                 6
    #define   LSb16SPDIFRX_CTRL_CTRL11_RESOLUTION                 6
    #define       bSPDIFRX_CTRL_CTRL11_RESOLUTION              3
    #define   MSK32SPDIFRX_CTRL_CTRL11_RESOLUTION                 0x000001C0
    ///////////////////////////////////////////////////////////
    #define     RA_SPDIFRX_CTRL_CTRL12                         0x002C

    #define     BA_SPDIFRX_CTRL_CTRL12_FRAME_WIDTH             0x002C
    #define     B16SPDIFRX_CTRL_CTRL12_FRAME_WIDTH             0x002C
    #define   LSb32SPDIFRX_CTRL_CTRL12_FRAME_WIDTH                0
    #define   LSb16SPDIFRX_CTRL_CTRL12_FRAME_WIDTH                0
    #define       bSPDIFRX_CTRL_CTRL12_FRAME_WIDTH             2
    #define   MSK32SPDIFRX_CTRL_CTRL12_FRAME_WIDTH                0x00000003

    #define     BA_SPDIFRX_CTRL_CTRL12_DATAVALID_WIDTH         0x002C
    #define     B16SPDIFRX_CTRL_CTRL12_DATAVALID_WIDTH         0x002C
    #define   LSb32SPDIFRX_CTRL_CTRL12_DATAVALID_WIDTH            2
    #define   LSb16SPDIFRX_CTRL_CTRL12_DATAVALID_WIDTH            2
    #define       bSPDIFRX_CTRL_CTRL12_DATAVALID_WIDTH         3
    #define   MSK32SPDIFRX_CTRL_CTRL12_DATAVALID_WIDTH            0x0000001C

    #define     BA_SPDIFRX_CTRL_CTRL12_OP_MODE                 0x002C
    #define     B16SPDIFRX_CTRL_CTRL12_OP_MODE                 0x002C
    #define   LSb32SPDIFRX_CTRL_CTRL12_OP_MODE                    5
    #define   LSb16SPDIFRX_CTRL_CTRL12_OP_MODE                    5
    #define       bSPDIFRX_CTRL_CTRL12_OP_MODE                 2
    #define   MSK32SPDIFRX_CTRL_CTRL12_OP_MODE                    0x00000060

    #define     BA_SPDIFRX_CTRL_CTRL12_RCV_MODE                0x002C
    #define     B16SPDIFRX_CTRL_CTRL12_RCV_MODE                0x002C
    #define   LSb32SPDIFRX_CTRL_CTRL12_RCV_MODE                   7
    #define   LSb16SPDIFRX_CTRL_CTRL12_RCV_MODE                   7
    #define       bSPDIFRX_CTRL_CTRL12_RCV_MODE                1
    #define   MSK32SPDIFRX_CTRL_CTRL12_RCV_MODE                   0x00000080

    #define     BA_SPDIFRX_CTRL_CTRL12_JUSTIFY_MODE            0x002D
    #define     B16SPDIFRX_CTRL_CTRL12_JUSTIFY_MODE            0x002C
    #define   LSb32SPDIFRX_CTRL_CTRL12_JUSTIFY_MODE               8
    #define   LSb16SPDIFRX_CTRL_CTRL12_JUSTIFY_MODE               8
    #define       bSPDIFRX_CTRL_CTRL12_JUSTIFY_MODE            1
    #define   MSK32SPDIFRX_CTRL_CTRL12_JUSTIFY_MODE               0x00000100

    #define     BA_SPDIFRX_CTRL_CTRL12_L_R_SWITCH              0x002D
    #define     B16SPDIFRX_CTRL_CTRL12_L_R_SWITCH              0x002C
    #define   LSb32SPDIFRX_CTRL_CTRL12_L_R_SWITCH                 9
    #define   LSb16SPDIFRX_CTRL_CTRL12_L_R_SWITCH                 9
    #define       bSPDIFRX_CTRL_CTRL12_L_R_SWITCH              1
    #define   MSK32SPDIFRX_CTRL_CTRL12_L_R_SWITCH                 0x00000200

    #define     BA_SPDIFRX_CTRL_CTRL12_MUTE                    0x002D
    #define     B16SPDIFRX_CTRL_CTRL12_MUTE                    0x002C
    #define   LSb32SPDIFRX_CTRL_CTRL12_MUTE                       10
    #define   LSb16SPDIFRX_CTRL_CTRL12_MUTE                       10
    #define       bSPDIFRX_CTRL_CTRL12_MUTE                    1
    #define   MSK32SPDIFRX_CTRL_CTRL12_MUTE                       0x00000400

    #define     BA_SPDIFRX_CTRL_CTRL12_I2SFIFO_FLUSH           0x002D
    #define     B16SPDIFRX_CTRL_CTRL12_I2SFIFO_FLUSH           0x002C
    #define   LSb32SPDIFRX_CTRL_CTRL12_I2SFIFO_FLUSH              11
    #define   LSb16SPDIFRX_CTRL_CTRL12_I2SFIFO_FLUSH              11
    #define       bSPDIFRX_CTRL_CTRL12_I2SFIFO_FLUSH           1
    #define   MSK32SPDIFRX_CTRL_CTRL12_I2SFIFO_FLUSH              0x00000800
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SPDIFRX_CTRL {
    ///////////////////////////////////////////////////////////
    #define   GET32SPDIFRX_CTRL_CTRL1_ERR0_CLR(r32)            _BFGET_(r32, 0, 0)
    #define   SET32SPDIFRX_CTRL_CTRL1_ERR0_CLR(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_ERR0_CLR(r16)            _BFGET_(r16, 0, 0)
    #define   SET16SPDIFRX_CTRL_CTRL1_ERR0_CLR(r16,v)          _BFSET_(r16, 0, 0,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_ERR1_CLR(r32)            _BFGET_(r32, 1, 1)
    #define   SET32SPDIFRX_CTRL_CTRL1_ERR1_CLR(r32,v)          _BFSET_(r32, 1, 1,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_ERR1_CLR(r16)            _BFGET_(r16, 1, 1)
    #define   SET16SPDIFRX_CTRL_CTRL1_ERR1_CLR(r16,v)          _BFSET_(r16, 1, 1,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_ERR2_CLR(r32)            _BFGET_(r32, 2, 2)
    #define   SET32SPDIFRX_CTRL_CTRL1_ERR2_CLR(r32,v)          _BFSET_(r32, 2, 2,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_ERR2_CLR(r16)            _BFGET_(r16, 2, 2)
    #define   SET16SPDIFRX_CTRL_CTRL1_ERR2_CLR(r16,v)          _BFSET_(r16, 2, 2,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_ERR3_CLR(r32)            _BFGET_(r32, 3, 3)
    #define   SET32SPDIFRX_CTRL_CTRL1_ERR3_CLR(r32,v)          _BFSET_(r32, 3, 3,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_ERR3_CLR(r16)            _BFGET_(r16, 3, 3)
    #define   SET16SPDIFRX_CTRL_CTRL1_ERR3_CLR(r16,v)          _BFSET_(r16, 3, 3,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_ERR4_CLR(r32)            _BFGET_(r32, 4, 4)
    #define   SET32SPDIFRX_CTRL_CTRL1_ERR4_CLR(r32,v)          _BFSET_(r32, 4, 4,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_ERR4_CLR(r16)            _BFGET_(r16, 4, 4)
    #define   SET16SPDIFRX_CTRL_CTRL1_ERR4_CLR(r16,v)          _BFSET_(r16, 4, 4,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_ERR5_CLR(r32)            _BFGET_(r32, 5, 5)
    #define   SET32SPDIFRX_CTRL_CTRL1_ERR5_CLR(r32,v)          _BFSET_(r32, 5, 5,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_ERR5_CLR(r16)            _BFGET_(r16, 5, 5)
    #define   SET16SPDIFRX_CTRL_CTRL1_ERR5_CLR(r16,v)          _BFSET_(r16, 5, 5,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_ERR0_EN(r32)             _BFGET_(r32, 6, 6)
    #define   SET32SPDIFRX_CTRL_CTRL1_ERR0_EN(r32,v)           _BFSET_(r32, 6, 6,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_ERR0_EN(r16)             _BFGET_(r16, 6, 6)
    #define   SET16SPDIFRX_CTRL_CTRL1_ERR0_EN(r16,v)           _BFSET_(r16, 6, 6,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_ERR1_EN(r32)             _BFGET_(r32, 7, 7)
    #define   SET32SPDIFRX_CTRL_CTRL1_ERR1_EN(r32,v)           _BFSET_(r32, 7, 7,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_ERR1_EN(r16)             _BFGET_(r16, 7, 7)
    #define   SET16SPDIFRX_CTRL_CTRL1_ERR1_EN(r16,v)           _BFSET_(r16, 7, 7,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_ERR2_EN(r32)             _BFGET_(r32, 8, 8)
    #define   SET32SPDIFRX_CTRL_CTRL1_ERR2_EN(r32,v)           _BFSET_(r32, 8, 8,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_ERR2_EN(r16)             _BFGET_(r16, 8, 8)
    #define   SET16SPDIFRX_CTRL_CTRL1_ERR2_EN(r16,v)           _BFSET_(r16, 8, 8,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_ERR3_EN(r32)             _BFGET_(r32, 9, 9)
    #define   SET32SPDIFRX_CTRL_CTRL1_ERR3_EN(r32,v)           _BFSET_(r32, 9, 9,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_ERR3_EN(r16)             _BFGET_(r16, 9, 9)
    #define   SET16SPDIFRX_CTRL_CTRL1_ERR3_EN(r16,v)           _BFSET_(r16, 9, 9,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_ERR4_EN(r32)             _BFGET_(r32,10,10)
    #define   SET32SPDIFRX_CTRL_CTRL1_ERR4_EN(r32,v)           _BFSET_(r32,10,10,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_ERR4_EN(r16)             _BFGET_(r16,10,10)
    #define   SET16SPDIFRX_CTRL_CTRL1_ERR4_EN(r16,v)           _BFSET_(r16,10,10,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_ERR5_EN(r32)             _BFGET_(r32,11,11)
    #define   SET32SPDIFRX_CTRL_CTRL1_ERR5_EN(r32,v)           _BFSET_(r32,11,11,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_ERR5_EN(r16)             _BFGET_(r16,11,11)
    #define   SET16SPDIFRX_CTRL_CTRL1_ERR5_EN(r16,v)           _BFSET_(r16,11,11,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_SW_LOCK_EN(r32)          _BFGET_(r32,12,12)
    #define   SET32SPDIFRX_CTRL_CTRL1_SW_LOCK_EN(r32,v)        _BFSET_(r32,12,12,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_SW_LOCK_EN(r16)          _BFGET_(r16,12,12)
    #define   SET16SPDIFRX_CTRL_CTRL1_SW_LOCK_EN(r16,v)        _BFSET_(r16,12,12,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_SW_LOCK(r32)             _BFGET_(r32,13,13)
    #define   SET32SPDIFRX_CTRL_CTRL1_SW_LOCK(r32,v)           _BFSET_(r32,13,13,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_SW_LOCK(r16)             _BFGET_(r16,13,13)
    #define   SET16SPDIFRX_CTRL_CTRL1_SW_LOCK(r16,v)           _BFSET_(r16,13,13,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_LOCK_POL(r32)            _BFGET_(r32,14,14)
    #define   SET32SPDIFRX_CTRL_CTRL1_LOCK_POL(r32,v)          _BFSET_(r32,14,14,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_LOCK_POL(r16)            _BFGET_(r16,14,14)
    #define   SET16SPDIFRX_CTRL_CTRL1_LOCK_POL(r16,v)          _BFSET_(r16,14,14,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_SW_TRIG(r32)             _BFGET_(r32,19,15)
    #define   SET32SPDIFRX_CTRL_CTRL1_SW_TRIG(r32,v)           _BFSET_(r32,19,15,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_SW_LOAD(r32)             _BFGET_(r32,20,20)
    #define   SET32SPDIFRX_CTRL_CTRL1_SW_LOAD(r32,v)           _BFSET_(r32,20,20,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_SW_LOAD(r16)             _BFGET_(r16, 4, 4)
    #define   SET16SPDIFRX_CTRL_CTRL1_SW_LOAD(r16,v)           _BFSET_(r16, 4, 4,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_SW_TRIG_FIFO(r32)        _BFGET_(r32,21,21)
    #define   SET32SPDIFRX_CTRL_CTRL1_SW_TRIG_FIFO(r32,v)      _BFSET_(r32,21,21,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_SW_TRIG_FIFO(r16)        _BFGET_(r16, 5, 5)
    #define   SET16SPDIFRX_CTRL_CTRL1_SW_TRIG_FIFO(r16,v)      _BFSET_(r16, 5, 5,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_SW_RDEN_CTRL(r32)        _BFGET_(r32,22,22)
    #define   SET32SPDIFRX_CTRL_CTRL1_SW_RDEN_CTRL(r32,v)      _BFSET_(r32,22,22,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_SW_RDEN_CTRL(r16)        _BFGET_(r16, 6, 6)
    #define   SET16SPDIFRX_CTRL_CTRL1_SW_RDEN_CTRL(r16,v)      _BFSET_(r16, 6, 6,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_SW_RDEN(r32)             _BFGET_(r32,23,23)
    #define   SET32SPDIFRX_CTRL_CTRL1_SW_RDEN(r32,v)           _BFSET_(r32,23,23,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_SW_RDEN(r16)             _BFGET_(r16, 7, 7)
    #define   SET16SPDIFRX_CTRL_CTRL1_SW_RDEN(r16,v)           _BFSET_(r16, 7, 7,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_AUTOCALIB(r32)           _BFGET_(r32,24,24)
    #define   SET32SPDIFRX_CTRL_CTRL1_AUTOCALIB(r32,v)         _BFSET_(r32,24,24,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_AUTOCALIB(r16)           _BFGET_(r16, 8, 8)
    #define   SET16SPDIFRX_CTRL_CTRL1_AUTOCALIB(r16,v)         _BFSET_(r16, 8, 8,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_OP_DISABLE(r32)          _BFGET_(r32,25,25)
    #define   SET32SPDIFRX_CTRL_CTRL1_OP_DISABLE(r32,v)        _BFSET_(r32,25,25,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_OP_DISABLE(r16)          _BFGET_(r16, 9, 9)
    #define   SET16SPDIFRX_CTRL_CTRL1_OP_DISABLE(r16,v)        _BFSET_(r16, 9, 9,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_OP_CTRL(r32)             _BFGET_(r32,27,26)
    #define   SET32SPDIFRX_CTRL_CTRL1_OP_CTRL(r32,v)           _BFSET_(r32,27,26,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_OP_CTRL(r16)             _BFGET_(r16,11,10)
    #define   SET16SPDIFRX_CTRL_CTRL1_OP_CTRL(r16,v)           _BFSET_(r16,11,10,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_CLK_CTRL(r32)            _BFGET_(r32,28,28)
    #define   SET32SPDIFRX_CTRL_CTRL1_CLK_CTRL(r32,v)          _BFSET_(r32,28,28,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_CLK_CTRL(r16)            _BFGET_(r16,12,12)
    #define   SET16SPDIFRX_CTRL_CTRL1_CLK_CTRL(r16,v)          _BFSET_(r16,12,12,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_DATA_CTRL(r32)           _BFGET_(r32,29,29)
    #define   SET32SPDIFRX_CTRL_CTRL1_DATA_CTRL(r32,v)         _BFSET_(r32,29,29,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_DATA_CTRL(r16)           _BFGET_(r16,13,13)
    #define   SET16SPDIFRX_CTRL_CTRL1_DATA_CTRL(r16,v)         _BFSET_(r16,13,13,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_REFCLK_GATE(r32)         _BFGET_(r32,30,30)
    #define   SET32SPDIFRX_CTRL_CTRL1_REFCLK_GATE(r32,v)       _BFSET_(r32,30,30,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_REFCLK_GATE(r16)         _BFGET_(r16,14,14)
    #define   SET16SPDIFRX_CTRL_CTRL1_REFCLK_GATE(r16,v)       _BFSET_(r16,14,14,v)

    #define   GET32SPDIFRX_CTRL_CTRL1_CLK_GATE(r32)            _BFGET_(r32,31,31)
    #define   SET32SPDIFRX_CTRL_CTRL1_CLK_GATE(r32,v)          _BFSET_(r32,31,31,v)
    #define   GET16SPDIFRX_CTRL_CTRL1_CLK_GATE(r16)            _BFGET_(r16,15,15)
    #define   SET16SPDIFRX_CTRL_CTRL1_CLK_GATE(r16,v)          _BFSET_(r16,15,15,v)

    #define     w32SPDIFRX_CTRL_CTRL1                          {\
            UNSG32 uCTRL1_ERR0_CLR                             :  1;\
            UNSG32 uCTRL1_ERR1_CLR                             :  1;\
            UNSG32 uCTRL1_ERR2_CLR                             :  1;\
            UNSG32 uCTRL1_ERR3_CLR                             :  1;\
            UNSG32 uCTRL1_ERR4_CLR                             :  1;\
            UNSG32 uCTRL1_ERR5_CLR                             :  1;\
            UNSG32 uCTRL1_ERR0_EN                              :  1;\
            UNSG32 uCTRL1_ERR1_EN                              :  1;\
            UNSG32 uCTRL1_ERR2_EN                              :  1;\
            UNSG32 uCTRL1_ERR3_EN                              :  1;\
            UNSG32 uCTRL1_ERR4_EN                              :  1;\
            UNSG32 uCTRL1_ERR5_EN                              :  1;\
            UNSG32 uCTRL1_SW_LOCK_EN                           :  1;\
            UNSG32 uCTRL1_SW_LOCK                              :  1;\
            UNSG32 uCTRL1_LOCK_POL                             :  1;\
            UNSG32 uCTRL1_SW_TRIG                              :  5;\
            UNSG32 uCTRL1_SW_LOAD                              :  1;\
            UNSG32 uCTRL1_SW_TRIG_FIFO                         :  1;\
            UNSG32 uCTRL1_SW_RDEN_CTRL                         :  1;\
            UNSG32 uCTRL1_SW_RDEN                              :  1;\
            UNSG32 uCTRL1_AUTOCALIB                            :  1;\
            UNSG32 uCTRL1_OP_DISABLE                           :  1;\
            UNSG32 uCTRL1_OP_CTRL                              :  2;\
            UNSG32 uCTRL1_CLK_CTRL                             :  1;\
            UNSG32 uCTRL1_DATA_CTRL                            :  1;\
            UNSG32 uCTRL1_REFCLK_GATE                          :  1;\
            UNSG32 uCTRL1_CLK_GATE                             :  1;\
          }
    union { UNSG32 u32SPDIFRX_CTRL_CTRL1;
            struct w32SPDIFRX_CTRL_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SPDIFRX_CTRL_CTRL2_REF_PULSE(r32)           _BFGET_(r32, 7, 0)
    #define   SET32SPDIFRX_CTRL_CTRL2_REF_PULSE(r32,v)         _BFSET_(r32, 7, 0,v)
    #define   GET16SPDIFRX_CTRL_CTRL2_REF_PULSE(r16)           _BFGET_(r16, 7, 0)
    #define   SET16SPDIFRX_CTRL_CTRL2_REF_PULSE(r16,v)         _BFSET_(r16, 7, 0,v)

    #define   GET32SPDIFRX_CTRL_CTRL2_ZERO_COUNT(r32)          _BFGET_(r32,15, 8)
    #define   SET32SPDIFRX_CTRL_CTRL2_ZERO_COUNT(r32,v)        _BFSET_(r32,15, 8,v)
    #define   GET16SPDIFRX_CTRL_CTRL2_ZERO_COUNT(r16)          _BFGET_(r16,15, 8)
    #define   SET16SPDIFRX_CTRL_CTRL2_ZERO_COUNT(r16,v)        _BFSET_(r16,15, 8,v)

    #define   GET32SPDIFRX_CTRL_CTRL2_ONE_COUNT(r32)           _BFGET_(r32,23,16)
    #define   SET32SPDIFRX_CTRL_CTRL2_ONE_COUNT(r32,v)         _BFSET_(r32,23,16,v)
    #define   GET16SPDIFRX_CTRL_CTRL2_ONE_COUNT(r16)           _BFGET_(r16, 7, 0)
    #define   SET16SPDIFRX_CTRL_CTRL2_ONE_COUNT(r16,v)         _BFSET_(r16, 7, 0,v)

    #define     w32SPDIFRX_CTRL_CTRL2                          {\
            UNSG32 uCTRL2_REF_PULSE                            :  8;\
            UNSG32 uCTRL2_ZERO_COUNT                           :  8;\
            UNSG32 uCTRL2_ONE_COUNT                            :  8;\
            UNSG32 RSVDx4_b24                                  :  8;\
          }
    union { UNSG32 u32SPDIFRX_CTRL_CTRL2;
            struct w32SPDIFRX_CTRL_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SPDIFRX_CTRL_CTRL3_MARGIN1(r32)             _BFGET_(r32, 7, 0)
    #define   SET32SPDIFRX_CTRL_CTRL3_MARGIN1(r32,v)           _BFSET_(r32, 7, 0,v)
    #define   GET16SPDIFRX_CTRL_CTRL3_MARGIN1(r16)             _BFGET_(r16, 7, 0)
    #define   SET16SPDIFRX_CTRL_CTRL3_MARGIN1(r16,v)           _BFSET_(r16, 7, 0,v)

    #define   GET32SPDIFRX_CTRL_CTRL3_MARGIN2(r32)             _BFGET_(r32,15, 8)
    #define   SET32SPDIFRX_CTRL_CTRL3_MARGIN2(r32,v)           _BFSET_(r32,15, 8,v)
    #define   GET16SPDIFRX_CTRL_CTRL3_MARGIN2(r16)             _BFGET_(r16,15, 8)
    #define   SET16SPDIFRX_CTRL_CTRL3_MARGIN2(r16,v)           _BFSET_(r16,15, 8,v)

    #define   GET32SPDIFRX_CTRL_CTRL3_MARGIN3(r32)             _BFGET_(r32,23,16)
    #define   SET32SPDIFRX_CTRL_CTRL3_MARGIN3(r32,v)           _BFSET_(r32,23,16,v)
    #define   GET16SPDIFRX_CTRL_CTRL3_MARGIN3(r16)             _BFGET_(r16, 7, 0)
    #define   SET16SPDIFRX_CTRL_CTRL3_MARGIN3(r16,v)           _BFSET_(r16, 7, 0,v)

    #define   GET32SPDIFRX_CTRL_CTRL3_MARGIN4(r32)             _BFGET_(r32,31,24)
    #define   SET32SPDIFRX_CTRL_CTRL3_MARGIN4(r32,v)           _BFSET_(r32,31,24,v)
    #define   GET16SPDIFRX_CTRL_CTRL3_MARGIN4(r16)             _BFGET_(r16,15, 8)
    #define   SET16SPDIFRX_CTRL_CTRL3_MARGIN4(r16,v)           _BFSET_(r16,15, 8,v)

    #define     w32SPDIFRX_CTRL_CTRL3                          {\
            UNSG32 uCTRL3_MARGIN1                              :  8;\
            UNSG32 uCTRL3_MARGIN2                              :  8;\
            UNSG32 uCTRL3_MARGIN3                              :  8;\
            UNSG32 uCTRL3_MARGIN4                              :  8;\
          }
    union { UNSG32 u32SPDIFRX_CTRL_CTRL3;
            struct w32SPDIFRX_CTRL_CTRL3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SPDIFRX_CTRL_CTRL4_RD_PTR(r32)              _BFGET_(r32, 5, 0)
    #define   SET32SPDIFRX_CTRL_CTRL4_RD_PTR(r32,v)            _BFSET_(r32, 5, 0,v)
    #define   GET16SPDIFRX_CTRL_CTRL4_RD_PTR(r16)              _BFGET_(r16, 5, 0)
    #define   SET16SPDIFRX_CTRL_CTRL4_RD_PTR(r16,v)            _BFSET_(r16, 5, 0,v)

    #define   GET32SPDIFRX_CTRL_CTRL4_WR_PTR(r32)              _BFGET_(r32,11, 6)
    #define   SET32SPDIFRX_CTRL_CTRL4_WR_PTR(r32,v)            _BFSET_(r32,11, 6,v)
    #define   GET16SPDIFRX_CTRL_CTRL4_WR_PTR(r16)              _BFGET_(r16,11, 6)
    #define   SET16SPDIFRX_CTRL_CTRL4_WR_PTR(r16,v)            _BFSET_(r16,11, 6,v)

    #define   GET32SPDIFRX_CTRL_CTRL4_DIV_CNT_0(r32)           _BFGET_(r32,19,12)
    #define   SET32SPDIFRX_CTRL_CTRL4_DIV_CNT_0(r32,v)         _BFSET_(r32,19,12,v)

    #define   GET32SPDIFRX_CTRL_CTRL4_DIV_CNT_1(r32)           _BFGET_(r32,27,20)
    #define   SET32SPDIFRX_CTRL_CTRL4_DIV_CNT_1(r32,v)         _BFSET_(r32,27,20,v)
    #define   GET16SPDIFRX_CTRL_CTRL4_DIV_CNT_1(r16)           _BFGET_(r16,11, 4)
    #define   SET16SPDIFRX_CTRL_CTRL4_DIV_CNT_1(r16,v)         _BFSET_(r16,11, 4,v)

    #define     w32SPDIFRX_CTRL_CTRL4                          {\
            UNSG32 uCTRL4_RD_PTR                               :  6;\
            UNSG32 uCTRL4_WR_PTR                               :  6;\
            UNSG32 uCTRL4_DIV_CNT_0                            :  8;\
            UNSG32 uCTRL4_DIV_CNT_1                            :  8;\
            UNSG32 RSVDxC_b28                                  :  4;\
          }
    union { UNSG32 u32SPDIFRX_CTRL_CTRL4;
            struct w32SPDIFRX_CTRL_CTRL4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SPDIFRX_CTRL_CTRL5_POLL_REGS(r32)           _BFGET_(r32,31, 0)
    #define   SET32SPDIFRX_CTRL_CTRL5_POLL_REGS(r32,v)         _BFSET_(r32,31, 0,v)

    #define     w32SPDIFRX_CTRL_CTRL5                          {\
            UNSG32 uCTRL5_POLL_REGS                            : 32;\
          }
    union { UNSG32 u32SPDIFRX_CTRL_CTRL5;
            struct w32SPDIFRX_CTRL_CTRL5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SPDIFRX_CTRL_CTRL6_VAL_32K(r32)             _BFGET_(r32, 7, 0)
    #define   SET32SPDIFRX_CTRL_CTRL6_VAL_32K(r32,v)           _BFSET_(r32, 7, 0,v)
    #define   GET16SPDIFRX_CTRL_CTRL6_VAL_32K(r16)             _BFGET_(r16, 7, 0)
    #define   SET16SPDIFRX_CTRL_CTRL6_VAL_32K(r16,v)           _BFSET_(r16, 7, 0,v)

    #define   GET32SPDIFRX_CTRL_CTRL6_VAL_44K(r32)             _BFGET_(r32,15, 8)
    #define   SET32SPDIFRX_CTRL_CTRL6_VAL_44K(r32,v)           _BFSET_(r32,15, 8,v)
    #define   GET16SPDIFRX_CTRL_CTRL6_VAL_44K(r16)             _BFGET_(r16,15, 8)
    #define   SET16SPDIFRX_CTRL_CTRL6_VAL_44K(r16,v)           _BFSET_(r16,15, 8,v)

    #define   GET32SPDIFRX_CTRL_CTRL6_VAL_88K(r32)             _BFGET_(r32,23,16)
    #define   SET32SPDIFRX_CTRL_CTRL6_VAL_88K(r32,v)           _BFSET_(r32,23,16,v)
    #define   GET16SPDIFRX_CTRL_CTRL6_VAL_88K(r16)             _BFGET_(r16, 7, 0)
    #define   SET16SPDIFRX_CTRL_CTRL6_VAL_88K(r16,v)           _BFSET_(r16, 7, 0,v)

    #define   GET32SPDIFRX_CTRL_CTRL6_VAL_176K(r32)            _BFGET_(r32,31,24)
    #define   SET32SPDIFRX_CTRL_CTRL6_VAL_176K(r32,v)          _BFSET_(r32,31,24,v)
    #define   GET16SPDIFRX_CTRL_CTRL6_VAL_176K(r16)            _BFGET_(r16,15, 8)
    #define   SET16SPDIFRX_CTRL_CTRL6_VAL_176K(r16,v)          _BFSET_(r16,15, 8,v)

    #define     w32SPDIFRX_CTRL_CTRL6                          {\
            UNSG32 uCTRL6_VAL_32K                              :  8;\
            UNSG32 uCTRL6_VAL_44K                              :  8;\
            UNSG32 uCTRL6_VAL_88K                              :  8;\
            UNSG32 uCTRL6_VAL_176K                             :  8;\
          }
    union { UNSG32 u32SPDIFRX_CTRL_CTRL6;
            struct w32SPDIFRX_CTRL_CTRL6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SPDIFRX_CTRL_CTRL7_LOCKWAIT_0(r32)          _BFGET_(r32, 7, 0)
    #define   SET32SPDIFRX_CTRL_CTRL7_LOCKWAIT_0(r32,v)        _BFSET_(r32, 7, 0,v)
    #define   GET16SPDIFRX_CTRL_CTRL7_LOCKWAIT_0(r16)          _BFGET_(r16, 7, 0)
    #define   SET16SPDIFRX_CTRL_CTRL7_LOCKWAIT_0(r16,v)        _BFSET_(r16, 7, 0,v)

    #define   GET32SPDIFRX_CTRL_CTRL7_LOCKWAIT_1(r32)          _BFGET_(r32,15, 8)
    #define   SET32SPDIFRX_CTRL_CTRL7_LOCKWAIT_1(r32,v)        _BFSET_(r32,15, 8,v)
    #define   GET16SPDIFRX_CTRL_CTRL7_LOCKWAIT_1(r16)          _BFGET_(r16,15, 8)
    #define   SET16SPDIFRX_CTRL_CTRL7_LOCKWAIT_1(r16,v)        _BFSET_(r16,15, 8,v)

    #define     w32SPDIFRX_CTRL_CTRL7                          {\
            UNSG32 uCTRL7_LOCKWAIT_0                           :  8;\
            UNSG32 uCTRL7_LOCKWAIT_1                           :  8;\
            UNSG32 RSVDx18_b16                                 : 16;\
          }
    union { UNSG32 u32SPDIFRX_CTRL_CTRL7;
            struct w32SPDIFRX_CTRL_CTRL7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SPDIFRX_CTRL_CTRL8_FPLL_N_REGS(r32)         _BFGET_(r32,23, 0)
    #define   SET32SPDIFRX_CTRL_CTRL8_FPLL_N_REGS(r32,v)       _BFSET_(r32,23, 0,v)

    #define     w32SPDIFRX_CTRL_CTRL8                          {\
            UNSG32 uCTRL8_FPLL_N_REGS                          : 24;\
            UNSG32 RSVDx1C_b24                                 :  8;\
          }
    union { UNSG32 u32SPDIFRX_CTRL_CTRL8;
            struct w32SPDIFRX_CTRL_CTRL8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SPDIFRX_CTRL_CTRL9_FPLL_W_REGS(r32)         _BFGET_(r32,28, 0)
    #define   SET32SPDIFRX_CTRL_CTRL9_FPLL_W_REGS(r32,v)       _BFSET_(r32,28, 0,v)

    #define     w32SPDIFRX_CTRL_CTRL9                          {\
            UNSG32 uCTRL9_FPLL_W_REGS                          : 29;\
            UNSG32 RSVDx20_b29                                 :  3;\
          }
    union { UNSG32 u32SPDIFRX_CTRL_CTRL9;
            struct w32SPDIFRX_CTRL_CTRL9;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SPDIFRX_CTRL_CTRL10_FPLL_THRESH0(r32)       _BFGET_(r32, 7, 0)
    #define   SET32SPDIFRX_CTRL_CTRL10_FPLL_THRESH0(r32,v)     _BFSET_(r32, 7, 0,v)
    #define   GET16SPDIFRX_CTRL_CTRL10_FPLL_THRESH0(r16)       _BFGET_(r16, 7, 0)
    #define   SET16SPDIFRX_CTRL_CTRL10_FPLL_THRESH0(r16,v)     _BFSET_(r16, 7, 0,v)

    #define   GET32SPDIFRX_CTRL_CTRL10_FPLL_THRESH1(r32)       _BFGET_(r32,15, 8)
    #define   SET32SPDIFRX_CTRL_CTRL10_FPLL_THRESH1(r32,v)     _BFSET_(r32,15, 8,v)
    #define   GET16SPDIFRX_CTRL_CTRL10_FPLL_THRESH1(r16)       _BFGET_(r16,15, 8)
    #define   SET16SPDIFRX_CTRL_CTRL10_FPLL_THRESH1(r16,v)     _BFSET_(r16,15, 8,v)

    #define   GET32SPDIFRX_CTRL_CTRL10_FPLL_GAIN(r32)          _BFGET_(r32,21,16)
    #define   SET32SPDIFRX_CTRL_CTRL10_FPLL_GAIN(r32,v)        _BFSET_(r32,21,16,v)
    #define   GET16SPDIFRX_CTRL_CTRL10_FPLL_GAIN(r16)          _BFGET_(r16, 5, 0)
    #define   SET16SPDIFRX_CTRL_CTRL10_FPLL_GAIN(r16,v)        _BFSET_(r16, 5, 0,v)

    #define     w32SPDIFRX_CTRL_CTRL10                         {\
            UNSG32 uCTRL10_FPLL_THRESH0                        :  8;\
            UNSG32 uCTRL10_FPLL_THRESH1                        :  8;\
            UNSG32 uCTRL10_FPLL_GAIN                           :  6;\
            UNSG32 RSVDx24_b22                                 : 10;\
          }
    union { UNSG32 u32SPDIFRX_CTRL_CTRL10;
            struct w32SPDIFRX_CTRL_CTRL10;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SPDIFRX_CTRL_CTRL11_FPLL_ENABLE(r32)        _BFGET_(r32, 0, 0)
    #define   SET32SPDIFRX_CTRL_CTRL11_FPLL_ENABLE(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16SPDIFRX_CTRL_CTRL11_FPLL_ENABLE(r16)        _BFGET_(r16, 0, 0)
    #define   SET16SPDIFRX_CTRL_CTRL11_FPLL_ENABLE(r16,v)      _BFSET_(r16, 0, 0,v)

    #define   GET32SPDIFRX_CTRL_CTRL11_OPEN_LOOP(r32)          _BFGET_(r32, 1, 1)
    #define   SET32SPDIFRX_CTRL_CTRL11_OPEN_LOOP(r32,v)        _BFSET_(r32, 1, 1,v)
    #define   GET16SPDIFRX_CTRL_CTRL11_OPEN_LOOP(r16)          _BFGET_(r16, 1, 1)
    #define   SET16SPDIFRX_CTRL_CTRL11_OPEN_LOOP(r16,v)        _BFSET_(r16, 1, 1,v)

    #define   GET32SPDIFRX_CTRL_CTRL11_AUTO_GAIN(r32)          _BFGET_(r32, 2, 2)
    #define   SET32SPDIFRX_CTRL_CTRL11_AUTO_GAIN(r32,v)        _BFSET_(r32, 2, 2,v)
    #define   GET16SPDIFRX_CTRL_CTRL11_AUTO_GAIN(r16)          _BFGET_(r16, 2, 2)
    #define   SET16SPDIFRX_CTRL_CTRL11_AUTO_GAIN(r16,v)        _BFSET_(r16, 2, 2,v)

    #define   GET32SPDIFRX_CTRL_CTRL11_CLOSED_LOOP(r32)        _BFGET_(r32, 4, 3)
    #define   SET32SPDIFRX_CTRL_CTRL11_CLOSED_LOOP(r32,v)      _BFSET_(r32, 4, 3,v)
    #define   GET16SPDIFRX_CTRL_CTRL11_CLOSED_LOOP(r16)        _BFGET_(r16, 4, 3)
    #define   SET16SPDIFRX_CTRL_CTRL11_CLOSED_LOOP(r16,v)      _BFSET_(r16, 4, 3,v)

    #define   GET32SPDIFRX_CTRL_CTRL11_COAST(r32)              _BFGET_(r32, 5, 5)
    #define   SET32SPDIFRX_CTRL_CTRL11_COAST(r32,v)            _BFSET_(r32, 5, 5,v)
    #define   GET16SPDIFRX_CTRL_CTRL11_COAST(r16)              _BFGET_(r16, 5, 5)
    #define   SET16SPDIFRX_CTRL_CTRL11_COAST(r16,v)            _BFSET_(r16, 5, 5,v)

    #define   GET32SPDIFRX_CTRL_CTRL11_RESOLUTION(r32)         _BFGET_(r32, 8, 6)
    #define   SET32SPDIFRX_CTRL_CTRL11_RESOLUTION(r32,v)       _BFSET_(r32, 8, 6,v)
    #define   GET16SPDIFRX_CTRL_CTRL11_RESOLUTION(r16)         _BFGET_(r16, 8, 6)
    #define   SET16SPDIFRX_CTRL_CTRL11_RESOLUTION(r16,v)       _BFSET_(r16, 8, 6,v)

    #define     w32SPDIFRX_CTRL_CTRL11                         {\
            UNSG32 uCTRL11_FPLL_ENABLE                         :  1;\
            UNSG32 uCTRL11_OPEN_LOOP                           :  1;\
            UNSG32 uCTRL11_AUTO_GAIN                           :  1;\
            UNSG32 uCTRL11_CLOSED_LOOP                         :  2;\
            UNSG32 uCTRL11_COAST                               :  1;\
            UNSG32 uCTRL11_RESOLUTION                          :  3;\
            UNSG32 RSVDx28_b9                                  : 23;\
          }
    union { UNSG32 u32SPDIFRX_CTRL_CTRL11;
            struct w32SPDIFRX_CTRL_CTRL11;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SPDIFRX_CTRL_CTRL12_FRAME_WIDTH(r32)        _BFGET_(r32, 1, 0)
    #define   SET32SPDIFRX_CTRL_CTRL12_FRAME_WIDTH(r32,v)      _BFSET_(r32, 1, 0,v)
    #define   GET16SPDIFRX_CTRL_CTRL12_FRAME_WIDTH(r16)        _BFGET_(r16, 1, 0)
    #define   SET16SPDIFRX_CTRL_CTRL12_FRAME_WIDTH(r16,v)      _BFSET_(r16, 1, 0,v)

    #define   GET32SPDIFRX_CTRL_CTRL12_DATAVALID_WIDTH(r32)    _BFGET_(r32, 4, 2)
    #define   SET32SPDIFRX_CTRL_CTRL12_DATAVALID_WIDTH(r32,v)  _BFSET_(r32, 4, 2,v)
    #define   GET16SPDIFRX_CTRL_CTRL12_DATAVALID_WIDTH(r16)    _BFGET_(r16, 4, 2)
    #define   SET16SPDIFRX_CTRL_CTRL12_DATAVALID_WIDTH(r16,v)  _BFSET_(r16, 4, 2,v)

    #define   GET32SPDIFRX_CTRL_CTRL12_OP_MODE(r32)            _BFGET_(r32, 6, 5)
    #define   SET32SPDIFRX_CTRL_CTRL12_OP_MODE(r32,v)          _BFSET_(r32, 6, 5,v)
    #define   GET16SPDIFRX_CTRL_CTRL12_OP_MODE(r16)            _BFGET_(r16, 6, 5)
    #define   SET16SPDIFRX_CTRL_CTRL12_OP_MODE(r16,v)          _BFSET_(r16, 6, 5,v)

    #define   GET32SPDIFRX_CTRL_CTRL12_RCV_MODE(r32)           _BFGET_(r32, 7, 7)
    #define   SET32SPDIFRX_CTRL_CTRL12_RCV_MODE(r32,v)         _BFSET_(r32, 7, 7,v)
    #define   GET16SPDIFRX_CTRL_CTRL12_RCV_MODE(r16)           _BFGET_(r16, 7, 7)
    #define   SET16SPDIFRX_CTRL_CTRL12_RCV_MODE(r16,v)         _BFSET_(r16, 7, 7,v)

    #define   GET32SPDIFRX_CTRL_CTRL12_JUSTIFY_MODE(r32)       _BFGET_(r32, 8, 8)
    #define   SET32SPDIFRX_CTRL_CTRL12_JUSTIFY_MODE(r32,v)     _BFSET_(r32, 8, 8,v)
    #define   GET16SPDIFRX_CTRL_CTRL12_JUSTIFY_MODE(r16)       _BFGET_(r16, 8, 8)
    #define   SET16SPDIFRX_CTRL_CTRL12_JUSTIFY_MODE(r16,v)     _BFSET_(r16, 8, 8,v)

    #define   GET32SPDIFRX_CTRL_CTRL12_L_R_SWITCH(r32)         _BFGET_(r32, 9, 9)
    #define   SET32SPDIFRX_CTRL_CTRL12_L_R_SWITCH(r32,v)       _BFSET_(r32, 9, 9,v)
    #define   GET16SPDIFRX_CTRL_CTRL12_L_R_SWITCH(r16)         _BFGET_(r16, 9, 9)
    #define   SET16SPDIFRX_CTRL_CTRL12_L_R_SWITCH(r16,v)       _BFSET_(r16, 9, 9,v)

    #define   GET32SPDIFRX_CTRL_CTRL12_MUTE(r32)               _BFGET_(r32,10,10)
    #define   SET32SPDIFRX_CTRL_CTRL12_MUTE(r32,v)             _BFSET_(r32,10,10,v)
    #define   GET16SPDIFRX_CTRL_CTRL12_MUTE(r16)               _BFGET_(r16,10,10)
    #define   SET16SPDIFRX_CTRL_CTRL12_MUTE(r16,v)             _BFSET_(r16,10,10,v)

    #define   GET32SPDIFRX_CTRL_CTRL12_I2SFIFO_FLUSH(r32)      _BFGET_(r32,11,11)
    #define   SET32SPDIFRX_CTRL_CTRL12_I2SFIFO_FLUSH(r32,v)    _BFSET_(r32,11,11,v)
    #define   GET16SPDIFRX_CTRL_CTRL12_I2SFIFO_FLUSH(r16)      _BFGET_(r16,11,11)
    #define   SET16SPDIFRX_CTRL_CTRL12_I2SFIFO_FLUSH(r16,v)    _BFSET_(r16,11,11,v)

    #define     w32SPDIFRX_CTRL_CTRL12                         {\
            UNSG32 uCTRL12_FRAME_WIDTH                         :  2;\
            UNSG32 uCTRL12_DATAVALID_WIDTH                     :  3;\
            UNSG32 uCTRL12_OP_MODE                             :  2;\
            UNSG32 uCTRL12_RCV_MODE                            :  1;\
            UNSG32 uCTRL12_JUSTIFY_MODE                        :  1;\
            UNSG32 uCTRL12_L_R_SWITCH                          :  1;\
            UNSG32 uCTRL12_MUTE                                :  1;\
            UNSG32 uCTRL12_I2SFIFO_FLUSH                       :  1;\
            UNSG32 RSVDx2C_b12                                 : 20;\
          }
    union { UNSG32 u32SPDIFRX_CTRL_CTRL12;
            struct w32SPDIFRX_CTRL_CTRL12;
          };
    ///////////////////////////////////////////////////////////
    } SIE_SPDIFRX_CTRL;

    typedef union  T32SPDIFRX_CTRL_CTRL1
          { UNSG32 u32;
            struct w32SPDIFRX_CTRL_CTRL1;
                 } T32SPDIFRX_CTRL_CTRL1;
    typedef union  T32SPDIFRX_CTRL_CTRL2
          { UNSG32 u32;
            struct w32SPDIFRX_CTRL_CTRL2;
                 } T32SPDIFRX_CTRL_CTRL2;
    typedef union  T32SPDIFRX_CTRL_CTRL3
          { UNSG32 u32;
            struct w32SPDIFRX_CTRL_CTRL3;
                 } T32SPDIFRX_CTRL_CTRL3;
    typedef union  T32SPDIFRX_CTRL_CTRL4
          { UNSG32 u32;
            struct w32SPDIFRX_CTRL_CTRL4;
                 } T32SPDIFRX_CTRL_CTRL4;
    typedef union  T32SPDIFRX_CTRL_CTRL5
          { UNSG32 u32;
            struct w32SPDIFRX_CTRL_CTRL5;
                 } T32SPDIFRX_CTRL_CTRL5;
    typedef union  T32SPDIFRX_CTRL_CTRL6
          { UNSG32 u32;
            struct w32SPDIFRX_CTRL_CTRL6;
                 } T32SPDIFRX_CTRL_CTRL6;
    typedef union  T32SPDIFRX_CTRL_CTRL7
          { UNSG32 u32;
            struct w32SPDIFRX_CTRL_CTRL7;
                 } T32SPDIFRX_CTRL_CTRL7;
    typedef union  T32SPDIFRX_CTRL_CTRL8
          { UNSG32 u32;
            struct w32SPDIFRX_CTRL_CTRL8;
                 } T32SPDIFRX_CTRL_CTRL8;
    typedef union  T32SPDIFRX_CTRL_CTRL9
          { UNSG32 u32;
            struct w32SPDIFRX_CTRL_CTRL9;
                 } T32SPDIFRX_CTRL_CTRL9;
    typedef union  T32SPDIFRX_CTRL_CTRL10
          { UNSG32 u32;
            struct w32SPDIFRX_CTRL_CTRL10;
                 } T32SPDIFRX_CTRL_CTRL10;
    typedef union  T32SPDIFRX_CTRL_CTRL11
          { UNSG32 u32;
            struct w32SPDIFRX_CTRL_CTRL11;
                 } T32SPDIFRX_CTRL_CTRL11;
    typedef union  T32SPDIFRX_CTRL_CTRL12
          { UNSG32 u32;
            struct w32SPDIFRX_CTRL_CTRL12;
                 } T32SPDIFRX_CTRL_CTRL12;
    ///////////////////////////////////////////////////////////

    typedef union  TSPDIFRX_CTRL_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32SPDIFRX_CTRL_CTRL1;
                   };
                 } TSPDIFRX_CTRL_CTRL1;
    typedef union  TSPDIFRX_CTRL_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32SPDIFRX_CTRL_CTRL2;
                   };
                 } TSPDIFRX_CTRL_CTRL2;
    typedef union  TSPDIFRX_CTRL_CTRL3
          { UNSG32 u32[1];
            struct {
            struct w32SPDIFRX_CTRL_CTRL3;
                   };
                 } TSPDIFRX_CTRL_CTRL3;
    typedef union  TSPDIFRX_CTRL_CTRL4
          { UNSG32 u32[1];
            struct {
            struct w32SPDIFRX_CTRL_CTRL4;
                   };
                 } TSPDIFRX_CTRL_CTRL4;
    typedef union  TSPDIFRX_CTRL_CTRL5
          { UNSG32 u32[1];
            struct {
            struct w32SPDIFRX_CTRL_CTRL5;
                   };
                 } TSPDIFRX_CTRL_CTRL5;
    typedef union  TSPDIFRX_CTRL_CTRL6
          { UNSG32 u32[1];
            struct {
            struct w32SPDIFRX_CTRL_CTRL6;
                   };
                 } TSPDIFRX_CTRL_CTRL6;
    typedef union  TSPDIFRX_CTRL_CTRL7
          { UNSG32 u32[1];
            struct {
            struct w32SPDIFRX_CTRL_CTRL7;
                   };
                 } TSPDIFRX_CTRL_CTRL7;
    typedef union  TSPDIFRX_CTRL_CTRL8
          { UNSG32 u32[1];
            struct {
            struct w32SPDIFRX_CTRL_CTRL8;
                   };
                 } TSPDIFRX_CTRL_CTRL8;
    typedef union  TSPDIFRX_CTRL_CTRL9
          { UNSG32 u32[1];
            struct {
            struct w32SPDIFRX_CTRL_CTRL9;
                   };
                 } TSPDIFRX_CTRL_CTRL9;
    typedef union  TSPDIFRX_CTRL_CTRL10
          { UNSG32 u32[1];
            struct {
            struct w32SPDIFRX_CTRL_CTRL10;
                   };
                 } TSPDIFRX_CTRL_CTRL10;
    typedef union  TSPDIFRX_CTRL_CTRL11
          { UNSG32 u32[1];
            struct {
            struct w32SPDIFRX_CTRL_CTRL11;
                   };
                 } TSPDIFRX_CTRL_CTRL11;
    typedef union  TSPDIFRX_CTRL_CTRL12
          { UNSG32 u32[1];
            struct {
            struct w32SPDIFRX_CTRL_CTRL12;
                   };
                 } TSPDIFRX_CTRL_CTRL12;

    ///////////////////////////////////////////////////////////
     SIGN32 SPDIFRX_CTRL_drvrd(SIE_SPDIFRX_CTRL *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SPDIFRX_CTRL_drvwr(SIE_SPDIFRX_CTRL *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SPDIFRX_CTRL_reset(SIE_SPDIFRX_CTRL *p);
     SIGN32 SPDIFRX_CTRL_cmp  (SIE_SPDIFRX_CTRL *p, SIE_SPDIFRX_CTRL *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SPDIFRX_CTRL_check(p,pie,pfx,hLOG) SPDIFRX_CTRL_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SPDIFRX_CTRL_print(p,    pfx,hLOG) SPDIFRX_CTRL_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SPDIFRX_CTRL
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE SPDIFRX_STATUS          biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 STATUS               (R-)
///               %unsigned 8  PERIOD0                   
///                                    ###
///                                    * Internal counter value shows the number of over sampled clocks in bit 0 of the SPDIF line. It will give smallest value corresponding to timing of single 0 bit in the data stream.
///                                    ###
///               %unsigned 8  PERIOD1                   
///                                    ###
///                                    * Internal counter value shows the number of over sampled clocks in bit 1 of the SPDIF line. It will give smallest value corresponding to timing of single 1 bit in the data stream.
///                                    ###
///               %unsigned 1  ERR_0                     
///                                    ###
///                                    * Preamble miss error Status bit.If the preambles dont come in regular interval specified by the SPDIF spec , then this bit will be set.
///                                    ###
///               %unsigned 1  ERR_1                     
///                                    ###
///                                    * Early preamble error Status bit.
///                                    * If there are more number of preambles detected other than the specified interval by the SPDIF spec , then this bit will be set.
///                                    ###
///               %unsigned 1  ERR_2                     
///                                    ###
///                                    * Bi-phase coding error Status bit.
///                                    * If there is a violation of Bi-phase Mark code in the data bits, then this bit will be set.
///                                    ###
///               %unsigned 1  ERR_3                     
///                                    ###
///                                    * Parity error Status bit.
///                                    * Parity will be calculated on the data bits and compared with the parity sent on the SPDIF line. If there is a mismatch in the Parity sent and calculated then this error bit will be set.
///                                    ###
///               %unsigned 1  ERR_4                     
///                                    ###
///                                    * If the sync Lock is not set by FPLL lock.
///                                    ###
///               %unsigned 1  ERR_5                     
///                                    ###
///                                    * Period check error Status bit.
///                                    * If the period is not changing as per the expectation I.e in case of unplug, the 0 on spdif line will make the logic to set this error.
///                                    ###
///               %unsigned 1  BDET_LOCK                 
///                                    ###
///                                    * When B pulse is detected , after the input SPDIF line has switched to new sampling frequency the lock will happen. This bit indicates the lock status.
///                                    * 0 : Not locked
///                                    * 1 : Locked.
///                                    ###
///               %unsigned 1  I2SFIFO_OF                
///                                    ###
///                                    * I2S FIFO overflow status.
///                                    * 0: No overflow
///                                    * 1: Overflow
///                                    ###
///               %unsigned 1  FPLL_STAT                 
///                                    ###
///                                    * Status register0 : Locked1 : Not locked yet
///                                    ###
///               %%        7          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      25b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SPDIFRX_STATUS
#define h_SPDIFRX_STATUS (){}

    #define     RA_SPDIFRX_STATUS_STATUS                       0x0000

    #define     BA_SPDIFRX_STATUS_STATUS_PERIOD0               0x0000
    #define     B16SPDIFRX_STATUS_STATUS_PERIOD0               0x0000
    #define   LSb32SPDIFRX_STATUS_STATUS_PERIOD0                  0
    #define   LSb16SPDIFRX_STATUS_STATUS_PERIOD0                  0
    #define       bSPDIFRX_STATUS_STATUS_PERIOD0               8
    #define   MSK32SPDIFRX_STATUS_STATUS_PERIOD0                  0x000000FF

    #define     BA_SPDIFRX_STATUS_STATUS_PERIOD1               0x0001
    #define     B16SPDIFRX_STATUS_STATUS_PERIOD1               0x0000
    #define   LSb32SPDIFRX_STATUS_STATUS_PERIOD1                  8
    #define   LSb16SPDIFRX_STATUS_STATUS_PERIOD1                  8
    #define       bSPDIFRX_STATUS_STATUS_PERIOD1               8
    #define   MSK32SPDIFRX_STATUS_STATUS_PERIOD1                  0x0000FF00

    #define     BA_SPDIFRX_STATUS_STATUS_ERR_0                 0x0002
    #define     B16SPDIFRX_STATUS_STATUS_ERR_0                 0x0002
    #define   LSb32SPDIFRX_STATUS_STATUS_ERR_0                    16
    #define   LSb16SPDIFRX_STATUS_STATUS_ERR_0                    0
    #define       bSPDIFRX_STATUS_STATUS_ERR_0                 1
    #define   MSK32SPDIFRX_STATUS_STATUS_ERR_0                    0x00010000

    #define     BA_SPDIFRX_STATUS_STATUS_ERR_1                 0x0002
    #define     B16SPDIFRX_STATUS_STATUS_ERR_1                 0x0002
    #define   LSb32SPDIFRX_STATUS_STATUS_ERR_1                    17
    #define   LSb16SPDIFRX_STATUS_STATUS_ERR_1                    1
    #define       bSPDIFRX_STATUS_STATUS_ERR_1                 1
    #define   MSK32SPDIFRX_STATUS_STATUS_ERR_1                    0x00020000

    #define     BA_SPDIFRX_STATUS_STATUS_ERR_2                 0x0002
    #define     B16SPDIFRX_STATUS_STATUS_ERR_2                 0x0002
    #define   LSb32SPDIFRX_STATUS_STATUS_ERR_2                    18
    #define   LSb16SPDIFRX_STATUS_STATUS_ERR_2                    2
    #define       bSPDIFRX_STATUS_STATUS_ERR_2                 1
    #define   MSK32SPDIFRX_STATUS_STATUS_ERR_2                    0x00040000

    #define     BA_SPDIFRX_STATUS_STATUS_ERR_3                 0x0002
    #define     B16SPDIFRX_STATUS_STATUS_ERR_3                 0x0002
    #define   LSb32SPDIFRX_STATUS_STATUS_ERR_3                    19
    #define   LSb16SPDIFRX_STATUS_STATUS_ERR_3                    3
    #define       bSPDIFRX_STATUS_STATUS_ERR_3                 1
    #define   MSK32SPDIFRX_STATUS_STATUS_ERR_3                    0x00080000

    #define     BA_SPDIFRX_STATUS_STATUS_ERR_4                 0x0002
    #define     B16SPDIFRX_STATUS_STATUS_ERR_4                 0x0002
    #define   LSb32SPDIFRX_STATUS_STATUS_ERR_4                    20
    #define   LSb16SPDIFRX_STATUS_STATUS_ERR_4                    4
    #define       bSPDIFRX_STATUS_STATUS_ERR_4                 1
    #define   MSK32SPDIFRX_STATUS_STATUS_ERR_4                    0x00100000

    #define     BA_SPDIFRX_STATUS_STATUS_ERR_5                 0x0002
    #define     B16SPDIFRX_STATUS_STATUS_ERR_5                 0x0002
    #define   LSb32SPDIFRX_STATUS_STATUS_ERR_5                    21
    #define   LSb16SPDIFRX_STATUS_STATUS_ERR_5                    5
    #define       bSPDIFRX_STATUS_STATUS_ERR_5                 1
    #define   MSK32SPDIFRX_STATUS_STATUS_ERR_5                    0x00200000

    #define     BA_SPDIFRX_STATUS_STATUS_BDET_LOCK             0x0002
    #define     B16SPDIFRX_STATUS_STATUS_BDET_LOCK             0x0002
    #define   LSb32SPDIFRX_STATUS_STATUS_BDET_LOCK                22
    #define   LSb16SPDIFRX_STATUS_STATUS_BDET_LOCK                6
    #define       bSPDIFRX_STATUS_STATUS_BDET_LOCK             1
    #define   MSK32SPDIFRX_STATUS_STATUS_BDET_LOCK                0x00400000

    #define     BA_SPDIFRX_STATUS_STATUS_I2SFIFO_OF            0x0002
    #define     B16SPDIFRX_STATUS_STATUS_I2SFIFO_OF            0x0002
    #define   LSb32SPDIFRX_STATUS_STATUS_I2SFIFO_OF               23
    #define   LSb16SPDIFRX_STATUS_STATUS_I2SFIFO_OF               7
    #define       bSPDIFRX_STATUS_STATUS_I2SFIFO_OF            1
    #define   MSK32SPDIFRX_STATUS_STATUS_I2SFIFO_OF               0x00800000

    #define     BA_SPDIFRX_STATUS_STATUS_FPLL_STAT             0x0003
    #define     B16SPDIFRX_STATUS_STATUS_FPLL_STAT             0x0002
    #define   LSb32SPDIFRX_STATUS_STATUS_FPLL_STAT                24
    #define   LSb16SPDIFRX_STATUS_STATUS_FPLL_STAT                8
    #define       bSPDIFRX_STATUS_STATUS_FPLL_STAT             1
    #define   MSK32SPDIFRX_STATUS_STATUS_FPLL_STAT                0x01000000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SPDIFRX_STATUS {
    ///////////////////////////////////////////////////////////
    #define   GET32SPDIFRX_STATUS_STATUS_PERIOD0(r32)          _BFGET_(r32, 7, 0)
    #define   SET32SPDIFRX_STATUS_STATUS_PERIOD0(r32,v)        _BFSET_(r32, 7, 0,v)
    #define   GET16SPDIFRX_STATUS_STATUS_PERIOD0(r16)          _BFGET_(r16, 7, 0)
    #define   SET16SPDIFRX_STATUS_STATUS_PERIOD0(r16,v)        _BFSET_(r16, 7, 0,v)

    #define   GET32SPDIFRX_STATUS_STATUS_PERIOD1(r32)          _BFGET_(r32,15, 8)
    #define   SET32SPDIFRX_STATUS_STATUS_PERIOD1(r32,v)        _BFSET_(r32,15, 8,v)
    #define   GET16SPDIFRX_STATUS_STATUS_PERIOD1(r16)          _BFGET_(r16,15, 8)
    #define   SET16SPDIFRX_STATUS_STATUS_PERIOD1(r16,v)        _BFSET_(r16,15, 8,v)

    #define   GET32SPDIFRX_STATUS_STATUS_ERR_0(r32)            _BFGET_(r32,16,16)
    #define   SET32SPDIFRX_STATUS_STATUS_ERR_0(r32,v)          _BFSET_(r32,16,16,v)
    #define   GET16SPDIFRX_STATUS_STATUS_ERR_0(r16)            _BFGET_(r16, 0, 0)
    #define   SET16SPDIFRX_STATUS_STATUS_ERR_0(r16,v)          _BFSET_(r16, 0, 0,v)

    #define   GET32SPDIFRX_STATUS_STATUS_ERR_1(r32)            _BFGET_(r32,17,17)
    #define   SET32SPDIFRX_STATUS_STATUS_ERR_1(r32,v)          _BFSET_(r32,17,17,v)
    #define   GET16SPDIFRX_STATUS_STATUS_ERR_1(r16)            _BFGET_(r16, 1, 1)
    #define   SET16SPDIFRX_STATUS_STATUS_ERR_1(r16,v)          _BFSET_(r16, 1, 1,v)

    #define   GET32SPDIFRX_STATUS_STATUS_ERR_2(r32)            _BFGET_(r32,18,18)
    #define   SET32SPDIFRX_STATUS_STATUS_ERR_2(r32,v)          _BFSET_(r32,18,18,v)
    #define   GET16SPDIFRX_STATUS_STATUS_ERR_2(r16)            _BFGET_(r16, 2, 2)
    #define   SET16SPDIFRX_STATUS_STATUS_ERR_2(r16,v)          _BFSET_(r16, 2, 2,v)

    #define   GET32SPDIFRX_STATUS_STATUS_ERR_3(r32)            _BFGET_(r32,19,19)
    #define   SET32SPDIFRX_STATUS_STATUS_ERR_3(r32,v)          _BFSET_(r32,19,19,v)
    #define   GET16SPDIFRX_STATUS_STATUS_ERR_3(r16)            _BFGET_(r16, 3, 3)
    #define   SET16SPDIFRX_STATUS_STATUS_ERR_3(r16,v)          _BFSET_(r16, 3, 3,v)

    #define   GET32SPDIFRX_STATUS_STATUS_ERR_4(r32)            _BFGET_(r32,20,20)
    #define   SET32SPDIFRX_STATUS_STATUS_ERR_4(r32,v)          _BFSET_(r32,20,20,v)
    #define   GET16SPDIFRX_STATUS_STATUS_ERR_4(r16)            _BFGET_(r16, 4, 4)
    #define   SET16SPDIFRX_STATUS_STATUS_ERR_4(r16,v)          _BFSET_(r16, 4, 4,v)

    #define   GET32SPDIFRX_STATUS_STATUS_ERR_5(r32)            _BFGET_(r32,21,21)
    #define   SET32SPDIFRX_STATUS_STATUS_ERR_5(r32,v)          _BFSET_(r32,21,21,v)
    #define   GET16SPDIFRX_STATUS_STATUS_ERR_5(r16)            _BFGET_(r16, 5, 5)
    #define   SET16SPDIFRX_STATUS_STATUS_ERR_5(r16,v)          _BFSET_(r16, 5, 5,v)

    #define   GET32SPDIFRX_STATUS_STATUS_BDET_LOCK(r32)        _BFGET_(r32,22,22)
    #define   SET32SPDIFRX_STATUS_STATUS_BDET_LOCK(r32,v)      _BFSET_(r32,22,22,v)
    #define   GET16SPDIFRX_STATUS_STATUS_BDET_LOCK(r16)        _BFGET_(r16, 6, 6)
    #define   SET16SPDIFRX_STATUS_STATUS_BDET_LOCK(r16,v)      _BFSET_(r16, 6, 6,v)

    #define   GET32SPDIFRX_STATUS_STATUS_I2SFIFO_OF(r32)       _BFGET_(r32,23,23)
    #define   SET32SPDIFRX_STATUS_STATUS_I2SFIFO_OF(r32,v)     _BFSET_(r32,23,23,v)
    #define   GET16SPDIFRX_STATUS_STATUS_I2SFIFO_OF(r16)       _BFGET_(r16, 7, 7)
    #define   SET16SPDIFRX_STATUS_STATUS_I2SFIFO_OF(r16,v)     _BFSET_(r16, 7, 7,v)

    #define   GET32SPDIFRX_STATUS_STATUS_FPLL_STAT(r32)        _BFGET_(r32,24,24)
    #define   SET32SPDIFRX_STATUS_STATUS_FPLL_STAT(r32,v)      _BFSET_(r32,24,24,v)
    #define   GET16SPDIFRX_STATUS_STATUS_FPLL_STAT(r16)        _BFGET_(r16, 8, 8)
    #define   SET16SPDIFRX_STATUS_STATUS_FPLL_STAT(r16,v)      _BFSET_(r16, 8, 8,v)

    #define     w32SPDIFRX_STATUS_STATUS                       {\
            UNSG32 uSTATUS_PERIOD0                             :  8;\
            UNSG32 uSTATUS_PERIOD1                             :  8;\
            UNSG32 uSTATUS_ERR_0                               :  1;\
            UNSG32 uSTATUS_ERR_1                               :  1;\
            UNSG32 uSTATUS_ERR_2                               :  1;\
            UNSG32 uSTATUS_ERR_3                               :  1;\
            UNSG32 uSTATUS_ERR_4                               :  1;\
            UNSG32 uSTATUS_ERR_5                               :  1;\
            UNSG32 uSTATUS_BDET_LOCK                           :  1;\
            UNSG32 uSTATUS_I2SFIFO_OF                          :  1;\
            UNSG32 uSTATUS_FPLL_STAT                           :  1;\
            UNSG32 RSVDx0_b25                                  :  7;\
          }
    union { UNSG32 u32SPDIFRX_STATUS_STATUS;
            struct w32SPDIFRX_STATUS_STATUS;
          };
    ///////////////////////////////////////////////////////////
    } SIE_SPDIFRX_STATUS;

    typedef union  T32SPDIFRX_STATUS_STATUS
          { UNSG32 u32;
            struct w32SPDIFRX_STATUS_STATUS;
                 } T32SPDIFRX_STATUS_STATUS;
    ///////////////////////////////////////////////////////////

    typedef union  TSPDIFRX_STATUS_STATUS
          { UNSG32 u32[1];
            struct {
            struct w32SPDIFRX_STATUS_STATUS;
                   };
                 } TSPDIFRX_STATUS_STATUS;

    ///////////////////////////////////////////////////////////
     SIGN32 SPDIFRX_STATUS_drvrd(SIE_SPDIFRX_STATUS *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SPDIFRX_STATUS_drvwr(SIE_SPDIFRX_STATUS *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SPDIFRX_STATUS_reset(SIE_SPDIFRX_STATUS *p);
     SIGN32 SPDIFRX_STATUS_cmp  (SIE_SPDIFRX_STATUS *p, SIE_SPDIFRX_STATUS *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SPDIFRX_STATUS_check(p,pie,pfx,hLOG) SPDIFRX_STATUS_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SPDIFRX_STATUS_print(p,    pfx,hLOG) SPDIFRX_STATUS_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SPDIFRX_STATUS
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE SRAMPWR                                  (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl                 (P-)
///               ###
///               * Control register
///               ###
///               %unsigned 1  SD                        0x0
///                                    : ON                        0x0
///                                    : SHUTDWN                   0x1
///                                                 ###
///                                                 * Shut down mode achieves highest leakage reduction without data retention
///                                                 ###
///               %unsigned 1  DSLP                      0x0
///                                    : ON                        0x0
///                                    : DEEPSLP                   0x1
///                                                 ###
///                                                 * Deep sleep mode powers down the most of peripheral circuit for leakage reduction and retains memory
///                                                 * array content with lower voltage
///                                                 ###
///               %unsigned 1  SLP                       0x0
///                                    : ON                        0x0
///                                    : SLEEP                     0x1
///                                                 ###
///                                                 * Sleep mode powers down most peripheral circuit for leakage reduction with data retention
///                                                 ###
///               %%        29         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       3b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SRAMPWR
#define h_SRAMPWR (){}

    #define     RA_SRAMPWR_ctrl                                0x0000

    #define     BA_SRAMPWR_ctrl_SD                             0x0000
    #define     B16SRAMPWR_ctrl_SD                             0x0000
    #define   LSb32SRAMPWR_ctrl_SD                                0
    #define   LSb16SRAMPWR_ctrl_SD                                0
    #define       bSRAMPWR_ctrl_SD                             1
    #define   MSK32SRAMPWR_ctrl_SD                                0x00000001
    #define        SRAMPWR_ctrl_SD_ON                                       0x0
    #define        SRAMPWR_ctrl_SD_SHUTDWN                                  0x1

    #define     BA_SRAMPWR_ctrl_DSLP                           0x0000
    #define     B16SRAMPWR_ctrl_DSLP                           0x0000
    #define   LSb32SRAMPWR_ctrl_DSLP                              1
    #define   LSb16SRAMPWR_ctrl_DSLP                              1
    #define       bSRAMPWR_ctrl_DSLP                           1
    #define   MSK32SRAMPWR_ctrl_DSLP                              0x00000002
    #define        SRAMPWR_ctrl_DSLP_ON                                     0x0
    #define        SRAMPWR_ctrl_DSLP_DEEPSLP                                0x1

    #define     BA_SRAMPWR_ctrl_SLP                            0x0000
    #define     B16SRAMPWR_ctrl_SLP                            0x0000
    #define   LSb32SRAMPWR_ctrl_SLP                               2
    #define   LSb16SRAMPWR_ctrl_SLP                               2
    #define       bSRAMPWR_ctrl_SLP                            1
    #define   MSK32SRAMPWR_ctrl_SLP                               0x00000004
    #define        SRAMPWR_ctrl_SLP_ON                                      0x0
    #define        SRAMPWR_ctrl_SLP_SLEEP                                   0x1
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SRAMPWR {
    ///////////////////////////////////////////////////////////
    #define   GET32SRAMPWR_ctrl_SD(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32SRAMPWR_ctrl_SD(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16SRAMPWR_ctrl_SD(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16SRAMPWR_ctrl_SD(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define   GET32SRAMPWR_ctrl_DSLP(r32)                      _BFGET_(r32, 1, 1)
    #define   SET32SRAMPWR_ctrl_DSLP(r32,v)                    _BFSET_(r32, 1, 1,v)
    #define   GET16SRAMPWR_ctrl_DSLP(r16)                      _BFGET_(r16, 1, 1)
    #define   SET16SRAMPWR_ctrl_DSLP(r16,v)                    _BFSET_(r16, 1, 1,v)

    #define   GET32SRAMPWR_ctrl_SLP(r32)                       _BFGET_(r32, 2, 2)
    #define   SET32SRAMPWR_ctrl_SLP(r32,v)                     _BFSET_(r32, 2, 2,v)
    #define   GET16SRAMPWR_ctrl_SLP(r16)                       _BFGET_(r16, 2, 2)
    #define   SET16SRAMPWR_ctrl_SLP(r16,v)                     _BFSET_(r16, 2, 2,v)

    #define     w32SRAMPWR_ctrl                                {\
            UNSG32 uctrl_SD                                    :  1;\
            UNSG32 uctrl_DSLP                                  :  1;\
            UNSG32 uctrl_SLP                                   :  1;\
            UNSG32 RSVDx0_b3                                   : 29;\
          }
    union { UNSG32 u32SRAMPWR_ctrl;
            struct w32SRAMPWR_ctrl;
          };
    ///////////////////////////////////////////////////////////
    } SIE_SRAMPWR;

    typedef union  T32SRAMPWR_ctrl
          { UNSG32 u32;
            struct w32SRAMPWR_ctrl;
                 } T32SRAMPWR_ctrl;
    ///////////////////////////////////////////////////////////

    typedef union  TSRAMPWR_ctrl
          { UNSG32 u32[1];
            struct {
            struct w32SRAMPWR_ctrl;
                   };
                 } TSRAMPWR_ctrl;

    ///////////////////////////////////////////////////////////
     SIGN32 SRAMPWR_drvrd(SIE_SRAMPWR *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SRAMPWR_drvwr(SIE_SRAMPWR *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SRAMPWR_reset(SIE_SRAMPWR *p);
     SIGN32 SRAMPWR_cmp  (SIE_SRAMPWR *p, SIE_SRAMPWR *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SRAMPWR_check(p,pie,pfx,hLOG) SRAMPWR_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SRAMPWR_print(p,    pfx,hLOG) SRAMPWR_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SRAMPWR
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE SRAMRWTC                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl0                (P-)
///               ###
///               * Control register
///               ###
///               %unsigned 4  RF1P                      0x5
///                                    ###
///                                    * RTSEL [1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///               %unsigned 4  UHDRF1P                   0x9
///                                    ###
///                                    * RTSEL [1:0] = 01 (default)
///                                    * WTSEL[3:2] = 10 (default)
///                                    ###
///               %unsigned 8  RF2P                      0x35
///                                    ###
///                                    * RCT [1:0] = 01 (default)
///                                    * WCT [3:2] = 01 (default)
///                                    * KP[6:4]      = 011 (default)
///                                    * Bit7 not used
///                                    ###
///               %unsigned 8  UHDRF2P                   0x1
///                                    ###
///                                    * RTSEL [1:0] = 01 (default)
///                                    * WTSEL [3:2] = 00 (default)
///                                    * MTSEL [5:4] = 00 (default)
///                                    * Bit 7 and 8 not used
///                                    ###
///               %unsigned 8  UHDRF2P_ULVT              0x15
///                                    ###
///                                    * RTSEL [1:0] = 01 (default)
///                                    * WTSEL [3:2] = 01 (default)
///                                    * MTSEL [5:4] = 01 (default)
///                                    * Bit 7 and 8 not used
///                                    ###
///     @ 0x00004 ctrl1                (P-)
///               ###
///               * Control register
///               ###
///               %unsigned 4  SHDMBSR1P                 0x5
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///               %unsigned 4  SHDSBSR1P                 0x1
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 00 (default)
///                                    ###
///               %unsigned 4  SHCMBSR1P_SSEG            0x1
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 00 (default)
///                                    ###
///               %unsigned 4  SHCMBSR1P_USEG            0x5
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///               %unsigned 4  SHCSBSR1P                 0x5
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///               %unsigned 4  SHCSBSR1P_CUSTM           0xD
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 11 (default)
///                                    ###
///               %unsigned 4  SPSRAM_WT0                0x1
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 00 (default)
///                                    ###
///               %unsigned 4  SPSRAM_WT1                0x5
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///     @ 0x00008 ctrl2                (P-)
///               ###
///               * Control register
///               ###
///               %unsigned 4  L1CACHE                   0x0
///                                    ###
///                                    * MCR[1:0] = 00 (default)
///                                    * MCW[3:2] = 00 (default)
///                                    ###
///               %unsigned 4  DPSR2P                    0x5
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///               %unsigned 8  ROM                       0x15
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * PTSEL[3:2] = 01 (default)
///                                    * TRB[5:4]: 01
///                                    * TM[6]: 0
///                                    * Bit 7 not used
///                                    ###
///               %%        16         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      12B, bits:      80b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SRAMRWTC
#define h_SRAMRWTC (){}

    #define     RA_SRAMRWTC_ctrl0                              0x0000

    #define     BA_SRAMRWTC_ctrl0_RF1P                         0x0000
    #define     B16SRAMRWTC_ctrl0_RF1P                         0x0000
    #define   LSb32SRAMRWTC_ctrl0_RF1P                            0
    #define   LSb16SRAMRWTC_ctrl0_RF1P                            0
    #define       bSRAMRWTC_ctrl0_RF1P                         4
    #define   MSK32SRAMRWTC_ctrl0_RF1P                            0x0000000F

    #define     BA_SRAMRWTC_ctrl0_UHDRF1P                      0x0000
    #define     B16SRAMRWTC_ctrl0_UHDRF1P                      0x0000
    #define   LSb32SRAMRWTC_ctrl0_UHDRF1P                         4
    #define   LSb16SRAMRWTC_ctrl0_UHDRF1P                         4
    #define       bSRAMRWTC_ctrl0_UHDRF1P                      4
    #define   MSK32SRAMRWTC_ctrl0_UHDRF1P                         0x000000F0

    #define     BA_SRAMRWTC_ctrl0_RF2P                         0x0001
    #define     B16SRAMRWTC_ctrl0_RF2P                         0x0000
    #define   LSb32SRAMRWTC_ctrl0_RF2P                            8
    #define   LSb16SRAMRWTC_ctrl0_RF2P                            8
    #define       bSRAMRWTC_ctrl0_RF2P                         8
    #define   MSK32SRAMRWTC_ctrl0_RF2P                            0x0000FF00

    #define     BA_SRAMRWTC_ctrl0_UHDRF2P                      0x0002
    #define     B16SRAMRWTC_ctrl0_UHDRF2P                      0x0002
    #define   LSb32SRAMRWTC_ctrl0_UHDRF2P                         16
    #define   LSb16SRAMRWTC_ctrl0_UHDRF2P                         0
    #define       bSRAMRWTC_ctrl0_UHDRF2P                      8
    #define   MSK32SRAMRWTC_ctrl0_UHDRF2P                         0x00FF0000

    #define     BA_SRAMRWTC_ctrl0_UHDRF2P_ULVT                 0x0003
    #define     B16SRAMRWTC_ctrl0_UHDRF2P_ULVT                 0x0002
    #define   LSb32SRAMRWTC_ctrl0_UHDRF2P_ULVT                    24
    #define   LSb16SRAMRWTC_ctrl0_UHDRF2P_ULVT                    8
    #define       bSRAMRWTC_ctrl0_UHDRF2P_ULVT                 8
    #define   MSK32SRAMRWTC_ctrl0_UHDRF2P_ULVT                    0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_SRAMRWTC_ctrl1                              0x0004

    #define     BA_SRAMRWTC_ctrl1_SHDMBSR1P                    0x0004
    #define     B16SRAMRWTC_ctrl1_SHDMBSR1P                    0x0004
    #define   LSb32SRAMRWTC_ctrl1_SHDMBSR1P                       0
    #define   LSb16SRAMRWTC_ctrl1_SHDMBSR1P                       0
    #define       bSRAMRWTC_ctrl1_SHDMBSR1P                    4
    #define   MSK32SRAMRWTC_ctrl1_SHDMBSR1P                       0x0000000F

    #define     BA_SRAMRWTC_ctrl1_SHDSBSR1P                    0x0004
    #define     B16SRAMRWTC_ctrl1_SHDSBSR1P                    0x0004
    #define   LSb32SRAMRWTC_ctrl1_SHDSBSR1P                       4
    #define   LSb16SRAMRWTC_ctrl1_SHDSBSR1P                       4
    #define       bSRAMRWTC_ctrl1_SHDSBSR1P                    4
    #define   MSK32SRAMRWTC_ctrl1_SHDSBSR1P                       0x000000F0

    #define     BA_SRAMRWTC_ctrl1_SHCMBSR1P_SSEG               0x0005
    #define     B16SRAMRWTC_ctrl1_SHCMBSR1P_SSEG               0x0004
    #define   LSb32SRAMRWTC_ctrl1_SHCMBSR1P_SSEG                  8
    #define   LSb16SRAMRWTC_ctrl1_SHCMBSR1P_SSEG                  8
    #define       bSRAMRWTC_ctrl1_SHCMBSR1P_SSEG               4
    #define   MSK32SRAMRWTC_ctrl1_SHCMBSR1P_SSEG                  0x00000F00

    #define     BA_SRAMRWTC_ctrl1_SHCMBSR1P_USEG               0x0005
    #define     B16SRAMRWTC_ctrl1_SHCMBSR1P_USEG               0x0004
    #define   LSb32SRAMRWTC_ctrl1_SHCMBSR1P_USEG                  12
    #define   LSb16SRAMRWTC_ctrl1_SHCMBSR1P_USEG                  12
    #define       bSRAMRWTC_ctrl1_SHCMBSR1P_USEG               4
    #define   MSK32SRAMRWTC_ctrl1_SHCMBSR1P_USEG                  0x0000F000

    #define     BA_SRAMRWTC_ctrl1_SHCSBSR1P                    0x0006
    #define     B16SRAMRWTC_ctrl1_SHCSBSR1P                    0x0006
    #define   LSb32SRAMRWTC_ctrl1_SHCSBSR1P                       16
    #define   LSb16SRAMRWTC_ctrl1_SHCSBSR1P                       0
    #define       bSRAMRWTC_ctrl1_SHCSBSR1P                    4
    #define   MSK32SRAMRWTC_ctrl1_SHCSBSR1P                       0x000F0000

    #define     BA_SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM              0x0006
    #define     B16SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM              0x0006
    #define   LSb32SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM                 20
    #define   LSb16SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM                 4
    #define       bSRAMRWTC_ctrl1_SHCSBSR1P_CUSTM              4
    #define   MSK32SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM                 0x00F00000

    #define     BA_SRAMRWTC_ctrl1_SPSRAM_WT0                   0x0007
    #define     B16SRAMRWTC_ctrl1_SPSRAM_WT0                   0x0006
    #define   LSb32SRAMRWTC_ctrl1_SPSRAM_WT0                      24
    #define   LSb16SRAMRWTC_ctrl1_SPSRAM_WT0                      8
    #define       bSRAMRWTC_ctrl1_SPSRAM_WT0                   4
    #define   MSK32SRAMRWTC_ctrl1_SPSRAM_WT0                      0x0F000000

    #define     BA_SRAMRWTC_ctrl1_SPSRAM_WT1                   0x0007
    #define     B16SRAMRWTC_ctrl1_SPSRAM_WT1                   0x0006
    #define   LSb32SRAMRWTC_ctrl1_SPSRAM_WT1                      28
    #define   LSb16SRAMRWTC_ctrl1_SPSRAM_WT1                      12
    #define       bSRAMRWTC_ctrl1_SPSRAM_WT1                   4
    #define   MSK32SRAMRWTC_ctrl1_SPSRAM_WT1                      0xF0000000
    ///////////////////////////////////////////////////////////
    #define     RA_SRAMRWTC_ctrl2                              0x0008

    #define     BA_SRAMRWTC_ctrl2_L1CACHE                      0x0008
    #define     B16SRAMRWTC_ctrl2_L1CACHE                      0x0008
    #define   LSb32SRAMRWTC_ctrl2_L1CACHE                         0
    #define   LSb16SRAMRWTC_ctrl2_L1CACHE                         0
    #define       bSRAMRWTC_ctrl2_L1CACHE                      4
    #define   MSK32SRAMRWTC_ctrl2_L1CACHE                         0x0000000F

    #define     BA_SRAMRWTC_ctrl2_DPSR2P                       0x0008
    #define     B16SRAMRWTC_ctrl2_DPSR2P                       0x0008
    #define   LSb32SRAMRWTC_ctrl2_DPSR2P                          4
    #define   LSb16SRAMRWTC_ctrl2_DPSR2P                          4
    #define       bSRAMRWTC_ctrl2_DPSR2P                       4
    #define   MSK32SRAMRWTC_ctrl2_DPSR2P                          0x000000F0

    #define     BA_SRAMRWTC_ctrl2_ROM                          0x0009
    #define     B16SRAMRWTC_ctrl2_ROM                          0x0008
    #define   LSb32SRAMRWTC_ctrl2_ROM                             8
    #define   LSb16SRAMRWTC_ctrl2_ROM                             8
    #define       bSRAMRWTC_ctrl2_ROM                          8
    #define   MSK32SRAMRWTC_ctrl2_ROM                             0x0000FF00
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SRAMRWTC {
    ///////////////////////////////////////////////////////////
    #define   GET32SRAMRWTC_ctrl0_RF1P(r32)                    _BFGET_(r32, 3, 0)
    #define   SET32SRAMRWTC_ctrl0_RF1P(r32,v)                  _BFSET_(r32, 3, 0,v)
    #define   GET16SRAMRWTC_ctrl0_RF1P(r16)                    _BFGET_(r16, 3, 0)
    #define   SET16SRAMRWTC_ctrl0_RF1P(r16,v)                  _BFSET_(r16, 3, 0,v)

    #define   GET32SRAMRWTC_ctrl0_UHDRF1P(r32)                 _BFGET_(r32, 7, 4)
    #define   SET32SRAMRWTC_ctrl0_UHDRF1P(r32,v)               _BFSET_(r32, 7, 4,v)
    #define   GET16SRAMRWTC_ctrl0_UHDRF1P(r16)                 _BFGET_(r16, 7, 4)
    #define   SET16SRAMRWTC_ctrl0_UHDRF1P(r16,v)               _BFSET_(r16, 7, 4,v)

    #define   GET32SRAMRWTC_ctrl0_RF2P(r32)                    _BFGET_(r32,15, 8)
    #define   SET32SRAMRWTC_ctrl0_RF2P(r32,v)                  _BFSET_(r32,15, 8,v)
    #define   GET16SRAMRWTC_ctrl0_RF2P(r16)                    _BFGET_(r16,15, 8)
    #define   SET16SRAMRWTC_ctrl0_RF2P(r16,v)                  _BFSET_(r16,15, 8,v)

    #define   GET32SRAMRWTC_ctrl0_UHDRF2P(r32)                 _BFGET_(r32,23,16)
    #define   SET32SRAMRWTC_ctrl0_UHDRF2P(r32,v)               _BFSET_(r32,23,16,v)
    #define   GET16SRAMRWTC_ctrl0_UHDRF2P(r16)                 _BFGET_(r16, 7, 0)
    #define   SET16SRAMRWTC_ctrl0_UHDRF2P(r16,v)               _BFSET_(r16, 7, 0,v)

    #define   GET32SRAMRWTC_ctrl0_UHDRF2P_ULVT(r32)            _BFGET_(r32,31,24)
    #define   SET32SRAMRWTC_ctrl0_UHDRF2P_ULVT(r32,v)          _BFSET_(r32,31,24,v)
    #define   GET16SRAMRWTC_ctrl0_UHDRF2P_ULVT(r16)            _BFGET_(r16,15, 8)
    #define   SET16SRAMRWTC_ctrl0_UHDRF2P_ULVT(r16,v)          _BFSET_(r16,15, 8,v)

    #define     w32SRAMRWTC_ctrl0                              {\
            UNSG32 uctrl0_RF1P                                 :  4;\
            UNSG32 uctrl0_UHDRF1P                              :  4;\
            UNSG32 uctrl0_RF2P                                 :  8;\
            UNSG32 uctrl0_UHDRF2P                              :  8;\
            UNSG32 uctrl0_UHDRF2P_ULVT                         :  8;\
          }
    union { UNSG32 u32SRAMRWTC_ctrl0;
            struct w32SRAMRWTC_ctrl0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SRAMRWTC_ctrl1_SHDMBSR1P(r32)               _BFGET_(r32, 3, 0)
    #define   SET32SRAMRWTC_ctrl1_SHDMBSR1P(r32,v)             _BFSET_(r32, 3, 0,v)
    #define   GET16SRAMRWTC_ctrl1_SHDMBSR1P(r16)               _BFGET_(r16, 3, 0)
    #define   SET16SRAMRWTC_ctrl1_SHDMBSR1P(r16,v)             _BFSET_(r16, 3, 0,v)

    #define   GET32SRAMRWTC_ctrl1_SHDSBSR1P(r32)               _BFGET_(r32, 7, 4)
    #define   SET32SRAMRWTC_ctrl1_SHDSBSR1P(r32,v)             _BFSET_(r32, 7, 4,v)
    #define   GET16SRAMRWTC_ctrl1_SHDSBSR1P(r16)               _BFGET_(r16, 7, 4)
    #define   SET16SRAMRWTC_ctrl1_SHDSBSR1P(r16,v)             _BFSET_(r16, 7, 4,v)

    #define   GET32SRAMRWTC_ctrl1_SHCMBSR1P_SSEG(r32)          _BFGET_(r32,11, 8)
    #define   SET32SRAMRWTC_ctrl1_SHCMBSR1P_SSEG(r32,v)        _BFSET_(r32,11, 8,v)
    #define   GET16SRAMRWTC_ctrl1_SHCMBSR1P_SSEG(r16)          _BFGET_(r16,11, 8)
    #define   SET16SRAMRWTC_ctrl1_SHCMBSR1P_SSEG(r16,v)        _BFSET_(r16,11, 8,v)

    #define   GET32SRAMRWTC_ctrl1_SHCMBSR1P_USEG(r32)          _BFGET_(r32,15,12)
    #define   SET32SRAMRWTC_ctrl1_SHCMBSR1P_USEG(r32,v)        _BFSET_(r32,15,12,v)
    #define   GET16SRAMRWTC_ctrl1_SHCMBSR1P_USEG(r16)          _BFGET_(r16,15,12)
    #define   SET16SRAMRWTC_ctrl1_SHCMBSR1P_USEG(r16,v)        _BFSET_(r16,15,12,v)

    #define   GET32SRAMRWTC_ctrl1_SHCSBSR1P(r32)               _BFGET_(r32,19,16)
    #define   SET32SRAMRWTC_ctrl1_SHCSBSR1P(r32,v)             _BFSET_(r32,19,16,v)
    #define   GET16SRAMRWTC_ctrl1_SHCSBSR1P(r16)               _BFGET_(r16, 3, 0)
    #define   SET16SRAMRWTC_ctrl1_SHCSBSR1P(r16,v)             _BFSET_(r16, 3, 0,v)

    #define   GET32SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM(r32)         _BFGET_(r32,23,20)
    #define   SET32SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM(r32,v)       _BFSET_(r32,23,20,v)
    #define   GET16SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM(r16)         _BFGET_(r16, 7, 4)
    #define   SET16SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM(r16,v)       _BFSET_(r16, 7, 4,v)

    #define   GET32SRAMRWTC_ctrl1_SPSRAM_WT0(r32)              _BFGET_(r32,27,24)
    #define   SET32SRAMRWTC_ctrl1_SPSRAM_WT0(r32,v)            _BFSET_(r32,27,24,v)
    #define   GET16SRAMRWTC_ctrl1_SPSRAM_WT0(r16)              _BFGET_(r16,11, 8)
    #define   SET16SRAMRWTC_ctrl1_SPSRAM_WT0(r16,v)            _BFSET_(r16,11, 8,v)

    #define   GET32SRAMRWTC_ctrl1_SPSRAM_WT1(r32)              _BFGET_(r32,31,28)
    #define   SET32SRAMRWTC_ctrl1_SPSRAM_WT1(r32,v)            _BFSET_(r32,31,28,v)
    #define   GET16SRAMRWTC_ctrl1_SPSRAM_WT1(r16)              _BFGET_(r16,15,12)
    #define   SET16SRAMRWTC_ctrl1_SPSRAM_WT1(r16,v)            _BFSET_(r16,15,12,v)

    #define     w32SRAMRWTC_ctrl1                              {\
            UNSG32 uctrl1_SHDMBSR1P                            :  4;\
            UNSG32 uctrl1_SHDSBSR1P                            :  4;\
            UNSG32 uctrl1_SHCMBSR1P_SSEG                       :  4;\
            UNSG32 uctrl1_SHCMBSR1P_USEG                       :  4;\
            UNSG32 uctrl1_SHCSBSR1P                            :  4;\
            UNSG32 uctrl1_SHCSBSR1P_CUSTM                      :  4;\
            UNSG32 uctrl1_SPSRAM_WT0                           :  4;\
            UNSG32 uctrl1_SPSRAM_WT1                           :  4;\
          }
    union { UNSG32 u32SRAMRWTC_ctrl1;
            struct w32SRAMRWTC_ctrl1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SRAMRWTC_ctrl2_L1CACHE(r32)                 _BFGET_(r32, 3, 0)
    #define   SET32SRAMRWTC_ctrl2_L1CACHE(r32,v)               _BFSET_(r32, 3, 0,v)
    #define   GET16SRAMRWTC_ctrl2_L1CACHE(r16)                 _BFGET_(r16, 3, 0)
    #define   SET16SRAMRWTC_ctrl2_L1CACHE(r16,v)               _BFSET_(r16, 3, 0,v)

    #define   GET32SRAMRWTC_ctrl2_DPSR2P(r32)                  _BFGET_(r32, 7, 4)
    #define   SET32SRAMRWTC_ctrl2_DPSR2P(r32,v)                _BFSET_(r32, 7, 4,v)
    #define   GET16SRAMRWTC_ctrl2_DPSR2P(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16SRAMRWTC_ctrl2_DPSR2P(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32SRAMRWTC_ctrl2_ROM(r32)                     _BFGET_(r32,15, 8)
    #define   SET32SRAMRWTC_ctrl2_ROM(r32,v)                   _BFSET_(r32,15, 8,v)
    #define   GET16SRAMRWTC_ctrl2_ROM(r16)                     _BFGET_(r16,15, 8)
    #define   SET16SRAMRWTC_ctrl2_ROM(r16,v)                   _BFSET_(r16,15, 8,v)

    #define     w32SRAMRWTC_ctrl2                              {\
            UNSG32 uctrl2_L1CACHE                              :  4;\
            UNSG32 uctrl2_DPSR2P                               :  4;\
            UNSG32 uctrl2_ROM                                  :  8;\
            UNSG32 RSVDx8_b16                                  : 16;\
          }
    union { UNSG32 u32SRAMRWTC_ctrl2;
            struct w32SRAMRWTC_ctrl2;
          };
    ///////////////////////////////////////////////////////////
    } SIE_SRAMRWTC;

    typedef union  T32SRAMRWTC_ctrl0
          { UNSG32 u32;
            struct w32SRAMRWTC_ctrl0;
                 } T32SRAMRWTC_ctrl0;
    typedef union  T32SRAMRWTC_ctrl1
          { UNSG32 u32;
            struct w32SRAMRWTC_ctrl1;
                 } T32SRAMRWTC_ctrl1;
    typedef union  T32SRAMRWTC_ctrl2
          { UNSG32 u32;
            struct w32SRAMRWTC_ctrl2;
                 } T32SRAMRWTC_ctrl2;
    ///////////////////////////////////////////////////////////

    typedef union  TSRAMRWTC_ctrl0
          { UNSG32 u32[1];
            struct {
            struct w32SRAMRWTC_ctrl0;
                   };
                 } TSRAMRWTC_ctrl0;
    typedef union  TSRAMRWTC_ctrl1
          { UNSG32 u32[1];
            struct {
            struct w32SRAMRWTC_ctrl1;
                   };
                 } TSRAMRWTC_ctrl1;
    typedef union  TSRAMRWTC_ctrl2
          { UNSG32 u32[1];
            struct {
            struct w32SRAMRWTC_ctrl2;
                   };
                 } TSRAMRWTC_ctrl2;

    ///////////////////////////////////////////////////////////
     SIGN32 SRAMRWTC_drvrd(SIE_SRAMRWTC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SRAMRWTC_drvwr(SIE_SRAMRWTC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SRAMRWTC_reset(SIE_SRAMRWTC *p);
     SIGN32 SRAMRWTC_cmp  (SIE_SRAMRWTC *p, SIE_SRAMRWTC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SRAMRWTC_check(p,pie,pfx,hLOG) SRAMRWTC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SRAMRWTC_print(p,    pfx,hLOG) SRAMRWTC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SRAMRWTC
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE PRIAUD                  biu              (4,4)
///     ###
///     * Audio Port configuration registers
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CLKDIV               (P)
///               ###
///               * Audio Master Clock (MCLK) Divider register decides the ratio between MCLK and Audio Bit Clock (BCLK).
///               ###
///               %unsigned 4  SETTING                   0x2
///                                    ###
///                                    * MCLK Divider setting:
///                                    * 0 : Divide by 1
///                                    * 1: Divide by 2
///                                    * 2: Divide by 4
///                                    * 3 : Divide by 8
///                                    * 4: Divide by 16
///                                    * 5: Divide by 32
///                                    * 6: Divide by 64
///                                    * 7: Divide by 128
///                                    * 8 : Divide by 256
///                                    * 9 : Divide by 512
///                                    * 10 : Divide by 1024
///                                    ###
///                                    : DIV1                      0x0
///                                    : DIV2                      0x1
///                                    : DIV4                      0x2
///                                    : DIV8                      0x3
///                                    : DIV16                     0x4
///                                    : DIV32                     0x5
///                                    : DIV64                     0x6
///                                    : DIV128                    0x7
///                                    : DIV256                    0x8
///                                    : DIV512                    0x9
///                                    : DIV1024                   0xA
///               %%        28         # Stuffing bits...
///     @ 0x00004 CTRL                 (P)
///               ###
///               * Register to Control the Output data format for a audio Port
///               ###
///               %unsigned 1  LEFTJFY                   0x0
///                                    ###
///                                    * Decides the Audio Justify mode:
///                                    * 0 : Left Justify (default).
///                                    * 1 : Right Justify.
///                                    ###
///                                    : LEFT                      0x0
///                                    : RIGHT                     0x1
///               %unsigned 1  INVCLK                    0x0
///                                    ###
///                                    * Invert Bit clock (BCLK):
///                                    * 0 - Normal, data is send/received with Rising edge of bit-Clock (default).
///                                    * Note: For TX: Use this setting if DAC is sampling data at negative edge of bit clock.
///                                    * Note: For RX: Use this setting if ADC is sending data at negative edge of bit clock.
///                                    * 1 - Inverted, data is send/received with Falling edge of bit-Clock.
///                                    * *REQUIREMENT**
///                                    * 1. FOR PCM_MONO TX Slave Mode, This register needs to be set to 1.
///                                    * Note: For TX: Use this setting if DAC is sampling data at positive edge of bit clock.
///                                    * Note: For RX: Use this setting if ADC is sending data at positive edge of bit clock.
///                                    ###
///                                    : NORMAL                    0x0
///                                    : INVERTED                  0x1
///               %unsigned 1  INVFS                     0x1
///                                    ###
///                                    * Invert Frame Sync (LR Clock):
///                                    * 0: Normal, FSYNC is Low during reset and goes High when first channel (Left) data is transmitted and keeps toggling after that.
///                                    * 1: Inverted, FSYNC is High during reset and goes Low when first channel (Left) data is transmitted and keeps toggling after that. (default)
///                                    * Note: For RX Port it Should be programmed to 0, Unless in case of TDM when the LRCLK is received reverse. (Please refer the document for more details).
///                                    ###
///                                    : NORMAL                    0x0
///                                    : INVERTED                  0x1
///               %unsigned 1  TLSB                      0x0
///                                    ###
///                                    * Decides which bit is transmitted/received first(left):
///                                    * 0: MSB first
///                                    * 1: LSB first
///                                    ###
///                                    : MSB_FIRST                 0x0
///                                    : LSB_FIRST                 0x1
///               %unsigned 3  TDM                       0x0
///                                    ###
///                                    * Decides the channel resolution (number of valid bits in a half period of FSYNC):
///                                    * 0: 16-bits per channel
///                                    * 1: 18-bits per channel
///                                    * 2: 20-bits per channel
///                                    * 3: 24-bits per channel
///                                    * 4: 32-bits per channel
///                                    * 5: 8-bits per channel
///                                    * 6: Reserved
///                                    * 7 : Manual Bits per channel
///                                    ###
///                                    : 16DFM                     0x0
///                                    : 18DFM                     0x1
///                                    : 20DFM                     0x2
///                                    : 24DFM                     0x3
///                                    : 32DFM                     0x4
///                                    : 8DFM                      0x5
///               %unsigned 3  TCF                       0x2
///                                    ###
///                                    * Decides the half period of FSYNC (sampling rate) in terms of number of bit-clocks:
///                                    * 0: FSYNC half period equals to 16 bit-clocks
///                                    * 1: FSYNC half period equals to 24 bit-clocks
///                                    * 2: FSYNC half period equals to 32 bit-clocks
///                                    * 3: FSYNC half period equals to 8 bit-clocks
///                                    * 4-6 : Reserved
///                                    * 7 : Manual FSYNC half Period (Equal to 1 Channel).
///                                    ###
///                                    : 16CFM                     0x0
///                                    : 24CFM                     0x1
///                                    : 32CFM                     0x2
///                                    : 8CFM                      0x3
///               %unsigned 2  TFM                       0x2
///                                    ###
///                                    * Decides the TX/RX data format:
///                                    * 1: Justified
///                                    * 2: I2S (default)
///                                    * 0 and 3: Reserved
///                                    ###
///                                    : JUSTIFIED                 0x1
///                                    : I2S                       0x2
///               %unsigned 1  TDMMODE                   0x0
///                                    ###
///                                    * TDM Mode control settings. Turn on this register, If the I2S Data Sent/Received is in TDM Mode
///                                    * Default : 0 (OFF)
///                                    ###
///                                    : TDMMODE_OFF               0x0
///                                    : TDMMODE_ON                0x1
///               %unsigned 3  TDMCHCNT                  0x3
///                                    ###
///                                    * TDMCHCNT defines the channel count the TDM mode is being transmitted.
///                                    * TDM Mode supports 2/4/6/8 Channel Data Transmission.
///                                    * Default : 3 (8CH)
///                                    * NOTE : this Field is used only for I2S TX
///                                    * 4-7 : Reserved
///                                    ###
///                                    : CHCNT_2                   0x0
///                                    : CHCNT_4                   0x1
///                                    : CHCNT_6                   0x2
///                                    : CHCNT_8                   0x3
///               %unsigned 8  TDMWSHIGH                 0x0
///                                    ###
///                                    * To generate High pulse for TDM mode.
///                                    * 0 = 1 High Pulse
///                                    * 254= 255 High Pulse.
///                                    * Allowed Values 0-254
///                                    * USED only in TDM Mode
///                                    ###
///               %unsigned 8  TCF_MANUAL                0xF
///                                    ###
///                                    * TCF value manual program, for values apart from TCF register
///                                    * This field is interpreted as “value+1”. For example, writing 15 will establish as 16
///                                    * Effective only when TCF Set to 7
///                                    ###
///     # 0x00008 CTRL1                
///               %unsigned 3  TCF_MAN_MAR               0x0
///                                    ###
///                                    * Deviation from the TCF_MANUAL for alternate clock.
///                                    * For Eg :
///                                    * clock period is 2us
///                                    * and start happen every 125us.
///                                    * So TCF_Manual = 61
///                                    * and TCF_MAN_MAR =1
///                                    * This will generate start at 124us & 126us alternatively
///                                    ###
///               %unsigned 8  TDM_MANUAL                0xF
///                                    ###
///                                    * TDM value manual program, for values apart from TDM register.
///                                    * This field is interpreted as “value+1”. For example, writing 15 will establish as 16
///                                    * Effective only when TDM Set to 7
///                                    ###
///               %unsigned 1  PCM_MONO_CH               0x0
///                                    ###
///                                    * If the data needs to be Sent or received in PCM Mono channel for application like Bluetooth Set this bit to 1
///                                    * Set to LEFT JUSTIFIED Mode while operating on PCM Mono Mode.
///                                    ###
///               %%        20         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      12B, bits:      48b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_PRIAUD
#define h_PRIAUD (){}

    #define     RA_PRIAUD_CLKDIV                               0x0000

    #define     BA_PRIAUD_CLKDIV_SETTING                       0x0000
    #define     B16PRIAUD_CLKDIV_SETTING                       0x0000
    #define   LSb32PRIAUD_CLKDIV_SETTING                          0
    #define   LSb16PRIAUD_CLKDIV_SETTING                          0
    #define       bPRIAUD_CLKDIV_SETTING                       4
    #define   MSK32PRIAUD_CLKDIV_SETTING                          0x0000000F
    #define        PRIAUD_CLKDIV_SETTING_DIV1                               0x0
    #define        PRIAUD_CLKDIV_SETTING_DIV2                               0x1
    #define        PRIAUD_CLKDIV_SETTING_DIV4                               0x2
    #define        PRIAUD_CLKDIV_SETTING_DIV8                               0x3
    #define        PRIAUD_CLKDIV_SETTING_DIV16                              0x4
    #define        PRIAUD_CLKDIV_SETTING_DIV32                              0x5
    #define        PRIAUD_CLKDIV_SETTING_DIV64                              0x6
    #define        PRIAUD_CLKDIV_SETTING_DIV128                             0x7
    #define        PRIAUD_CLKDIV_SETTING_DIV256                             0x8
    #define        PRIAUD_CLKDIV_SETTING_DIV512                             0x9
    #define        PRIAUD_CLKDIV_SETTING_DIV1024                            0xA
    ///////////////////////////////////////////////////////////
    #define     RA_PRIAUD_CTRL                                 0x0004

    #define     BA_PRIAUD_CTRL_LEFTJFY                         0x0004
    #define     B16PRIAUD_CTRL_LEFTJFY                         0x0004
    #define   LSb32PRIAUD_CTRL_LEFTJFY                            0
    #define   LSb16PRIAUD_CTRL_LEFTJFY                            0
    #define       bPRIAUD_CTRL_LEFTJFY                         1
    #define   MSK32PRIAUD_CTRL_LEFTJFY                            0x00000001
    #define        PRIAUD_CTRL_LEFTJFY_LEFT                                 0x0
    #define        PRIAUD_CTRL_LEFTJFY_RIGHT                                0x1

    #define     BA_PRIAUD_CTRL_INVCLK                          0x0004
    #define     B16PRIAUD_CTRL_INVCLK                          0x0004
    #define   LSb32PRIAUD_CTRL_INVCLK                             1
    #define   LSb16PRIAUD_CTRL_INVCLK                             1
    #define       bPRIAUD_CTRL_INVCLK                          1
    #define   MSK32PRIAUD_CTRL_INVCLK                             0x00000002
    #define        PRIAUD_CTRL_INVCLK_NORMAL                                0x0
    #define        PRIAUD_CTRL_INVCLK_INVERTED                              0x1

    #define     BA_PRIAUD_CTRL_INVFS                           0x0004
    #define     B16PRIAUD_CTRL_INVFS                           0x0004
    #define   LSb32PRIAUD_CTRL_INVFS                              2
    #define   LSb16PRIAUD_CTRL_INVFS                              2
    #define       bPRIAUD_CTRL_INVFS                           1
    #define   MSK32PRIAUD_CTRL_INVFS                              0x00000004
    #define        PRIAUD_CTRL_INVFS_NORMAL                                 0x0
    #define        PRIAUD_CTRL_INVFS_INVERTED                               0x1

    #define     BA_PRIAUD_CTRL_TLSB                            0x0004
    #define     B16PRIAUD_CTRL_TLSB                            0x0004
    #define   LSb32PRIAUD_CTRL_TLSB                               3
    #define   LSb16PRIAUD_CTRL_TLSB                               3
    #define       bPRIAUD_CTRL_TLSB                            1
    #define   MSK32PRIAUD_CTRL_TLSB                               0x00000008
    #define        PRIAUD_CTRL_TLSB_MSB_FIRST                               0x0
    #define        PRIAUD_CTRL_TLSB_LSB_FIRST                               0x1

    #define     BA_PRIAUD_CTRL_TDM                             0x0004
    #define     B16PRIAUD_CTRL_TDM                             0x0004
    #define   LSb32PRIAUD_CTRL_TDM                                4
    #define   LSb16PRIAUD_CTRL_TDM                                4
    #define       bPRIAUD_CTRL_TDM                             3
    #define   MSK32PRIAUD_CTRL_TDM                                0x00000070
    #define        PRIAUD_CTRL_TDM_16DFM                                    0x0
    #define        PRIAUD_CTRL_TDM_18DFM                                    0x1
    #define        PRIAUD_CTRL_TDM_20DFM                                    0x2
    #define        PRIAUD_CTRL_TDM_24DFM                                    0x3
    #define        PRIAUD_CTRL_TDM_32DFM                                    0x4
    #define        PRIAUD_CTRL_TDM_8DFM                                     0x5

    #define     BA_PRIAUD_CTRL_TCF                             0x0004
    #define     B16PRIAUD_CTRL_TCF                             0x0004
    #define   LSb32PRIAUD_CTRL_TCF                                7
    #define   LSb16PRIAUD_CTRL_TCF                                7
    #define       bPRIAUD_CTRL_TCF                             3
    #define   MSK32PRIAUD_CTRL_TCF                                0x00000380
    #define        PRIAUD_CTRL_TCF_16CFM                                    0x0
    #define        PRIAUD_CTRL_TCF_24CFM                                    0x1
    #define        PRIAUD_CTRL_TCF_32CFM                                    0x2
    #define        PRIAUD_CTRL_TCF_8CFM                                     0x3

    #define     BA_PRIAUD_CTRL_TFM                             0x0005
    #define     B16PRIAUD_CTRL_TFM                             0x0004
    #define   LSb32PRIAUD_CTRL_TFM                                10
    #define   LSb16PRIAUD_CTRL_TFM                                10
    #define       bPRIAUD_CTRL_TFM                             2
    #define   MSK32PRIAUD_CTRL_TFM                                0x00000C00
    #define        PRIAUD_CTRL_TFM_JUSTIFIED                                0x1
    #define        PRIAUD_CTRL_TFM_I2S                                      0x2

    #define     BA_PRIAUD_CTRL_TDMMODE                         0x0005
    #define     B16PRIAUD_CTRL_TDMMODE                         0x0004
    #define   LSb32PRIAUD_CTRL_TDMMODE                            12
    #define   LSb16PRIAUD_CTRL_TDMMODE                            12
    #define       bPRIAUD_CTRL_TDMMODE                         1
    #define   MSK32PRIAUD_CTRL_TDMMODE                            0x00001000
    #define        PRIAUD_CTRL_TDMMODE_TDMMODE_OFF                          0x0
    #define        PRIAUD_CTRL_TDMMODE_TDMMODE_ON                           0x1

    #define     BA_PRIAUD_CTRL_TDMCHCNT                        0x0005
    #define     B16PRIAUD_CTRL_TDMCHCNT                        0x0004
    #define   LSb32PRIAUD_CTRL_TDMCHCNT                           13
    #define   LSb16PRIAUD_CTRL_TDMCHCNT                           13
    #define       bPRIAUD_CTRL_TDMCHCNT                        3
    #define   MSK32PRIAUD_CTRL_TDMCHCNT                           0x0000E000
    #define        PRIAUD_CTRL_TDMCHCNT_CHCNT_2                             0x0
    #define        PRIAUD_CTRL_TDMCHCNT_CHCNT_4                             0x1
    #define        PRIAUD_CTRL_TDMCHCNT_CHCNT_6                             0x2
    #define        PRIAUD_CTRL_TDMCHCNT_CHCNT_8                             0x3

    #define     BA_PRIAUD_CTRL_TDMWSHIGH                       0x0006
    #define     B16PRIAUD_CTRL_TDMWSHIGH                       0x0006
    #define   LSb32PRIAUD_CTRL_TDMWSHIGH                          16
    #define   LSb16PRIAUD_CTRL_TDMWSHIGH                          0
    #define       bPRIAUD_CTRL_TDMWSHIGH                       8
    #define   MSK32PRIAUD_CTRL_TDMWSHIGH                          0x00FF0000

    #define     BA_PRIAUD_CTRL_TCF_MANUAL                      0x0007
    #define     B16PRIAUD_CTRL_TCF_MANUAL                      0x0006
    #define   LSb32PRIAUD_CTRL_TCF_MANUAL                         24
    #define   LSb16PRIAUD_CTRL_TCF_MANUAL                         8
    #define       bPRIAUD_CTRL_TCF_MANUAL                      8
    #define   MSK32PRIAUD_CTRL_TCF_MANUAL                         0xFF000000

    #define     RA_PRIAUD_CTRL1                                0x0008

    #define     BA_PRIAUD_CTRL_TCF_MAN_MAR                     0x0008
    #define     B16PRIAUD_CTRL_TCF_MAN_MAR                     0x0008
    #define   LSb32PRIAUD_CTRL_TCF_MAN_MAR                        0
    #define   LSb16PRIAUD_CTRL_TCF_MAN_MAR                        0
    #define       bPRIAUD_CTRL_TCF_MAN_MAR                     3
    #define   MSK32PRIAUD_CTRL_TCF_MAN_MAR                        0x00000007

    #define     BA_PRIAUD_CTRL_TDM_MANUAL                      0x0008
    #define     B16PRIAUD_CTRL_TDM_MANUAL                      0x0008
    #define   LSb32PRIAUD_CTRL_TDM_MANUAL                         3
    #define   LSb16PRIAUD_CTRL_TDM_MANUAL                         3
    #define       bPRIAUD_CTRL_TDM_MANUAL                      8
    #define   MSK32PRIAUD_CTRL_TDM_MANUAL                         0x000007F8

    #define     BA_PRIAUD_CTRL_PCM_MONO_CH                     0x0009
    #define     B16PRIAUD_CTRL_PCM_MONO_CH                     0x0008
    #define   LSb32PRIAUD_CTRL_PCM_MONO_CH                        11
    #define   LSb16PRIAUD_CTRL_PCM_MONO_CH                        11
    #define       bPRIAUD_CTRL_PCM_MONO_CH                     1
    #define   MSK32PRIAUD_CTRL_PCM_MONO_CH                        0x00000800
    ///////////////////////////////////////////////////////////

    typedef struct SIE_PRIAUD {
    ///////////////////////////////////////////////////////////
    #define   GET32PRIAUD_CLKDIV_SETTING(r32)                  _BFGET_(r32, 3, 0)
    #define   SET32PRIAUD_CLKDIV_SETTING(r32,v)                _BFSET_(r32, 3, 0,v)
    #define   GET16PRIAUD_CLKDIV_SETTING(r16)                  _BFGET_(r16, 3, 0)
    #define   SET16PRIAUD_CLKDIV_SETTING(r16,v)                _BFSET_(r16, 3, 0,v)

    #define     w32PRIAUD_CLKDIV                               {\
            UNSG32 uCLKDIV_SETTING                             :  4;\
            UNSG32 RSVDx0_b4                                   : 28;\
          }
    union { UNSG32 u32PRIAUD_CLKDIV;
            struct w32PRIAUD_CLKDIV;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32PRIAUD_CTRL_LEFTJFY(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32PRIAUD_CTRL_LEFTJFY(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16PRIAUD_CTRL_LEFTJFY(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16PRIAUD_CTRL_LEFTJFY(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32PRIAUD_CTRL_INVCLK(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32PRIAUD_CTRL_INVCLK(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16PRIAUD_CTRL_INVCLK(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16PRIAUD_CTRL_INVCLK(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define   GET32PRIAUD_CTRL_INVFS(r32)                      _BFGET_(r32, 2, 2)
    #define   SET32PRIAUD_CTRL_INVFS(r32,v)                    _BFSET_(r32, 2, 2,v)
    #define   GET16PRIAUD_CTRL_INVFS(r16)                      _BFGET_(r16, 2, 2)
    #define   SET16PRIAUD_CTRL_INVFS(r16,v)                    _BFSET_(r16, 2, 2,v)

    #define   GET32PRIAUD_CTRL_TLSB(r32)                       _BFGET_(r32, 3, 3)
    #define   SET32PRIAUD_CTRL_TLSB(r32,v)                     _BFSET_(r32, 3, 3,v)
    #define   GET16PRIAUD_CTRL_TLSB(r16)                       _BFGET_(r16, 3, 3)
    #define   SET16PRIAUD_CTRL_TLSB(r16,v)                     _BFSET_(r16, 3, 3,v)

    #define   GET32PRIAUD_CTRL_TDM(r32)                        _BFGET_(r32, 6, 4)
    #define   SET32PRIAUD_CTRL_TDM(r32,v)                      _BFSET_(r32, 6, 4,v)
    #define   GET16PRIAUD_CTRL_TDM(r16)                        _BFGET_(r16, 6, 4)
    #define   SET16PRIAUD_CTRL_TDM(r16,v)                      _BFSET_(r16, 6, 4,v)

    #define   GET32PRIAUD_CTRL_TCF(r32)                        _BFGET_(r32, 9, 7)
    #define   SET32PRIAUD_CTRL_TCF(r32,v)                      _BFSET_(r32, 9, 7,v)
    #define   GET16PRIAUD_CTRL_TCF(r16)                        _BFGET_(r16, 9, 7)
    #define   SET16PRIAUD_CTRL_TCF(r16,v)                      _BFSET_(r16, 9, 7,v)

    #define   GET32PRIAUD_CTRL_TFM(r32)                        _BFGET_(r32,11,10)
    #define   SET32PRIAUD_CTRL_TFM(r32,v)                      _BFSET_(r32,11,10,v)
    #define   GET16PRIAUD_CTRL_TFM(r16)                        _BFGET_(r16,11,10)
    #define   SET16PRIAUD_CTRL_TFM(r16,v)                      _BFSET_(r16,11,10,v)

    #define   GET32PRIAUD_CTRL_TDMMODE(r32)                    _BFGET_(r32,12,12)
    #define   SET32PRIAUD_CTRL_TDMMODE(r32,v)                  _BFSET_(r32,12,12,v)
    #define   GET16PRIAUD_CTRL_TDMMODE(r16)                    _BFGET_(r16,12,12)
    #define   SET16PRIAUD_CTRL_TDMMODE(r16,v)                  _BFSET_(r16,12,12,v)

    #define   GET32PRIAUD_CTRL_TDMCHCNT(r32)                   _BFGET_(r32,15,13)
    #define   SET32PRIAUD_CTRL_TDMCHCNT(r32,v)                 _BFSET_(r32,15,13,v)
    #define   GET16PRIAUD_CTRL_TDMCHCNT(r16)                   _BFGET_(r16,15,13)
    #define   SET16PRIAUD_CTRL_TDMCHCNT(r16,v)                 _BFSET_(r16,15,13,v)

    #define   GET32PRIAUD_CTRL_TDMWSHIGH(r32)                  _BFGET_(r32,23,16)
    #define   SET32PRIAUD_CTRL_TDMWSHIGH(r32,v)                _BFSET_(r32,23,16,v)
    #define   GET16PRIAUD_CTRL_TDMWSHIGH(r16)                  _BFGET_(r16, 7, 0)
    #define   SET16PRIAUD_CTRL_TDMWSHIGH(r16,v)                _BFSET_(r16, 7, 0,v)

    #define   GET32PRIAUD_CTRL_TCF_MANUAL(r32)                 _BFGET_(r32,31,24)
    #define   SET32PRIAUD_CTRL_TCF_MANUAL(r32,v)               _BFSET_(r32,31,24,v)
    #define   GET16PRIAUD_CTRL_TCF_MANUAL(r16)                 _BFGET_(r16,15, 8)
    #define   SET16PRIAUD_CTRL_TCF_MANUAL(r16,v)               _BFSET_(r16,15, 8,v)

    #define     w32PRIAUD_CTRL                                 {\
            UNSG32 uCTRL_LEFTJFY                               :  1;\
            UNSG32 uCTRL_INVCLK                                :  1;\
            UNSG32 uCTRL_INVFS                                 :  1;\
            UNSG32 uCTRL_TLSB                                  :  1;\
            UNSG32 uCTRL_TDM                                   :  3;\
            UNSG32 uCTRL_TCF                                   :  3;\
            UNSG32 uCTRL_TFM                                   :  2;\
            UNSG32 uCTRL_TDMMODE                               :  1;\
            UNSG32 uCTRL_TDMCHCNT                              :  3;\
            UNSG32 uCTRL_TDMWSHIGH                             :  8;\
            UNSG32 uCTRL_TCF_MANUAL                            :  8;\
          }
    union { UNSG32 u32PRIAUD_CTRL;
            struct w32PRIAUD_CTRL;
          };
    #define   GET32PRIAUD_CTRL_TCF_MAN_MAR(r32)                _BFGET_(r32, 2, 0)
    #define   SET32PRIAUD_CTRL_TCF_MAN_MAR(r32,v)              _BFSET_(r32, 2, 0,v)
    #define   GET16PRIAUD_CTRL_TCF_MAN_MAR(r16)                _BFGET_(r16, 2, 0)
    #define   SET16PRIAUD_CTRL_TCF_MAN_MAR(r16,v)              _BFSET_(r16, 2, 0,v)

    #define   GET32PRIAUD_CTRL_TDM_MANUAL(r32)                 _BFGET_(r32,10, 3)
    #define   SET32PRIAUD_CTRL_TDM_MANUAL(r32,v)               _BFSET_(r32,10, 3,v)
    #define   GET16PRIAUD_CTRL_TDM_MANUAL(r16)                 _BFGET_(r16,10, 3)
    #define   SET16PRIAUD_CTRL_TDM_MANUAL(r16,v)               _BFSET_(r16,10, 3,v)

    #define   GET32PRIAUD_CTRL_PCM_MONO_CH(r32)                _BFGET_(r32,11,11)
    #define   SET32PRIAUD_CTRL_PCM_MONO_CH(r32,v)              _BFSET_(r32,11,11,v)
    #define   GET16PRIAUD_CTRL_PCM_MONO_CH(r16)                _BFGET_(r16,11,11)
    #define   SET16PRIAUD_CTRL_PCM_MONO_CH(r16,v)              _BFSET_(r16,11,11,v)

    #define     w32PRIAUD_CTRL1                                {\
            UNSG32 uCTRL_TCF_MAN_MAR                           :  3;\
            UNSG32 uCTRL_TDM_MANUAL                            :  8;\
            UNSG32 uCTRL_PCM_MONO_CH                           :  1;\
            UNSG32 RSVDx8_b12                                  : 20;\
          }
    union { UNSG32 u32PRIAUD_CTRL1;
            struct w32PRIAUD_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    } SIE_PRIAUD;

    typedef union  T32PRIAUD_CLKDIV
          { UNSG32 u32;
            struct w32PRIAUD_CLKDIV;
                 } T32PRIAUD_CLKDIV;
    typedef union  T32PRIAUD_CTRL
          { UNSG32 u32;
            struct w32PRIAUD_CTRL;
                 } T32PRIAUD_CTRL;
    typedef union  T32PRIAUD_CTRL1
          { UNSG32 u32;
            struct w32PRIAUD_CTRL1;
                 } T32PRIAUD_CTRL1;
    ///////////////////////////////////////////////////////////

    typedef union  TPRIAUD_CLKDIV
          { UNSG32 u32[1];
            struct {
            struct w32PRIAUD_CLKDIV;
                   };
                 } TPRIAUD_CLKDIV;
    typedef union  TPRIAUD_CTRL
          { UNSG32 u32[2];
            struct {
            struct w32PRIAUD_CTRL;
            struct w32PRIAUD_CTRL1;
                   };
                 } TPRIAUD_CTRL;

    ///////////////////////////////////////////////////////////
     SIGN32 PRIAUD_drvrd(SIE_PRIAUD *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 PRIAUD_drvwr(SIE_PRIAUD *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void PRIAUD_reset(SIE_PRIAUD *p);
     SIGN32 PRIAUD_cmp  (SIE_PRIAUD *p, SIE_PRIAUD *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define PRIAUD_check(p,pie,pfx,hLOG) PRIAUD_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define PRIAUD_print(p,    pfx,hLOG) PRIAUD_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: PRIAUD
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE AUDCH                   biu              (4,4)
///     ###
///     * Audio Port Control registers
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P)
///               ###
///               * Audio Port Control register
///               ###
///               %unsigned 1  ENABLE                    0x0
///                                    ###
///                                    * Control bit to enable/disable an audio channel:
///                                    * 0: Disable a audio Channel (default)
///                                    * 1: Enable a audio Channel
///                                    * Note: Bit-clock (BCLK) is not controlled using this bit. For switching off the Bit Clock the output enable register should be used(IOSEL).
///                                    ###
///                                    : DISABLE                   0x0
///                                    : ENABLE                    0x1
///               %unsigned 1  MUTE                      0x0
///                                    ###
///                                    * Control bit to turn mute function ON or OFF
///                                    * 0: Mute turned OFF (default)
///                                    * 1: Mute turned ON
///                                    ###
///                                    : MUTE_OFF                  0x0
///                                    : MUTE_ON                   0x1
///               %unsigned 1  LRSWITCH                  0x0
///                                    ###
///                                    * Control bit for switching the left channel data with right channel data:
///                                    * 0: Do not switch data (default)
///                                    * 1: Switch Data
///                                    * Note: Not supported for S/PDIF.
///                                    ###
///                                    : SWITCH_OFF                0x0
///                                    : SWITCH_ON                 0x1
///               %unsigned 1  DEBUGEN                   0x0
///                                    ###
///                                    * Control bit to enable/disable Debug mode:
///                                    * 0: Disable (default)
///                                    * 1: Enable
///                                    * Note: In debug mode transmit data is from debug registers.
///                                    * *INTERNAL_ONLY**
///                                    ###
///                                    : DISABLE                   0x0
///                                    : ENABLE                    0x1
///               %unsigned 1  FLUSH                     0x0
///                                    ###
///                                    * Control bit to clear the Data FIFO pointers related to a port:
///                                    * 0: Do not flush (default)
///                                    * 1: Flush
///                                    ###
///                                    : ON                        0x1
///                                    : OFF                       0x0
///               %%        27         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       5b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_AUDCH
#define h_AUDCH (){}

    #define     RA_AUDCH_CTRL                                  0x0000

    #define     BA_AUDCH_CTRL_ENABLE                           0x0000
    #define     B16AUDCH_CTRL_ENABLE                           0x0000
    #define   LSb32AUDCH_CTRL_ENABLE                              0
    #define   LSb16AUDCH_CTRL_ENABLE                              0
    #define       bAUDCH_CTRL_ENABLE                           1
    #define   MSK32AUDCH_CTRL_ENABLE                              0x00000001
    #define        AUDCH_CTRL_ENABLE_DISABLE                                0x0
    #define        AUDCH_CTRL_ENABLE_ENABLE                                 0x1

    #define     BA_AUDCH_CTRL_MUTE                             0x0000
    #define     B16AUDCH_CTRL_MUTE                             0x0000
    #define   LSb32AUDCH_CTRL_MUTE                                1
    #define   LSb16AUDCH_CTRL_MUTE                                1
    #define       bAUDCH_CTRL_MUTE                             1
    #define   MSK32AUDCH_CTRL_MUTE                                0x00000002
    #define        AUDCH_CTRL_MUTE_MUTE_OFF                                 0x0
    #define        AUDCH_CTRL_MUTE_MUTE_ON                                  0x1

    #define     BA_AUDCH_CTRL_LRSWITCH                         0x0000
    #define     B16AUDCH_CTRL_LRSWITCH                         0x0000
    #define   LSb32AUDCH_CTRL_LRSWITCH                            2
    #define   LSb16AUDCH_CTRL_LRSWITCH                            2
    #define       bAUDCH_CTRL_LRSWITCH                         1
    #define   MSK32AUDCH_CTRL_LRSWITCH                            0x00000004
    #define        AUDCH_CTRL_LRSWITCH_SWITCH_OFF                           0x0
    #define        AUDCH_CTRL_LRSWITCH_SWITCH_ON                            0x1

    #define     BA_AUDCH_CTRL_DEBUGEN                          0x0000
    #define     B16AUDCH_CTRL_DEBUGEN                          0x0000
    #define   LSb32AUDCH_CTRL_DEBUGEN                             3
    #define   LSb16AUDCH_CTRL_DEBUGEN                             3
    #define       bAUDCH_CTRL_DEBUGEN                          1
    #define   MSK32AUDCH_CTRL_DEBUGEN                             0x00000008
    #define        AUDCH_CTRL_DEBUGEN_DISABLE                               0x0
    #define        AUDCH_CTRL_DEBUGEN_ENABLE                                0x1

    #define     BA_AUDCH_CTRL_FLUSH                            0x0000
    #define     B16AUDCH_CTRL_FLUSH                            0x0000
    #define   LSb32AUDCH_CTRL_FLUSH                               4
    #define   LSb16AUDCH_CTRL_FLUSH                               4
    #define       bAUDCH_CTRL_FLUSH                            1
    #define   MSK32AUDCH_CTRL_FLUSH                               0x00000010
    #define        AUDCH_CTRL_FLUSH_ON                                      0x1
    #define        AUDCH_CTRL_FLUSH_OFF                                     0x0
    ///////////////////////////////////////////////////////////

    typedef struct SIE_AUDCH {
    ///////////////////////////////////////////////////////////
    #define   GET32AUDCH_CTRL_ENABLE(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32AUDCH_CTRL_ENABLE(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16AUDCH_CTRL_ENABLE(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16AUDCH_CTRL_ENABLE(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define   GET32AUDCH_CTRL_MUTE(r32)                        _BFGET_(r32, 1, 1)
    #define   SET32AUDCH_CTRL_MUTE(r32,v)                      _BFSET_(r32, 1, 1,v)
    #define   GET16AUDCH_CTRL_MUTE(r16)                        _BFGET_(r16, 1, 1)
    #define   SET16AUDCH_CTRL_MUTE(r16,v)                      _BFSET_(r16, 1, 1,v)

    #define   GET32AUDCH_CTRL_LRSWITCH(r32)                    _BFGET_(r32, 2, 2)
    #define   SET32AUDCH_CTRL_LRSWITCH(r32,v)                  _BFSET_(r32, 2, 2,v)
    #define   GET16AUDCH_CTRL_LRSWITCH(r16)                    _BFGET_(r16, 2, 2)
    #define   SET16AUDCH_CTRL_LRSWITCH(r16,v)                  _BFSET_(r16, 2, 2,v)

    #define   GET32AUDCH_CTRL_DEBUGEN(r32)                     _BFGET_(r32, 3, 3)
    #define   SET32AUDCH_CTRL_DEBUGEN(r32,v)                   _BFSET_(r32, 3, 3,v)
    #define   GET16AUDCH_CTRL_DEBUGEN(r16)                     _BFGET_(r16, 3, 3)
    #define   SET16AUDCH_CTRL_DEBUGEN(r16,v)                   _BFSET_(r16, 3, 3,v)

    #define   GET32AUDCH_CTRL_FLUSH(r32)                       _BFGET_(r32, 4, 4)
    #define   SET32AUDCH_CTRL_FLUSH(r32,v)                     _BFSET_(r32, 4, 4,v)
    #define   GET16AUDCH_CTRL_FLUSH(r16)                       _BFGET_(r16, 4, 4)
    #define   SET16AUDCH_CTRL_FLUSH(r16,v)                     _BFSET_(r16, 4, 4,v)

    #define     w32AUDCH_CTRL                                  {\
            UNSG32 uCTRL_ENABLE                                :  1;\
            UNSG32 uCTRL_MUTE                                  :  1;\
            UNSG32 uCTRL_LRSWITCH                              :  1;\
            UNSG32 uCTRL_DEBUGEN                               :  1;\
            UNSG32 uCTRL_FLUSH                                 :  1;\
            UNSG32 RSVDx0_b5                                   : 27;\
          }
    union { UNSG32 u32AUDCH_CTRL;
            struct w32AUDCH_CTRL;
          };
    ///////////////////////////////////////////////////////////
    } SIE_AUDCH;

    typedef union  T32AUDCH_CTRL
          { UNSG32 u32;
            struct w32AUDCH_CTRL;
                 } T32AUDCH_CTRL;
    ///////////////////////////////////////////////////////////

    typedef union  TAUDCH_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32AUDCH_CTRL;
                   };
                 } TAUDCH_CTRL;

    ///////////////////////////////////////////////////////////
     SIGN32 AUDCH_drvrd(SIE_AUDCH *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 AUDCH_drvwr(SIE_AUDCH *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void AUDCH_reset(SIE_AUDCH *p);
     SIGN32 AUDCH_cmp  (SIE_AUDCH *p, SIE_AUDCH *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define AUDCH_check(p,pie,pfx,hLOG) AUDCH_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define AUDCH_print(p,    pfx,hLOG) AUDCH_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: AUDCH
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE DBG_TX                  biu              (4,4)
///     ###
///     * Audio Port Control registers
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 DEBUGHI              (P)
///               ###
///               * Upper 32-bit Debug data
///               ###
///               %unsigned 32 DATAHI                    0x4884103F
///                                    ###
///                                    * Upper 32-bit Debug data
///                                    * *INTERNAL_ONLY**
///                                    ###
///     @ 0x00004 DEBUGLO              (P)
///               ###
///               * Lower 32-bit Debug data
///               ###
///               %unsigned 32 DATALO                    0xB77BEFC0
///                                    ###
///                                    * Lower 32-bit Debug data
///                                    * *INTERNAL_ONLY**
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:      64b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DBG_TX
#define h_DBG_TX (){}

    #define     RA_DBG_TX_DEBUGHI                              0x0000

    #define     BA_DBG_TX_DEBUGHI_DATAHI                       0x0000
    #define     B16DBG_TX_DEBUGHI_DATAHI                       0x0000
    #define   LSb32DBG_TX_DEBUGHI_DATAHI                          0
    #define   LSb16DBG_TX_DEBUGHI_DATAHI                          0
    #define       bDBG_TX_DEBUGHI_DATAHI                       32
    #define   MSK32DBG_TX_DEBUGHI_DATAHI                          0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DBG_TX_DEBUGLO                              0x0004

    #define     BA_DBG_TX_DEBUGLO_DATALO                       0x0004
    #define     B16DBG_TX_DEBUGLO_DATALO                       0x0004
    #define   LSb32DBG_TX_DEBUGLO_DATALO                          0
    #define   LSb16DBG_TX_DEBUGLO_DATALO                          0
    #define       bDBG_TX_DEBUGLO_DATALO                       32
    #define   MSK32DBG_TX_DEBUGLO_DATALO                          0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DBG_TX {
    ///////////////////////////////////////////////////////////
    #define   GET32DBG_TX_DEBUGHI_DATAHI(r32)                  _BFGET_(r32,31, 0)
    #define   SET32DBG_TX_DEBUGHI_DATAHI(r32,v)                _BFSET_(r32,31, 0,v)

    #define     w32DBG_TX_DEBUGHI                              {\
            UNSG32 uDEBUGHI_DATAHI                             : 32;\
          }
    union { UNSG32 u32DBG_TX_DEBUGHI;
            struct w32DBG_TX_DEBUGHI;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DBG_TX_DEBUGLO_DATALO(r32)                  _BFGET_(r32,31, 0)
    #define   SET32DBG_TX_DEBUGLO_DATALO(r32,v)                _BFSET_(r32,31, 0,v)

    #define     w32DBG_TX_DEBUGLO                              {\
            UNSG32 uDEBUGLO_DATALO                             : 32;\
          }
    union { UNSG32 u32DBG_TX_DEBUGLO;
            struct w32DBG_TX_DEBUGLO;
          };
    ///////////////////////////////////////////////////////////
    } SIE_DBG_TX;

    typedef union  T32DBG_TX_DEBUGHI
          { UNSG32 u32;
            struct w32DBG_TX_DEBUGHI;
                 } T32DBG_TX_DEBUGHI;
    typedef union  T32DBG_TX_DEBUGLO
          { UNSG32 u32;
            struct w32DBG_TX_DEBUGLO;
                 } T32DBG_TX_DEBUGLO;
    ///////////////////////////////////////////////////////////

    typedef union  TDBG_TX_DEBUGHI
          { UNSG32 u32[1];
            struct {
            struct w32DBG_TX_DEBUGHI;
                   };
                 } TDBG_TX_DEBUGHI;
    typedef union  TDBG_TX_DEBUGLO
          { UNSG32 u32[1];
            struct {
            struct w32DBG_TX_DEBUGLO;
                   };
                 } TDBG_TX_DEBUGLO;

    ///////////////////////////////////////////////////////////
     SIGN32 DBG_TX_drvrd(SIE_DBG_TX *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DBG_TX_drvwr(SIE_DBG_TX *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DBG_TX_reset(SIE_DBG_TX *p);
     SIGN32 DBG_TX_cmp  (SIE_DBG_TX *p, SIE_DBG_TX *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DBG_TX_check(p,pie,pfx,hLOG) DBG_TX_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DBG_TX_print(p,    pfx,hLOG) DBG_TX_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DBG_TX
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE DBG_RX                  biu              (4,4)
///     ###
///     * Audio Port Control registers
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 DBG                  (P)
///               ###
///               * Port output select
///               ###
///               %unsigned 2  PORT_SEL                  0x0
///                                    ###
///                                    * Port Select
///                                    * 0 : Port 0 Data Out to debug registers
///                                    * 1 : Port 1 Data Out to debug registers
///                                    * 2 : Port 2 Data Out to debug registers
///                                    * 3 : Port 3 Data Out to debug registers
///                                    * *INTERNAL_ONLY**
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00004 DEBUGHI              (R-)
///               ###
///               * Upper 32-bit Debug data
///               ###
///               %unsigned 32 DATAHI                    0x4884103F
///                                    ###
///                                    * Upper 32-bit Debug data
///                                    * *INTERNAL_ONLY**
///                                    ###
///     @ 0x00008 DEBUGLO              (R-)
///               ###
///               * Lower 32-bit Debug data
///               ###
///               %unsigned 32 DATALO                    0xB77BEFC0
///                                    ###
///                                    * Lower 32-bit Debug data
///                                    * *INTERNAL_ONLY**
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      12B, bits:      66b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DBG_RX
#define h_DBG_RX (){}

    #define     RA_DBG_RX_DBG                                  0x0000

    #define     BA_DBG_RX_DBG_PORT_SEL                         0x0000
    #define     B16DBG_RX_DBG_PORT_SEL                         0x0000
    #define   LSb32DBG_RX_DBG_PORT_SEL                            0
    #define   LSb16DBG_RX_DBG_PORT_SEL                            0
    #define       bDBG_RX_DBG_PORT_SEL                         2
    #define   MSK32DBG_RX_DBG_PORT_SEL                            0x00000003
    ///////////////////////////////////////////////////////////
    #define     RA_DBG_RX_DEBUGHI                              0x0004

    #define     BA_DBG_RX_DEBUGHI_DATAHI                       0x0004
    #define     B16DBG_RX_DEBUGHI_DATAHI                       0x0004
    #define   LSb32DBG_RX_DEBUGHI_DATAHI                          0
    #define   LSb16DBG_RX_DEBUGHI_DATAHI                          0
    #define       bDBG_RX_DEBUGHI_DATAHI                       32
    #define   MSK32DBG_RX_DEBUGHI_DATAHI                          0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DBG_RX_DEBUGLO                              0x0008

    #define     BA_DBG_RX_DEBUGLO_DATALO                       0x0008
    #define     B16DBG_RX_DEBUGLO_DATALO                       0x0008
    #define   LSb32DBG_RX_DEBUGLO_DATALO                          0
    #define   LSb16DBG_RX_DEBUGLO_DATALO                          0
    #define       bDBG_RX_DEBUGLO_DATALO                       32
    #define   MSK32DBG_RX_DEBUGLO_DATALO                          0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DBG_RX {
    ///////////////////////////////////////////////////////////
    #define   GET32DBG_RX_DBG_PORT_SEL(r32)                    _BFGET_(r32, 1, 0)
    #define   SET32DBG_RX_DBG_PORT_SEL(r32,v)                  _BFSET_(r32, 1, 0,v)
    #define   GET16DBG_RX_DBG_PORT_SEL(r16)                    _BFGET_(r16, 1, 0)
    #define   SET16DBG_RX_DBG_PORT_SEL(r16,v)                  _BFSET_(r16, 1, 0,v)

    #define     w32DBG_RX_DBG                                  {\
            UNSG32 uDBG_PORT_SEL                               :  2;\
            UNSG32 RSVDx0_b2                                   : 30;\
          }
    union { UNSG32 u32DBG_RX_DBG;
            struct w32DBG_RX_DBG;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DBG_RX_DEBUGHI_DATAHI(r32)                  _BFGET_(r32,31, 0)
    #define   SET32DBG_RX_DEBUGHI_DATAHI(r32,v)                _BFSET_(r32,31, 0,v)

    #define     w32DBG_RX_DEBUGHI                              {\
            UNSG32 uDEBUGHI_DATAHI                             : 32;\
          }
    union { UNSG32 u32DBG_RX_DEBUGHI;
            struct w32DBG_RX_DEBUGHI;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DBG_RX_DEBUGLO_DATALO(r32)                  _BFGET_(r32,31, 0)
    #define   SET32DBG_RX_DEBUGLO_DATALO(r32,v)                _BFSET_(r32,31, 0,v)

    #define     w32DBG_RX_DEBUGLO                              {\
            UNSG32 uDEBUGLO_DATALO                             : 32;\
          }
    union { UNSG32 u32DBG_RX_DEBUGLO;
            struct w32DBG_RX_DEBUGLO;
          };
    ///////////////////////////////////////////////////////////
    } SIE_DBG_RX;

    typedef union  T32DBG_RX_DBG
          { UNSG32 u32;
            struct w32DBG_RX_DBG;
                 } T32DBG_RX_DBG;
    typedef union  T32DBG_RX_DEBUGHI
          { UNSG32 u32;
            struct w32DBG_RX_DEBUGHI;
                 } T32DBG_RX_DEBUGHI;
    typedef union  T32DBG_RX_DEBUGLO
          { UNSG32 u32;
            struct w32DBG_RX_DEBUGLO;
                 } T32DBG_RX_DEBUGLO;
    ///////////////////////////////////////////////////////////

    typedef union  TDBG_RX_DBG
          { UNSG32 u32[1];
            struct {
            struct w32DBG_RX_DBG;
                   };
                 } TDBG_RX_DBG;
    typedef union  TDBG_RX_DEBUGHI
          { UNSG32 u32[1];
            struct {
            struct w32DBG_RX_DEBUGHI;
                   };
                 } TDBG_RX_DEBUGHI;
    typedef union  TDBG_RX_DEBUGLO
          { UNSG32 u32[1];
            struct {
            struct w32DBG_RX_DEBUGLO;
                   };
                 } TDBG_RX_DEBUGLO;

    ///////////////////////////////////////////////////////////
     SIGN32 DBG_RX_drvrd(SIE_DBG_RX *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DBG_RX_drvwr(SIE_DBG_RX *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DBG_RX_reset(SIE_DBG_RX *p);
     SIGN32 DBG_RX_cmp  (SIE_DBG_RX *p, SIE_DBG_RX *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DBG_RX_check(p,pie,pfx,hLOG) DBG_RX_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DBG_RX_print(p,    pfx,hLOG) DBG_RX_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DBG_RX
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE ACLK                    biu              (4,4)
///     ###
///     * Audio Port Control registers
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 ACLK_CTRL            (P)
///               ###
///               * Audio Port Control register
///               ###
///               %unsigned 1  clk_Enable                0x0
///                                    ###
///                                    * Clock Enable
///                                    ###
///                                    : DISABLE                   0x0
///                                    : ENABLE                    0x1
///               %unsigned 2  src_sel                   0x0
///                                    ###
///                                    * Source Clock Selection
///                                    * 0: APLL-0 is used as clock source
///                                    * 1: APLL-1 is used as clock source
///                                    * 2: External MCLK is used as clock source
///                                    ###
///                                    : AVPLL_A3                  0x0
///                                    : AVPLL_A4                  0x1
///                                    : MCLK_EXT                  0x2
///               %unsigned 1  clkSwitch                 0x0
///                                    ###
///                                    * Clock Source Selection
///                                    * 0: use source clock
///                                    * 1: use divided clock (decided by clkD3Switch and clkSel)
///                                    ###
///                                    : SRC_CLK                   0x0
///                                    : DIV_CLK                   0x1
///               %unsigned 1  clkD3Switch               0x0
///                                    ###
///                                    * Divide Factor
///                                    * 0 : divide factor is decided by clkSwitch and clkSel
///                                    * 1: use divide by 3 clock when clkSwitch = 1
///                                    ###
///                                    : DIV_NOR                   0x0
///                                    : DIV_3                     0x1
///               %unsigned 3  clkSel                    0x0
///                                    ###
///                                    * Use the following divide factor if clkD3Switch=0
///                                    ###
///                                    : d2                        0x1
///                                    : d4                        0x2
///                                    : d6                        0x3
///                                    : d8                        0x4
///                                    : d12                       0x5
///               %unsigned 1  sw_sync_rst               0x1
///                                    ###
///                                    * Soft Reset to Audio Modules
///                                    ###
///                                    : ASSERT                    0x0
///                                    : DEASSERT                  0x1
///               %%        23         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       9b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ACLK
#define h_ACLK (){}

    #define     RA_ACLK_ACLK_CTRL                              0x0000

    #define     BA_ACLK_ACLK_CTRL_clk_Enable                   0x0000
    #define     B16ACLK_ACLK_CTRL_clk_Enable                   0x0000
    #define   LSb32ACLK_ACLK_CTRL_clk_Enable                      0
    #define   LSb16ACLK_ACLK_CTRL_clk_Enable                      0
    #define       bACLK_ACLK_CTRL_clk_Enable                   1
    #define   MSK32ACLK_ACLK_CTRL_clk_Enable                      0x00000001
    #define        ACLK_ACLK_CTRL_clk_Enable_DISABLE                        0x0
    #define        ACLK_ACLK_CTRL_clk_Enable_ENABLE                         0x1

    #define     BA_ACLK_ACLK_CTRL_src_sel                      0x0000
    #define     B16ACLK_ACLK_CTRL_src_sel                      0x0000
    #define   LSb32ACLK_ACLK_CTRL_src_sel                         1
    #define   LSb16ACLK_ACLK_CTRL_src_sel                         1
    #define       bACLK_ACLK_CTRL_src_sel                      2
    #define   MSK32ACLK_ACLK_CTRL_src_sel                         0x00000006
    #define        ACLK_ACLK_CTRL_src_sel_AVPLL_A3                          0x0
    #define        ACLK_ACLK_CTRL_src_sel_AVPLL_A4                          0x1
    #define        ACLK_ACLK_CTRL_src_sel_MCLK_EXT                          0x2

    #define     BA_ACLK_ACLK_CTRL_clkSwitch                    0x0000
    #define     B16ACLK_ACLK_CTRL_clkSwitch                    0x0000
    #define   LSb32ACLK_ACLK_CTRL_clkSwitch                       3
    #define   LSb16ACLK_ACLK_CTRL_clkSwitch                       3
    #define       bACLK_ACLK_CTRL_clkSwitch                    1
    #define   MSK32ACLK_ACLK_CTRL_clkSwitch                       0x00000008
    #define        ACLK_ACLK_CTRL_clkSwitch_SRC_CLK                         0x0
    #define        ACLK_ACLK_CTRL_clkSwitch_DIV_CLK                         0x1

    #define     BA_ACLK_ACLK_CTRL_clkD3Switch                  0x0000
    #define     B16ACLK_ACLK_CTRL_clkD3Switch                  0x0000
    #define   LSb32ACLK_ACLK_CTRL_clkD3Switch                     4
    #define   LSb16ACLK_ACLK_CTRL_clkD3Switch                     4
    #define       bACLK_ACLK_CTRL_clkD3Switch                  1
    #define   MSK32ACLK_ACLK_CTRL_clkD3Switch                     0x00000010
    #define        ACLK_ACLK_CTRL_clkD3Switch_DIV_NOR                       0x0
    #define        ACLK_ACLK_CTRL_clkD3Switch_DIV_3                         0x1

    #define     BA_ACLK_ACLK_CTRL_clkSel                       0x0000
    #define     B16ACLK_ACLK_CTRL_clkSel                       0x0000
    #define   LSb32ACLK_ACLK_CTRL_clkSel                          5
    #define   LSb16ACLK_ACLK_CTRL_clkSel                          5
    #define       bACLK_ACLK_CTRL_clkSel                       3
    #define   MSK32ACLK_ACLK_CTRL_clkSel                          0x000000E0
    #define        ACLK_ACLK_CTRL_clkSel_d2                                 0x1
    #define        ACLK_ACLK_CTRL_clkSel_d4                                 0x2
    #define        ACLK_ACLK_CTRL_clkSel_d6                                 0x3
    #define        ACLK_ACLK_CTRL_clkSel_d8                                 0x4
    #define        ACLK_ACLK_CTRL_clkSel_d12                                0x5

    #define     BA_ACLK_ACLK_CTRL_sw_sync_rst                  0x0001
    #define     B16ACLK_ACLK_CTRL_sw_sync_rst                  0x0000
    #define   LSb32ACLK_ACLK_CTRL_sw_sync_rst                     8
    #define   LSb16ACLK_ACLK_CTRL_sw_sync_rst                     8
    #define       bACLK_ACLK_CTRL_sw_sync_rst                  1
    #define   MSK32ACLK_ACLK_CTRL_sw_sync_rst                     0x00000100
    #define        ACLK_ACLK_CTRL_sw_sync_rst_ASSERT                        0x0
    #define        ACLK_ACLK_CTRL_sw_sync_rst_DEASSERT                      0x1
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ACLK {
    ///////////////////////////////////////////////////////////
    #define   GET32ACLK_ACLK_CTRL_clk_Enable(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ACLK_ACLK_CTRL_clk_Enable(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ACLK_ACLK_CTRL_clk_Enable(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ACLK_ACLK_CTRL_clk_Enable(r16,v)            _BFSET_(r16, 0, 0,v)

    #define   GET32ACLK_ACLK_CTRL_src_sel(r32)                 _BFGET_(r32, 2, 1)
    #define   SET32ACLK_ACLK_CTRL_src_sel(r32,v)               _BFSET_(r32, 2, 1,v)
    #define   GET16ACLK_ACLK_CTRL_src_sel(r16)                 _BFGET_(r16, 2, 1)
    #define   SET16ACLK_ACLK_CTRL_src_sel(r16,v)               _BFSET_(r16, 2, 1,v)

    #define   GET32ACLK_ACLK_CTRL_clkSwitch(r32)               _BFGET_(r32, 3, 3)
    #define   SET32ACLK_ACLK_CTRL_clkSwitch(r32,v)             _BFSET_(r32, 3, 3,v)
    #define   GET16ACLK_ACLK_CTRL_clkSwitch(r16)               _BFGET_(r16, 3, 3)
    #define   SET16ACLK_ACLK_CTRL_clkSwitch(r16,v)             _BFSET_(r16, 3, 3,v)

    #define   GET32ACLK_ACLK_CTRL_clkD3Switch(r32)             _BFGET_(r32, 4, 4)
    #define   SET32ACLK_ACLK_CTRL_clkD3Switch(r32,v)           _BFSET_(r32, 4, 4,v)
    #define   GET16ACLK_ACLK_CTRL_clkD3Switch(r16)             _BFGET_(r16, 4, 4)
    #define   SET16ACLK_ACLK_CTRL_clkD3Switch(r16,v)           _BFSET_(r16, 4, 4,v)

    #define   GET32ACLK_ACLK_CTRL_clkSel(r32)                  _BFGET_(r32, 7, 5)
    #define   SET32ACLK_ACLK_CTRL_clkSel(r32,v)                _BFSET_(r32, 7, 5,v)
    #define   GET16ACLK_ACLK_CTRL_clkSel(r16)                  _BFGET_(r16, 7, 5)
    #define   SET16ACLK_ACLK_CTRL_clkSel(r16,v)                _BFSET_(r16, 7, 5,v)

    #define   GET32ACLK_ACLK_CTRL_sw_sync_rst(r32)             _BFGET_(r32, 8, 8)
    #define   SET32ACLK_ACLK_CTRL_sw_sync_rst(r32,v)           _BFSET_(r32, 8, 8,v)
    #define   GET16ACLK_ACLK_CTRL_sw_sync_rst(r16)             _BFGET_(r16, 8, 8)
    #define   SET16ACLK_ACLK_CTRL_sw_sync_rst(r16,v)           _BFSET_(r16, 8, 8,v)

    #define     w32ACLK_ACLK_CTRL                              {\
            UNSG32 uACLK_CTRL_clk_Enable                       :  1;\
            UNSG32 uACLK_CTRL_src_sel                          :  2;\
            UNSG32 uACLK_CTRL_clkSwitch                        :  1;\
            UNSG32 uACLK_CTRL_clkD3Switch                      :  1;\
            UNSG32 uACLK_CTRL_clkSel                           :  3;\
            UNSG32 uACLK_CTRL_sw_sync_rst                      :  1;\
            UNSG32 RSVDx0_b9                                   : 23;\
          }
    union { UNSG32 u32ACLK_ACLK_CTRL;
            struct w32ACLK_ACLK_CTRL;
          };
    ///////////////////////////////////////////////////////////
    } SIE_ACLK;

    typedef union  T32ACLK_ACLK_CTRL
          { UNSG32 u32;
            struct w32ACLK_ACLK_CTRL;
                 } T32ACLK_ACLK_CTRL;
    ///////////////////////////////////////////////////////////

    typedef union  TACLK_ACLK_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32ACLK_ACLK_CTRL;
                   };
                 } TACLK_ACLK_CTRL;

    ///////////////////////////////////////////////////////////
     SIGN32 ACLK_drvrd(SIE_ACLK *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ACLK_drvwr(SIE_ACLK *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ACLK_reset(SIE_ACLK *p);
     SIGN32 ACLK_cmp  (SIE_ACLK *p, SIE_ACLK *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ACLK_check(p,pie,pfx,hLOG) ACLK_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ACLK_print(p,    pfx,hLOG) ACLK_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ACLK
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE DMIC_CLK                biu              (4,4)
///     ###
///     * DMIC Clock Control Register
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 DMIC_Reset           (P)
///               %unsigned 1  Reset                     0x1
///                                    ###
///                                    * Software reset for DMIC
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00004 DMIC_Core_Clock_Config (P)
///               ###
///               * DMIC Core Clock Configuration
///               ###
///               %unsigned 1  Source_Sel                0x0
///                                    ###
///                                    * 0: Select APLL0 output as source clock. 1: Select APLL1 output as source clock.
///                                    ###
///               %unsigned 1  Source_En                 0x0
///                                    ###
///                                    * 0: Disable source clock. 1: Enable source clock
///                                    ###
///               %unsigned 10 Divider                   0x5
///                                    ###
///                                    * clock divider(default 294.912/49.152=6). Value = Divider + 1
///                                    ###
///               %unsigned 1  Enable_A                  0x0
///                                    ###
///                                    * 0: Disable clock. 1: Enable clock
///                                    ###
///               %unsigned 1  Enable_B                  0x0
///                                    ###
///                                    * 0: Disable clock. 1: Enable clock
///                                    ###
///               %unsigned 1  Enable_C                  0x0
///                                    ###
///                                    * 0: Disable clock. 1: Enable clock
///                                    ###
///               %unsigned 1  Enable_D                  0x0
///                                    ###
///                                    * 0: Disable clock. 1: Enable clock
///                                    ###
///               %unsigned 1  Enable_All                0x0
///                                    ###
///                                    * 0: Disable clock. 1: Enable clock. The software program Enable_A,B,C, D first, then set this bit, so the clock will start on same  time(cycle match) (if Enable_D is sync mode; other mode are not inflect by this bit.)
///                                    ###
///               %%        15         # Stuffing bits...
///     @ 0x00008 DMIC_EXTIFABC_Clock_Config (P)
///               %unsigned 10 DividerM                  0x32
///                                    ###
///                                    * clock divider Value = DividerM + DividerN/ DividerP
///                                    ###
///               %unsigned 5  DividerN                  0x0
///                                    ###
///                                    * clock divider Value = Divider
///                                    ###
///               %unsigned 5  DividerP                  0x0
///                                    ###
///                                    * clock divider Value = Divider
///                                    ###
///               %%        12         # Stuffing bits...
///     @ 0x0000C DMIC_EXTIFD_Clock_Config (P)
///               %unsigned 10 DividerM                  0x32
///                                    ###
///                                    * clock divider Value = DividerM + DividerN/ DividerP
///                                    ###
///               %unsigned 5  DividerN                  0x0
///                                    ###
///                                    * clock divider Value = DividerN
///                                    ###
///               %unsigned 5  DividerP                  0x0
///                                    ###
///                                    * clock divider Value = DividerP
///                                    ###
///               %unsigned 1  ABCClk_Select             0x1
///                                    ###
///                                    * Channel D use channel ABC clock configuration when it is set. The Dividerx of channel D are not valid when it’s set.
///                                    ###
///               %%        11         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:      59b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DMIC_CLK
#define h_DMIC_CLK (){}

    #define     RA_DMIC_CLK_DMIC_Reset                         0x0000

    #define     BA_DMIC_CLK_DMIC_Reset_Reset                   0x0000
    #define     B16DMIC_CLK_DMIC_Reset_Reset                   0x0000
    #define   LSb32DMIC_CLK_DMIC_Reset_Reset                      0
    #define   LSb16DMIC_CLK_DMIC_Reset_Reset                      0
    #define       bDMIC_CLK_DMIC_Reset_Reset                   1
    #define   MSK32DMIC_CLK_DMIC_Reset_Reset                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_DMIC_CLK_DMIC_Core_Clock_Config             0x0004

    #define     BA_DMIC_CLK_DMIC_Core_Clock_Config_Source_Sel  0x0004
    #define     B16DMIC_CLK_DMIC_Core_Clock_Config_Source_Sel  0x0004
    #define   LSb32DMIC_CLK_DMIC_Core_Clock_Config_Source_Sel     0
    #define   LSb16DMIC_CLK_DMIC_Core_Clock_Config_Source_Sel     0
    #define       bDMIC_CLK_DMIC_Core_Clock_Config_Source_Sel  1
    #define   MSK32DMIC_CLK_DMIC_Core_Clock_Config_Source_Sel     0x00000001

    #define     BA_DMIC_CLK_DMIC_Core_Clock_Config_Source_En   0x0004
    #define     B16DMIC_CLK_DMIC_Core_Clock_Config_Source_En   0x0004
    #define   LSb32DMIC_CLK_DMIC_Core_Clock_Config_Source_En      1
    #define   LSb16DMIC_CLK_DMIC_Core_Clock_Config_Source_En      1
    #define       bDMIC_CLK_DMIC_Core_Clock_Config_Source_En   1
    #define   MSK32DMIC_CLK_DMIC_Core_Clock_Config_Source_En      0x00000002

    #define     BA_DMIC_CLK_DMIC_Core_Clock_Config_Divider     0x0004
    #define     B16DMIC_CLK_DMIC_Core_Clock_Config_Divider     0x0004
    #define   LSb32DMIC_CLK_DMIC_Core_Clock_Config_Divider        2
    #define   LSb16DMIC_CLK_DMIC_Core_Clock_Config_Divider        2
    #define       bDMIC_CLK_DMIC_Core_Clock_Config_Divider     10
    #define   MSK32DMIC_CLK_DMIC_Core_Clock_Config_Divider        0x00000FFC

    #define     BA_DMIC_CLK_DMIC_Core_Clock_Config_Enable_A    0x0005
    #define     B16DMIC_CLK_DMIC_Core_Clock_Config_Enable_A    0x0004
    #define   LSb32DMIC_CLK_DMIC_Core_Clock_Config_Enable_A       12
    #define   LSb16DMIC_CLK_DMIC_Core_Clock_Config_Enable_A       12
    #define       bDMIC_CLK_DMIC_Core_Clock_Config_Enable_A    1
    #define   MSK32DMIC_CLK_DMIC_Core_Clock_Config_Enable_A       0x00001000

    #define     BA_DMIC_CLK_DMIC_Core_Clock_Config_Enable_B    0x0005
    #define     B16DMIC_CLK_DMIC_Core_Clock_Config_Enable_B    0x0004
    #define   LSb32DMIC_CLK_DMIC_Core_Clock_Config_Enable_B       13
    #define   LSb16DMIC_CLK_DMIC_Core_Clock_Config_Enable_B       13
    #define       bDMIC_CLK_DMIC_Core_Clock_Config_Enable_B    1
    #define   MSK32DMIC_CLK_DMIC_Core_Clock_Config_Enable_B       0x00002000

    #define     BA_DMIC_CLK_DMIC_Core_Clock_Config_Enable_C    0x0005
    #define     B16DMIC_CLK_DMIC_Core_Clock_Config_Enable_C    0x0004
    #define   LSb32DMIC_CLK_DMIC_Core_Clock_Config_Enable_C       14
    #define   LSb16DMIC_CLK_DMIC_Core_Clock_Config_Enable_C       14
    #define       bDMIC_CLK_DMIC_Core_Clock_Config_Enable_C    1
    #define   MSK32DMIC_CLK_DMIC_Core_Clock_Config_Enable_C       0x00004000

    #define     BA_DMIC_CLK_DMIC_Core_Clock_Config_Enable_D    0x0005
    #define     B16DMIC_CLK_DMIC_Core_Clock_Config_Enable_D    0x0004
    #define   LSb32DMIC_CLK_DMIC_Core_Clock_Config_Enable_D       15
    #define   LSb16DMIC_CLK_DMIC_Core_Clock_Config_Enable_D       15
    #define       bDMIC_CLK_DMIC_Core_Clock_Config_Enable_D    1
    #define   MSK32DMIC_CLK_DMIC_Core_Clock_Config_Enable_D       0x00008000

    #define     BA_DMIC_CLK_DMIC_Core_Clock_Config_Enable_All  0x0006
    #define     B16DMIC_CLK_DMIC_Core_Clock_Config_Enable_All  0x0006
    #define   LSb32DMIC_CLK_DMIC_Core_Clock_Config_Enable_All     16
    #define   LSb16DMIC_CLK_DMIC_Core_Clock_Config_Enable_All     0
    #define       bDMIC_CLK_DMIC_Core_Clock_Config_Enable_All  1
    #define   MSK32DMIC_CLK_DMIC_Core_Clock_Config_Enable_All     0x00010000
    ///////////////////////////////////////////////////////////
    #define     RA_DMIC_CLK_DMIC_EXTIFABC_Clock_Config         0x0008

    #define     BA_DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerM 0x0008
    #define     B16DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerM 0x0008
    #define   LSb32DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerM    0
    #define   LSb16DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerM    0
    #define       bDMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerM 10
    #define   MSK32DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerM    0x000003FF

    #define     BA_DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerN 0x0009
    #define     B16DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerN 0x0008
    #define   LSb32DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerN    10
    #define   LSb16DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerN    10
    #define       bDMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerN 5
    #define   MSK32DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerN    0x00007C00

    #define     BA_DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerP 0x0009
    #define     B16DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerP 0x0008
    #define   LSb32DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerP    15
    #define   LSb16DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerP    15
    #define       bDMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerP 5
    #define   MSK32DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerP    0x000F8000
    ///////////////////////////////////////////////////////////
    #define     RA_DMIC_CLK_DMIC_EXTIFD_Clock_Config           0x000C

    #define     BA_DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerM  0x000C
    #define     B16DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerM  0x000C
    #define   LSb32DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerM     0
    #define   LSb16DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerM     0
    #define       bDMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerM  10
    #define   MSK32DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerM     0x000003FF

    #define     BA_DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerN  0x000D
    #define     B16DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerN  0x000C
    #define   LSb32DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerN     10
    #define   LSb16DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerN     10
    #define       bDMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerN  5
    #define   MSK32DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerN     0x00007C00

    #define     BA_DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerP  0x000D
    #define     B16DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerP  0x000C
    #define   LSb32DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerP     15
    #define   LSb16DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerP     15
    #define       bDMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerP  5
    #define   MSK32DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerP     0x000F8000

    #define     BA_DMIC_CLK_DMIC_EXTIFD_Clock_Config_ABCClk_Select 0x000E
    #define     B16DMIC_CLK_DMIC_EXTIFD_Clock_Config_ABCClk_Select 0x000E
    #define   LSb32DMIC_CLK_DMIC_EXTIFD_Clock_Config_ABCClk_Select    20
    #define   LSb16DMIC_CLK_DMIC_EXTIFD_Clock_Config_ABCClk_Select    4
    #define       bDMIC_CLK_DMIC_EXTIFD_Clock_Config_ABCClk_Select 1
    #define   MSK32DMIC_CLK_DMIC_EXTIFD_Clock_Config_ABCClk_Select    0x00100000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DMIC_CLK {
    ///////////////////////////////////////////////////////////
    #define   GET32DMIC_CLK_DMIC_Reset_Reset(r32)              _BFGET_(r32, 0, 0)
    #define   SET32DMIC_CLK_DMIC_Reset_Reset(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16DMIC_CLK_DMIC_Reset_Reset(r16)              _BFGET_(r16, 0, 0)
    #define   SET16DMIC_CLK_DMIC_Reset_Reset(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32DMIC_CLK_DMIC_Reset                         {\
            UNSG32 uDMIC_Reset_Reset                           :  1;\
            UNSG32 RSVDx0_b1                                   : 31;\
          }
    union { UNSG32 u32DMIC_CLK_DMIC_Reset;
            struct w32DMIC_CLK_DMIC_Reset;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DMIC_CLK_DMIC_Core_Clock_Config_Source_Sel(r32) _BFGET_(r32, 0, 0)
    #define   SET32DMIC_CLK_DMIC_Core_Clock_Config_Source_Sel(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16DMIC_CLK_DMIC_Core_Clock_Config_Source_Sel(r16) _BFGET_(r16, 0, 0)
    #define   SET16DMIC_CLK_DMIC_Core_Clock_Config_Source_Sel(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32DMIC_CLK_DMIC_Core_Clock_Config_Source_En(r32) _BFGET_(r32, 1, 1)
    #define   SET32DMIC_CLK_DMIC_Core_Clock_Config_Source_En(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16DMIC_CLK_DMIC_Core_Clock_Config_Source_En(r16) _BFGET_(r16, 1, 1)
    #define   SET16DMIC_CLK_DMIC_Core_Clock_Config_Source_En(r16,v) _BFSET_(r16, 1, 1,v)

    #define   GET32DMIC_CLK_DMIC_Core_Clock_Config_Divider(r32) _BFGET_(r32,11, 2)
    #define   SET32DMIC_CLK_DMIC_Core_Clock_Config_Divider(r32,v) _BFSET_(r32,11, 2,v)
    #define   GET16DMIC_CLK_DMIC_Core_Clock_Config_Divider(r16) _BFGET_(r16,11, 2)
    #define   SET16DMIC_CLK_DMIC_Core_Clock_Config_Divider(r16,v) _BFSET_(r16,11, 2,v)

    #define   GET32DMIC_CLK_DMIC_Core_Clock_Config_Enable_A(r32) _BFGET_(r32,12,12)
    #define   SET32DMIC_CLK_DMIC_Core_Clock_Config_Enable_A(r32,v) _BFSET_(r32,12,12,v)
    #define   GET16DMIC_CLK_DMIC_Core_Clock_Config_Enable_A(r16) _BFGET_(r16,12,12)
    #define   SET16DMIC_CLK_DMIC_Core_Clock_Config_Enable_A(r16,v) _BFSET_(r16,12,12,v)

    #define   GET32DMIC_CLK_DMIC_Core_Clock_Config_Enable_B(r32) _BFGET_(r32,13,13)
    #define   SET32DMIC_CLK_DMIC_Core_Clock_Config_Enable_B(r32,v) _BFSET_(r32,13,13,v)
    #define   GET16DMIC_CLK_DMIC_Core_Clock_Config_Enable_B(r16) _BFGET_(r16,13,13)
    #define   SET16DMIC_CLK_DMIC_Core_Clock_Config_Enable_B(r16,v) _BFSET_(r16,13,13,v)

    #define   GET32DMIC_CLK_DMIC_Core_Clock_Config_Enable_C(r32) _BFGET_(r32,14,14)
    #define   SET32DMIC_CLK_DMIC_Core_Clock_Config_Enable_C(r32,v) _BFSET_(r32,14,14,v)
    #define   GET16DMIC_CLK_DMIC_Core_Clock_Config_Enable_C(r16) _BFGET_(r16,14,14)
    #define   SET16DMIC_CLK_DMIC_Core_Clock_Config_Enable_C(r16,v) _BFSET_(r16,14,14,v)

    #define   GET32DMIC_CLK_DMIC_Core_Clock_Config_Enable_D(r32) _BFGET_(r32,15,15)
    #define   SET32DMIC_CLK_DMIC_Core_Clock_Config_Enable_D(r32,v) _BFSET_(r32,15,15,v)
    #define   GET16DMIC_CLK_DMIC_Core_Clock_Config_Enable_D(r16) _BFGET_(r16,15,15)
    #define   SET16DMIC_CLK_DMIC_Core_Clock_Config_Enable_D(r16,v) _BFSET_(r16,15,15,v)

    #define   GET32DMIC_CLK_DMIC_Core_Clock_Config_Enable_All(r32) _BFGET_(r32,16,16)
    #define   SET32DMIC_CLK_DMIC_Core_Clock_Config_Enable_All(r32,v) _BFSET_(r32,16,16,v)
    #define   GET16DMIC_CLK_DMIC_Core_Clock_Config_Enable_All(r16) _BFGET_(r16, 0, 0)
    #define   SET16DMIC_CLK_DMIC_Core_Clock_Config_Enable_All(r16,v) _BFSET_(r16, 0, 0,v)

    #define     w32DMIC_CLK_DMIC_Core_Clock_Config             {\
            UNSG32 uDMIC_Core_Clock_Config_Source_Sel          :  1;\
            UNSG32 uDMIC_Core_Clock_Config_Source_En           :  1;\
            UNSG32 uDMIC_Core_Clock_Config_Divider             : 10;\
            UNSG32 uDMIC_Core_Clock_Config_Enable_A            :  1;\
            UNSG32 uDMIC_Core_Clock_Config_Enable_B            :  1;\
            UNSG32 uDMIC_Core_Clock_Config_Enable_C            :  1;\
            UNSG32 uDMIC_Core_Clock_Config_Enable_D            :  1;\
            UNSG32 uDMIC_Core_Clock_Config_Enable_All          :  1;\
            UNSG32 RSVDx4_b17                                  : 15;\
          }
    union { UNSG32 u32DMIC_CLK_DMIC_Core_Clock_Config;
            struct w32DMIC_CLK_DMIC_Core_Clock_Config;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerM(r32) _BFGET_(r32, 9, 0)
    #define   SET32DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerM(r32,v) _BFSET_(r32, 9, 0,v)
    #define   GET16DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerM(r16) _BFGET_(r16, 9, 0)
    #define   SET16DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerM(r16,v) _BFSET_(r16, 9, 0,v)

    #define   GET32DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerN(r32) _BFGET_(r32,14,10)
    #define   SET32DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerN(r32,v) _BFSET_(r32,14,10,v)
    #define   GET16DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerN(r16) _BFGET_(r16,14,10)
    #define   SET16DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerN(r16,v) _BFSET_(r16,14,10,v)

    #define   GET32DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerP(r32) _BFGET_(r32,19,15)
    #define   SET32DMIC_CLK_DMIC_EXTIFABC_Clock_Config_DividerP(r32,v) _BFSET_(r32,19,15,v)

    #define     w32DMIC_CLK_DMIC_EXTIFABC_Clock_Config         {\
            UNSG32 uDMIC_EXTIFABC_Clock_Config_DividerM        : 10;\
            UNSG32 uDMIC_EXTIFABC_Clock_Config_DividerN        :  5;\
            UNSG32 uDMIC_EXTIFABC_Clock_Config_DividerP        :  5;\
            UNSG32 RSVDx8_b20                                  : 12;\
          }
    union { UNSG32 u32DMIC_CLK_DMIC_EXTIFABC_Clock_Config;
            struct w32DMIC_CLK_DMIC_EXTIFABC_Clock_Config;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerM(r32) _BFGET_(r32, 9, 0)
    #define   SET32DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerM(r32,v) _BFSET_(r32, 9, 0,v)
    #define   GET16DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerM(r16) _BFGET_(r16, 9, 0)
    #define   SET16DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerM(r16,v) _BFSET_(r16, 9, 0,v)

    #define   GET32DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerN(r32) _BFGET_(r32,14,10)
    #define   SET32DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerN(r32,v) _BFSET_(r32,14,10,v)
    #define   GET16DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerN(r16) _BFGET_(r16,14,10)
    #define   SET16DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerN(r16,v) _BFSET_(r16,14,10,v)

    #define   GET32DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerP(r32) _BFGET_(r32,19,15)
    #define   SET32DMIC_CLK_DMIC_EXTIFD_Clock_Config_DividerP(r32,v) _BFSET_(r32,19,15,v)

    #define   GET32DMIC_CLK_DMIC_EXTIFD_Clock_Config_ABCClk_Select(r32) _BFGET_(r32,20,20)
    #define   SET32DMIC_CLK_DMIC_EXTIFD_Clock_Config_ABCClk_Select(r32,v) _BFSET_(r32,20,20,v)
    #define   GET16DMIC_CLK_DMIC_EXTIFD_Clock_Config_ABCClk_Select(r16) _BFGET_(r16, 4, 4)
    #define   SET16DMIC_CLK_DMIC_EXTIFD_Clock_Config_ABCClk_Select(r16,v) _BFSET_(r16, 4, 4,v)

    #define     w32DMIC_CLK_DMIC_EXTIFD_Clock_Config           {\
            UNSG32 uDMIC_EXTIFD_Clock_Config_DividerM          : 10;\
            UNSG32 uDMIC_EXTIFD_Clock_Config_DividerN          :  5;\
            UNSG32 uDMIC_EXTIFD_Clock_Config_DividerP          :  5;\
            UNSG32 uDMIC_EXTIFD_Clock_Config_ABCClk_Select     :  1;\
            UNSG32 RSVDxC_b21                                  : 11;\
          }
    union { UNSG32 u32DMIC_CLK_DMIC_EXTIFD_Clock_Config;
            struct w32DMIC_CLK_DMIC_EXTIFD_Clock_Config;
          };
    ///////////////////////////////////////////////////////////
    } SIE_DMIC_CLK;

    typedef union  T32DMIC_CLK_DMIC_Reset
          { UNSG32 u32;
            struct w32DMIC_CLK_DMIC_Reset;
                 } T32DMIC_CLK_DMIC_Reset;
    typedef union  T32DMIC_CLK_DMIC_Core_Clock_Config
          { UNSG32 u32;
            struct w32DMIC_CLK_DMIC_Core_Clock_Config;
                 } T32DMIC_CLK_DMIC_Core_Clock_Config;
    typedef union  T32DMIC_CLK_DMIC_EXTIFABC_Clock_Config
          { UNSG32 u32;
            struct w32DMIC_CLK_DMIC_EXTIFABC_Clock_Config;
                 } T32DMIC_CLK_DMIC_EXTIFABC_Clock_Config;
    typedef union  T32DMIC_CLK_DMIC_EXTIFD_Clock_Config
          { UNSG32 u32;
            struct w32DMIC_CLK_DMIC_EXTIFD_Clock_Config;
                 } T32DMIC_CLK_DMIC_EXTIFD_Clock_Config;
    ///////////////////////////////////////////////////////////

    typedef union  TDMIC_CLK_DMIC_Reset
          { UNSG32 u32[1];
            struct {
            struct w32DMIC_CLK_DMIC_Reset;
                   };
                 } TDMIC_CLK_DMIC_Reset;
    typedef union  TDMIC_CLK_DMIC_Core_Clock_Config
          { UNSG32 u32[1];
            struct {
            struct w32DMIC_CLK_DMIC_Core_Clock_Config;
                   };
                 } TDMIC_CLK_DMIC_Core_Clock_Config;
    typedef union  TDMIC_CLK_DMIC_EXTIFABC_Clock_Config
          { UNSG32 u32[1];
            struct {
            struct w32DMIC_CLK_DMIC_EXTIFABC_Clock_Config;
                   };
                 } TDMIC_CLK_DMIC_EXTIFABC_Clock_Config;
    typedef union  TDMIC_CLK_DMIC_EXTIFD_Clock_Config
          { UNSG32 u32[1];
            struct {
            struct w32DMIC_CLK_DMIC_EXTIFD_Clock_Config;
                   };
                 } TDMIC_CLK_DMIC_EXTIFD_Clock_Config;

    ///////////////////////////////////////////////////////////
     SIGN32 DMIC_CLK_drvrd(SIE_DMIC_CLK *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DMIC_CLK_drvwr(SIE_DMIC_CLK *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DMIC_CLK_reset(SIE_DMIC_CLK *p);
     SIGN32 DMIC_CLK_cmp  (SIE_DMIC_CLK *p, SIE_DMIC_CLK *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DMIC_CLK_check(p,pie,pfx,hLOG) DMIC_CLK_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DMIC_CLK_print(p,    pfx,hLOG) DMIC_CLK_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DMIC_CLK
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE SPDIF                   biu              (4,4)
///     ###
///     * S/PDIF Control registers
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CLKDIV               (P)
///               ###
///               * S/PDIF transmitter bit clock selection register to decide the output sampling rate
///               ###
///               %unsigned 4  SETTING                   0x2
///                                    ###
///                                    * MCLK Divider setting:
///                                    * 0 : Divide by 1
///                                    * 1: Divide by 2
///                                    * 2: Divide by 4 ( default)
///                                    * 3 : Divide by 8
///                                    * 4: Divide by 16
///                                    * 5: Divide by 32
///                                    * 6: Divide by 64
///                                    * 7: Divide by 128
///                                    * 8: Divide by 256
///                                    * 9: Divide by 512
///                                    * 10: Divide by 1024
///                                    ###
///                                    : DIV1                      0x0
///                                    : DIV2                      0x1
///                                    : DIV4                      0x2
///                                    : DIV8                      0x3
///                                    : DIV16                     0x4
///                                    : DIV32                     0x5
///                                    : DIV64                     0x6
///                                    : DIV128                    0x7
///                                    : DIV256                    0x8
///                                    : DIV512                    0x9
///                                    : DIV1024                   0xA
///               %%        28         # Stuffing bits...
///     @ 0x00004                      (P)
///     # 0x00004 SPDIF                
///               $AUDCH               SPDIF             REG          
///     @ 0x00008                      (P)
///     # 0x00008 DBG                  
///               $DBG_TX              DBG               REG          
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:      73b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SPDIF
#define h_SPDIF (){}

    #define     RA_SPDIF_CLKDIV                                0x0000

    #define     BA_SPDIF_CLKDIV_SETTING                        0x0000
    #define     B16SPDIF_CLKDIV_SETTING                        0x0000
    #define   LSb32SPDIF_CLKDIV_SETTING                           0
    #define   LSb16SPDIF_CLKDIV_SETTING                           0
    #define       bSPDIF_CLKDIV_SETTING                        4
    #define   MSK32SPDIF_CLKDIV_SETTING                           0x0000000F
    #define        SPDIF_CLKDIV_SETTING_DIV1                                0x0
    #define        SPDIF_CLKDIV_SETTING_DIV2                                0x1
    #define        SPDIF_CLKDIV_SETTING_DIV4                                0x2
    #define        SPDIF_CLKDIV_SETTING_DIV8                                0x3
    #define        SPDIF_CLKDIV_SETTING_DIV16                               0x4
    #define        SPDIF_CLKDIV_SETTING_DIV32                               0x5
    #define        SPDIF_CLKDIV_SETTING_DIV64                               0x6
    #define        SPDIF_CLKDIV_SETTING_DIV128                              0x7
    #define        SPDIF_CLKDIV_SETTING_DIV256                              0x8
    #define        SPDIF_CLKDIV_SETTING_DIV512                              0x9
    #define        SPDIF_CLKDIV_SETTING_DIV1024                             0xA
    ///////////////////////////////////////////////////////////
    #define     RA_SPDIF_SPDIF                                 0x0004
    ///////////////////////////////////////////////////////////
    #define     RA_SPDIF_DBG                                   0x0008
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SPDIF {
    ///////////////////////////////////////////////////////////
    #define   GET32SPDIF_CLKDIV_SETTING(r32)                   _BFGET_(r32, 3, 0)
    #define   SET32SPDIF_CLKDIV_SETTING(r32,v)                 _BFSET_(r32, 3, 0,v)
    #define   GET16SPDIF_CLKDIV_SETTING(r16)                   _BFGET_(r16, 3, 0)
    #define   SET16SPDIF_CLKDIV_SETTING(r16,v)                 _BFSET_(r16, 3, 0,v)

    #define     w32SPDIF_CLKDIV                                {\
            UNSG32 uCLKDIV_SETTING                             :  4;\
            UNSG32 RSVDx0_b4                                   : 28;\
          }
    union { UNSG32 u32SPDIF_CLKDIV;
            struct w32SPDIF_CLKDIV;
          };
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_SPDIF;
    ///////////////////////////////////////////////////////////
              SIE_DBG_TX                                       ie_DBG;
    ///////////////////////////////////////////////////////////
    } SIE_SPDIF;

    typedef union  T32SPDIF_CLKDIV
          { UNSG32 u32;
            struct w32SPDIF_CLKDIV;
                 } T32SPDIF_CLKDIV;
    ///////////////////////////////////////////////////////////

    typedef union  TSPDIF_CLKDIV
          { UNSG32 u32[1];
            struct {
            struct w32SPDIF_CLKDIV;
                   };
                 } TSPDIF_CLKDIV;

    ///////////////////////////////////////////////////////////
     SIGN32 SPDIF_drvrd(SIE_SPDIF *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SPDIF_drvwr(SIE_SPDIF *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SPDIF_reset(SIE_SPDIF *p);
     SIGN32 SPDIF_cmp  (SIE_SPDIF *p, SIE_SPDIF *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SPDIF_check(p,pie,pfx,hLOG) SPDIF_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SPDIF_print(p,    pfx,hLOG) SPDIF_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SPDIF
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE PRI                                      (4,4)
///     ###
///     * Audio Primary port Control registers – I2S1 TX
///     * – 2/4/6/8 Channel data (I2S/LJ/RJ) over x4 Lines
///     * – 2/4/6/8 Channel data (TDM) over x1 Line
///     * – 8 Channel data (TDM) over x2 Line (4Ch x1)
///     * Operating Modes Capability :
///     * – I2S MODE
///     * – LJ MODE
///     * – RJ MODE
///     * – TDM MODE (2/4/6/8 Channels x1 or x2)
///     * – PCM MONO MODE (Usage restricted as per NO requirement from System Team)
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 PRIAUD               
///               $PRIAUD              PRIAUD            REG          
///                                    ###
///                                    * Primary Port Channel 0 control register
///                                    ###
///     @ 0x0000C                      (P)
///     # 0x0000C TSD0_PRI             
///               $AUDCH               TSD0_PRI          REG          
///     @ 0x00010                      (P)
///     # 0x00010 TSD1_PRI             
///               $AUDCH               TSD1_PRI          REG          
///     @ 0x00014                      (P)
///     # 0x00014 TSD2_PRI             
///               $AUDCH               TSD2_PRI          REG          
///     @ 0x00018                      (P)
///     # 0x00018 TSD3_PRI             
///               $AUDCH               TSD3_PRI          REG          
///     @ 0x0001C                      (P)
///     # 0x0001C DBG                  
///               $DBG_TX              DBG               REG          
///     @ 0x00024 PRIPORT              (P)
///               %unsigned 1  ENABLE                    0x0
///                                    ###
///                                    * Register bit to enable or disable the whole Primary Audio port:
///                                    * 0: Disabled (default)
///                                    * 1: Enabled
///                                    * Note: User can selects the desired number of audio channels within the primary port by setting the corresponding enable bits for Channel 0/1/2/3
///                                    ###
///                                    : DISABLE                   0x0
///                                    : ENABLE                    0x1
///               %unsigned 1  IDLE0_AOUT_ON             0x0
///                                    ###
///                                    * Bit is used to enable the support of sending 0 data on outgoing data lines (SD) when IDLE0_AOUT = 1. This bit can be kept permanently high, if SW wants this feature.
///                                    ###
///               %unsigned 1  IDLE0_AOUT                0x0
///                                    ###
///                                    * If the support for sending 0 data on SD line is active, SW can set this control bit to 1 when it wants HW to send 0 data on Primary SD line
///                                    ###
///               %unsigned 1  DHUB_CLR                  0x0
///                                    ###
///                                    * SW can set this bit to 1, if it wants HW to read out all the data of current transfer from DHUB while it's sending 0 data (IDLE0_AOUT_ON == 1 and IDLE0_AOUT == 1) on SD lines or while transmission is stopped on SD lines (ENABLE = 0). After all data are read out from DHUB, SW has to clear this bit to 0.
///                                    * Programming sequence for IDLE0_AOUT + DHUB_CLR:
///                                    * (IDLE0_AOUT_ON = 1) → (DHUB_CLR = 1) → (IDLE0_AOUT = 1) → HW completes reading all data from DHUB → (DHUB_CLR = 0) → (IDLE0_AOUT = 0)
///                                    * Programming sequence for !ENABLE + DHUB_CLR:
///                                    * (DHUB_CLR = 1) → (ENABLE = 0) → HW completes reading all data from DHUB → (DHUB_CLR = 0) → (ENABLE = 1)
///                                    ###
///               %unsigned 1  XMTOFF_EN                 0x1
///                                    ###
///                                    * ONLY FOR INTERNAL USE. KEEP IT 1
///                                    ###
///               %unsigned 1  APKT_ON                   0x0
///                                    ###
///                                    * Set to 1 to enable the feature of scheduled initiation of transmission based Audio Playback Kickoff Timer. PRIPORT.ENABLE will come in effect only when Audio Timer (ATR) reaches up to APKT value.
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x00028 APKT                 (P)
///               %unsigned 32 VAL                       0xFFFFFFFF
///                                    ###
///                                    * Write timer value when transmission start is to be scheduled. PRIPORT.ENABLE will come in effect only when Audio Timer (ATR) reaches up to APKT value. This register should only be written when transmission is off (PRIPORT.ENABLE=0) and it is mandatory to write this register before starting transmission (PRIPORT.ENABLE=1). SW must first read current value of Audio Timer (ATR) and configure the APKT.VAL that's significantly ahead of the ATR value.
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      44B, bits:     170b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_PRI
#define h_PRI (){}

    #define     RA_PRI_PRIAUD                                  0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_PRI_TSD0_PRI                                0x000C
    ///////////////////////////////////////////////////////////
    #define     RA_PRI_TSD1_PRI                                0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_PRI_TSD2_PRI                                0x0014
    ///////////////////////////////////////////////////////////
    #define     RA_PRI_TSD3_PRI                                0x0018
    ///////////////////////////////////////////////////////////
    #define     RA_PRI_DBG                                     0x001C
    ///////////////////////////////////////////////////////////
    #define     RA_PRI_PRIPORT                                 0x0024

    #define     BA_PRI_PRIPORT_ENABLE                          0x0024
    #define     B16PRI_PRIPORT_ENABLE                          0x0024
    #define   LSb32PRI_PRIPORT_ENABLE                             0
    #define   LSb16PRI_PRIPORT_ENABLE                             0
    #define       bPRI_PRIPORT_ENABLE                          1
    #define   MSK32PRI_PRIPORT_ENABLE                             0x00000001
    #define        PRI_PRIPORT_ENABLE_DISABLE                               0x0
    #define        PRI_PRIPORT_ENABLE_ENABLE                                0x1

    #define     BA_PRI_PRIPORT_IDLE0_AOUT_ON                   0x0024
    #define     B16PRI_PRIPORT_IDLE0_AOUT_ON                   0x0024
    #define   LSb32PRI_PRIPORT_IDLE0_AOUT_ON                      1
    #define   LSb16PRI_PRIPORT_IDLE0_AOUT_ON                      1
    #define       bPRI_PRIPORT_IDLE0_AOUT_ON                   1
    #define   MSK32PRI_PRIPORT_IDLE0_AOUT_ON                      0x00000002

    #define     BA_PRI_PRIPORT_IDLE0_AOUT                      0x0024
    #define     B16PRI_PRIPORT_IDLE0_AOUT                      0x0024
    #define   LSb32PRI_PRIPORT_IDLE0_AOUT                         2
    #define   LSb16PRI_PRIPORT_IDLE0_AOUT                         2
    #define       bPRI_PRIPORT_IDLE0_AOUT                      1
    #define   MSK32PRI_PRIPORT_IDLE0_AOUT                         0x00000004

    #define     BA_PRI_PRIPORT_DHUB_CLR                        0x0024
    #define     B16PRI_PRIPORT_DHUB_CLR                        0x0024
    #define   LSb32PRI_PRIPORT_DHUB_CLR                           3
    #define   LSb16PRI_PRIPORT_DHUB_CLR                           3
    #define       bPRI_PRIPORT_DHUB_CLR                        1
    #define   MSK32PRI_PRIPORT_DHUB_CLR                           0x00000008

    #define     BA_PRI_PRIPORT_XMTOFF_EN                       0x0024
    #define     B16PRI_PRIPORT_XMTOFF_EN                       0x0024
    #define   LSb32PRI_PRIPORT_XMTOFF_EN                          4
    #define   LSb16PRI_PRIPORT_XMTOFF_EN                          4
    #define       bPRI_PRIPORT_XMTOFF_EN                       1
    #define   MSK32PRI_PRIPORT_XMTOFF_EN                          0x00000010

    #define     BA_PRI_PRIPORT_APKT_ON                         0x0024
    #define     B16PRI_PRIPORT_APKT_ON                         0x0024
    #define   LSb32PRI_PRIPORT_APKT_ON                            5
    #define   LSb16PRI_PRIPORT_APKT_ON                            5
    #define       bPRI_PRIPORT_APKT_ON                         1
    #define   MSK32PRI_PRIPORT_APKT_ON                            0x00000020
    ///////////////////////////////////////////////////////////
    #define     RA_PRI_APKT                                    0x0028

    #define     BA_PRI_APKT_VAL                                0x0028
    #define     B16PRI_APKT_VAL                                0x0028
    #define   LSb32PRI_APKT_VAL                                   0
    #define   LSb16PRI_APKT_VAL                                   0
    #define       bPRI_APKT_VAL                                32
    #define   MSK32PRI_APKT_VAL                                   0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_PRI {
    ///////////////////////////////////////////////////////////
              SIE_PRIAUD                                       ie_PRIAUD;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_TSD0_PRI;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_TSD1_PRI;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_TSD2_PRI;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_TSD3_PRI;
    ///////////////////////////////////////////////////////////
              SIE_DBG_TX                                       ie_DBG;
    ///////////////////////////////////////////////////////////
    #define   GET32PRI_PRIPORT_ENABLE(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32PRI_PRIPORT_ENABLE(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16PRI_PRIPORT_ENABLE(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16PRI_PRIPORT_ENABLE(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define   GET32PRI_PRIPORT_IDLE0_AOUT_ON(r32)              _BFGET_(r32, 1, 1)
    #define   SET32PRI_PRIPORT_IDLE0_AOUT_ON(r32,v)            _BFSET_(r32, 1, 1,v)
    #define   GET16PRI_PRIPORT_IDLE0_AOUT_ON(r16)              _BFGET_(r16, 1, 1)
    #define   SET16PRI_PRIPORT_IDLE0_AOUT_ON(r16,v)            _BFSET_(r16, 1, 1,v)

    #define   GET32PRI_PRIPORT_IDLE0_AOUT(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32PRI_PRIPORT_IDLE0_AOUT(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16PRI_PRIPORT_IDLE0_AOUT(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16PRI_PRIPORT_IDLE0_AOUT(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32PRI_PRIPORT_DHUB_CLR(r32)                   _BFGET_(r32, 3, 3)
    #define   SET32PRI_PRIPORT_DHUB_CLR(r32,v)                 _BFSET_(r32, 3, 3,v)
    #define   GET16PRI_PRIPORT_DHUB_CLR(r16)                   _BFGET_(r16, 3, 3)
    #define   SET16PRI_PRIPORT_DHUB_CLR(r16,v)                 _BFSET_(r16, 3, 3,v)

    #define   GET32PRI_PRIPORT_XMTOFF_EN(r32)                  _BFGET_(r32, 4, 4)
    #define   SET32PRI_PRIPORT_XMTOFF_EN(r32,v)                _BFSET_(r32, 4, 4,v)
    #define   GET16PRI_PRIPORT_XMTOFF_EN(r16)                  _BFGET_(r16, 4, 4)
    #define   SET16PRI_PRIPORT_XMTOFF_EN(r16,v)                _BFSET_(r16, 4, 4,v)

    #define   GET32PRI_PRIPORT_APKT_ON(r32)                    _BFGET_(r32, 5, 5)
    #define   SET32PRI_PRIPORT_APKT_ON(r32,v)                  _BFSET_(r32, 5, 5,v)
    #define   GET16PRI_PRIPORT_APKT_ON(r16)                    _BFGET_(r16, 5, 5)
    #define   SET16PRI_PRIPORT_APKT_ON(r16,v)                  _BFSET_(r16, 5, 5,v)

    #define     w32PRI_PRIPORT                                 {\
            UNSG32 uPRIPORT_ENABLE                             :  1;\
            UNSG32 uPRIPORT_IDLE0_AOUT_ON                      :  1;\
            UNSG32 uPRIPORT_IDLE0_AOUT                         :  1;\
            UNSG32 uPRIPORT_DHUB_CLR                           :  1;\
            UNSG32 uPRIPORT_XMTOFF_EN                          :  1;\
            UNSG32 uPRIPORT_APKT_ON                            :  1;\
            UNSG32 RSVDx24_b6                                  : 26;\
          }
    union { UNSG32 u32PRI_PRIPORT;
            struct w32PRI_PRIPORT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32PRI_APKT_VAL(r32)                           _BFGET_(r32,31, 0)
    #define   SET32PRI_APKT_VAL(r32,v)                         _BFSET_(r32,31, 0,v)

    #define     w32PRI_APKT                                    {\
            UNSG32 uAPKT_VAL                                   : 32;\
          }
    union { UNSG32 u32PRI_APKT;
            struct w32PRI_APKT;
          };
    ///////////////////////////////////////////////////////////
    } SIE_PRI;

    typedef union  T32PRI_PRIPORT
          { UNSG32 u32;
            struct w32PRI_PRIPORT;
                 } T32PRI_PRIPORT;
    typedef union  T32PRI_APKT
          { UNSG32 u32;
            struct w32PRI_APKT;
                 } T32PRI_APKT;
    ///////////////////////////////////////////////////////////

    typedef union  TPRI_PRIPORT
          { UNSG32 u32[1];
            struct {
            struct w32PRI_PRIPORT;
                   };
                 } TPRI_PRIPORT;
    typedef union  TPRI_APKT
          { UNSG32 u32[1];
            struct {
            struct w32PRI_APKT;
                   };
                 } TPRI_APKT;

    ///////////////////////////////////////////////////////////
     SIGN32 PRI_drvrd(SIE_PRI *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 PRI_drvwr(SIE_PRI *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void PRI_reset(SIE_PRI *p);
     SIGN32 PRI_cmp  (SIE_PRI *p, SIE_PRI *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define PRI_check(p,pie,pfx,hLOG) PRI_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define PRI_print(p,    pfx,hLOG) PRI_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: PRI
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE SEC                                      (4,4)
///     ###
///     * Audio Secondary port Control registers – I2S3 TX
///     * – 2 Channel data (I2S/LJ/RJ) over x1 Lines
///     * – 2/4/6/8 Channel data (TDM)         over x1 Line
///     * – Mono Channel data (PCM)         over x1 Line
///     * Operating Modes Capability :
///     * – I2S MODE
///     * – LJ MODE
///     * – RJ MODE
///     * – TDM MODE (2/4/6/8 Channels x1)
///     * – PCM MONO MODE
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 SECAUD               
///               $PRIAUD              SECAUD            REG          
///                                    ###
///                                    * Primary Port Channel 0 control register
///                                    ###
///     @ 0x0000C                      (P)
///     # 0x0000C TSD0_SEC             
///               $AUDCH               TSD0_SEC          REG          
///     @ 0x00010                      (P)
///     # 0x00010 DBG                  
///               $DBG_TX              DBG               REG          
///     @ 0x00018 SECPORT              (P)
///               %unsigned 1  ENABLE                    0x0
///                                    ###
///                                    * Register bit to enable or disable the whole Primary Audio port:
///                                    * 0: Disabled (default)
///                                    * 1: Enabled
///                                    * Note: User can selects the desired number of audio channels within the primary port by setting the corresponding enable bits for Channel 0/1/2/3
///                                    ###
///                                    : DISABLE                   0x0
///                                    : ENABLE                    0x1
///               %unsigned 1  IDLE0_AOUT_ON             0x0
///                                    ###
///                                    * Bit is used to enable the support of sending 0 data on outgoing data lines (SD) when IDLE0_AOUT = 1. This bit can be kept permanently high, if SW wants this feature.
///                                    ###
///               %unsigned 1  IDLE0_AOUT                0x0
///                                    ###
///                                    * If the support for sending 0 data on SD line is active, SW can set this control bit to 1 when it wants HW to send 0 data on Primary SD line
///                                    ###
///               %unsigned 1  DHUB_CLR                  0x0
///                                    ###
///                                    * SW can set this bit to 1, if it wants HW to read out all the data of current transfer from DHUB while it's sending 0 data (IDLE0_AOUT_ON == 1 and IDLE0_AOUT == 1) on SD lines or while transmission is stopped on SD lines (ENABLE = 0). After all data are read out from DHUB, SW has to clear this bit to 0.
///                                    * Programming sequence for IDLE0_AOUT + DHUB_CLR:
///                                    * (IDLE0_AOUT_ON = 1) → (DHUB_CLR = 1) → (IDLE0_AOUT = 1) → HW completes reading all data from DHUB → (DHUB_CLR = 0) → (IDLE0_AOUT = 0)
///                                    * Programming sequence for !ENABLE + DHUB_CLR:
///                                    * (DHUB_CLR = 1) → (ENABLE = 0) → HW completes reading all data from DHUB → (DHUB_CLR = 0) → (ENABLE = 1)
///                                    ###
///               %unsigned 1  XMTOFF_EN                 0x1
///                                    ###
///                                    * ONLY FOR INTERNAL USE. KEEP IT 1
///                                    ###
///               %unsigned 1  APKT_ON                   0x0
///                                    ###
///                                    * Set to 1 to enable the feature of scheduled initiation of transmission based Audio Playback Kickoff Timer. PRIPORT.ENABLE will come in effect only when Audio Timer (ATR) reaches up to APKT value.
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x0001C APKT                 (P)
///               %unsigned 32 VAL                       0xFFFFFFFF
///                                    ###
///                                    * Write timer value when transmission start is to be scheduled. PRIPORT.ENABLE will come in effect only when Audio Timer (ATR) reaches up to APKT value. This register should only be written when transmission is off (PRIPORT.ENABLE=0) and it is mandatory to write this register before starting transmission (PRIPORT.ENABLE=1). SW must first read current value of Audio Timer (ATR) and configure the APKT.VAL that's significantly ahead of the ATR value.
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      32B, bits:     155b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SEC
#define h_SEC (){}

    #define     RA_SEC_SECAUD                                  0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_SEC_TSD0_SEC                                0x000C
    ///////////////////////////////////////////////////////////
    #define     RA_SEC_DBG                                     0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_SEC_SECPORT                                 0x0018

    #define     BA_SEC_SECPORT_ENABLE                          0x0018
    #define     B16SEC_SECPORT_ENABLE                          0x0018
    #define   LSb32SEC_SECPORT_ENABLE                             0
    #define   LSb16SEC_SECPORT_ENABLE                             0
    #define       bSEC_SECPORT_ENABLE                          1
    #define   MSK32SEC_SECPORT_ENABLE                             0x00000001
    #define        SEC_SECPORT_ENABLE_DISABLE                               0x0
    #define        SEC_SECPORT_ENABLE_ENABLE                                0x1

    #define     BA_SEC_SECPORT_IDLE0_AOUT_ON                   0x0018
    #define     B16SEC_SECPORT_IDLE0_AOUT_ON                   0x0018
    #define   LSb32SEC_SECPORT_IDLE0_AOUT_ON                      1
    #define   LSb16SEC_SECPORT_IDLE0_AOUT_ON                      1
    #define       bSEC_SECPORT_IDLE0_AOUT_ON                   1
    #define   MSK32SEC_SECPORT_IDLE0_AOUT_ON                      0x00000002

    #define     BA_SEC_SECPORT_IDLE0_AOUT                      0x0018
    #define     B16SEC_SECPORT_IDLE0_AOUT                      0x0018
    #define   LSb32SEC_SECPORT_IDLE0_AOUT                         2
    #define   LSb16SEC_SECPORT_IDLE0_AOUT                         2
    #define       bSEC_SECPORT_IDLE0_AOUT                      1
    #define   MSK32SEC_SECPORT_IDLE0_AOUT                         0x00000004

    #define     BA_SEC_SECPORT_DHUB_CLR                        0x0018
    #define     B16SEC_SECPORT_DHUB_CLR                        0x0018
    #define   LSb32SEC_SECPORT_DHUB_CLR                           3
    #define   LSb16SEC_SECPORT_DHUB_CLR                           3
    #define       bSEC_SECPORT_DHUB_CLR                        1
    #define   MSK32SEC_SECPORT_DHUB_CLR                           0x00000008

    #define     BA_SEC_SECPORT_XMTOFF_EN                       0x0018
    #define     B16SEC_SECPORT_XMTOFF_EN                       0x0018
    #define   LSb32SEC_SECPORT_XMTOFF_EN                          4
    #define   LSb16SEC_SECPORT_XMTOFF_EN                          4
    #define       bSEC_SECPORT_XMTOFF_EN                       1
    #define   MSK32SEC_SECPORT_XMTOFF_EN                          0x00000010

    #define     BA_SEC_SECPORT_APKT_ON                         0x0018
    #define     B16SEC_SECPORT_APKT_ON                         0x0018
    #define   LSb32SEC_SECPORT_APKT_ON                            5
    #define   LSb16SEC_SECPORT_APKT_ON                            5
    #define       bSEC_SECPORT_APKT_ON                         1
    #define   MSK32SEC_SECPORT_APKT_ON                            0x00000020
    ///////////////////////////////////////////////////////////
    #define     RA_SEC_APKT                                    0x001C

    #define     BA_SEC_APKT_VAL                                0x001C
    #define     B16SEC_APKT_VAL                                0x001C
    #define   LSb32SEC_APKT_VAL                                   0
    #define   LSb16SEC_APKT_VAL                                   0
    #define       bSEC_APKT_VAL                                32
    #define   MSK32SEC_APKT_VAL                                   0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SEC {
    ///////////////////////////////////////////////////////////
              SIE_PRIAUD                                       ie_SECAUD;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_TSD0_SEC;
    ///////////////////////////////////////////////////////////
              SIE_DBG_TX                                       ie_DBG;
    ///////////////////////////////////////////////////////////
    #define   GET32SEC_SECPORT_ENABLE(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32SEC_SECPORT_ENABLE(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16SEC_SECPORT_ENABLE(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16SEC_SECPORT_ENABLE(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define   GET32SEC_SECPORT_IDLE0_AOUT_ON(r32)              _BFGET_(r32, 1, 1)
    #define   SET32SEC_SECPORT_IDLE0_AOUT_ON(r32,v)            _BFSET_(r32, 1, 1,v)
    #define   GET16SEC_SECPORT_IDLE0_AOUT_ON(r16)              _BFGET_(r16, 1, 1)
    #define   SET16SEC_SECPORT_IDLE0_AOUT_ON(r16,v)            _BFSET_(r16, 1, 1,v)

    #define   GET32SEC_SECPORT_IDLE0_AOUT(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32SEC_SECPORT_IDLE0_AOUT(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16SEC_SECPORT_IDLE0_AOUT(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16SEC_SECPORT_IDLE0_AOUT(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32SEC_SECPORT_DHUB_CLR(r32)                   _BFGET_(r32, 3, 3)
    #define   SET32SEC_SECPORT_DHUB_CLR(r32,v)                 _BFSET_(r32, 3, 3,v)
    #define   GET16SEC_SECPORT_DHUB_CLR(r16)                   _BFGET_(r16, 3, 3)
    #define   SET16SEC_SECPORT_DHUB_CLR(r16,v)                 _BFSET_(r16, 3, 3,v)

    #define   GET32SEC_SECPORT_XMTOFF_EN(r32)                  _BFGET_(r32, 4, 4)
    #define   SET32SEC_SECPORT_XMTOFF_EN(r32,v)                _BFSET_(r32, 4, 4,v)
    #define   GET16SEC_SECPORT_XMTOFF_EN(r16)                  _BFGET_(r16, 4, 4)
    #define   SET16SEC_SECPORT_XMTOFF_EN(r16,v)                _BFSET_(r16, 4, 4,v)

    #define   GET32SEC_SECPORT_APKT_ON(r32)                    _BFGET_(r32, 5, 5)
    #define   SET32SEC_SECPORT_APKT_ON(r32,v)                  _BFSET_(r32, 5, 5,v)
    #define   GET16SEC_SECPORT_APKT_ON(r16)                    _BFGET_(r16, 5, 5)
    #define   SET16SEC_SECPORT_APKT_ON(r16,v)                  _BFSET_(r16, 5, 5,v)

    #define     w32SEC_SECPORT                                 {\
            UNSG32 uSECPORT_ENABLE                             :  1;\
            UNSG32 uSECPORT_IDLE0_AOUT_ON                      :  1;\
            UNSG32 uSECPORT_IDLE0_AOUT                         :  1;\
            UNSG32 uSECPORT_DHUB_CLR                           :  1;\
            UNSG32 uSECPORT_XMTOFF_EN                          :  1;\
            UNSG32 uSECPORT_APKT_ON                            :  1;\
            UNSG32 RSVDx18_b6                                  : 26;\
          }
    union { UNSG32 u32SEC_SECPORT;
            struct w32SEC_SECPORT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SEC_APKT_VAL(r32)                           _BFGET_(r32,31, 0)
    #define   SET32SEC_APKT_VAL(r32,v)                         _BFSET_(r32,31, 0,v)

    #define     w32SEC_APKT                                    {\
            UNSG32 uAPKT_VAL                                   : 32;\
          }
    union { UNSG32 u32SEC_APKT;
            struct w32SEC_APKT;
          };
    ///////////////////////////////////////////////////////////
    } SIE_SEC;

    typedef union  T32SEC_SECPORT
          { UNSG32 u32;
            struct w32SEC_SECPORT;
                 } T32SEC_SECPORT;
    typedef union  T32SEC_APKT
          { UNSG32 u32;
            struct w32SEC_APKT;
                 } T32SEC_APKT;
    ///////////////////////////////////////////////////////////

    typedef union  TSEC_SECPORT
          { UNSG32 u32[1];
            struct {
            struct w32SEC_SECPORT;
                   };
                 } TSEC_SECPORT;
    typedef union  TSEC_APKT
          { UNSG32 u32[1];
            struct {
            struct w32SEC_APKT;
                   };
                 } TSEC_APKT;

    ///////////////////////////////////////////////////////////
     SIGN32 SEC_drvrd(SIE_SEC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SEC_drvwr(SIE_SEC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SEC_reset(SIE_SEC *p);
     SIGN32 SEC_cmp  (SIE_SEC *p, SIE_SEC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SEC_check(p,pie,pfx,hLOG) SEC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SEC_print(p,    pfx,hLOG) SEC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SEC
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE HDMI                                     (4,4)
///     ###
///     * HDMI port control register
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 HDAUD                
///               $PRIAUD              HDAUD             REG          
///     @ 0x0000C                      (P)
///     # 0x0000C HDTSD                
///               $AUDCH               HDTSD             REG          
///     @ 0x00010                      (P)
///     # 0x00010 DBG                  
///               $DBG_TX              DBG               REG          
///     @ 0x00018 HDPORT               (P)
///               ###
///               * High Bit Rate (HD) audio port Control register
///               ###
///               %unsigned 1  TXSEL                     0x0
///                                    ###
///                                    * RESERVED*
///                                    ###
///               %unsigned 1  IDLE0_AOUT_ON             0x0
///                                    ###
///                                    * Bit is used to enable the support of sending 0 data on outgoing data lines (SD) when IDLE0_AOUT = 1. This bit can be kept permanently high, if SW wants this feature.
///                                    ###
///               %unsigned 1  IDLE0_AOUT                0x0
///                                    ###
///                                    * If the support for sending 0 data on SD line is active, SW can set this control bit to 1 when it wants HW to send 0 data on Primary SD line
///                                    ###
///               %unsigned 1  DHUB_CLR                  0x0
///                                    ###
///                                    * SW can set this bit to 1, if it wants HW to read out all the data of current transfer from DHUB while it's sending 0 data (IDLE0_AOUT_ON == 1 and IDLE0_AOUT == 1) on SD lines or while transmission is stopped on SD lines (ENABLE = 0). After all data are read out from DHUB, SW has to clear this bit to 0.
///                                    * Programming sequence for IDLE0_AOUT + DHUB_CLR:
///                                    * (IDLE0_AOUT_ON = 1) → (DHUB_CLR = 1) → (IDLE0_AOUT = 1) → HW completes reading all data from DHUB → (DHUB_CLR = 0) → (IDLE0_AOUT = 0)
///                                    * Programming sequence for !ENABLE + DHUB_CLR:
///                                    * (DHUB_CLR = 1) → (ENABLE = 0) → HW completes reading all data from DHUB → (DHUB_CLR = 0) → (ENABLE = 1)
///                                    ###
///               %unsigned 1  XMTOFF_EN                 0x1
///                                    ###
///                                    * ONLY FOR INTERNAL USE. KEEP IT 1
///                                    ###
///               %unsigned 1  APKT_ON                   0x0
///                                    ###
///                                    * Set to 1 to enable the feature of scheduled initiation of transmission based Audio Playback Kickoff Timer. PRIPORT.ENABLE will come in effect only when Audio Timer (ATR) reaches up to APKT value.
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x0001C APKT                 (P)
///               %unsigned 32 VAL                       0xFFFFFFFF
///                                    ###
///                                    * Audio Playback Kickoff Time register. PRIPORT.ENABLE will come in effect only when Audio Timer (ATR) reaches up to APKT value. This register should only be written when transmission is off (PRIPORT.ENABLE=0) and it is mandatory to write this register before starting transmission (PRIPORT.ENABLE=1). SW must first read current value of Audio Timer (ATR) and configure the APKT.VAL that's significantly ahead of the ATR value.
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      32B, bits:     155b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_HDMI
#define h_HDMI (){}

    #define     RA_HDMI_HDAUD                                  0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_HDMI_HDTSD                                  0x000C
    ///////////////////////////////////////////////////////////
    #define     RA_HDMI_DBG                                    0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_HDMI_HDPORT                                 0x0018

    #define     BA_HDMI_HDPORT_TXSEL                           0x0018
    #define     B16HDMI_HDPORT_TXSEL                           0x0018
    #define   LSb32HDMI_HDPORT_TXSEL                              0
    #define   LSb16HDMI_HDPORT_TXSEL                              0
    #define       bHDMI_HDPORT_TXSEL                           1
    #define   MSK32HDMI_HDPORT_TXSEL                              0x00000001

    #define     BA_HDMI_HDPORT_IDLE0_AOUT_ON                   0x0018
    #define     B16HDMI_HDPORT_IDLE0_AOUT_ON                   0x0018
    #define   LSb32HDMI_HDPORT_IDLE0_AOUT_ON                      1
    #define   LSb16HDMI_HDPORT_IDLE0_AOUT_ON                      1
    #define       bHDMI_HDPORT_IDLE0_AOUT_ON                   1
    #define   MSK32HDMI_HDPORT_IDLE0_AOUT_ON                      0x00000002

    #define     BA_HDMI_HDPORT_IDLE0_AOUT                      0x0018
    #define     B16HDMI_HDPORT_IDLE0_AOUT                      0x0018
    #define   LSb32HDMI_HDPORT_IDLE0_AOUT                         2
    #define   LSb16HDMI_HDPORT_IDLE0_AOUT                         2
    #define       bHDMI_HDPORT_IDLE0_AOUT                      1
    #define   MSK32HDMI_HDPORT_IDLE0_AOUT                         0x00000004

    #define     BA_HDMI_HDPORT_DHUB_CLR                        0x0018
    #define     B16HDMI_HDPORT_DHUB_CLR                        0x0018
    #define   LSb32HDMI_HDPORT_DHUB_CLR                           3
    #define   LSb16HDMI_HDPORT_DHUB_CLR                           3
    #define       bHDMI_HDPORT_DHUB_CLR                        1
    #define   MSK32HDMI_HDPORT_DHUB_CLR                           0x00000008

    #define     BA_HDMI_HDPORT_XMTOFF_EN                       0x0018
    #define     B16HDMI_HDPORT_XMTOFF_EN                       0x0018
    #define   LSb32HDMI_HDPORT_XMTOFF_EN                          4
    #define   LSb16HDMI_HDPORT_XMTOFF_EN                          4
    #define       bHDMI_HDPORT_XMTOFF_EN                       1
    #define   MSK32HDMI_HDPORT_XMTOFF_EN                          0x00000010

    #define     BA_HDMI_HDPORT_APKT_ON                         0x0018
    #define     B16HDMI_HDPORT_APKT_ON                         0x0018
    #define   LSb32HDMI_HDPORT_APKT_ON                            5
    #define   LSb16HDMI_HDPORT_APKT_ON                            5
    #define       bHDMI_HDPORT_APKT_ON                         1
    #define   MSK32HDMI_HDPORT_APKT_ON                            0x00000020
    ///////////////////////////////////////////////////////////
    #define     RA_HDMI_APKT                                   0x001C

    #define     BA_HDMI_APKT_VAL                               0x001C
    #define     B16HDMI_APKT_VAL                               0x001C
    #define   LSb32HDMI_APKT_VAL                                  0
    #define   LSb16HDMI_APKT_VAL                                  0
    #define       bHDMI_APKT_VAL                               32
    #define   MSK32HDMI_APKT_VAL                                  0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_HDMI {
    ///////////////////////////////////////////////////////////
              SIE_PRIAUD                                       ie_HDAUD;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_HDTSD;
    ///////////////////////////////////////////////////////////
              SIE_DBG_TX                                       ie_DBG;
    ///////////////////////////////////////////////////////////
    #define   GET32HDMI_HDPORT_TXSEL(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32HDMI_HDPORT_TXSEL(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16HDMI_HDPORT_TXSEL(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16HDMI_HDPORT_TXSEL(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define   GET32HDMI_HDPORT_IDLE0_AOUT_ON(r32)              _BFGET_(r32, 1, 1)
    #define   SET32HDMI_HDPORT_IDLE0_AOUT_ON(r32,v)            _BFSET_(r32, 1, 1,v)
    #define   GET16HDMI_HDPORT_IDLE0_AOUT_ON(r16)              _BFGET_(r16, 1, 1)
    #define   SET16HDMI_HDPORT_IDLE0_AOUT_ON(r16,v)            _BFSET_(r16, 1, 1,v)

    #define   GET32HDMI_HDPORT_IDLE0_AOUT(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32HDMI_HDPORT_IDLE0_AOUT(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16HDMI_HDPORT_IDLE0_AOUT(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16HDMI_HDPORT_IDLE0_AOUT(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32HDMI_HDPORT_DHUB_CLR(r32)                   _BFGET_(r32, 3, 3)
    #define   SET32HDMI_HDPORT_DHUB_CLR(r32,v)                 _BFSET_(r32, 3, 3,v)
    #define   GET16HDMI_HDPORT_DHUB_CLR(r16)                   _BFGET_(r16, 3, 3)
    #define   SET16HDMI_HDPORT_DHUB_CLR(r16,v)                 _BFSET_(r16, 3, 3,v)

    #define   GET32HDMI_HDPORT_XMTOFF_EN(r32)                  _BFGET_(r32, 4, 4)
    #define   SET32HDMI_HDPORT_XMTOFF_EN(r32,v)                _BFSET_(r32, 4, 4,v)
    #define   GET16HDMI_HDPORT_XMTOFF_EN(r16)                  _BFGET_(r16, 4, 4)
    #define   SET16HDMI_HDPORT_XMTOFF_EN(r16,v)                _BFSET_(r16, 4, 4,v)

    #define   GET32HDMI_HDPORT_APKT_ON(r32)                    _BFGET_(r32, 5, 5)
    #define   SET32HDMI_HDPORT_APKT_ON(r32,v)                  _BFSET_(r32, 5, 5,v)
    #define   GET16HDMI_HDPORT_APKT_ON(r16)                    _BFGET_(r16, 5, 5)
    #define   SET16HDMI_HDPORT_APKT_ON(r16,v)                  _BFSET_(r16, 5, 5,v)

    #define     w32HDMI_HDPORT                                 {\
            UNSG32 uHDPORT_TXSEL                               :  1;\
            UNSG32 uHDPORT_IDLE0_AOUT_ON                       :  1;\
            UNSG32 uHDPORT_IDLE0_AOUT                          :  1;\
            UNSG32 uHDPORT_DHUB_CLR                            :  1;\
            UNSG32 uHDPORT_XMTOFF_EN                           :  1;\
            UNSG32 uHDPORT_APKT_ON                             :  1;\
            UNSG32 RSVDx18_b6                                  : 26;\
          }
    union { UNSG32 u32HDMI_HDPORT;
            struct w32HDMI_HDPORT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32HDMI_APKT_VAL(r32)                          _BFGET_(r32,31, 0)
    #define   SET32HDMI_APKT_VAL(r32,v)                        _BFSET_(r32,31, 0,v)

    #define     w32HDMI_APKT                                   {\
            UNSG32 uAPKT_VAL                                   : 32;\
          }
    union { UNSG32 u32HDMI_APKT;
            struct w32HDMI_APKT;
          };
    ///////////////////////////////////////////////////////////
    } SIE_HDMI;

    typedef union  T32HDMI_HDPORT
          { UNSG32 u32;
            struct w32HDMI_HDPORT;
                 } T32HDMI_HDPORT;
    typedef union  T32HDMI_APKT
          { UNSG32 u32;
            struct w32HDMI_APKT;
                 } T32HDMI_APKT;
    ///////////////////////////////////////////////////////////

    typedef union  THDMI_HDPORT
          { UNSG32 u32[1];
            struct {
            struct w32HDMI_HDPORT;
                   };
                 } THDMI_HDPORT;
    typedef union  THDMI_APKT
          { UNSG32 u32[1];
            struct {
            struct w32HDMI_APKT;
                   };
                 } THDMI_APKT;

    ///////////////////////////////////////////////////////////
     SIGN32 HDMI_drvrd(SIE_HDMI *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 HDMI_drvwr(SIE_HDMI *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void HDMI_reset(SIE_HDMI *p);
     SIGN32 HDMI_cmp  (SIE_HDMI *p, SIE_HDMI *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define HDMI_check(p,pie,pfx,hLOG) HDMI_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define HDMI_print(p,    pfx,hLOG) HDMI_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: HDMI
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MIC1                                     (4,4)
///     ###
///     * RX Port register – I2S2 RX
///     * – 2/4/6/8 Channel data (I2S/LJ/RJ) over x4 Lines
///     * – 2/4/6/8 Channel data (TDM) over x1 Line
///     * – 8 Channel data (TDM) over x2 Line (4Ch x1)
///     * Operating Modes Capability :
///     * – I2S MODE
///     * – LJ MODE
///     * – RJ MODE
///     * – TDM MODE (2/4/6/8 Channels x1 or x2)
///     * – PCM MONO MODE (Usage restricted as per NO requirement from System Team)
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 MICCTRL              
///               $PRIAUD              MICCTRL           REG          
///                                    ###
///                                    * RX Port Channel 0 control register
///                                    ###
///     @ 0x0000C                      (P)
///     # 0x0000C RSD0                 
///               $AUDCH               RSD0              REG          
///     @ 0x00010                      (P)
///     # 0x00010 DBG                  
///               $DBG_RX              DBG               REG          
///                                    ###
///                                    * RX Port Channel 1 control register
///                                    ###
///     @ 0x0001C                      (P)
///     # 0x0001C RSD1                 
///               $AUDCH               RSD1              REG          
///     @ 0x00020                      (P)
///     # 0x00020 RSD2                 
///               $AUDCH               RSD2              REG          
///     @ 0x00024                      (P)
///     # 0x00024 RSD3                 
///               $AUDCH               RSD3              REG          
///     @ 0x00028 MM_MODE              (P)
///               ###
///               * The setting below are only used when Receiver is set to Master Mode and WS generator acts as a standalone generator.
///               ###
///               %unsigned 1  RCV_MASTER                0x0
///                                    ###
///                                    * Receiver in Master Mode to generate internal generated WS/FSYNC
///                                    ###
///               %unsigned 8  WS_HIGH_PRD               0x1F
///                                    ###
///                                    * High Cycle value for the FSYNC generation
///                                    * writing 31 to this means the FSYNC is high for 32 BCLK
///                                    ###
///               %unsigned 8  WS_TOTAL_PRD              0x3F
///                                    ###
///                                    * Total FSYNC Period
///                                    * Writing 63 to this means the total FSYNC Period is 64 BCLK
///                                    ###
///               %unsigned 1  WS_INV                    0x0
///                                    ###
///                                    * To invert the FSYNC
///                                    * 0 : Left Channel is High, Right Channel Low (LJ/RJ/TDM)
///                                    * 1 : Right Channel is High, Left Channel Low (I2S)
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x0002C RXPORT               (P)
///               %unsigned 1  ENABLE                    0x0
///                                    ###
///                                    * Register bit to enable or disable the whole RX Audio port:
///                                    * 0: Disabled (default)
///                                    * 1: Enabled
///                                    * Note: User can selects the desired number of audio channels within the RX port by setting the
///                                    * corresponding enable bits for channel 0/1/2/3
///                                    ###
///                                    : DISABLE                   0x0
///                                    : ENABLE                    0x1
///               %%        31         # Stuffing bits...
///     @ 0x00030 RXDATA               (P)
///               %unsigned 1  HBR                       0x0
///                                    ###
///                                    * Register bit to indicate whether incoming data is 8-channel HBR or LPCM (or 2-channel HBR)
///                                    * 1 : HBR data (8-channel HBR)
///                                    * 0 : LPCM data
///                                    * Note: This bit should not be set to 1, in case of 2-channel HBR. As there is no difference in behavior of this module between 2-channel HBR or 2-channel LPCM data.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %unsigned 1  TDM_HR                    0x0
///                                    ###
///                                    * Indicates if TDM data is sent over 2 I2S lanes at 128Fs rate
///                                    * 0 : No effect.
///                                    * 1 : Indicates TDM half rate and data formatting has will be enabled.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00034 INTLMODE             (P)
///               %unsigned 1  PORT0_EN                  0x0
///                                    ###
///                                    * Indicated if Port 0 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT1_EN                  0x0
///                                    ###
///                                    * Indicated if Port 1 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT2_EN                  0x0
///                                    ###
///                                    * Indicated if Port 2 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT3_EN                  0x0
///                                    ###
///                                    * Indicated if Port 3 of MIC1 is enabled
///                                    ###
///               %unsigned 1  DUMMYDATA_EN              0x0
///                                    ###
///                                    * Indicates if Dummy data has to be sent in the non enabled ports.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00038 HBRDMAP              (P)
///               ###
///               * HBR DATA MAP Register. / INTL DATA MAP Register (if INTLMODE is enabled)
///               * In 8-channel HBR data mode. 128-bits of data is received by SoC. These registers bits allows the users to map the 32 bits received on each port to the desired place in 128-bits.
///               * In 8-Channel INTL Mode. 256-bit of data is received by SoC. These registers bits allows the users to map the 64 bits received on each port to the desired place in 256-bits.
///               * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///               ###
///               %unsigned 2  PORT0                     0x0
///                                    ###
///                                    * Data select for [31:0]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT1                     0x1
///                                    ###
///                                    * Data select for [63:32]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT2                     0x2
///                                    ###
///                                    * Data select for [95:64]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT3                     0x3
///                                    ###
///                                    * Data select for [127:96]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %%        24         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      60B, bits:     168b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MIC1
#define h_MIC1 (){}

    #define     RA_MIC1_MICCTRL                                0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_MIC1_RSD0                                   0x000C
    ///////////////////////////////////////////////////////////
    #define     RA_MIC1_DBG                                    0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_MIC1_RSD1                                   0x001C
    ///////////////////////////////////////////////////////////
    #define     RA_MIC1_RSD2                                   0x0020
    ///////////////////////////////////////////////////////////
    #define     RA_MIC1_RSD3                                   0x0024
    ///////////////////////////////////////////////////////////
    #define     RA_MIC1_MM_MODE                                0x0028

    #define     BA_MIC1_MM_MODE_RCV_MASTER                     0x0028
    #define     B16MIC1_MM_MODE_RCV_MASTER                     0x0028
    #define   LSb32MIC1_MM_MODE_RCV_MASTER                        0
    #define   LSb16MIC1_MM_MODE_RCV_MASTER                        0
    #define       bMIC1_MM_MODE_RCV_MASTER                     1
    #define   MSK32MIC1_MM_MODE_RCV_MASTER                        0x00000001

    #define     BA_MIC1_MM_MODE_WS_HIGH_PRD                    0x0028
    #define     B16MIC1_MM_MODE_WS_HIGH_PRD                    0x0028
    #define   LSb32MIC1_MM_MODE_WS_HIGH_PRD                       1
    #define   LSb16MIC1_MM_MODE_WS_HIGH_PRD                       1
    #define       bMIC1_MM_MODE_WS_HIGH_PRD                    8
    #define   MSK32MIC1_MM_MODE_WS_HIGH_PRD                       0x000001FE

    #define     BA_MIC1_MM_MODE_WS_TOTAL_PRD                   0x0029
    #define     B16MIC1_MM_MODE_WS_TOTAL_PRD                   0x0028
    #define   LSb32MIC1_MM_MODE_WS_TOTAL_PRD                      9
    #define   LSb16MIC1_MM_MODE_WS_TOTAL_PRD                      9
    #define       bMIC1_MM_MODE_WS_TOTAL_PRD                   8
    #define   MSK32MIC1_MM_MODE_WS_TOTAL_PRD                      0x0001FE00

    #define     BA_MIC1_MM_MODE_WS_INV                         0x002A
    #define     B16MIC1_MM_MODE_WS_INV                         0x002A
    #define   LSb32MIC1_MM_MODE_WS_INV                            17
    #define   LSb16MIC1_MM_MODE_WS_INV                            1
    #define       bMIC1_MM_MODE_WS_INV                         1
    #define   MSK32MIC1_MM_MODE_WS_INV                            0x00020000
    ///////////////////////////////////////////////////////////
    #define     RA_MIC1_RXPORT                                 0x002C

    #define     BA_MIC1_RXPORT_ENABLE                          0x002C
    #define     B16MIC1_RXPORT_ENABLE                          0x002C
    #define   LSb32MIC1_RXPORT_ENABLE                             0
    #define   LSb16MIC1_RXPORT_ENABLE                             0
    #define       bMIC1_RXPORT_ENABLE                          1
    #define   MSK32MIC1_RXPORT_ENABLE                             0x00000001
    #define        MIC1_RXPORT_ENABLE_DISABLE                               0x0
    #define        MIC1_RXPORT_ENABLE_ENABLE                                0x1
    ///////////////////////////////////////////////////////////
    #define     RA_MIC1_RXDATA                                 0x0030

    #define     BA_MIC1_RXDATA_HBR                             0x0030
    #define     B16MIC1_RXDATA_HBR                             0x0030
    #define   LSb32MIC1_RXDATA_HBR                                0
    #define   LSb16MIC1_RXDATA_HBR                                0
    #define       bMIC1_RXDATA_HBR                             1
    #define   MSK32MIC1_RXDATA_HBR                                0x00000001

    #define     BA_MIC1_RXDATA_TDM_HR                          0x0030
    #define     B16MIC1_RXDATA_TDM_HR                          0x0030
    #define   LSb32MIC1_RXDATA_TDM_HR                             1
    #define   LSb16MIC1_RXDATA_TDM_HR                             1
    #define       bMIC1_RXDATA_TDM_HR                          1
    #define   MSK32MIC1_RXDATA_TDM_HR                             0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_MIC1_INTLMODE                               0x0034

    #define     BA_MIC1_INTLMODE_PORT0_EN                      0x0034
    #define     B16MIC1_INTLMODE_PORT0_EN                      0x0034
    #define   LSb32MIC1_INTLMODE_PORT0_EN                         0
    #define   LSb16MIC1_INTLMODE_PORT0_EN                         0
    #define       bMIC1_INTLMODE_PORT0_EN                      1
    #define   MSK32MIC1_INTLMODE_PORT0_EN                         0x00000001

    #define     BA_MIC1_INTLMODE_PORT1_EN                      0x0034
    #define     B16MIC1_INTLMODE_PORT1_EN                      0x0034
    #define   LSb32MIC1_INTLMODE_PORT1_EN                         1
    #define   LSb16MIC1_INTLMODE_PORT1_EN                         1
    #define       bMIC1_INTLMODE_PORT1_EN                      1
    #define   MSK32MIC1_INTLMODE_PORT1_EN                         0x00000002

    #define     BA_MIC1_INTLMODE_PORT2_EN                      0x0034
    #define     B16MIC1_INTLMODE_PORT2_EN                      0x0034
    #define   LSb32MIC1_INTLMODE_PORT2_EN                         2
    #define   LSb16MIC1_INTLMODE_PORT2_EN                         2
    #define       bMIC1_INTLMODE_PORT2_EN                      1
    #define   MSK32MIC1_INTLMODE_PORT2_EN                         0x00000004

    #define     BA_MIC1_INTLMODE_PORT3_EN                      0x0034
    #define     B16MIC1_INTLMODE_PORT3_EN                      0x0034
    #define   LSb32MIC1_INTLMODE_PORT3_EN                         3
    #define   LSb16MIC1_INTLMODE_PORT3_EN                         3
    #define       bMIC1_INTLMODE_PORT3_EN                      1
    #define   MSK32MIC1_INTLMODE_PORT3_EN                         0x00000008

    #define     BA_MIC1_INTLMODE_DUMMYDATA_EN                  0x0034
    #define     B16MIC1_INTLMODE_DUMMYDATA_EN                  0x0034
    #define   LSb32MIC1_INTLMODE_DUMMYDATA_EN                     4
    #define   LSb16MIC1_INTLMODE_DUMMYDATA_EN                     4
    #define       bMIC1_INTLMODE_DUMMYDATA_EN                  1
    #define   MSK32MIC1_INTLMODE_DUMMYDATA_EN                     0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_MIC1_HBRDMAP                                0x0038

    #define     BA_MIC1_HBRDMAP_PORT0                          0x0038
    #define     B16MIC1_HBRDMAP_PORT0                          0x0038
    #define   LSb32MIC1_HBRDMAP_PORT0                             0
    #define   LSb16MIC1_HBRDMAP_PORT0                             0
    #define       bMIC1_HBRDMAP_PORT0                          2
    #define   MSK32MIC1_HBRDMAP_PORT0                             0x00000003

    #define     BA_MIC1_HBRDMAP_PORT1                          0x0038
    #define     B16MIC1_HBRDMAP_PORT1                          0x0038
    #define   LSb32MIC1_HBRDMAP_PORT1                             2
    #define   LSb16MIC1_HBRDMAP_PORT1                             2
    #define       bMIC1_HBRDMAP_PORT1                          2
    #define   MSK32MIC1_HBRDMAP_PORT1                             0x0000000C

    #define     BA_MIC1_HBRDMAP_PORT2                          0x0038
    #define     B16MIC1_HBRDMAP_PORT2                          0x0038
    #define   LSb32MIC1_HBRDMAP_PORT2                             4
    #define   LSb16MIC1_HBRDMAP_PORT2                             4
    #define       bMIC1_HBRDMAP_PORT2                          2
    #define   MSK32MIC1_HBRDMAP_PORT2                             0x00000030

    #define     BA_MIC1_HBRDMAP_PORT3                          0x0038
    #define     B16MIC1_HBRDMAP_PORT3                          0x0038
    #define   LSb32MIC1_HBRDMAP_PORT3                             6
    #define   LSb16MIC1_HBRDMAP_PORT3                             6
    #define       bMIC1_HBRDMAP_PORT3                          2
    #define   MSK32MIC1_HBRDMAP_PORT3                             0x000000C0
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MIC1 {
    ///////////////////////////////////////////////////////////
              SIE_PRIAUD                                       ie_MICCTRL;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD0;
    ///////////////////////////////////////////////////////////
              SIE_DBG_RX                                       ie_DBG;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD1;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD2;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD3;
    ///////////////////////////////////////////////////////////
    #define   GET32MIC1_MM_MODE_RCV_MASTER(r32)                _BFGET_(r32, 0, 0)
    #define   SET32MIC1_MM_MODE_RCV_MASTER(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16MIC1_MM_MODE_RCV_MASTER(r16)                _BFGET_(r16, 0, 0)
    #define   SET16MIC1_MM_MODE_RCV_MASTER(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32MIC1_MM_MODE_WS_HIGH_PRD(r32)               _BFGET_(r32, 8, 1)
    #define   SET32MIC1_MM_MODE_WS_HIGH_PRD(r32,v)             _BFSET_(r32, 8, 1,v)
    #define   GET16MIC1_MM_MODE_WS_HIGH_PRD(r16)               _BFGET_(r16, 8, 1)
    #define   SET16MIC1_MM_MODE_WS_HIGH_PRD(r16,v)             _BFSET_(r16, 8, 1,v)

    #define   GET32MIC1_MM_MODE_WS_TOTAL_PRD(r32)              _BFGET_(r32,16, 9)
    #define   SET32MIC1_MM_MODE_WS_TOTAL_PRD(r32,v)            _BFSET_(r32,16, 9,v)

    #define   GET32MIC1_MM_MODE_WS_INV(r32)                    _BFGET_(r32,17,17)
    #define   SET32MIC1_MM_MODE_WS_INV(r32,v)                  _BFSET_(r32,17,17,v)
    #define   GET16MIC1_MM_MODE_WS_INV(r16)                    _BFGET_(r16, 1, 1)
    #define   SET16MIC1_MM_MODE_WS_INV(r16,v)                  _BFSET_(r16, 1, 1,v)

    #define     w32MIC1_MM_MODE                                {\
            UNSG32 uMM_MODE_RCV_MASTER                         :  1;\
            UNSG32 uMM_MODE_WS_HIGH_PRD                        :  8;\
            UNSG32 uMM_MODE_WS_TOTAL_PRD                       :  8;\
            UNSG32 uMM_MODE_WS_INV                             :  1;\
            UNSG32 RSVDx28_b18                                 : 14;\
          }
    union { UNSG32 u32MIC1_MM_MODE;
            struct w32MIC1_MM_MODE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC1_RXPORT_ENABLE(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32MIC1_RXPORT_ENABLE(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16MIC1_RXPORT_ENABLE(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16MIC1_RXPORT_ENABLE(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32MIC1_RXPORT                                 {\
            UNSG32 uRXPORT_ENABLE                              :  1;\
            UNSG32 RSVDx2C_b1                                  : 31;\
          }
    union { UNSG32 u32MIC1_RXPORT;
            struct w32MIC1_RXPORT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC1_RXDATA_HBR(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32MIC1_RXDATA_HBR(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16MIC1_RXDATA_HBR(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16MIC1_RXDATA_HBR(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define   GET32MIC1_RXDATA_TDM_HR(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32MIC1_RXDATA_TDM_HR(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16MIC1_RXDATA_TDM_HR(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16MIC1_RXDATA_TDM_HR(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define     w32MIC1_RXDATA                                 {\
            UNSG32 uRXDATA_HBR                                 :  1;\
            UNSG32 uRXDATA_TDM_HR                              :  1;\
            UNSG32 RSVDx30_b2                                  : 30;\
          }
    union { UNSG32 u32MIC1_RXDATA;
            struct w32MIC1_RXDATA;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC1_INTLMODE_PORT0_EN(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32MIC1_INTLMODE_PORT0_EN(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16MIC1_INTLMODE_PORT0_EN(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16MIC1_INTLMODE_PORT0_EN(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32MIC1_INTLMODE_PORT1_EN(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32MIC1_INTLMODE_PORT1_EN(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16MIC1_INTLMODE_PORT1_EN(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16MIC1_INTLMODE_PORT1_EN(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32MIC1_INTLMODE_PORT2_EN(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32MIC1_INTLMODE_PORT2_EN(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16MIC1_INTLMODE_PORT2_EN(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16MIC1_INTLMODE_PORT2_EN(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32MIC1_INTLMODE_PORT3_EN(r32)                 _BFGET_(r32, 3, 3)
    #define   SET32MIC1_INTLMODE_PORT3_EN(r32,v)               _BFSET_(r32, 3, 3,v)
    #define   GET16MIC1_INTLMODE_PORT3_EN(r16)                 _BFGET_(r16, 3, 3)
    #define   SET16MIC1_INTLMODE_PORT3_EN(r16,v)               _BFSET_(r16, 3, 3,v)

    #define   GET32MIC1_INTLMODE_DUMMYDATA_EN(r32)             _BFGET_(r32, 4, 4)
    #define   SET32MIC1_INTLMODE_DUMMYDATA_EN(r32,v)           _BFSET_(r32, 4, 4,v)
    #define   GET16MIC1_INTLMODE_DUMMYDATA_EN(r16)             _BFGET_(r16, 4, 4)
    #define   SET16MIC1_INTLMODE_DUMMYDATA_EN(r16,v)           _BFSET_(r16, 4, 4,v)

    #define     w32MIC1_INTLMODE                               {\
            UNSG32 uINTLMODE_PORT0_EN                          :  1;\
            UNSG32 uINTLMODE_PORT1_EN                          :  1;\
            UNSG32 uINTLMODE_PORT2_EN                          :  1;\
            UNSG32 uINTLMODE_PORT3_EN                          :  1;\
            UNSG32 uINTLMODE_DUMMYDATA_EN                      :  1;\
            UNSG32 RSVDx34_b5                                  : 27;\
          }
    union { UNSG32 u32MIC1_INTLMODE;
            struct w32MIC1_INTLMODE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC1_HBRDMAP_PORT0(r32)                     _BFGET_(r32, 1, 0)
    #define   SET32MIC1_HBRDMAP_PORT0(r32,v)                   _BFSET_(r32, 1, 0,v)
    #define   GET16MIC1_HBRDMAP_PORT0(r16)                     _BFGET_(r16, 1, 0)
    #define   SET16MIC1_HBRDMAP_PORT0(r16,v)                   _BFSET_(r16, 1, 0,v)

    #define   GET32MIC1_HBRDMAP_PORT1(r32)                     _BFGET_(r32, 3, 2)
    #define   SET32MIC1_HBRDMAP_PORT1(r32,v)                   _BFSET_(r32, 3, 2,v)
    #define   GET16MIC1_HBRDMAP_PORT1(r16)                     _BFGET_(r16, 3, 2)
    #define   SET16MIC1_HBRDMAP_PORT1(r16,v)                   _BFSET_(r16, 3, 2,v)

    #define   GET32MIC1_HBRDMAP_PORT2(r32)                     _BFGET_(r32, 5, 4)
    #define   SET32MIC1_HBRDMAP_PORT2(r32,v)                   _BFSET_(r32, 5, 4,v)
    #define   GET16MIC1_HBRDMAP_PORT2(r16)                     _BFGET_(r16, 5, 4)
    #define   SET16MIC1_HBRDMAP_PORT2(r16,v)                   _BFSET_(r16, 5, 4,v)

    #define   GET32MIC1_HBRDMAP_PORT3(r32)                     _BFGET_(r32, 7, 6)
    #define   SET32MIC1_HBRDMAP_PORT3(r32,v)                   _BFSET_(r32, 7, 6,v)
    #define   GET16MIC1_HBRDMAP_PORT3(r16)                     _BFGET_(r16, 7, 6)
    #define   SET16MIC1_HBRDMAP_PORT3(r16,v)                   _BFSET_(r16, 7, 6,v)

    #define     w32MIC1_HBRDMAP                                {\
            UNSG32 uHBRDMAP_PORT0                              :  2;\
            UNSG32 uHBRDMAP_PORT1                              :  2;\
            UNSG32 uHBRDMAP_PORT2                              :  2;\
            UNSG32 uHBRDMAP_PORT3                              :  2;\
            UNSG32 RSVDx38_b8                                  : 24;\
          }
    union { UNSG32 u32MIC1_HBRDMAP;
            struct w32MIC1_HBRDMAP;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MIC1;

    typedef union  T32MIC1_MM_MODE
          { UNSG32 u32;
            struct w32MIC1_MM_MODE;
                 } T32MIC1_MM_MODE;
    typedef union  T32MIC1_RXPORT
          { UNSG32 u32;
            struct w32MIC1_RXPORT;
                 } T32MIC1_RXPORT;
    typedef union  T32MIC1_RXDATA
          { UNSG32 u32;
            struct w32MIC1_RXDATA;
                 } T32MIC1_RXDATA;
    typedef union  T32MIC1_INTLMODE
          { UNSG32 u32;
            struct w32MIC1_INTLMODE;
                 } T32MIC1_INTLMODE;
    typedef union  T32MIC1_HBRDMAP
          { UNSG32 u32;
            struct w32MIC1_HBRDMAP;
                 } T32MIC1_HBRDMAP;
    ///////////////////////////////////////////////////////////

    typedef union  TMIC1_MM_MODE
          { UNSG32 u32[1];
            struct {
            struct w32MIC1_MM_MODE;
                   };
                 } TMIC1_MM_MODE;
    typedef union  TMIC1_RXPORT
          { UNSG32 u32[1];
            struct {
            struct w32MIC1_RXPORT;
                   };
                 } TMIC1_RXPORT;
    typedef union  TMIC1_RXDATA
          { UNSG32 u32[1];
            struct {
            struct w32MIC1_RXDATA;
                   };
                 } TMIC1_RXDATA;
    typedef union  TMIC1_INTLMODE
          { UNSG32 u32[1];
            struct {
            struct w32MIC1_INTLMODE;
                   };
                 } TMIC1_INTLMODE;
    typedef union  TMIC1_HBRDMAP
          { UNSG32 u32[1];
            struct {
            struct w32MIC1_HBRDMAP;
                   };
                 } TMIC1_HBRDMAP;

    ///////////////////////////////////////////////////////////
     SIGN32 MIC1_drvrd(SIE_MIC1 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MIC1_drvwr(SIE_MIC1 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MIC1_reset(SIE_MIC1 *p);
     SIGN32 MIC1_cmp  (SIE_MIC1 *p, SIE_MIC1 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MIC1_check(p,pie,pfx,hLOG) MIC1_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MIC1_print(p,    pfx,hLOG) MIC1_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MIC1
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MIC2                                     (4,4)
///     ###
///     * RX Port registers – Bluetooth RX
///     * Audio Primary port Control registers
///     * – 2 Channel data (I2S/LJ/RJ) over x1 Lines
///     * – 2/4/6/8 Channel data (TDM) over x1 Line
///     * – Mono Channel data (PCM) over x1 Line
///     * Operating Modes Capability :
///     * – I2S MODE
///     * – LJ MODE
///     * – RJ MODE
///     * – TDM MODE (2/4/6/8 Channels x1)
///     * – PCM MONO MODE
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 MICCTRL              
///               $PRIAUD              MICCTRL           REG          
///                                    ###
///                                    * RX Port Channel 0 control register
///                                    ###
///     @ 0x0000C                      (P)
///     # 0x0000C RSD0                 
///               $AUDCH               RSD0              REG          
///     @ 0x00010                      (P)
///     # 0x00010 DBG                  
///               $DBG_RX              DBG               REG          
///                                    ###
///                                    * RX Port Channel 1 control register
///                                    ###
///     @ 0x0001C RXPORT               (P)
///               %unsigned 1  ENABLE                    0x0
///                                    ###
///                                    * Register bit to enable or disable the whole RX Audio port:
///                                    * 0: Disabled (default)
///                                    * 1: Enabled
///                                    * Note: User can selects the desired number of audio channels within the RX port by setting the
///                                    * corresponding enable bits for channel 0/1/2/3
///                                    ###
///                                    : DISABLE                   0x0
///                                    : ENABLE                    0x1
///               %%        31         # Stuffing bits...
///     @ 0x00020 RXDATA               (P)
///               %unsigned 1  HBR                       0x0
///                                    ###
///                                    * Register bit to indicate whether incoming data is 8-channel HBR or LPCM (or 2-channel HBR)
///                                    * 1 : HBR data (8-channel HBR)
///                                    * 0 : LPCM data
///                                    * Note: This bit should not be set to 1, in case of 2-channel HBR. As there is no difference in behavior of this module between 2-channel HBR or 2-channel LPCM data.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %unsigned 1  TDM_HR                    0x0
///                                    ###
///                                    * Indicates if TDM data is sent over 2 I2S lanes at 128Fs rate
///                                    * 0 : No effect.
///                                    * 1 : Indicates TDM half rate and data formatting has will be enabled.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00024 INTLMODE             (P)
///               %unsigned 1  PORT0_EN                  0x0
///                                    ###
///                                    * Indicated if Port 0 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT1_EN                  0x0
///                                    ###
///                                    * Indicated if Port 1 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT2_EN                  0x0
///                                    ###
///                                    * Indicated if Port 2 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT3_EN                  0x0
///                                    ###
///                                    * Indicated if Port 3 of MIC1 is enabled
///                                    ###
///               %unsigned 1  DUMMYDATA_EN              0x0
///                                    ###
///                                    * Indicates if Dummy data has to be sent in the non enabled ports.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00028 HBRDMAP              (P)
///               ###
///               * HBR DATA MAP Register. / INTL DATA MAP Register (if INTLMODE is enabled)
///               * In 8-channel HBR data mode. 128-bits of data is received by SoC. These registers bits allows the users to map the 32 bits received on each port to the desired place in 128-bits.
///               * In 8-Channel INTL Mode. 256-bit of data is received by SoC. These registers bits allows the users to map the 64 bits received on each port to the desired place in 256-bits.
///               * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///               ###
///               %unsigned 2  PORT0                     0x0
///                                    ###
///                                    * Data select for [31:0]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT1                     0x1
///                                    ###
///                                    * Data select for [63:32]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT2                     0x2
///                                    ###
///                                    * Data select for [95:64]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT3                     0x3
///                                    ###
///                                    * Data select for [127:96]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %%        24         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      44B, bits:     135b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MIC2
#define h_MIC2 (){}

    #define     RA_MIC2_MICCTRL                                0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_MIC2_RSD0                                   0x000C
    ///////////////////////////////////////////////////////////
    #define     RA_MIC2_DBG                                    0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_MIC2_RXPORT                                 0x001C

    #define     BA_MIC2_RXPORT_ENABLE                          0x001C
    #define     B16MIC2_RXPORT_ENABLE                          0x001C
    #define   LSb32MIC2_RXPORT_ENABLE                             0
    #define   LSb16MIC2_RXPORT_ENABLE                             0
    #define       bMIC2_RXPORT_ENABLE                          1
    #define   MSK32MIC2_RXPORT_ENABLE                             0x00000001
    #define        MIC2_RXPORT_ENABLE_DISABLE                               0x0
    #define        MIC2_RXPORT_ENABLE_ENABLE                                0x1
    ///////////////////////////////////////////////////////////
    #define     RA_MIC2_RXDATA                                 0x0020

    #define     BA_MIC2_RXDATA_HBR                             0x0020
    #define     B16MIC2_RXDATA_HBR                             0x0020
    #define   LSb32MIC2_RXDATA_HBR                                0
    #define   LSb16MIC2_RXDATA_HBR                                0
    #define       bMIC2_RXDATA_HBR                             1
    #define   MSK32MIC2_RXDATA_HBR                                0x00000001

    #define     BA_MIC2_RXDATA_TDM_HR                          0x0020
    #define     B16MIC2_RXDATA_TDM_HR                          0x0020
    #define   LSb32MIC2_RXDATA_TDM_HR                             1
    #define   LSb16MIC2_RXDATA_TDM_HR                             1
    #define       bMIC2_RXDATA_TDM_HR                          1
    #define   MSK32MIC2_RXDATA_TDM_HR                             0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_MIC2_INTLMODE                               0x0024

    #define     BA_MIC2_INTLMODE_PORT0_EN                      0x0024
    #define     B16MIC2_INTLMODE_PORT0_EN                      0x0024
    #define   LSb32MIC2_INTLMODE_PORT0_EN                         0
    #define   LSb16MIC2_INTLMODE_PORT0_EN                         0
    #define       bMIC2_INTLMODE_PORT0_EN                      1
    #define   MSK32MIC2_INTLMODE_PORT0_EN                         0x00000001

    #define     BA_MIC2_INTLMODE_PORT1_EN                      0x0024
    #define     B16MIC2_INTLMODE_PORT1_EN                      0x0024
    #define   LSb32MIC2_INTLMODE_PORT1_EN                         1
    #define   LSb16MIC2_INTLMODE_PORT1_EN                         1
    #define       bMIC2_INTLMODE_PORT1_EN                      1
    #define   MSK32MIC2_INTLMODE_PORT1_EN                         0x00000002

    #define     BA_MIC2_INTLMODE_PORT2_EN                      0x0024
    #define     B16MIC2_INTLMODE_PORT2_EN                      0x0024
    #define   LSb32MIC2_INTLMODE_PORT2_EN                         2
    #define   LSb16MIC2_INTLMODE_PORT2_EN                         2
    #define       bMIC2_INTLMODE_PORT2_EN                      1
    #define   MSK32MIC2_INTLMODE_PORT2_EN                         0x00000004

    #define     BA_MIC2_INTLMODE_PORT3_EN                      0x0024
    #define     B16MIC2_INTLMODE_PORT3_EN                      0x0024
    #define   LSb32MIC2_INTLMODE_PORT3_EN                         3
    #define   LSb16MIC2_INTLMODE_PORT3_EN                         3
    #define       bMIC2_INTLMODE_PORT3_EN                      1
    #define   MSK32MIC2_INTLMODE_PORT3_EN                         0x00000008

    #define     BA_MIC2_INTLMODE_DUMMYDATA_EN                  0x0024
    #define     B16MIC2_INTLMODE_DUMMYDATA_EN                  0x0024
    #define   LSb32MIC2_INTLMODE_DUMMYDATA_EN                     4
    #define   LSb16MIC2_INTLMODE_DUMMYDATA_EN                     4
    #define       bMIC2_INTLMODE_DUMMYDATA_EN                  1
    #define   MSK32MIC2_INTLMODE_DUMMYDATA_EN                     0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_MIC2_HBRDMAP                                0x0028

    #define     BA_MIC2_HBRDMAP_PORT0                          0x0028
    #define     B16MIC2_HBRDMAP_PORT0                          0x0028
    #define   LSb32MIC2_HBRDMAP_PORT0                             0
    #define   LSb16MIC2_HBRDMAP_PORT0                             0
    #define       bMIC2_HBRDMAP_PORT0                          2
    #define   MSK32MIC2_HBRDMAP_PORT0                             0x00000003

    #define     BA_MIC2_HBRDMAP_PORT1                          0x0028
    #define     B16MIC2_HBRDMAP_PORT1                          0x0028
    #define   LSb32MIC2_HBRDMAP_PORT1                             2
    #define   LSb16MIC2_HBRDMAP_PORT1                             2
    #define       bMIC2_HBRDMAP_PORT1                          2
    #define   MSK32MIC2_HBRDMAP_PORT1                             0x0000000C

    #define     BA_MIC2_HBRDMAP_PORT2                          0x0028
    #define     B16MIC2_HBRDMAP_PORT2                          0x0028
    #define   LSb32MIC2_HBRDMAP_PORT2                             4
    #define   LSb16MIC2_HBRDMAP_PORT2                             4
    #define       bMIC2_HBRDMAP_PORT2                          2
    #define   MSK32MIC2_HBRDMAP_PORT2                             0x00000030

    #define     BA_MIC2_HBRDMAP_PORT3                          0x0028
    #define     B16MIC2_HBRDMAP_PORT3                          0x0028
    #define   LSb32MIC2_HBRDMAP_PORT3                             6
    #define   LSb16MIC2_HBRDMAP_PORT3                             6
    #define       bMIC2_HBRDMAP_PORT3                          2
    #define   MSK32MIC2_HBRDMAP_PORT3                             0x000000C0
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MIC2 {
    ///////////////////////////////////////////////////////////
              SIE_PRIAUD                                       ie_MICCTRL;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD0;
    ///////////////////////////////////////////////////////////
              SIE_DBG_RX                                       ie_DBG;
    ///////////////////////////////////////////////////////////
    #define   GET32MIC2_RXPORT_ENABLE(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32MIC2_RXPORT_ENABLE(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16MIC2_RXPORT_ENABLE(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16MIC2_RXPORT_ENABLE(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32MIC2_RXPORT                                 {\
            UNSG32 uRXPORT_ENABLE                              :  1;\
            UNSG32 RSVDx1C_b1                                  : 31;\
          }
    union { UNSG32 u32MIC2_RXPORT;
            struct w32MIC2_RXPORT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC2_RXDATA_HBR(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32MIC2_RXDATA_HBR(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16MIC2_RXDATA_HBR(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16MIC2_RXDATA_HBR(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define   GET32MIC2_RXDATA_TDM_HR(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32MIC2_RXDATA_TDM_HR(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16MIC2_RXDATA_TDM_HR(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16MIC2_RXDATA_TDM_HR(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define     w32MIC2_RXDATA                                 {\
            UNSG32 uRXDATA_HBR                                 :  1;\
            UNSG32 uRXDATA_TDM_HR                              :  1;\
            UNSG32 RSVDx20_b2                                  : 30;\
          }
    union { UNSG32 u32MIC2_RXDATA;
            struct w32MIC2_RXDATA;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC2_INTLMODE_PORT0_EN(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32MIC2_INTLMODE_PORT0_EN(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16MIC2_INTLMODE_PORT0_EN(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16MIC2_INTLMODE_PORT0_EN(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32MIC2_INTLMODE_PORT1_EN(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32MIC2_INTLMODE_PORT1_EN(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16MIC2_INTLMODE_PORT1_EN(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16MIC2_INTLMODE_PORT1_EN(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32MIC2_INTLMODE_PORT2_EN(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32MIC2_INTLMODE_PORT2_EN(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16MIC2_INTLMODE_PORT2_EN(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16MIC2_INTLMODE_PORT2_EN(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32MIC2_INTLMODE_PORT3_EN(r32)                 _BFGET_(r32, 3, 3)
    #define   SET32MIC2_INTLMODE_PORT3_EN(r32,v)               _BFSET_(r32, 3, 3,v)
    #define   GET16MIC2_INTLMODE_PORT3_EN(r16)                 _BFGET_(r16, 3, 3)
    #define   SET16MIC2_INTLMODE_PORT3_EN(r16,v)               _BFSET_(r16, 3, 3,v)

    #define   GET32MIC2_INTLMODE_DUMMYDATA_EN(r32)             _BFGET_(r32, 4, 4)
    #define   SET32MIC2_INTLMODE_DUMMYDATA_EN(r32,v)           _BFSET_(r32, 4, 4,v)
    #define   GET16MIC2_INTLMODE_DUMMYDATA_EN(r16)             _BFGET_(r16, 4, 4)
    #define   SET16MIC2_INTLMODE_DUMMYDATA_EN(r16,v)           _BFSET_(r16, 4, 4,v)

    #define     w32MIC2_INTLMODE                               {\
            UNSG32 uINTLMODE_PORT0_EN                          :  1;\
            UNSG32 uINTLMODE_PORT1_EN                          :  1;\
            UNSG32 uINTLMODE_PORT2_EN                          :  1;\
            UNSG32 uINTLMODE_PORT3_EN                          :  1;\
            UNSG32 uINTLMODE_DUMMYDATA_EN                      :  1;\
            UNSG32 RSVDx24_b5                                  : 27;\
          }
    union { UNSG32 u32MIC2_INTLMODE;
            struct w32MIC2_INTLMODE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC2_HBRDMAP_PORT0(r32)                     _BFGET_(r32, 1, 0)
    #define   SET32MIC2_HBRDMAP_PORT0(r32,v)                   _BFSET_(r32, 1, 0,v)
    #define   GET16MIC2_HBRDMAP_PORT0(r16)                     _BFGET_(r16, 1, 0)
    #define   SET16MIC2_HBRDMAP_PORT0(r16,v)                   _BFSET_(r16, 1, 0,v)

    #define   GET32MIC2_HBRDMAP_PORT1(r32)                     _BFGET_(r32, 3, 2)
    #define   SET32MIC2_HBRDMAP_PORT1(r32,v)                   _BFSET_(r32, 3, 2,v)
    #define   GET16MIC2_HBRDMAP_PORT1(r16)                     _BFGET_(r16, 3, 2)
    #define   SET16MIC2_HBRDMAP_PORT1(r16,v)                   _BFSET_(r16, 3, 2,v)

    #define   GET32MIC2_HBRDMAP_PORT2(r32)                     _BFGET_(r32, 5, 4)
    #define   SET32MIC2_HBRDMAP_PORT2(r32,v)                   _BFSET_(r32, 5, 4,v)
    #define   GET16MIC2_HBRDMAP_PORT2(r16)                     _BFGET_(r16, 5, 4)
    #define   SET16MIC2_HBRDMAP_PORT2(r16,v)                   _BFSET_(r16, 5, 4,v)

    #define   GET32MIC2_HBRDMAP_PORT3(r32)                     _BFGET_(r32, 7, 6)
    #define   SET32MIC2_HBRDMAP_PORT3(r32,v)                   _BFSET_(r32, 7, 6,v)
    #define   GET16MIC2_HBRDMAP_PORT3(r16)                     _BFGET_(r16, 7, 6)
    #define   SET16MIC2_HBRDMAP_PORT3(r16,v)                   _BFSET_(r16, 7, 6,v)

    #define     w32MIC2_HBRDMAP                                {\
            UNSG32 uHBRDMAP_PORT0                              :  2;\
            UNSG32 uHBRDMAP_PORT1                              :  2;\
            UNSG32 uHBRDMAP_PORT2                              :  2;\
            UNSG32 uHBRDMAP_PORT3                              :  2;\
            UNSG32 RSVDx28_b8                                  : 24;\
          }
    union { UNSG32 u32MIC2_HBRDMAP;
            struct w32MIC2_HBRDMAP;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MIC2;

    typedef union  T32MIC2_RXPORT
          { UNSG32 u32;
            struct w32MIC2_RXPORT;
                 } T32MIC2_RXPORT;
    typedef union  T32MIC2_RXDATA
          { UNSG32 u32;
            struct w32MIC2_RXDATA;
                 } T32MIC2_RXDATA;
    typedef union  T32MIC2_INTLMODE
          { UNSG32 u32;
            struct w32MIC2_INTLMODE;
                 } T32MIC2_INTLMODE;
    typedef union  T32MIC2_HBRDMAP
          { UNSG32 u32;
            struct w32MIC2_HBRDMAP;
                 } T32MIC2_HBRDMAP;
    ///////////////////////////////////////////////////////////

    typedef union  TMIC2_RXPORT
          { UNSG32 u32[1];
            struct {
            struct w32MIC2_RXPORT;
                   };
                 } TMIC2_RXPORT;
    typedef union  TMIC2_RXDATA
          { UNSG32 u32[1];
            struct {
            struct w32MIC2_RXDATA;
                   };
                 } TMIC2_RXDATA;
    typedef union  TMIC2_INTLMODE
          { UNSG32 u32[1];
            struct {
            struct w32MIC2_INTLMODE;
                   };
                 } TMIC2_INTLMODE;
    typedef union  TMIC2_HBRDMAP
          { UNSG32 u32[1];
            struct {
            struct w32MIC2_HBRDMAP;
                   };
                 } TMIC2_HBRDMAP;

    ///////////////////////////////////////////////////////////
     SIGN32 MIC2_drvrd(SIE_MIC2 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MIC2_drvwr(SIE_MIC2 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MIC2_reset(SIE_MIC2 *p);
     SIGN32 MIC2_cmp  (SIE_MIC2 *p, SIE_MIC2 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MIC2_check(p,pie,pfx,hLOG) MIC2_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MIC2_print(p,    pfx,hLOG) MIC2_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MIC2
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MIC3                                     (4,4)
///     ###
///     * RX Port registers – RX – HDMI RX Data
///     * Audio Primary port Control registers
///     * – 2/4/6/8 Channel data (I2S/LJ/RJ) over x4 Lines
///     * Operating Modes Capability :
///     * – I2S MODE
///     * – LJ MODE
///     * – RJ MODE
///     * – TDM MODE (Usage restricted as per NO requirement from System Team)
///     * – PCM MONO MODE (Usage restricted as per NO requirement from System Team)
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 MICCTRL              
///               $PRIAUD              MICCTRL           REG          
///                                    ###
///                                    * RX Port Channel 0 control register
///                                    ###
///     @ 0x0000C                      (P)
///     # 0x0000C RSD0                 
///               $AUDCH               RSD0              REG          
///     @ 0x00010                      (P)
///     # 0x00010 DBG                  
///               $DBG_RX              DBG               REG          
///                                    ###
///                                    * RX Port Channel 1 control register
///                                    ###
///     @ 0x0001C                      (P)
///     # 0x0001C RSD1                 
///               $AUDCH               RSD1              REG          
///     @ 0x00020                      (P)
///     # 0x00020 RSD2                 
///               $AUDCH               RSD2              REG          
///     @ 0x00024                      (P)
///     # 0x00024 RSD3                 
///               $AUDCH               RSD3              REG          
///                                    ###
///                                    * RX Port Channel 2 control register
///                                    ###
///     @ 0x00028 RXPORT               (P)
///               %unsigned 1  ENABLE                    0x0
///                                    ###
///                                    * Register bit to enable or disable the whole RX Audio port:
///                                    * 0: Disabled (default)
///                                    * 1: Enabled
///                                    * Note: User can selects the desired number of audio channels within the RX port by setting the
///                                    * corresponding enable bits for channel 0/1/2/3
///                                    ###
///                                    : DISABLE                   0x0
///                                    : ENABLE                    0x1
///               %%        31         # Stuffing bits...
///     @ 0x0002C RXDATA               (P)
///               %unsigned 1  HBR                       0x0
///                                    ###
///                                    * Register bit to indicate whether incoming data is 8-channel HBR or LPCM (or 2-channel HBR)
///                                    * 1 : HBR data (8-channel HBR)
///                                    * 0 : LPCM data
///                                    * Note: This bit should not be set to 1, in case of 2-channel HBR. As there is no difference in behavior of this module between 2-channel HBR or 2-channel LPCM data.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %unsigned 1  TDM_HR                    0x0
///                                    ###
///                                    * Indicates if TDM data is sent over 2 I2S lanes at 128Fs rate
///                                    * 0 : No effect.
///                                    * 1 : Indicates TDM half rate and data formatting has will be enabled.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00030 INTLMODE             (P)
///               %unsigned 1  PORT0_EN                  0x0
///                                    ###
///                                    * Indicated if Port 0 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT1_EN                  0x0
///                                    ###
///                                    * Indicated if Port 1 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT2_EN                  0x0
///                                    ###
///                                    * Indicated if Port 2 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT3_EN                  0x0
///                                    ###
///                                    * Indicated if Port 3 of MIC1 is enabled
///                                    ###
///               %unsigned 1  DUMMYDATA_EN              0x0
///                                    ###
///                                    * Indicates if Dummy data has to be sent in the non enabled ports.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00034 HBRDMAP              (P)
///               ###
///               * HBR DATA MAP Register. / INTL DATA MAP Register (if INTLMODE is enabled)
///               * In 8-channel HBR data mode. 128-bits of data is received by SoC. These registers bits allows the users to map the 32 bits received on each port to the desired place in 128-bits.
///               * In 8-Channel INTL Mode. 256-bit of data is received by SoC. These registers bits allows the users to map the 64 bits received on each port to the desired place in 256-bits.
///               * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///               ###
///               %unsigned 2  PORT0                     0x0
///                                    ###
///                                    * Data select for [31:0]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT1                     0x1
///                                    ###
///                                    * Data select for [63:32]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT2                     0x2
///                                    ###
///                                    * Data select for [95:64]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT3                     0x3
///                                    ###
///                                    * Data select for [127:96]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %%        24         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      56B, bits:     150b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MIC3
#define h_MIC3 (){}

    #define     RA_MIC3_MICCTRL                                0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_MIC3_RSD0                                   0x000C
    ///////////////////////////////////////////////////////////
    #define     RA_MIC3_DBG                                    0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_MIC3_RSD1                                   0x001C
    ///////////////////////////////////////////////////////////
    #define     RA_MIC3_RSD2                                   0x0020
    ///////////////////////////////////////////////////////////
    #define     RA_MIC3_RSD3                                   0x0024
    ///////////////////////////////////////////////////////////
    #define     RA_MIC3_RXPORT                                 0x0028

    #define     BA_MIC3_RXPORT_ENABLE                          0x0028
    #define     B16MIC3_RXPORT_ENABLE                          0x0028
    #define   LSb32MIC3_RXPORT_ENABLE                             0
    #define   LSb16MIC3_RXPORT_ENABLE                             0
    #define       bMIC3_RXPORT_ENABLE                          1
    #define   MSK32MIC3_RXPORT_ENABLE                             0x00000001
    #define        MIC3_RXPORT_ENABLE_DISABLE                               0x0
    #define        MIC3_RXPORT_ENABLE_ENABLE                                0x1
    ///////////////////////////////////////////////////////////
    #define     RA_MIC3_RXDATA                                 0x002C

    #define     BA_MIC3_RXDATA_HBR                             0x002C
    #define     B16MIC3_RXDATA_HBR                             0x002C
    #define   LSb32MIC3_RXDATA_HBR                                0
    #define   LSb16MIC3_RXDATA_HBR                                0
    #define       bMIC3_RXDATA_HBR                             1
    #define   MSK32MIC3_RXDATA_HBR                                0x00000001

    #define     BA_MIC3_RXDATA_TDM_HR                          0x002C
    #define     B16MIC3_RXDATA_TDM_HR                          0x002C
    #define   LSb32MIC3_RXDATA_TDM_HR                             1
    #define   LSb16MIC3_RXDATA_TDM_HR                             1
    #define       bMIC3_RXDATA_TDM_HR                          1
    #define   MSK32MIC3_RXDATA_TDM_HR                             0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_MIC3_INTLMODE                               0x0030

    #define     BA_MIC3_INTLMODE_PORT0_EN                      0x0030
    #define     B16MIC3_INTLMODE_PORT0_EN                      0x0030
    #define   LSb32MIC3_INTLMODE_PORT0_EN                         0
    #define   LSb16MIC3_INTLMODE_PORT0_EN                         0
    #define       bMIC3_INTLMODE_PORT0_EN                      1
    #define   MSK32MIC3_INTLMODE_PORT0_EN                         0x00000001

    #define     BA_MIC3_INTLMODE_PORT1_EN                      0x0030
    #define     B16MIC3_INTLMODE_PORT1_EN                      0x0030
    #define   LSb32MIC3_INTLMODE_PORT1_EN                         1
    #define   LSb16MIC3_INTLMODE_PORT1_EN                         1
    #define       bMIC3_INTLMODE_PORT1_EN                      1
    #define   MSK32MIC3_INTLMODE_PORT1_EN                         0x00000002

    #define     BA_MIC3_INTLMODE_PORT2_EN                      0x0030
    #define     B16MIC3_INTLMODE_PORT2_EN                      0x0030
    #define   LSb32MIC3_INTLMODE_PORT2_EN                         2
    #define   LSb16MIC3_INTLMODE_PORT2_EN                         2
    #define       bMIC3_INTLMODE_PORT2_EN                      1
    #define   MSK32MIC3_INTLMODE_PORT2_EN                         0x00000004

    #define     BA_MIC3_INTLMODE_PORT3_EN                      0x0030
    #define     B16MIC3_INTLMODE_PORT3_EN                      0x0030
    #define   LSb32MIC3_INTLMODE_PORT3_EN                         3
    #define   LSb16MIC3_INTLMODE_PORT3_EN                         3
    #define       bMIC3_INTLMODE_PORT3_EN                      1
    #define   MSK32MIC3_INTLMODE_PORT3_EN                         0x00000008

    #define     BA_MIC3_INTLMODE_DUMMYDATA_EN                  0x0030
    #define     B16MIC3_INTLMODE_DUMMYDATA_EN                  0x0030
    #define   LSb32MIC3_INTLMODE_DUMMYDATA_EN                     4
    #define   LSb16MIC3_INTLMODE_DUMMYDATA_EN                     4
    #define       bMIC3_INTLMODE_DUMMYDATA_EN                  1
    #define   MSK32MIC3_INTLMODE_DUMMYDATA_EN                     0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_MIC3_HBRDMAP                                0x0034

    #define     BA_MIC3_HBRDMAP_PORT0                          0x0034
    #define     B16MIC3_HBRDMAP_PORT0                          0x0034
    #define   LSb32MIC3_HBRDMAP_PORT0                             0
    #define   LSb16MIC3_HBRDMAP_PORT0                             0
    #define       bMIC3_HBRDMAP_PORT0                          2
    #define   MSK32MIC3_HBRDMAP_PORT0                             0x00000003

    #define     BA_MIC3_HBRDMAP_PORT1                          0x0034
    #define     B16MIC3_HBRDMAP_PORT1                          0x0034
    #define   LSb32MIC3_HBRDMAP_PORT1                             2
    #define   LSb16MIC3_HBRDMAP_PORT1                             2
    #define       bMIC3_HBRDMAP_PORT1                          2
    #define   MSK32MIC3_HBRDMAP_PORT1                             0x0000000C

    #define     BA_MIC3_HBRDMAP_PORT2                          0x0034
    #define     B16MIC3_HBRDMAP_PORT2                          0x0034
    #define   LSb32MIC3_HBRDMAP_PORT2                             4
    #define   LSb16MIC3_HBRDMAP_PORT2                             4
    #define       bMIC3_HBRDMAP_PORT2                          2
    #define   MSK32MIC3_HBRDMAP_PORT2                             0x00000030

    #define     BA_MIC3_HBRDMAP_PORT3                          0x0034
    #define     B16MIC3_HBRDMAP_PORT3                          0x0034
    #define   LSb32MIC3_HBRDMAP_PORT3                             6
    #define   LSb16MIC3_HBRDMAP_PORT3                             6
    #define       bMIC3_HBRDMAP_PORT3                          2
    #define   MSK32MIC3_HBRDMAP_PORT3                             0x000000C0
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MIC3 {
    ///////////////////////////////////////////////////////////
              SIE_PRIAUD                                       ie_MICCTRL;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD0;
    ///////////////////////////////////////////////////////////
              SIE_DBG_RX                                       ie_DBG;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD1;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD2;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD3;
    ///////////////////////////////////////////////////////////
    #define   GET32MIC3_RXPORT_ENABLE(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32MIC3_RXPORT_ENABLE(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16MIC3_RXPORT_ENABLE(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16MIC3_RXPORT_ENABLE(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32MIC3_RXPORT                                 {\
            UNSG32 uRXPORT_ENABLE                              :  1;\
            UNSG32 RSVDx28_b1                                  : 31;\
          }
    union { UNSG32 u32MIC3_RXPORT;
            struct w32MIC3_RXPORT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC3_RXDATA_HBR(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32MIC3_RXDATA_HBR(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16MIC3_RXDATA_HBR(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16MIC3_RXDATA_HBR(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define   GET32MIC3_RXDATA_TDM_HR(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32MIC3_RXDATA_TDM_HR(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16MIC3_RXDATA_TDM_HR(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16MIC3_RXDATA_TDM_HR(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define     w32MIC3_RXDATA                                 {\
            UNSG32 uRXDATA_HBR                                 :  1;\
            UNSG32 uRXDATA_TDM_HR                              :  1;\
            UNSG32 RSVDx2C_b2                                  : 30;\
          }
    union { UNSG32 u32MIC3_RXDATA;
            struct w32MIC3_RXDATA;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC3_INTLMODE_PORT0_EN(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32MIC3_INTLMODE_PORT0_EN(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16MIC3_INTLMODE_PORT0_EN(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16MIC3_INTLMODE_PORT0_EN(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32MIC3_INTLMODE_PORT1_EN(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32MIC3_INTLMODE_PORT1_EN(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16MIC3_INTLMODE_PORT1_EN(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16MIC3_INTLMODE_PORT1_EN(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32MIC3_INTLMODE_PORT2_EN(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32MIC3_INTLMODE_PORT2_EN(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16MIC3_INTLMODE_PORT2_EN(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16MIC3_INTLMODE_PORT2_EN(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32MIC3_INTLMODE_PORT3_EN(r32)                 _BFGET_(r32, 3, 3)
    #define   SET32MIC3_INTLMODE_PORT3_EN(r32,v)               _BFSET_(r32, 3, 3,v)
    #define   GET16MIC3_INTLMODE_PORT3_EN(r16)                 _BFGET_(r16, 3, 3)
    #define   SET16MIC3_INTLMODE_PORT3_EN(r16,v)               _BFSET_(r16, 3, 3,v)

    #define   GET32MIC3_INTLMODE_DUMMYDATA_EN(r32)             _BFGET_(r32, 4, 4)
    #define   SET32MIC3_INTLMODE_DUMMYDATA_EN(r32,v)           _BFSET_(r32, 4, 4,v)
    #define   GET16MIC3_INTLMODE_DUMMYDATA_EN(r16)             _BFGET_(r16, 4, 4)
    #define   SET16MIC3_INTLMODE_DUMMYDATA_EN(r16,v)           _BFSET_(r16, 4, 4,v)

    #define     w32MIC3_INTLMODE                               {\
            UNSG32 uINTLMODE_PORT0_EN                          :  1;\
            UNSG32 uINTLMODE_PORT1_EN                          :  1;\
            UNSG32 uINTLMODE_PORT2_EN                          :  1;\
            UNSG32 uINTLMODE_PORT3_EN                          :  1;\
            UNSG32 uINTLMODE_DUMMYDATA_EN                      :  1;\
            UNSG32 RSVDx30_b5                                  : 27;\
          }
    union { UNSG32 u32MIC3_INTLMODE;
            struct w32MIC3_INTLMODE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC3_HBRDMAP_PORT0(r32)                     _BFGET_(r32, 1, 0)
    #define   SET32MIC3_HBRDMAP_PORT0(r32,v)                   _BFSET_(r32, 1, 0,v)
    #define   GET16MIC3_HBRDMAP_PORT0(r16)                     _BFGET_(r16, 1, 0)
    #define   SET16MIC3_HBRDMAP_PORT0(r16,v)                   _BFSET_(r16, 1, 0,v)

    #define   GET32MIC3_HBRDMAP_PORT1(r32)                     _BFGET_(r32, 3, 2)
    #define   SET32MIC3_HBRDMAP_PORT1(r32,v)                   _BFSET_(r32, 3, 2,v)
    #define   GET16MIC3_HBRDMAP_PORT1(r16)                     _BFGET_(r16, 3, 2)
    #define   SET16MIC3_HBRDMAP_PORT1(r16,v)                   _BFSET_(r16, 3, 2,v)

    #define   GET32MIC3_HBRDMAP_PORT2(r32)                     _BFGET_(r32, 5, 4)
    #define   SET32MIC3_HBRDMAP_PORT2(r32,v)                   _BFSET_(r32, 5, 4,v)
    #define   GET16MIC3_HBRDMAP_PORT2(r16)                     _BFGET_(r16, 5, 4)
    #define   SET16MIC3_HBRDMAP_PORT2(r16,v)                   _BFSET_(r16, 5, 4,v)

    #define   GET32MIC3_HBRDMAP_PORT3(r32)                     _BFGET_(r32, 7, 6)
    #define   SET32MIC3_HBRDMAP_PORT3(r32,v)                   _BFSET_(r32, 7, 6,v)
    #define   GET16MIC3_HBRDMAP_PORT3(r16)                     _BFGET_(r16, 7, 6)
    #define   SET16MIC3_HBRDMAP_PORT3(r16,v)                   _BFSET_(r16, 7, 6,v)

    #define     w32MIC3_HBRDMAP                                {\
            UNSG32 uHBRDMAP_PORT0                              :  2;\
            UNSG32 uHBRDMAP_PORT1                              :  2;\
            UNSG32 uHBRDMAP_PORT2                              :  2;\
            UNSG32 uHBRDMAP_PORT3                              :  2;\
            UNSG32 RSVDx34_b8                                  : 24;\
          }
    union { UNSG32 u32MIC3_HBRDMAP;
            struct w32MIC3_HBRDMAP;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MIC3;

    typedef union  T32MIC3_RXPORT
          { UNSG32 u32;
            struct w32MIC3_RXPORT;
                 } T32MIC3_RXPORT;
    typedef union  T32MIC3_RXDATA
          { UNSG32 u32;
            struct w32MIC3_RXDATA;
                 } T32MIC3_RXDATA;
    typedef union  T32MIC3_INTLMODE
          { UNSG32 u32;
            struct w32MIC3_INTLMODE;
                 } T32MIC3_INTLMODE;
    typedef union  T32MIC3_HBRDMAP
          { UNSG32 u32;
            struct w32MIC3_HBRDMAP;
                 } T32MIC3_HBRDMAP;
    ///////////////////////////////////////////////////////////

    typedef union  TMIC3_RXPORT
          { UNSG32 u32[1];
            struct {
            struct w32MIC3_RXPORT;
                   };
                 } TMIC3_RXPORT;
    typedef union  TMIC3_RXDATA
          { UNSG32 u32[1];
            struct {
            struct w32MIC3_RXDATA;
                   };
                 } TMIC3_RXDATA;
    typedef union  TMIC3_INTLMODE
          { UNSG32 u32[1];
            struct {
            struct w32MIC3_INTLMODE;
                   };
                 } TMIC3_INTLMODE;
    typedef union  TMIC3_HBRDMAP
          { UNSG32 u32[1];
            struct {
            struct w32MIC3_HBRDMAP;
                   };
                 } TMIC3_HBRDMAP;

    ///////////////////////////////////////////////////////////
     SIGN32 MIC3_drvrd(SIE_MIC3 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MIC3_drvwr(SIE_MIC3 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MIC3_reset(SIE_MIC3 *p);
     SIGN32 MIC3_cmp  (SIE_MIC3 *p, SIE_MIC3 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MIC3_check(p,pie,pfx,hLOG) MIC3_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MIC3_print(p,    pfx,hLOG) MIC3_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MIC3
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MIC4                                     (4,4)
///     ###
///     * RX Port registers – PRI Loop Back RX – Primary Transmit data loop backed Data
///     * Audio Primary port Control registers
///     * – 2/4/6/8 Channel data (I2S/LJ/RJ) over x4 Lines
///     * – 2/4/6/8 Channel data (TDM) over x1 Line
///     * – 8 Channel data (TDM) over x2 Line (4Ch x1)
///     * Operating Modes Capability :
///     * – I2S MODE
///     * – LJ MODE
///     * – RJ MODE
///     * – TDM MODE
///     * – PCM MONO MODE (Usage restricted as per NO requirement from System Team)
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 MICCTRL              
///               $PRIAUD              MICCTRL           REG          
///                                    ###
///                                    * RX Port Channel 0 control register
///                                    ###
///     @ 0x0000C                      (P)
///     # 0x0000C RSD0                 
///               $AUDCH               RSD0              REG          
///     @ 0x00010                      (P)
///     # 0x00010 DBG                  
///               $DBG_RX              DBG               REG          
///                                    ###
///                                    * RX Port Channel 1 control register
///                                    ###
///     @ 0x0001C                      (P)
///     # 0x0001C RSD1                 
///               $AUDCH               RSD1              REG          
///     @ 0x00020                      (P)
///     # 0x00020 RSD2                 
///               $AUDCH               RSD2              REG          
///     @ 0x00024                      (P)
///     # 0x00024 RSD3                 
///               $AUDCH               RSD3              REG          
///                                    ###
///                                    * RX Port Channel 2 control register
///                                    ###
///     @ 0x00028 RXPORT               (P)
///               %unsigned 1  ENABLE                    0x0
///                                    ###
///                                    * Register bit to enable or disable the whole RX Audio port:
///                                    * 0: Disabled (default)
///                                    * 1: Enabled
///                                    * Note: User can selects the desired number of audio channels within the RX port by setting the
///                                    * corresponding enable bits for channel 0/1/2/3
///                                    ###
///                                    : DISABLE                   0x0
///                                    : ENABLE                    0x1
///               %%        31         # Stuffing bits...
///     @ 0x0002C RXDATA               (P)
///               %unsigned 1  HBR                       0x0
///                                    ###
///                                    * Register bit to indicate whether incoming data is 8-channel HBR or LPCM (or 2-channel HBR)
///                                    * 1 : HBR data (8-channel HBR)
///                                    * 0 : LPCM data
///                                    * Note: This bit should not be set to 1, in case of 2-channel HBR. As there is no difference in behavior of this module between 2-channel HBR or 2-channel LPCM data.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %unsigned 1  TDM_HR                    0x0
///                                    ###
///                                    * Indicates if TDM data is sent over 2 I2S lanes at 128Fs rate
///                                    * 0 : No effect.
///                                    * 1 : Indicates TDM half rate and data formatting has will be enabled.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00030 INTLMODE             (P)
///               %unsigned 1  PORT0_EN                  0x0
///                                    ###
///                                    * Indicated if Port 0 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT1_EN                  0x0
///                                    ###
///                                    * Indicated if Port 1 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT2_EN                  0x0
///                                    ###
///                                    * Indicated if Port 2 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT3_EN                  0x0
///                                    ###
///                                    * Indicated if Port 3 of MIC1 is enabled
///                                    ###
///               %unsigned 1  DUMMYDATA_EN              0x0
///                                    ###
///                                    * Indicates if Dummy data has to be sent in the non enabled ports.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00034 HBRDMAP              (P)
///               ###
///               * HBR DATA MAP Register. / INTL DATA MAP Register (if INTLMODE is enabled)
///               * In 8-channel HBR data mode. 128-bits of data is received by SoC. These registers bits allows the users to map the 32 bits received on each port to the desired place in 128-bits.
///               * In 8-Channel INTL Mode. 256-bit of data is received by SoC. These registers bits allows the users to map the 64 bits received on each port to the desired place in 256-bits.
///               * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///               ###
///               %unsigned 2  PORT0                     0x0
///                                    ###
///                                    * Data select for [31:0]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT1                     0x1
///                                    ###
///                                    * Data select for [63:32]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT2                     0x2
///                                    ###
///                                    * Data select for [95:64]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT3                     0x3
///                                    ###
///                                    * Data select for [127:96]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %%        24         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      56B, bits:     150b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MIC4
#define h_MIC4 (){}

    #define     RA_MIC4_MICCTRL                                0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_MIC4_RSD0                                   0x000C
    ///////////////////////////////////////////////////////////
    #define     RA_MIC4_DBG                                    0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_MIC4_RSD1                                   0x001C
    ///////////////////////////////////////////////////////////
    #define     RA_MIC4_RSD2                                   0x0020
    ///////////////////////////////////////////////////////////
    #define     RA_MIC4_RSD3                                   0x0024
    ///////////////////////////////////////////////////////////
    #define     RA_MIC4_RXPORT                                 0x0028

    #define     BA_MIC4_RXPORT_ENABLE                          0x0028
    #define     B16MIC4_RXPORT_ENABLE                          0x0028
    #define   LSb32MIC4_RXPORT_ENABLE                             0
    #define   LSb16MIC4_RXPORT_ENABLE                             0
    #define       bMIC4_RXPORT_ENABLE                          1
    #define   MSK32MIC4_RXPORT_ENABLE                             0x00000001
    #define        MIC4_RXPORT_ENABLE_DISABLE                               0x0
    #define        MIC4_RXPORT_ENABLE_ENABLE                                0x1
    ///////////////////////////////////////////////////////////
    #define     RA_MIC4_RXDATA                                 0x002C

    #define     BA_MIC4_RXDATA_HBR                             0x002C
    #define     B16MIC4_RXDATA_HBR                             0x002C
    #define   LSb32MIC4_RXDATA_HBR                                0
    #define   LSb16MIC4_RXDATA_HBR                                0
    #define       bMIC4_RXDATA_HBR                             1
    #define   MSK32MIC4_RXDATA_HBR                                0x00000001

    #define     BA_MIC4_RXDATA_TDM_HR                          0x002C
    #define     B16MIC4_RXDATA_TDM_HR                          0x002C
    #define   LSb32MIC4_RXDATA_TDM_HR                             1
    #define   LSb16MIC4_RXDATA_TDM_HR                             1
    #define       bMIC4_RXDATA_TDM_HR                          1
    #define   MSK32MIC4_RXDATA_TDM_HR                             0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_MIC4_INTLMODE                               0x0030

    #define     BA_MIC4_INTLMODE_PORT0_EN                      0x0030
    #define     B16MIC4_INTLMODE_PORT0_EN                      0x0030
    #define   LSb32MIC4_INTLMODE_PORT0_EN                         0
    #define   LSb16MIC4_INTLMODE_PORT0_EN                         0
    #define       bMIC4_INTLMODE_PORT0_EN                      1
    #define   MSK32MIC4_INTLMODE_PORT0_EN                         0x00000001

    #define     BA_MIC4_INTLMODE_PORT1_EN                      0x0030
    #define     B16MIC4_INTLMODE_PORT1_EN                      0x0030
    #define   LSb32MIC4_INTLMODE_PORT1_EN                         1
    #define   LSb16MIC4_INTLMODE_PORT1_EN                         1
    #define       bMIC4_INTLMODE_PORT1_EN                      1
    #define   MSK32MIC4_INTLMODE_PORT1_EN                         0x00000002

    #define     BA_MIC4_INTLMODE_PORT2_EN                      0x0030
    #define     B16MIC4_INTLMODE_PORT2_EN                      0x0030
    #define   LSb32MIC4_INTLMODE_PORT2_EN                         2
    #define   LSb16MIC4_INTLMODE_PORT2_EN                         2
    #define       bMIC4_INTLMODE_PORT2_EN                      1
    #define   MSK32MIC4_INTLMODE_PORT2_EN                         0x00000004

    #define     BA_MIC4_INTLMODE_PORT3_EN                      0x0030
    #define     B16MIC4_INTLMODE_PORT3_EN                      0x0030
    #define   LSb32MIC4_INTLMODE_PORT3_EN                         3
    #define   LSb16MIC4_INTLMODE_PORT3_EN                         3
    #define       bMIC4_INTLMODE_PORT3_EN                      1
    #define   MSK32MIC4_INTLMODE_PORT3_EN                         0x00000008

    #define     BA_MIC4_INTLMODE_DUMMYDATA_EN                  0x0030
    #define     B16MIC4_INTLMODE_DUMMYDATA_EN                  0x0030
    #define   LSb32MIC4_INTLMODE_DUMMYDATA_EN                     4
    #define   LSb16MIC4_INTLMODE_DUMMYDATA_EN                     4
    #define       bMIC4_INTLMODE_DUMMYDATA_EN                  1
    #define   MSK32MIC4_INTLMODE_DUMMYDATA_EN                     0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_MIC4_HBRDMAP                                0x0034

    #define     BA_MIC4_HBRDMAP_PORT0                          0x0034
    #define     B16MIC4_HBRDMAP_PORT0                          0x0034
    #define   LSb32MIC4_HBRDMAP_PORT0                             0
    #define   LSb16MIC4_HBRDMAP_PORT0                             0
    #define       bMIC4_HBRDMAP_PORT0                          2
    #define   MSK32MIC4_HBRDMAP_PORT0                             0x00000003

    #define     BA_MIC4_HBRDMAP_PORT1                          0x0034
    #define     B16MIC4_HBRDMAP_PORT1                          0x0034
    #define   LSb32MIC4_HBRDMAP_PORT1                             2
    #define   LSb16MIC4_HBRDMAP_PORT1                             2
    #define       bMIC4_HBRDMAP_PORT1                          2
    #define   MSK32MIC4_HBRDMAP_PORT1                             0x0000000C

    #define     BA_MIC4_HBRDMAP_PORT2                          0x0034
    #define     B16MIC4_HBRDMAP_PORT2                          0x0034
    #define   LSb32MIC4_HBRDMAP_PORT2                             4
    #define   LSb16MIC4_HBRDMAP_PORT2                             4
    #define       bMIC4_HBRDMAP_PORT2                          2
    #define   MSK32MIC4_HBRDMAP_PORT2                             0x00000030

    #define     BA_MIC4_HBRDMAP_PORT3                          0x0034
    #define     B16MIC4_HBRDMAP_PORT3                          0x0034
    #define   LSb32MIC4_HBRDMAP_PORT3                             6
    #define   LSb16MIC4_HBRDMAP_PORT3                             6
    #define       bMIC4_HBRDMAP_PORT3                          2
    #define   MSK32MIC4_HBRDMAP_PORT3                             0x000000C0
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MIC4 {
    ///////////////////////////////////////////////////////////
              SIE_PRIAUD                                       ie_MICCTRL;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD0;
    ///////////////////////////////////////////////////////////
              SIE_DBG_RX                                       ie_DBG;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD1;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD2;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD3;
    ///////////////////////////////////////////////////////////
    #define   GET32MIC4_RXPORT_ENABLE(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32MIC4_RXPORT_ENABLE(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16MIC4_RXPORT_ENABLE(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16MIC4_RXPORT_ENABLE(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32MIC4_RXPORT                                 {\
            UNSG32 uRXPORT_ENABLE                              :  1;\
            UNSG32 RSVDx28_b1                                  : 31;\
          }
    union { UNSG32 u32MIC4_RXPORT;
            struct w32MIC4_RXPORT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC4_RXDATA_HBR(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32MIC4_RXDATA_HBR(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16MIC4_RXDATA_HBR(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16MIC4_RXDATA_HBR(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define   GET32MIC4_RXDATA_TDM_HR(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32MIC4_RXDATA_TDM_HR(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16MIC4_RXDATA_TDM_HR(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16MIC4_RXDATA_TDM_HR(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define     w32MIC4_RXDATA                                 {\
            UNSG32 uRXDATA_HBR                                 :  1;\
            UNSG32 uRXDATA_TDM_HR                              :  1;\
            UNSG32 RSVDx2C_b2                                  : 30;\
          }
    union { UNSG32 u32MIC4_RXDATA;
            struct w32MIC4_RXDATA;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC4_INTLMODE_PORT0_EN(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32MIC4_INTLMODE_PORT0_EN(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16MIC4_INTLMODE_PORT0_EN(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16MIC4_INTLMODE_PORT0_EN(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32MIC4_INTLMODE_PORT1_EN(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32MIC4_INTLMODE_PORT1_EN(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16MIC4_INTLMODE_PORT1_EN(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16MIC4_INTLMODE_PORT1_EN(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32MIC4_INTLMODE_PORT2_EN(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32MIC4_INTLMODE_PORT2_EN(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16MIC4_INTLMODE_PORT2_EN(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16MIC4_INTLMODE_PORT2_EN(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32MIC4_INTLMODE_PORT3_EN(r32)                 _BFGET_(r32, 3, 3)
    #define   SET32MIC4_INTLMODE_PORT3_EN(r32,v)               _BFSET_(r32, 3, 3,v)
    #define   GET16MIC4_INTLMODE_PORT3_EN(r16)                 _BFGET_(r16, 3, 3)
    #define   SET16MIC4_INTLMODE_PORT3_EN(r16,v)               _BFSET_(r16, 3, 3,v)

    #define   GET32MIC4_INTLMODE_DUMMYDATA_EN(r32)             _BFGET_(r32, 4, 4)
    #define   SET32MIC4_INTLMODE_DUMMYDATA_EN(r32,v)           _BFSET_(r32, 4, 4,v)
    #define   GET16MIC4_INTLMODE_DUMMYDATA_EN(r16)             _BFGET_(r16, 4, 4)
    #define   SET16MIC4_INTLMODE_DUMMYDATA_EN(r16,v)           _BFSET_(r16, 4, 4,v)

    #define     w32MIC4_INTLMODE                               {\
            UNSG32 uINTLMODE_PORT0_EN                          :  1;\
            UNSG32 uINTLMODE_PORT1_EN                          :  1;\
            UNSG32 uINTLMODE_PORT2_EN                          :  1;\
            UNSG32 uINTLMODE_PORT3_EN                          :  1;\
            UNSG32 uINTLMODE_DUMMYDATA_EN                      :  1;\
            UNSG32 RSVDx30_b5                                  : 27;\
          }
    union { UNSG32 u32MIC4_INTLMODE;
            struct w32MIC4_INTLMODE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC4_HBRDMAP_PORT0(r32)                     _BFGET_(r32, 1, 0)
    #define   SET32MIC4_HBRDMAP_PORT0(r32,v)                   _BFSET_(r32, 1, 0,v)
    #define   GET16MIC4_HBRDMAP_PORT0(r16)                     _BFGET_(r16, 1, 0)
    #define   SET16MIC4_HBRDMAP_PORT0(r16,v)                   _BFSET_(r16, 1, 0,v)

    #define   GET32MIC4_HBRDMAP_PORT1(r32)                     _BFGET_(r32, 3, 2)
    #define   SET32MIC4_HBRDMAP_PORT1(r32,v)                   _BFSET_(r32, 3, 2,v)
    #define   GET16MIC4_HBRDMAP_PORT1(r16)                     _BFGET_(r16, 3, 2)
    #define   SET16MIC4_HBRDMAP_PORT1(r16,v)                   _BFSET_(r16, 3, 2,v)

    #define   GET32MIC4_HBRDMAP_PORT2(r32)                     _BFGET_(r32, 5, 4)
    #define   SET32MIC4_HBRDMAP_PORT2(r32,v)                   _BFSET_(r32, 5, 4,v)
    #define   GET16MIC4_HBRDMAP_PORT2(r16)                     _BFGET_(r16, 5, 4)
    #define   SET16MIC4_HBRDMAP_PORT2(r16,v)                   _BFSET_(r16, 5, 4,v)

    #define   GET32MIC4_HBRDMAP_PORT3(r32)                     _BFGET_(r32, 7, 6)
    #define   SET32MIC4_HBRDMAP_PORT3(r32,v)                   _BFSET_(r32, 7, 6,v)
    #define   GET16MIC4_HBRDMAP_PORT3(r16)                     _BFGET_(r16, 7, 6)
    #define   SET16MIC4_HBRDMAP_PORT3(r16,v)                   _BFSET_(r16, 7, 6,v)

    #define     w32MIC4_HBRDMAP                                {\
            UNSG32 uHBRDMAP_PORT0                              :  2;\
            UNSG32 uHBRDMAP_PORT1                              :  2;\
            UNSG32 uHBRDMAP_PORT2                              :  2;\
            UNSG32 uHBRDMAP_PORT3                              :  2;\
            UNSG32 RSVDx34_b8                                  : 24;\
          }
    union { UNSG32 u32MIC4_HBRDMAP;
            struct w32MIC4_HBRDMAP;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MIC4;

    typedef union  T32MIC4_RXPORT
          { UNSG32 u32;
            struct w32MIC4_RXPORT;
                 } T32MIC4_RXPORT;
    typedef union  T32MIC4_RXDATA
          { UNSG32 u32;
            struct w32MIC4_RXDATA;
                 } T32MIC4_RXDATA;
    typedef union  T32MIC4_INTLMODE
          { UNSG32 u32;
            struct w32MIC4_INTLMODE;
                 } T32MIC4_INTLMODE;
    typedef union  T32MIC4_HBRDMAP
          { UNSG32 u32;
            struct w32MIC4_HBRDMAP;
                 } T32MIC4_HBRDMAP;
    ///////////////////////////////////////////////////////////

    typedef union  TMIC4_RXPORT
          { UNSG32 u32[1];
            struct {
            struct w32MIC4_RXPORT;
                   };
                 } TMIC4_RXPORT;
    typedef union  TMIC4_RXDATA
          { UNSG32 u32[1];
            struct {
            struct w32MIC4_RXDATA;
                   };
                 } TMIC4_RXDATA;
    typedef union  TMIC4_INTLMODE
          { UNSG32 u32[1];
            struct {
            struct w32MIC4_INTLMODE;
                   };
                 } TMIC4_INTLMODE;
    typedef union  TMIC4_HBRDMAP
          { UNSG32 u32[1];
            struct {
            struct w32MIC4_HBRDMAP;
                   };
                 } TMIC4_HBRDMAP;

    ///////////////////////////////////////////////////////////
     SIGN32 MIC4_drvrd(SIE_MIC4 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MIC4_drvwr(SIE_MIC4 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MIC4_reset(SIE_MIC4 *p);
     SIGN32 MIC4_cmp  (SIE_MIC4 *p, SIE_MIC4 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MIC4_check(p,pie,pfx,hLOG) MIC4_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MIC4_print(p,    pfx,hLOG) MIC4_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MIC4
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MIC5                                     (4,4)
///     ###
///     * RX Port registers – HDMI TX loop back RX – HDMI TX Transmit data loop backed Data
///     * Audio Primary port Control registers
///     * – 2/4/6/8 Channel data (I2S/LJ/RJ) over x4 Lines
///     * Operating Modes Capability :
///     * – I2S MODE
///     * – LJ MODE
///     * – RJ MODE
///     * – TDM MODE (Usage restricted as per NO requirement from System Team)
///     * – PCM MONO MODE (Usage restricted as per NO requirement from System Team)
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 MICCTRL              
///               $PRIAUD              MICCTRL           REG          
///                                    ###
///                                    * RX Port Channel 0 control register
///                                    ###
///     @ 0x0000C                      (P)
///     # 0x0000C RSD0                 
///               $AUDCH               RSD0              REG          
///     @ 0x00010                      (P)
///     # 0x00010 DBG                  
///               $DBG_RX              DBG               REG          
///                                    ###
///                                    * RX Port Channel 1 control register
///                                    ###
///     @ 0x0001C                      (P)
///     # 0x0001C RSD1                 
///               $AUDCH               RSD1              REG          
///     @ 0x00020                      (P)
///     # 0x00020 RSD2                 
///               $AUDCH               RSD2              REG          
///     @ 0x00024                      (P)
///     # 0x00024 RSD3                 
///               $AUDCH               RSD3              REG          
///                                    ###
///                                    * RX Port Channel 2 control register
///                                    ###
///     @ 0x00028 RXPORT               (P)
///               %unsigned 1  ENABLE                    0x0
///                                    ###
///                                    * Register bit to enable or disable the whole RX Audio port:
///                                    * 0: Disabled (default)
///                                    * 1: Enabled
///                                    * Note: User can selects the desired number of audio channels within the RX port by setting the
///                                    * corresponding enable bits for channel 0/1/2/3
///                                    ###
///                                    : DISABLE                   0x0
///                                    : ENABLE                    0x1
///               %%        31         # Stuffing bits...
///     @ 0x0002C RXDATA               (P)
///               %unsigned 1  HBR                       0x0
///                                    ###
///                                    * Register bit to indicate whether incoming data is 8-channel HBR or LPCM (or 2-channel HBR)
///                                    * 1 : HBR data (8-channel HBR)
///                                    * 0 : LPCM data
///                                    * Note: This bit should not be set to 1, in case of 2-channel HBR. As there is no difference in behavior of this module between 2-channel HBR or 2-channel LPCM data.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %unsigned 1  TDM_HR                    0x0
///                                    ###
///                                    * Indicates if TDM data is sent over 2 I2S lanes at 128Fs rate
///                                    * 0 : No effect.
///                                    * 1 : Indicates TDM half rate and data formatting has will be enabled.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00030 INTLMODE             (P)
///               %unsigned 1  PORT0_EN                  0x0
///                                    ###
///                                    * Indicated if Port 0 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT1_EN                  0x0
///                                    ###
///                                    * Indicated if Port 1 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT2_EN                  0x0
///                                    ###
///                                    * Indicated if Port 2 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT3_EN                  0x0
///                                    ###
///                                    * Indicated if Port 3 of MIC1 is enabled
///                                    ###
///               %unsigned 1  DUMMYDATA_EN              0x0
///                                    ###
///                                    * Indicates if Dummy data has to be sent in the non enabled ports.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00034 HBRDMAP              (P)
///               ###
///               * HBR DATA MAP Register. / INTL DATA MAP Register (if INTLMODE is enabled)
///               * In 8-channel HBR data mode. 128-bits of data is received by SoC. These registers bits allows the users to map the 32 bits received on each port to the desired place in 128-bits.
///               * In 8-Channel INTL Mode. 256-bit of data is received by SoC. These registers bits allows the users to map the 64 bits received on each port to the desired place in 256-bits.
///               * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///               ###
///               %unsigned 2  PORT0                     0x0
///                                    ###
///                                    * Data select for [31:0]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT1                     0x1
///                                    ###
///                                    * Data select for [63:32]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT2                     0x2
///                                    ###
///                                    * Data select for [95:64]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT3                     0x3
///                                    ###
///                                    * Data select for [127:96]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %%        24         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      56B, bits:     150b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MIC5
#define h_MIC5 (){}

    #define     RA_MIC5_MICCTRL                                0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_MIC5_RSD0                                   0x000C
    ///////////////////////////////////////////////////////////
    #define     RA_MIC5_DBG                                    0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_MIC5_RSD1                                   0x001C
    ///////////////////////////////////////////////////////////
    #define     RA_MIC5_RSD2                                   0x0020
    ///////////////////////////////////////////////////////////
    #define     RA_MIC5_RSD3                                   0x0024
    ///////////////////////////////////////////////////////////
    #define     RA_MIC5_RXPORT                                 0x0028

    #define     BA_MIC5_RXPORT_ENABLE                          0x0028
    #define     B16MIC5_RXPORT_ENABLE                          0x0028
    #define   LSb32MIC5_RXPORT_ENABLE                             0
    #define   LSb16MIC5_RXPORT_ENABLE                             0
    #define       bMIC5_RXPORT_ENABLE                          1
    #define   MSK32MIC5_RXPORT_ENABLE                             0x00000001
    #define        MIC5_RXPORT_ENABLE_DISABLE                               0x0
    #define        MIC5_RXPORT_ENABLE_ENABLE                                0x1
    ///////////////////////////////////////////////////////////
    #define     RA_MIC5_RXDATA                                 0x002C

    #define     BA_MIC5_RXDATA_HBR                             0x002C
    #define     B16MIC5_RXDATA_HBR                             0x002C
    #define   LSb32MIC5_RXDATA_HBR                                0
    #define   LSb16MIC5_RXDATA_HBR                                0
    #define       bMIC5_RXDATA_HBR                             1
    #define   MSK32MIC5_RXDATA_HBR                                0x00000001

    #define     BA_MIC5_RXDATA_TDM_HR                          0x002C
    #define     B16MIC5_RXDATA_TDM_HR                          0x002C
    #define   LSb32MIC5_RXDATA_TDM_HR                             1
    #define   LSb16MIC5_RXDATA_TDM_HR                             1
    #define       bMIC5_RXDATA_TDM_HR                          1
    #define   MSK32MIC5_RXDATA_TDM_HR                             0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_MIC5_INTLMODE                               0x0030

    #define     BA_MIC5_INTLMODE_PORT0_EN                      0x0030
    #define     B16MIC5_INTLMODE_PORT0_EN                      0x0030
    #define   LSb32MIC5_INTLMODE_PORT0_EN                         0
    #define   LSb16MIC5_INTLMODE_PORT0_EN                         0
    #define       bMIC5_INTLMODE_PORT0_EN                      1
    #define   MSK32MIC5_INTLMODE_PORT0_EN                         0x00000001

    #define     BA_MIC5_INTLMODE_PORT1_EN                      0x0030
    #define     B16MIC5_INTLMODE_PORT1_EN                      0x0030
    #define   LSb32MIC5_INTLMODE_PORT1_EN                         1
    #define   LSb16MIC5_INTLMODE_PORT1_EN                         1
    #define       bMIC5_INTLMODE_PORT1_EN                      1
    #define   MSK32MIC5_INTLMODE_PORT1_EN                         0x00000002

    #define     BA_MIC5_INTLMODE_PORT2_EN                      0x0030
    #define     B16MIC5_INTLMODE_PORT2_EN                      0x0030
    #define   LSb32MIC5_INTLMODE_PORT2_EN                         2
    #define   LSb16MIC5_INTLMODE_PORT2_EN                         2
    #define       bMIC5_INTLMODE_PORT2_EN                      1
    #define   MSK32MIC5_INTLMODE_PORT2_EN                         0x00000004

    #define     BA_MIC5_INTLMODE_PORT3_EN                      0x0030
    #define     B16MIC5_INTLMODE_PORT3_EN                      0x0030
    #define   LSb32MIC5_INTLMODE_PORT3_EN                         3
    #define   LSb16MIC5_INTLMODE_PORT3_EN                         3
    #define       bMIC5_INTLMODE_PORT3_EN                      1
    #define   MSK32MIC5_INTLMODE_PORT3_EN                         0x00000008

    #define     BA_MIC5_INTLMODE_DUMMYDATA_EN                  0x0030
    #define     B16MIC5_INTLMODE_DUMMYDATA_EN                  0x0030
    #define   LSb32MIC5_INTLMODE_DUMMYDATA_EN                     4
    #define   LSb16MIC5_INTLMODE_DUMMYDATA_EN                     4
    #define       bMIC5_INTLMODE_DUMMYDATA_EN                  1
    #define   MSK32MIC5_INTLMODE_DUMMYDATA_EN                     0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_MIC5_HBRDMAP                                0x0034

    #define     BA_MIC5_HBRDMAP_PORT0                          0x0034
    #define     B16MIC5_HBRDMAP_PORT0                          0x0034
    #define   LSb32MIC5_HBRDMAP_PORT0                             0
    #define   LSb16MIC5_HBRDMAP_PORT0                             0
    #define       bMIC5_HBRDMAP_PORT0                          2
    #define   MSK32MIC5_HBRDMAP_PORT0                             0x00000003

    #define     BA_MIC5_HBRDMAP_PORT1                          0x0034
    #define     B16MIC5_HBRDMAP_PORT1                          0x0034
    #define   LSb32MIC5_HBRDMAP_PORT1                             2
    #define   LSb16MIC5_HBRDMAP_PORT1                             2
    #define       bMIC5_HBRDMAP_PORT1                          2
    #define   MSK32MIC5_HBRDMAP_PORT1                             0x0000000C

    #define     BA_MIC5_HBRDMAP_PORT2                          0x0034
    #define     B16MIC5_HBRDMAP_PORT2                          0x0034
    #define   LSb32MIC5_HBRDMAP_PORT2                             4
    #define   LSb16MIC5_HBRDMAP_PORT2                             4
    #define       bMIC5_HBRDMAP_PORT2                          2
    #define   MSK32MIC5_HBRDMAP_PORT2                             0x00000030

    #define     BA_MIC5_HBRDMAP_PORT3                          0x0034
    #define     B16MIC5_HBRDMAP_PORT3                          0x0034
    #define   LSb32MIC5_HBRDMAP_PORT3                             6
    #define   LSb16MIC5_HBRDMAP_PORT3                             6
    #define       bMIC5_HBRDMAP_PORT3                          2
    #define   MSK32MIC5_HBRDMAP_PORT3                             0x000000C0
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MIC5 {
    ///////////////////////////////////////////////////////////
              SIE_PRIAUD                                       ie_MICCTRL;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD0;
    ///////////////////////////////////////////////////////////
              SIE_DBG_RX                                       ie_DBG;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD1;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD2;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD3;
    ///////////////////////////////////////////////////////////
    #define   GET32MIC5_RXPORT_ENABLE(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32MIC5_RXPORT_ENABLE(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16MIC5_RXPORT_ENABLE(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16MIC5_RXPORT_ENABLE(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32MIC5_RXPORT                                 {\
            UNSG32 uRXPORT_ENABLE                              :  1;\
            UNSG32 RSVDx28_b1                                  : 31;\
          }
    union { UNSG32 u32MIC5_RXPORT;
            struct w32MIC5_RXPORT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC5_RXDATA_HBR(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32MIC5_RXDATA_HBR(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16MIC5_RXDATA_HBR(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16MIC5_RXDATA_HBR(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define   GET32MIC5_RXDATA_TDM_HR(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32MIC5_RXDATA_TDM_HR(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16MIC5_RXDATA_TDM_HR(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16MIC5_RXDATA_TDM_HR(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define     w32MIC5_RXDATA                                 {\
            UNSG32 uRXDATA_HBR                                 :  1;\
            UNSG32 uRXDATA_TDM_HR                              :  1;\
            UNSG32 RSVDx2C_b2                                  : 30;\
          }
    union { UNSG32 u32MIC5_RXDATA;
            struct w32MIC5_RXDATA;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC5_INTLMODE_PORT0_EN(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32MIC5_INTLMODE_PORT0_EN(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16MIC5_INTLMODE_PORT0_EN(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16MIC5_INTLMODE_PORT0_EN(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32MIC5_INTLMODE_PORT1_EN(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32MIC5_INTLMODE_PORT1_EN(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16MIC5_INTLMODE_PORT1_EN(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16MIC5_INTLMODE_PORT1_EN(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32MIC5_INTLMODE_PORT2_EN(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32MIC5_INTLMODE_PORT2_EN(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16MIC5_INTLMODE_PORT2_EN(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16MIC5_INTLMODE_PORT2_EN(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32MIC5_INTLMODE_PORT3_EN(r32)                 _BFGET_(r32, 3, 3)
    #define   SET32MIC5_INTLMODE_PORT3_EN(r32,v)               _BFSET_(r32, 3, 3,v)
    #define   GET16MIC5_INTLMODE_PORT3_EN(r16)                 _BFGET_(r16, 3, 3)
    #define   SET16MIC5_INTLMODE_PORT3_EN(r16,v)               _BFSET_(r16, 3, 3,v)

    #define   GET32MIC5_INTLMODE_DUMMYDATA_EN(r32)             _BFGET_(r32, 4, 4)
    #define   SET32MIC5_INTLMODE_DUMMYDATA_EN(r32,v)           _BFSET_(r32, 4, 4,v)
    #define   GET16MIC5_INTLMODE_DUMMYDATA_EN(r16)             _BFGET_(r16, 4, 4)
    #define   SET16MIC5_INTLMODE_DUMMYDATA_EN(r16,v)           _BFSET_(r16, 4, 4,v)

    #define     w32MIC5_INTLMODE                               {\
            UNSG32 uINTLMODE_PORT0_EN                          :  1;\
            UNSG32 uINTLMODE_PORT1_EN                          :  1;\
            UNSG32 uINTLMODE_PORT2_EN                          :  1;\
            UNSG32 uINTLMODE_PORT3_EN                          :  1;\
            UNSG32 uINTLMODE_DUMMYDATA_EN                      :  1;\
            UNSG32 RSVDx30_b5                                  : 27;\
          }
    union { UNSG32 u32MIC5_INTLMODE;
            struct w32MIC5_INTLMODE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC5_HBRDMAP_PORT0(r32)                     _BFGET_(r32, 1, 0)
    #define   SET32MIC5_HBRDMAP_PORT0(r32,v)                   _BFSET_(r32, 1, 0,v)
    #define   GET16MIC5_HBRDMAP_PORT0(r16)                     _BFGET_(r16, 1, 0)
    #define   SET16MIC5_HBRDMAP_PORT0(r16,v)                   _BFSET_(r16, 1, 0,v)

    #define   GET32MIC5_HBRDMAP_PORT1(r32)                     _BFGET_(r32, 3, 2)
    #define   SET32MIC5_HBRDMAP_PORT1(r32,v)                   _BFSET_(r32, 3, 2,v)
    #define   GET16MIC5_HBRDMAP_PORT1(r16)                     _BFGET_(r16, 3, 2)
    #define   SET16MIC5_HBRDMAP_PORT1(r16,v)                   _BFSET_(r16, 3, 2,v)

    #define   GET32MIC5_HBRDMAP_PORT2(r32)                     _BFGET_(r32, 5, 4)
    #define   SET32MIC5_HBRDMAP_PORT2(r32,v)                   _BFSET_(r32, 5, 4,v)
    #define   GET16MIC5_HBRDMAP_PORT2(r16)                     _BFGET_(r16, 5, 4)
    #define   SET16MIC5_HBRDMAP_PORT2(r16,v)                   _BFSET_(r16, 5, 4,v)

    #define   GET32MIC5_HBRDMAP_PORT3(r32)                     _BFGET_(r32, 7, 6)
    #define   SET32MIC5_HBRDMAP_PORT3(r32,v)                   _BFSET_(r32, 7, 6,v)
    #define   GET16MIC5_HBRDMAP_PORT3(r16)                     _BFGET_(r16, 7, 6)
    #define   SET16MIC5_HBRDMAP_PORT3(r16,v)                   _BFSET_(r16, 7, 6,v)

    #define     w32MIC5_HBRDMAP                                {\
            UNSG32 uHBRDMAP_PORT0                              :  2;\
            UNSG32 uHBRDMAP_PORT1                              :  2;\
            UNSG32 uHBRDMAP_PORT2                              :  2;\
            UNSG32 uHBRDMAP_PORT3                              :  2;\
            UNSG32 RSVDx34_b8                                  : 24;\
          }
    union { UNSG32 u32MIC5_HBRDMAP;
            struct w32MIC5_HBRDMAP;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MIC5;

    typedef union  T32MIC5_RXPORT
          { UNSG32 u32;
            struct w32MIC5_RXPORT;
                 } T32MIC5_RXPORT;
    typedef union  T32MIC5_RXDATA
          { UNSG32 u32;
            struct w32MIC5_RXDATA;
                 } T32MIC5_RXDATA;
    typedef union  T32MIC5_INTLMODE
          { UNSG32 u32;
            struct w32MIC5_INTLMODE;
                 } T32MIC5_INTLMODE;
    typedef union  T32MIC5_HBRDMAP
          { UNSG32 u32;
            struct w32MIC5_HBRDMAP;
                 } T32MIC5_HBRDMAP;
    ///////////////////////////////////////////////////////////

    typedef union  TMIC5_RXPORT
          { UNSG32 u32[1];
            struct {
            struct w32MIC5_RXPORT;
                   };
                 } TMIC5_RXPORT;
    typedef union  TMIC5_RXDATA
          { UNSG32 u32[1];
            struct {
            struct w32MIC5_RXDATA;
                   };
                 } TMIC5_RXDATA;
    typedef union  TMIC5_INTLMODE
          { UNSG32 u32[1];
            struct {
            struct w32MIC5_INTLMODE;
                   };
                 } TMIC5_INTLMODE;
    typedef union  TMIC5_HBRDMAP
          { UNSG32 u32[1];
            struct {
            struct w32MIC5_HBRDMAP;
                   };
                 } TMIC5_HBRDMAP;

    ///////////////////////////////////////////////////////////
     SIGN32 MIC5_drvrd(SIE_MIC5 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MIC5_drvwr(SIE_MIC5 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MIC5_reset(SIE_MIC5 *p);
     SIGN32 MIC5_cmp  (SIE_MIC5 *p, SIE_MIC5 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MIC5_check(p,pie,pfx,hLOG) MIC5_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MIC5_print(p,    pfx,hLOG) MIC5_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MIC5
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MIC6                                     (4,4)
///     ###
///     * RX Port registers – eARC Rx I2S
///     * Audio Primary port Control registers
///     * – 2/4/6/8 Channel data (I2S/LJ/RJ) over x4 Lines
///     * Operating Modes Capability :
///     * – I2S MODE
///     * – LJ MODE
///     * – RJ MODE
///     * – TDM MODE
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 MICCTRL              
///               $PRIAUD              MICCTRL           REG          
///                                    ###
///                                    * RX Port Channel 0 control register
///                                    ###
///     @ 0x0000C                      (P)
///     # 0x0000C RSD0                 
///               $AUDCH               RSD0              REG          
///     @ 0x00010                      (P)
///     # 0x00010 DBG                  
///               $DBG_RX              DBG               REG          
///                                    ###
///                                    * RX Port Channel 1 control register
///                                    ###
///     @ 0x0001C                      (P)
///     # 0x0001C RSD1                 
///               $AUDCH               RSD1              REG          
///     @ 0x00020                      (P)
///     # 0x00020 RSD2                 
///               $AUDCH               RSD2              REG          
///     @ 0x00024                      (P)
///     # 0x00024 RSD3                 
///               $AUDCH               RSD3              REG          
///                                    ###
///                                    * RX Port Channel 2 control register
///                                    ###
///     @ 0x00028 EARC_I2S             (P)
///               %unsigned 3  FRORD                     0x0
///                                    ###
///                                    * Reordering of the I2S channel data received from eARC Rx.
///                                    * Value
///                                    * I2S Frame received from eARC Rx
///                                    * I2S Frame to be stored in DRAM
///                                    * 000
///                                    * {B, Payload, V, U, C, P}
///                                    * {Payload, B, V, U, C, P}
///                                    * 001
///                                    * {V, U, C, P, Payload, B}
///                                    * {Payload, B, V, U, C, P}
///                                    * 010
///                                    * {Payload, B, V, U, C, P}
///                                    * {Payload, B, V, U, C, P}
///                                    * 011
///                                    * {B, V, U, C, P, Payload}
///                                    * {Payload, B, V, U, C, P}
///                                    * 100
///                                    * {B, Payload, V, U, C, P}
///                                    * {B, V, U, C, P, Payload}
///                                    * 101
///                                    * {V, U, C, P, Payload, B}
///                                    * {B, V, U, C, P, Payload}
///                                    * 110
///                                    * {Payload, B, V, U, C, P}
///                                    * {B, V, U, C, P, Payload}
///                                    * 111
///                                    * {B, V, U, C, P, Payload}
///                                    * {B, V, U, C, P, Payload}
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x0002C RXPORT               (P)
///               %unsigned 1  ENABLE                    0x0
///                                    ###
///                                    * Register bit to enable or disable the whole RX Audio port:
///                                    * 0: Disabled (default)
///                                    * 1: Enabled
///                                    * Note: User can selects the desired number of audio channels within the RX port by setting the
///                                    * corresponding enable bits for channel 0/1/2/3
///                                    ###
///                                    : DISABLE                   0x0
///                                    : ENABLE                    0x1
///               %%        31         # Stuffing bits...
///     @ 0x00030 RXDATA               (P)
///               %unsigned 1  HBR                       0x0
///                                    ###
///                                    * Register bit to indicate whether incoming data is 8-channel HBR or LPCM (or 2-channel HBR)
///                                    * 1 : HBR data (8-channel HBR)
///                                    * 0 : LPCM data
///                                    * Note: This bit should not be set to 1, in case of 2-channel HBR. As there is no difference in behavior of this module between 2-channel HBR or 2-channel LPCM data.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %unsigned 1  TDM_HR                    0x0
///                                    ###
///                                    * Indicates if TDM data is sent over 2 I2S lanes at 128Fs rate
///                                    * 0 : No effect.
///                                    * 1 : Indicates TDM half rate and data formatting has will be enabled.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00034 INTLMODE             (P)
///               %unsigned 1  PORT0_EN                  0x0
///                                    ###
///                                    * Indicated if Port 0 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT1_EN                  0x0
///                                    ###
///                                    * Indicated if Port 1 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT2_EN                  0x0
///                                    ###
///                                    * Indicated if Port 2 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT3_EN                  0x0
///                                    ###
///                                    * Indicated if Port 3 of MIC1 is enabled
///                                    ###
///               %unsigned 1  DUMMYDATA_EN              0x0
///                                    ###
///                                    * Indicates if Dummy data has to be sent in the non enabled ports.
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00038 HBRDMAP              (P)
///               ###
///               * HBR DATA MAP Register. / INTL DATA MAP Register (if INTLMODE is enabled)
///               * In 8-channel HBR data mode. 128-bits of data is received by SoC. These registers bits allows the users to map the 32 bits received on each port to the desired place in 128-bits.
///               * In 8-Channel INTL Mode. 256-bit of data is received by SoC. These registers bits allows the users to map the 64 bits received on each port to the desired place in 256-bits.
///               * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///               ###
///               %unsigned 2  PORT0                     0x0
///                                    ###
///                                    * Data select for [31:0]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT1                     0x1
///                                    ###
///                                    * Data select for [63:32]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT2                     0x2
///                                    ###
///                                    * Data select for [95:64]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT3                     0x3
///                                    ###
///                                    * Data select for [127:96]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %%        24         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      60B, bits:     153b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MIC6
#define h_MIC6 (){}

    #define     RA_MIC6_MICCTRL                                0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_MIC6_RSD0                                   0x000C
    ///////////////////////////////////////////////////////////
    #define     RA_MIC6_DBG                                    0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_MIC6_RSD1                                   0x001C
    ///////////////////////////////////////////////////////////
    #define     RA_MIC6_RSD2                                   0x0020
    ///////////////////////////////////////////////////////////
    #define     RA_MIC6_RSD3                                   0x0024
    ///////////////////////////////////////////////////////////
    #define     RA_MIC6_EARC_I2S                               0x0028

    #define     BA_MIC6_EARC_I2S_FRORD                         0x0028
    #define     B16MIC6_EARC_I2S_FRORD                         0x0028
    #define   LSb32MIC6_EARC_I2S_FRORD                            0
    #define   LSb16MIC6_EARC_I2S_FRORD                            0
    #define       bMIC6_EARC_I2S_FRORD                         3
    #define   MSK32MIC6_EARC_I2S_FRORD                            0x00000007
    ///////////////////////////////////////////////////////////
    #define     RA_MIC6_RXPORT                                 0x002C

    #define     BA_MIC6_RXPORT_ENABLE                          0x002C
    #define     B16MIC6_RXPORT_ENABLE                          0x002C
    #define   LSb32MIC6_RXPORT_ENABLE                             0
    #define   LSb16MIC6_RXPORT_ENABLE                             0
    #define       bMIC6_RXPORT_ENABLE                          1
    #define   MSK32MIC6_RXPORT_ENABLE                             0x00000001
    #define        MIC6_RXPORT_ENABLE_DISABLE                               0x0
    #define        MIC6_RXPORT_ENABLE_ENABLE                                0x1
    ///////////////////////////////////////////////////////////
    #define     RA_MIC6_RXDATA                                 0x0030

    #define     BA_MIC6_RXDATA_HBR                             0x0030
    #define     B16MIC6_RXDATA_HBR                             0x0030
    #define   LSb32MIC6_RXDATA_HBR                                0
    #define   LSb16MIC6_RXDATA_HBR                                0
    #define       bMIC6_RXDATA_HBR                             1
    #define   MSK32MIC6_RXDATA_HBR                                0x00000001

    #define     BA_MIC6_RXDATA_TDM_HR                          0x0030
    #define     B16MIC6_RXDATA_TDM_HR                          0x0030
    #define   LSb32MIC6_RXDATA_TDM_HR                             1
    #define   LSb16MIC6_RXDATA_TDM_HR                             1
    #define       bMIC6_RXDATA_TDM_HR                          1
    #define   MSK32MIC6_RXDATA_TDM_HR                             0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_MIC6_INTLMODE                               0x0034

    #define     BA_MIC6_INTLMODE_PORT0_EN                      0x0034
    #define     B16MIC6_INTLMODE_PORT0_EN                      0x0034
    #define   LSb32MIC6_INTLMODE_PORT0_EN                         0
    #define   LSb16MIC6_INTLMODE_PORT0_EN                         0
    #define       bMIC6_INTLMODE_PORT0_EN                      1
    #define   MSK32MIC6_INTLMODE_PORT0_EN                         0x00000001

    #define     BA_MIC6_INTLMODE_PORT1_EN                      0x0034
    #define     B16MIC6_INTLMODE_PORT1_EN                      0x0034
    #define   LSb32MIC6_INTLMODE_PORT1_EN                         1
    #define   LSb16MIC6_INTLMODE_PORT1_EN                         1
    #define       bMIC6_INTLMODE_PORT1_EN                      1
    #define   MSK32MIC6_INTLMODE_PORT1_EN                         0x00000002

    #define     BA_MIC6_INTLMODE_PORT2_EN                      0x0034
    #define     B16MIC6_INTLMODE_PORT2_EN                      0x0034
    #define   LSb32MIC6_INTLMODE_PORT2_EN                         2
    #define   LSb16MIC6_INTLMODE_PORT2_EN                         2
    #define       bMIC6_INTLMODE_PORT2_EN                      1
    #define   MSK32MIC6_INTLMODE_PORT2_EN                         0x00000004

    #define     BA_MIC6_INTLMODE_PORT3_EN                      0x0034
    #define     B16MIC6_INTLMODE_PORT3_EN                      0x0034
    #define   LSb32MIC6_INTLMODE_PORT3_EN                         3
    #define   LSb16MIC6_INTLMODE_PORT3_EN                         3
    #define       bMIC6_INTLMODE_PORT3_EN                      1
    #define   MSK32MIC6_INTLMODE_PORT3_EN                         0x00000008

    #define     BA_MIC6_INTLMODE_DUMMYDATA_EN                  0x0034
    #define     B16MIC6_INTLMODE_DUMMYDATA_EN                  0x0034
    #define   LSb32MIC6_INTLMODE_DUMMYDATA_EN                     4
    #define   LSb16MIC6_INTLMODE_DUMMYDATA_EN                     4
    #define       bMIC6_INTLMODE_DUMMYDATA_EN                  1
    #define   MSK32MIC6_INTLMODE_DUMMYDATA_EN                     0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_MIC6_HBRDMAP                                0x0038

    #define     BA_MIC6_HBRDMAP_PORT0                          0x0038
    #define     B16MIC6_HBRDMAP_PORT0                          0x0038
    #define   LSb32MIC6_HBRDMAP_PORT0                             0
    #define   LSb16MIC6_HBRDMAP_PORT0                             0
    #define       bMIC6_HBRDMAP_PORT0                          2
    #define   MSK32MIC6_HBRDMAP_PORT0                             0x00000003

    #define     BA_MIC6_HBRDMAP_PORT1                          0x0038
    #define     B16MIC6_HBRDMAP_PORT1                          0x0038
    #define   LSb32MIC6_HBRDMAP_PORT1                             2
    #define   LSb16MIC6_HBRDMAP_PORT1                             2
    #define       bMIC6_HBRDMAP_PORT1                          2
    #define   MSK32MIC6_HBRDMAP_PORT1                             0x0000000C

    #define     BA_MIC6_HBRDMAP_PORT2                          0x0038
    #define     B16MIC6_HBRDMAP_PORT2                          0x0038
    #define   LSb32MIC6_HBRDMAP_PORT2                             4
    #define   LSb16MIC6_HBRDMAP_PORT2                             4
    #define       bMIC6_HBRDMAP_PORT2                          2
    #define   MSK32MIC6_HBRDMAP_PORT2                             0x00000030

    #define     BA_MIC6_HBRDMAP_PORT3                          0x0038
    #define     B16MIC6_HBRDMAP_PORT3                          0x0038
    #define   LSb32MIC6_HBRDMAP_PORT3                             6
    #define   LSb16MIC6_HBRDMAP_PORT3                             6
    #define       bMIC6_HBRDMAP_PORT3                          2
    #define   MSK32MIC6_HBRDMAP_PORT3                             0x000000C0
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MIC6 {
    ///////////////////////////////////////////////////////////
              SIE_PRIAUD                                       ie_MICCTRL;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD0;
    ///////////////////////////////////////////////////////////
              SIE_DBG_RX                                       ie_DBG;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD1;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD2;
    ///////////////////////////////////////////////////////////
              SIE_AUDCH                                        ie_RSD3;
    ///////////////////////////////////////////////////////////
    #define   GET32MIC6_EARC_I2S_FRORD(r32)                    _BFGET_(r32, 2, 0)
    #define   SET32MIC6_EARC_I2S_FRORD(r32,v)                  _BFSET_(r32, 2, 0,v)
    #define   GET16MIC6_EARC_I2S_FRORD(r16)                    _BFGET_(r16, 2, 0)
    #define   SET16MIC6_EARC_I2S_FRORD(r16,v)                  _BFSET_(r16, 2, 0,v)

    #define     w32MIC6_EARC_I2S                               {\
            UNSG32 uEARC_I2S_FRORD                             :  3;\
            UNSG32 RSVDx28_b3                                  : 29;\
          }
    union { UNSG32 u32MIC6_EARC_I2S;
            struct w32MIC6_EARC_I2S;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC6_RXPORT_ENABLE(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32MIC6_RXPORT_ENABLE(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16MIC6_RXPORT_ENABLE(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16MIC6_RXPORT_ENABLE(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32MIC6_RXPORT                                 {\
            UNSG32 uRXPORT_ENABLE                              :  1;\
            UNSG32 RSVDx2C_b1                                  : 31;\
          }
    union { UNSG32 u32MIC6_RXPORT;
            struct w32MIC6_RXPORT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC6_RXDATA_HBR(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32MIC6_RXDATA_HBR(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16MIC6_RXDATA_HBR(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16MIC6_RXDATA_HBR(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define   GET32MIC6_RXDATA_TDM_HR(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32MIC6_RXDATA_TDM_HR(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16MIC6_RXDATA_TDM_HR(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16MIC6_RXDATA_TDM_HR(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define     w32MIC6_RXDATA                                 {\
            UNSG32 uRXDATA_HBR                                 :  1;\
            UNSG32 uRXDATA_TDM_HR                              :  1;\
            UNSG32 RSVDx30_b2                                  : 30;\
          }
    union { UNSG32 u32MIC6_RXDATA;
            struct w32MIC6_RXDATA;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC6_INTLMODE_PORT0_EN(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32MIC6_INTLMODE_PORT0_EN(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16MIC6_INTLMODE_PORT0_EN(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16MIC6_INTLMODE_PORT0_EN(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32MIC6_INTLMODE_PORT1_EN(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32MIC6_INTLMODE_PORT1_EN(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16MIC6_INTLMODE_PORT1_EN(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16MIC6_INTLMODE_PORT1_EN(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32MIC6_INTLMODE_PORT2_EN(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32MIC6_INTLMODE_PORT2_EN(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16MIC6_INTLMODE_PORT2_EN(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16MIC6_INTLMODE_PORT2_EN(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32MIC6_INTLMODE_PORT3_EN(r32)                 _BFGET_(r32, 3, 3)
    #define   SET32MIC6_INTLMODE_PORT3_EN(r32,v)               _BFSET_(r32, 3, 3,v)
    #define   GET16MIC6_INTLMODE_PORT3_EN(r16)                 _BFGET_(r16, 3, 3)
    #define   SET16MIC6_INTLMODE_PORT3_EN(r16,v)               _BFSET_(r16, 3, 3,v)

    #define   GET32MIC6_INTLMODE_DUMMYDATA_EN(r32)             _BFGET_(r32, 4, 4)
    #define   SET32MIC6_INTLMODE_DUMMYDATA_EN(r32,v)           _BFSET_(r32, 4, 4,v)
    #define   GET16MIC6_INTLMODE_DUMMYDATA_EN(r16)             _BFGET_(r16, 4, 4)
    #define   SET16MIC6_INTLMODE_DUMMYDATA_EN(r16,v)           _BFSET_(r16, 4, 4,v)

    #define     w32MIC6_INTLMODE                               {\
            UNSG32 uINTLMODE_PORT0_EN                          :  1;\
            UNSG32 uINTLMODE_PORT1_EN                          :  1;\
            UNSG32 uINTLMODE_PORT2_EN                          :  1;\
            UNSG32 uINTLMODE_PORT3_EN                          :  1;\
            UNSG32 uINTLMODE_DUMMYDATA_EN                      :  1;\
            UNSG32 RSVDx34_b5                                  : 27;\
          }
    union { UNSG32 u32MIC6_INTLMODE;
            struct w32MIC6_INTLMODE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MIC6_HBRDMAP_PORT0(r32)                     _BFGET_(r32, 1, 0)
    #define   SET32MIC6_HBRDMAP_PORT0(r32,v)                   _BFSET_(r32, 1, 0,v)
    #define   GET16MIC6_HBRDMAP_PORT0(r16)                     _BFGET_(r16, 1, 0)
    #define   SET16MIC6_HBRDMAP_PORT0(r16,v)                   _BFSET_(r16, 1, 0,v)

    #define   GET32MIC6_HBRDMAP_PORT1(r32)                     _BFGET_(r32, 3, 2)
    #define   SET32MIC6_HBRDMAP_PORT1(r32,v)                   _BFSET_(r32, 3, 2,v)
    #define   GET16MIC6_HBRDMAP_PORT1(r16)                     _BFGET_(r16, 3, 2)
    #define   SET16MIC6_HBRDMAP_PORT1(r16,v)                   _BFSET_(r16, 3, 2,v)

    #define   GET32MIC6_HBRDMAP_PORT2(r32)                     _BFGET_(r32, 5, 4)
    #define   SET32MIC6_HBRDMAP_PORT2(r32,v)                   _BFSET_(r32, 5, 4,v)
    #define   GET16MIC6_HBRDMAP_PORT2(r16)                     _BFGET_(r16, 5, 4)
    #define   SET16MIC6_HBRDMAP_PORT2(r16,v)                   _BFSET_(r16, 5, 4,v)

    #define   GET32MIC6_HBRDMAP_PORT3(r32)                     _BFGET_(r32, 7, 6)
    #define   SET32MIC6_HBRDMAP_PORT3(r32,v)                   _BFSET_(r32, 7, 6,v)
    #define   GET16MIC6_HBRDMAP_PORT3(r16)                     _BFGET_(r16, 7, 6)
    #define   SET16MIC6_HBRDMAP_PORT3(r16,v)                   _BFSET_(r16, 7, 6,v)

    #define     w32MIC6_HBRDMAP                                {\
            UNSG32 uHBRDMAP_PORT0                              :  2;\
            UNSG32 uHBRDMAP_PORT1                              :  2;\
            UNSG32 uHBRDMAP_PORT2                              :  2;\
            UNSG32 uHBRDMAP_PORT3                              :  2;\
            UNSG32 RSVDx38_b8                                  : 24;\
          }
    union { UNSG32 u32MIC6_HBRDMAP;
            struct w32MIC6_HBRDMAP;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MIC6;

    typedef union  T32MIC6_EARC_I2S
          { UNSG32 u32;
            struct w32MIC6_EARC_I2S;
                 } T32MIC6_EARC_I2S;
    typedef union  T32MIC6_RXPORT
          { UNSG32 u32;
            struct w32MIC6_RXPORT;
                 } T32MIC6_RXPORT;
    typedef union  T32MIC6_RXDATA
          { UNSG32 u32;
            struct w32MIC6_RXDATA;
                 } T32MIC6_RXDATA;
    typedef union  T32MIC6_INTLMODE
          { UNSG32 u32;
            struct w32MIC6_INTLMODE;
                 } T32MIC6_INTLMODE;
    typedef union  T32MIC6_HBRDMAP
          { UNSG32 u32;
            struct w32MIC6_HBRDMAP;
                 } T32MIC6_HBRDMAP;
    ///////////////////////////////////////////////////////////

    typedef union  TMIC6_EARC_I2S
          { UNSG32 u32[1];
            struct {
            struct w32MIC6_EARC_I2S;
                   };
                 } TMIC6_EARC_I2S;
    typedef union  TMIC6_RXPORT
          { UNSG32 u32[1];
            struct {
            struct w32MIC6_RXPORT;
                   };
                 } TMIC6_RXPORT;
    typedef union  TMIC6_RXDATA
          { UNSG32 u32[1];
            struct {
            struct w32MIC6_RXDATA;
                   };
                 } TMIC6_RXDATA;
    typedef union  TMIC6_INTLMODE
          { UNSG32 u32[1];
            struct {
            struct w32MIC6_INTLMODE;
                   };
                 } TMIC6_INTLMODE;
    typedef union  TMIC6_HBRDMAP
          { UNSG32 u32[1];
            struct {
            struct w32MIC6_HBRDMAP;
                   };
                 } TMIC6_HBRDMAP;

    ///////////////////////////////////////////////////////////
     SIGN32 MIC6_drvrd(SIE_MIC6 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MIC6_drvwr(SIE_MIC6 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MIC6_reset(SIE_MIC6 *p);
     SIGN32 MIC6_cmp  (SIE_MIC6 *p, SIE_MIC6 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MIC6_check(p,pie,pfx,hLOG) MIC6_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MIC6_print(p,    pfx,hLOG) MIC6_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MIC6
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE PDMCH                   biu              (4,4)
///     ###
///     * Audio Port Control registers
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P)
///               ###
///               * Audio Port Control register
///               ###
///               %unsigned 1  ENABLE                    0x0
///                                    ###
///                                    * Control bit to enable/disable an audio channel:
///                                    * 0: Disable a audio Channel (default)
///                                    * 1: Enable a audio Channel
///                                    * Note: Bit-clock (BCLK) is not controlled using this bit. For switching off the Bit Clock the output enable register should be used(IOSEL).
///                                    ###
///                                    : DISABLE                   0x0
///                                    : ENABLE                    0x1
///               %unsigned 1  MUTE                      0x0
///                                    ###
///                                    * Control bit to turn mute function ON or OFF
///                                    * 0: Mute turned OFF (default)
///                                    * 1: Mute turned ON
///                                    ###
///                                    : MUTE_OFF                  0x0
///                                    : MUTE_ON                   0x1
///               %unsigned 1  LRSWITCH                  0x0
///                                    ###
///                                    * Control bit for switching the left channel data with right channel data:
///                                    * 0: Do not switch data (default)
///                                    * 1: Switch Data
///                                    * Note: Not supported for S/PDIF.
///                                    ###
///                                    : SWITCH_OFF                0x0
///                                    : SWITCH_ON                 0x1
///               %unsigned 1  FLUSH                     0x0
///                                    ###
///                                    * Control bit to clear the Data FIFO pointers related to a port:
///                                    * 0: Do not flush (default)
///                                    * 1: Flush
///                                    ###
///                                    : ON                        0x1
///                                    : OFF                       0x0
///               %%        28         # Stuffing bits...
///     @ 0x00004 CTRL2                (P)
///               ###
///               * Audio Port Control 2 register
///               ###
///               %unsigned 16 RDLT                      0x1E
///                                    ###
///                                    * Rise Data Latch Time
///                                    * This registers decides PDM input data latch time after the Rising edge of PDMCLK in-terms of sysClk cycles + 1, when Data Latch mode is counter
///                                    ###
///               %unsigned 16 FDLT                      0x1E
///                                    ###
///                                    * Fall Data Latch Time
///                                    * This registers decides PDM input data latch time after the falling edge of PDMCLK in-terms of sysClk cycles + 1, when Data Latch mode is counter
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:      36b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_PDMCH
#define h_PDMCH (){}

    #define     RA_PDMCH_CTRL                                  0x0000

    #define     BA_PDMCH_CTRL_ENABLE                           0x0000
    #define     B16PDMCH_CTRL_ENABLE                           0x0000
    #define   LSb32PDMCH_CTRL_ENABLE                              0
    #define   LSb16PDMCH_CTRL_ENABLE                              0
    #define       bPDMCH_CTRL_ENABLE                           1
    #define   MSK32PDMCH_CTRL_ENABLE                              0x00000001
    #define        PDMCH_CTRL_ENABLE_DISABLE                                0x0
    #define        PDMCH_CTRL_ENABLE_ENABLE                                 0x1

    #define     BA_PDMCH_CTRL_MUTE                             0x0000
    #define     B16PDMCH_CTRL_MUTE                             0x0000
    #define   LSb32PDMCH_CTRL_MUTE                                1
    #define   LSb16PDMCH_CTRL_MUTE                                1
    #define       bPDMCH_CTRL_MUTE                             1
    #define   MSK32PDMCH_CTRL_MUTE                                0x00000002
    #define        PDMCH_CTRL_MUTE_MUTE_OFF                                 0x0
    #define        PDMCH_CTRL_MUTE_MUTE_ON                                  0x1

    #define     BA_PDMCH_CTRL_LRSWITCH                         0x0000
    #define     B16PDMCH_CTRL_LRSWITCH                         0x0000
    #define   LSb32PDMCH_CTRL_LRSWITCH                            2
    #define   LSb16PDMCH_CTRL_LRSWITCH                            2
    #define       bPDMCH_CTRL_LRSWITCH                         1
    #define   MSK32PDMCH_CTRL_LRSWITCH                            0x00000004
    #define        PDMCH_CTRL_LRSWITCH_SWITCH_OFF                           0x0
    #define        PDMCH_CTRL_LRSWITCH_SWITCH_ON                            0x1

    #define     BA_PDMCH_CTRL_FLUSH                            0x0000
    #define     B16PDMCH_CTRL_FLUSH                            0x0000
    #define   LSb32PDMCH_CTRL_FLUSH                               3
    #define   LSb16PDMCH_CTRL_FLUSH                               3
    #define       bPDMCH_CTRL_FLUSH                            1
    #define   MSK32PDMCH_CTRL_FLUSH                               0x00000008
    #define        PDMCH_CTRL_FLUSH_ON                                      0x1
    #define        PDMCH_CTRL_FLUSH_OFF                                     0x0
    ///////////////////////////////////////////////////////////
    #define     RA_PDMCH_CTRL2                                 0x0004

    #define     BA_PDMCH_CTRL2_RDLT                            0x0004
    #define     B16PDMCH_CTRL2_RDLT                            0x0004
    #define   LSb32PDMCH_CTRL2_RDLT                               0
    #define   LSb16PDMCH_CTRL2_RDLT                               0
    #define       bPDMCH_CTRL2_RDLT                            16
    #define   MSK32PDMCH_CTRL2_RDLT                               0x0000FFFF

    #define     BA_PDMCH_CTRL2_FDLT                            0x0006
    #define     B16PDMCH_CTRL2_FDLT                            0x0006
    #define   LSb32PDMCH_CTRL2_FDLT                               16
    #define   LSb16PDMCH_CTRL2_FDLT                               0
    #define       bPDMCH_CTRL2_FDLT                            16
    #define   MSK32PDMCH_CTRL2_FDLT                               0xFFFF0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_PDMCH {
    ///////////////////////////////////////////////////////////
    #define   GET32PDMCH_CTRL_ENABLE(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32PDMCH_CTRL_ENABLE(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16PDMCH_CTRL_ENABLE(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16PDMCH_CTRL_ENABLE(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define   GET32PDMCH_CTRL_MUTE(r32)                        _BFGET_(r32, 1, 1)
    #define   SET32PDMCH_CTRL_MUTE(r32,v)                      _BFSET_(r32, 1, 1,v)
    #define   GET16PDMCH_CTRL_MUTE(r16)                        _BFGET_(r16, 1, 1)
    #define   SET16PDMCH_CTRL_MUTE(r16,v)                      _BFSET_(r16, 1, 1,v)

    #define   GET32PDMCH_CTRL_LRSWITCH(r32)                    _BFGET_(r32, 2, 2)
    #define   SET32PDMCH_CTRL_LRSWITCH(r32,v)                  _BFSET_(r32, 2, 2,v)
    #define   GET16PDMCH_CTRL_LRSWITCH(r16)                    _BFGET_(r16, 2, 2)
    #define   SET16PDMCH_CTRL_LRSWITCH(r16,v)                  _BFSET_(r16, 2, 2,v)

    #define   GET32PDMCH_CTRL_FLUSH(r32)                       _BFGET_(r32, 3, 3)
    #define   SET32PDMCH_CTRL_FLUSH(r32,v)                     _BFSET_(r32, 3, 3,v)
    #define   GET16PDMCH_CTRL_FLUSH(r16)                       _BFGET_(r16, 3, 3)
    #define   SET16PDMCH_CTRL_FLUSH(r16,v)                     _BFSET_(r16, 3, 3,v)

    #define     w32PDMCH_CTRL                                  {\
            UNSG32 uCTRL_ENABLE                                :  1;\
            UNSG32 uCTRL_MUTE                                  :  1;\
            UNSG32 uCTRL_LRSWITCH                              :  1;\
            UNSG32 uCTRL_FLUSH                                 :  1;\
            UNSG32 RSVDx0_b4                                   : 28;\
          }
    union { UNSG32 u32PDMCH_CTRL;
            struct w32PDMCH_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32PDMCH_CTRL2_RDLT(r32)                       _BFGET_(r32,15, 0)
    #define   SET32PDMCH_CTRL2_RDLT(r32,v)                     _BFSET_(r32,15, 0,v)
    #define   GET16PDMCH_CTRL2_RDLT(r16)                       _BFGET_(r16,15, 0)
    #define   SET16PDMCH_CTRL2_RDLT(r16,v)                     _BFSET_(r16,15, 0,v)

    #define   GET32PDMCH_CTRL2_FDLT(r32)                       _BFGET_(r32,31,16)
    #define   SET32PDMCH_CTRL2_FDLT(r32,v)                     _BFSET_(r32,31,16,v)
    #define   GET16PDMCH_CTRL2_FDLT(r16)                       _BFGET_(r16,15, 0)
    #define   SET16PDMCH_CTRL2_FDLT(r16,v)                     _BFSET_(r16,15, 0,v)

    #define     w32PDMCH_CTRL2                                 {\
            UNSG32 uCTRL2_RDLT                                 : 16;\
            UNSG32 uCTRL2_FDLT                                 : 16;\
          }
    union { UNSG32 u32PDMCH_CTRL2;
            struct w32PDMCH_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    } SIE_PDMCH;

    typedef union  T32PDMCH_CTRL
          { UNSG32 u32;
            struct w32PDMCH_CTRL;
                 } T32PDMCH_CTRL;
    typedef union  T32PDMCH_CTRL2
          { UNSG32 u32;
            struct w32PDMCH_CTRL2;
                 } T32PDMCH_CTRL2;
    ///////////////////////////////////////////////////////////

    typedef union  TPDMCH_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32PDMCH_CTRL;
                   };
                 } TPDMCH_CTRL;
    typedef union  TPDMCH_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32PDMCH_CTRL2;
                   };
                 } TPDMCH_CTRL2;

    ///////////////////////////////////////////////////////////
     SIGN32 PDMCH_drvrd(SIE_PDMCH *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 PDMCH_drvwr(SIE_PDMCH *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void PDMCH_reset(SIE_PDMCH *p);
     SIGN32 PDMCH_cmp  (SIE_PDMCH *p, SIE_PDMCH *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define PDMCH_check(p,pie,pfx,hLOG) PDMCH_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define PDMCH_print(p,    pfx,hLOG) PDMCH_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: PDMCH
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE PDM                                      (4,4)
///     ###
///     * PDM Port registers - This section is consolidated registers for 8 channel PDM.
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL1                (P)
///               %unsigned 4  CLKDIV                    0x4
///                                    ###
///                                    * PDM CLKOUT Divider.
///                                    * 0: Divide by 1
///                                    * 1: Divide by 2
///                                    * 2: Divide by 4
///                                    * 3: Divide by 8
///                                    * 4: Divide by 16 (default)
///                                    * 5: Divide by 32
///                                    * 6: Divide by 64
///                                    * ........................
///                                    * ........................
///                                    * 14: Divide by 16384
///                                    * 15: Divide by 32768
///                                    ###
///               %unsigned 1  INVCLK_OUT                0x0
///                                    ###
///                                    * Invert PDM CLK OUT
///                                    * 0: Not inverted (default)
///                                    * 1: Inverted
///                                    ###
///               %unsigned 1  INVCLK_INT                0x0
///                                    ###
///                                    * Invert PDM CLK Internal (Same register used for both Generated PDM Clock and Input PDM Clock)
///                                    * 0: Not inverted (default)
///                                    * 1: Inverted
///                                    ###
///               %unsigned 1  CLKINT_SEL                0x0
///                                    ###
///                                    * Clock Select between generated PDM Clock or Input PDM Clock
///                                    * 0: Generated PDM Clock (default)
///                                    * 1: Input PDM Clock
///                                    ###
///               %unsigned 1  RLSB                      0x0
///                                    ###
///                                    * Decides which bit is eceived first(left):
///                                    * 0: MSB first (default)
///                                    * 1: LSB first
///                                    ###
///               %unsigned 3  RDM                       0x4
///                                    ###
///                                    * L/R Channel resolution
///                                    * 0: 16-bits per channel
///                                    * 1: 18-bits per channel
///                                    * 2: 20-bits per channel
///                                    * 3: 24-bits per channel
///                                    * 4: 32-bits per channel (default)
///                                    * 5-7: Reserved
///                                    ###
///               %unsigned 1  MODE                      0x0
///                                    ###
///                                    * 0 : Half cycle PDM (DDR) (default)
///                                    * 1 : Classic PDM      (SDR)
///                                    ###
///               %unsigned 1  SDR_CLKSEL                0x0
///                                    ###
///                                    * SDR Data latch clock edge select
///                                    * 0: Latch data on falling clock edge of CLKOUT (default)
///                                    * 1: Latch data on rising clock edge of CLKOUT
///                                    ###
///               %unsigned 1  LATCH_MODE                0x0
///                                    ###
///                                    * PDM Data input latch mode
///                                    * 0: Counter, Use oversampling clock (400Mhz, sysClk) to lath the input data (default)
///                                    * 1: Edge, Use PDM CLKOUT Edge to latch the the input data
///                                    ###
///               %%        18         # Stuffing bits...
///     @ 0x00004 RXDATA               (P)
///               %unsigned 1  INTL                      0x0
///                                    ###
///                                    * Register Bit enables Interleaved Mode
///                                    * Interleaved Mode will send all 8-channel data over 1 dHub Channel.
///                                    * 1 : Enabled
///                                    * 0 : OFF
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00008 INTLMODE             (P)
///               %unsigned 1  PORT0_EN                  0x0
///                                    ###
///                                    * Indicated if Port 0 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT1_EN                  0x0
///                                    ###
///                                    * Indicated if Port 1 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT2_EN                  0x0
///                                    ###
///                                    * Indicated if Port 2 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT3_EN                  0x0
///                                    ###
///                                    * Indicated if Port 3 of MIC1 is enabled
///                                    ###
///               %unsigned 1  DUMMYDATA_EN              0x0
///                                    ###
///                                    * Indicates if Dummy data has to be sent in the non enabled ports.
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x0000C INTLMAP              (P)
///               ###
///               * INTL DATA MAP Register (if INTLMODE is enabled)
///               * In 8-Channel INTL Mode. 256-bit of data is received by SoC. These registers bits allows the users to map the 64 bits received on each port to the desired place in 256-bits.
///               ###
///               %unsigned 2  PORT0                     0x0
///                                    ###
///                                    * Data select for [31:0]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT1                     0x1
///                                    ###
///                                    * Data select for [63:32]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT2                     0x2
///                                    ###
///                                    * Data select for [95:64]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT3                     0x3
///                                    ###
///                                    * Data select for [127:96]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00010                      (P)
///     # 0x00010 PDM0                 
///               $PDMCH               PDM0              REG          
///     @ 0x00018                      (P)
///     # 0x00018 PDM1                 
///               $PDMCH               PDM1              REG          
///     @ 0x00020                      (P)
///     # 0x00020 PDM2                 
///               $PDMCH               PDM2              REG          
///     @ 0x00028                      (P)
///     # 0x00028 PDM3                 
///               $PDMCH               PDM3              REG          
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      48B, bits:     172b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_PDM
#define h_PDM (){}

    #define     RA_PDM_CTRL1                                   0x0000

    #define     BA_PDM_CTRL1_CLKDIV                            0x0000
    #define     B16PDM_CTRL1_CLKDIV                            0x0000
    #define   LSb32PDM_CTRL1_CLKDIV                               0
    #define   LSb16PDM_CTRL1_CLKDIV                               0
    #define       bPDM_CTRL1_CLKDIV                            4
    #define   MSK32PDM_CTRL1_CLKDIV                               0x0000000F

    #define     BA_PDM_CTRL1_INVCLK_OUT                        0x0000
    #define     B16PDM_CTRL1_INVCLK_OUT                        0x0000
    #define   LSb32PDM_CTRL1_INVCLK_OUT                           4
    #define   LSb16PDM_CTRL1_INVCLK_OUT                           4
    #define       bPDM_CTRL1_INVCLK_OUT                        1
    #define   MSK32PDM_CTRL1_INVCLK_OUT                           0x00000010

    #define     BA_PDM_CTRL1_INVCLK_INT                        0x0000
    #define     B16PDM_CTRL1_INVCLK_INT                        0x0000
    #define   LSb32PDM_CTRL1_INVCLK_INT                           5
    #define   LSb16PDM_CTRL1_INVCLK_INT                           5
    #define       bPDM_CTRL1_INVCLK_INT                        1
    #define   MSK32PDM_CTRL1_INVCLK_INT                           0x00000020

    #define     BA_PDM_CTRL1_CLKINT_SEL                        0x0000
    #define     B16PDM_CTRL1_CLKINT_SEL                        0x0000
    #define   LSb32PDM_CTRL1_CLKINT_SEL                           6
    #define   LSb16PDM_CTRL1_CLKINT_SEL                           6
    #define       bPDM_CTRL1_CLKINT_SEL                        1
    #define   MSK32PDM_CTRL1_CLKINT_SEL                           0x00000040

    #define     BA_PDM_CTRL1_RLSB                              0x0000
    #define     B16PDM_CTRL1_RLSB                              0x0000
    #define   LSb32PDM_CTRL1_RLSB                                 7
    #define   LSb16PDM_CTRL1_RLSB                                 7
    #define       bPDM_CTRL1_RLSB                              1
    #define   MSK32PDM_CTRL1_RLSB                                 0x00000080

    #define     BA_PDM_CTRL1_RDM                               0x0001
    #define     B16PDM_CTRL1_RDM                               0x0000
    #define   LSb32PDM_CTRL1_RDM                                  8
    #define   LSb16PDM_CTRL1_RDM                                  8
    #define       bPDM_CTRL1_RDM                               3
    #define   MSK32PDM_CTRL1_RDM                                  0x00000700

    #define     BA_PDM_CTRL1_MODE                              0x0001
    #define     B16PDM_CTRL1_MODE                              0x0000
    #define   LSb32PDM_CTRL1_MODE                                 11
    #define   LSb16PDM_CTRL1_MODE                                 11
    #define       bPDM_CTRL1_MODE                              1
    #define   MSK32PDM_CTRL1_MODE                                 0x00000800

    #define     BA_PDM_CTRL1_SDR_CLKSEL                        0x0001
    #define     B16PDM_CTRL1_SDR_CLKSEL                        0x0000
    #define   LSb32PDM_CTRL1_SDR_CLKSEL                           12
    #define   LSb16PDM_CTRL1_SDR_CLKSEL                           12
    #define       bPDM_CTRL1_SDR_CLKSEL                        1
    #define   MSK32PDM_CTRL1_SDR_CLKSEL                           0x00001000

    #define     BA_PDM_CTRL1_LATCH_MODE                        0x0001
    #define     B16PDM_CTRL1_LATCH_MODE                        0x0000
    #define   LSb32PDM_CTRL1_LATCH_MODE                           13
    #define   LSb16PDM_CTRL1_LATCH_MODE                           13
    #define       bPDM_CTRL1_LATCH_MODE                        1
    #define   MSK32PDM_CTRL1_LATCH_MODE                           0x00002000
    ///////////////////////////////////////////////////////////
    #define     RA_PDM_RXDATA                                  0x0004

    #define     BA_PDM_RXDATA_INTL                             0x0004
    #define     B16PDM_RXDATA_INTL                             0x0004
    #define   LSb32PDM_RXDATA_INTL                                0
    #define   LSb16PDM_RXDATA_INTL                                0
    #define       bPDM_RXDATA_INTL                             1
    #define   MSK32PDM_RXDATA_INTL                                0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_PDM_INTLMODE                                0x0008

    #define     BA_PDM_INTLMODE_PORT0_EN                       0x0008
    #define     B16PDM_INTLMODE_PORT0_EN                       0x0008
    #define   LSb32PDM_INTLMODE_PORT0_EN                          0
    #define   LSb16PDM_INTLMODE_PORT0_EN                          0
    #define       bPDM_INTLMODE_PORT0_EN                       1
    #define   MSK32PDM_INTLMODE_PORT0_EN                          0x00000001

    #define     BA_PDM_INTLMODE_PORT1_EN                       0x0008
    #define     B16PDM_INTLMODE_PORT1_EN                       0x0008
    #define   LSb32PDM_INTLMODE_PORT1_EN                          1
    #define   LSb16PDM_INTLMODE_PORT1_EN                          1
    #define       bPDM_INTLMODE_PORT1_EN                       1
    #define   MSK32PDM_INTLMODE_PORT1_EN                          0x00000002

    #define     BA_PDM_INTLMODE_PORT2_EN                       0x0008
    #define     B16PDM_INTLMODE_PORT2_EN                       0x0008
    #define   LSb32PDM_INTLMODE_PORT2_EN                          2
    #define   LSb16PDM_INTLMODE_PORT2_EN                          2
    #define       bPDM_INTLMODE_PORT2_EN                       1
    #define   MSK32PDM_INTLMODE_PORT2_EN                          0x00000004

    #define     BA_PDM_INTLMODE_PORT3_EN                       0x0008
    #define     B16PDM_INTLMODE_PORT3_EN                       0x0008
    #define   LSb32PDM_INTLMODE_PORT3_EN                          3
    #define   LSb16PDM_INTLMODE_PORT3_EN                          3
    #define       bPDM_INTLMODE_PORT3_EN                       1
    #define   MSK32PDM_INTLMODE_PORT3_EN                          0x00000008

    #define     BA_PDM_INTLMODE_DUMMYDATA_EN                   0x0008
    #define     B16PDM_INTLMODE_DUMMYDATA_EN                   0x0008
    #define   LSb32PDM_INTLMODE_DUMMYDATA_EN                      4
    #define   LSb16PDM_INTLMODE_DUMMYDATA_EN                      4
    #define       bPDM_INTLMODE_DUMMYDATA_EN                   1
    #define   MSK32PDM_INTLMODE_DUMMYDATA_EN                      0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_PDM_INTLMAP                                 0x000C

    #define     BA_PDM_INTLMAP_PORT0                           0x000C
    #define     B16PDM_INTLMAP_PORT0                           0x000C
    #define   LSb32PDM_INTLMAP_PORT0                              0
    #define   LSb16PDM_INTLMAP_PORT0                              0
    #define       bPDM_INTLMAP_PORT0                           2
    #define   MSK32PDM_INTLMAP_PORT0                              0x00000003

    #define     BA_PDM_INTLMAP_PORT1                           0x000C
    #define     B16PDM_INTLMAP_PORT1                           0x000C
    #define   LSb32PDM_INTLMAP_PORT1                              2
    #define   LSb16PDM_INTLMAP_PORT1                              2
    #define       bPDM_INTLMAP_PORT1                           2
    #define   MSK32PDM_INTLMAP_PORT1                              0x0000000C

    #define     BA_PDM_INTLMAP_PORT2                           0x000C
    #define     B16PDM_INTLMAP_PORT2                           0x000C
    #define   LSb32PDM_INTLMAP_PORT2                              4
    #define   LSb16PDM_INTLMAP_PORT2                              4
    #define       bPDM_INTLMAP_PORT2                           2
    #define   MSK32PDM_INTLMAP_PORT2                              0x00000030

    #define     BA_PDM_INTLMAP_PORT3                           0x000C
    #define     B16PDM_INTLMAP_PORT3                           0x000C
    #define   LSb32PDM_INTLMAP_PORT3                              6
    #define   LSb16PDM_INTLMAP_PORT3                              6
    #define       bPDM_INTLMAP_PORT3                           2
    #define   MSK32PDM_INTLMAP_PORT3                              0x000000C0
    ///////////////////////////////////////////////////////////
    #define     RA_PDM_PDM0                                    0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_PDM_PDM1                                    0x0018
    ///////////////////////////////////////////////////////////
    #define     RA_PDM_PDM2                                    0x0020
    ///////////////////////////////////////////////////////////
    #define     RA_PDM_PDM3                                    0x0028
    ///////////////////////////////////////////////////////////

    typedef struct SIE_PDM {
    ///////////////////////////////////////////////////////////
    #define   GET32PDM_CTRL1_CLKDIV(r32)                       _BFGET_(r32, 3, 0)
    #define   SET32PDM_CTRL1_CLKDIV(r32,v)                     _BFSET_(r32, 3, 0,v)
    #define   GET16PDM_CTRL1_CLKDIV(r16)                       _BFGET_(r16, 3, 0)
    #define   SET16PDM_CTRL1_CLKDIV(r16,v)                     _BFSET_(r16, 3, 0,v)

    #define   GET32PDM_CTRL1_INVCLK_OUT(r32)                   _BFGET_(r32, 4, 4)
    #define   SET32PDM_CTRL1_INVCLK_OUT(r32,v)                 _BFSET_(r32, 4, 4,v)
    #define   GET16PDM_CTRL1_INVCLK_OUT(r16)                   _BFGET_(r16, 4, 4)
    #define   SET16PDM_CTRL1_INVCLK_OUT(r16,v)                 _BFSET_(r16, 4, 4,v)

    #define   GET32PDM_CTRL1_INVCLK_INT(r32)                   _BFGET_(r32, 5, 5)
    #define   SET32PDM_CTRL1_INVCLK_INT(r32,v)                 _BFSET_(r32, 5, 5,v)
    #define   GET16PDM_CTRL1_INVCLK_INT(r16)                   _BFGET_(r16, 5, 5)
    #define   SET16PDM_CTRL1_INVCLK_INT(r16,v)                 _BFSET_(r16, 5, 5,v)

    #define   GET32PDM_CTRL1_CLKINT_SEL(r32)                   _BFGET_(r32, 6, 6)
    #define   SET32PDM_CTRL1_CLKINT_SEL(r32,v)                 _BFSET_(r32, 6, 6,v)
    #define   GET16PDM_CTRL1_CLKINT_SEL(r16)                   _BFGET_(r16, 6, 6)
    #define   SET16PDM_CTRL1_CLKINT_SEL(r16,v)                 _BFSET_(r16, 6, 6,v)

    #define   GET32PDM_CTRL1_RLSB(r32)                         _BFGET_(r32, 7, 7)
    #define   SET32PDM_CTRL1_RLSB(r32,v)                       _BFSET_(r32, 7, 7,v)
    #define   GET16PDM_CTRL1_RLSB(r16)                         _BFGET_(r16, 7, 7)
    #define   SET16PDM_CTRL1_RLSB(r16,v)                       _BFSET_(r16, 7, 7,v)

    #define   GET32PDM_CTRL1_RDM(r32)                          _BFGET_(r32,10, 8)
    #define   SET32PDM_CTRL1_RDM(r32,v)                        _BFSET_(r32,10, 8,v)
    #define   GET16PDM_CTRL1_RDM(r16)                          _BFGET_(r16,10, 8)
    #define   SET16PDM_CTRL1_RDM(r16,v)                        _BFSET_(r16,10, 8,v)

    #define   GET32PDM_CTRL1_MODE(r32)                         _BFGET_(r32,11,11)
    #define   SET32PDM_CTRL1_MODE(r32,v)                       _BFSET_(r32,11,11,v)
    #define   GET16PDM_CTRL1_MODE(r16)                         _BFGET_(r16,11,11)
    #define   SET16PDM_CTRL1_MODE(r16,v)                       _BFSET_(r16,11,11,v)

    #define   GET32PDM_CTRL1_SDR_CLKSEL(r32)                   _BFGET_(r32,12,12)
    #define   SET32PDM_CTRL1_SDR_CLKSEL(r32,v)                 _BFSET_(r32,12,12,v)
    #define   GET16PDM_CTRL1_SDR_CLKSEL(r16)                   _BFGET_(r16,12,12)
    #define   SET16PDM_CTRL1_SDR_CLKSEL(r16,v)                 _BFSET_(r16,12,12,v)

    #define   GET32PDM_CTRL1_LATCH_MODE(r32)                   _BFGET_(r32,13,13)
    #define   SET32PDM_CTRL1_LATCH_MODE(r32,v)                 _BFSET_(r32,13,13,v)
    #define   GET16PDM_CTRL1_LATCH_MODE(r16)                   _BFGET_(r16,13,13)
    #define   SET16PDM_CTRL1_LATCH_MODE(r16,v)                 _BFSET_(r16,13,13,v)

    #define     w32PDM_CTRL1                                   {\
            UNSG32 uCTRL1_CLKDIV                               :  4;\
            UNSG32 uCTRL1_INVCLK_OUT                           :  1;\
            UNSG32 uCTRL1_INVCLK_INT                           :  1;\
            UNSG32 uCTRL1_CLKINT_SEL                           :  1;\
            UNSG32 uCTRL1_RLSB                                 :  1;\
            UNSG32 uCTRL1_RDM                                  :  3;\
            UNSG32 uCTRL1_MODE                                 :  1;\
            UNSG32 uCTRL1_SDR_CLKSEL                           :  1;\
            UNSG32 uCTRL1_LATCH_MODE                           :  1;\
            UNSG32 RSVDx0_b14                                  : 18;\
          }
    union { UNSG32 u32PDM_CTRL1;
            struct w32PDM_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32PDM_RXDATA_INTL(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32PDM_RXDATA_INTL(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16PDM_RXDATA_INTL(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16PDM_RXDATA_INTL(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define     w32PDM_RXDATA                                  {\
            UNSG32 uRXDATA_INTL                                :  1;\
            UNSG32 RSVDx4_b1                                   : 31;\
          }
    union { UNSG32 u32PDM_RXDATA;
            struct w32PDM_RXDATA;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32PDM_INTLMODE_PORT0_EN(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32PDM_INTLMODE_PORT0_EN(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16PDM_INTLMODE_PORT0_EN(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16PDM_INTLMODE_PORT0_EN(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32PDM_INTLMODE_PORT1_EN(r32)                  _BFGET_(r32, 1, 1)
    #define   SET32PDM_INTLMODE_PORT1_EN(r32,v)                _BFSET_(r32, 1, 1,v)
    #define   GET16PDM_INTLMODE_PORT1_EN(r16)                  _BFGET_(r16, 1, 1)
    #define   SET16PDM_INTLMODE_PORT1_EN(r16,v)                _BFSET_(r16, 1, 1,v)

    #define   GET32PDM_INTLMODE_PORT2_EN(r32)                  _BFGET_(r32, 2, 2)
    #define   SET32PDM_INTLMODE_PORT2_EN(r32,v)                _BFSET_(r32, 2, 2,v)
    #define   GET16PDM_INTLMODE_PORT2_EN(r16)                  _BFGET_(r16, 2, 2)
    #define   SET16PDM_INTLMODE_PORT2_EN(r16,v)                _BFSET_(r16, 2, 2,v)

    #define   GET32PDM_INTLMODE_PORT3_EN(r32)                  _BFGET_(r32, 3, 3)
    #define   SET32PDM_INTLMODE_PORT3_EN(r32,v)                _BFSET_(r32, 3, 3,v)
    #define   GET16PDM_INTLMODE_PORT3_EN(r16)                  _BFGET_(r16, 3, 3)
    #define   SET16PDM_INTLMODE_PORT3_EN(r16,v)                _BFSET_(r16, 3, 3,v)

    #define   GET32PDM_INTLMODE_DUMMYDATA_EN(r32)              _BFGET_(r32, 4, 4)
    #define   SET32PDM_INTLMODE_DUMMYDATA_EN(r32,v)            _BFSET_(r32, 4, 4,v)
    #define   GET16PDM_INTLMODE_DUMMYDATA_EN(r16)              _BFGET_(r16, 4, 4)
    #define   SET16PDM_INTLMODE_DUMMYDATA_EN(r16,v)            _BFSET_(r16, 4, 4,v)

    #define     w32PDM_INTLMODE                                {\
            UNSG32 uINTLMODE_PORT0_EN                          :  1;\
            UNSG32 uINTLMODE_PORT1_EN                          :  1;\
            UNSG32 uINTLMODE_PORT2_EN                          :  1;\
            UNSG32 uINTLMODE_PORT3_EN                          :  1;\
            UNSG32 uINTLMODE_DUMMYDATA_EN                      :  1;\
            UNSG32 RSVDx8_b5                                   : 27;\
          }
    union { UNSG32 u32PDM_INTLMODE;
            struct w32PDM_INTLMODE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32PDM_INTLMAP_PORT0(r32)                      _BFGET_(r32, 1, 0)
    #define   SET32PDM_INTLMAP_PORT0(r32,v)                    _BFSET_(r32, 1, 0,v)
    #define   GET16PDM_INTLMAP_PORT0(r16)                      _BFGET_(r16, 1, 0)
    #define   SET16PDM_INTLMAP_PORT0(r16,v)                    _BFSET_(r16, 1, 0,v)

    #define   GET32PDM_INTLMAP_PORT1(r32)                      _BFGET_(r32, 3, 2)
    #define   SET32PDM_INTLMAP_PORT1(r32,v)                    _BFSET_(r32, 3, 2,v)
    #define   GET16PDM_INTLMAP_PORT1(r16)                      _BFGET_(r16, 3, 2)
    #define   SET16PDM_INTLMAP_PORT1(r16,v)                    _BFSET_(r16, 3, 2,v)

    #define   GET32PDM_INTLMAP_PORT2(r32)                      _BFGET_(r32, 5, 4)
    #define   SET32PDM_INTLMAP_PORT2(r32,v)                    _BFSET_(r32, 5, 4,v)
    #define   GET16PDM_INTLMAP_PORT2(r16)                      _BFGET_(r16, 5, 4)
    #define   SET16PDM_INTLMAP_PORT2(r16,v)                    _BFSET_(r16, 5, 4,v)

    #define   GET32PDM_INTLMAP_PORT3(r32)                      _BFGET_(r32, 7, 6)
    #define   SET32PDM_INTLMAP_PORT3(r32,v)                    _BFSET_(r32, 7, 6,v)
    #define   GET16PDM_INTLMAP_PORT3(r16)                      _BFGET_(r16, 7, 6)
    #define   SET16PDM_INTLMAP_PORT3(r16,v)                    _BFSET_(r16, 7, 6,v)

    #define     w32PDM_INTLMAP                                 {\
            UNSG32 uINTLMAP_PORT0                              :  2;\
            UNSG32 uINTLMAP_PORT1                              :  2;\
            UNSG32 uINTLMAP_PORT2                              :  2;\
            UNSG32 uINTLMAP_PORT3                              :  2;\
            UNSG32 RSVDxC_b8                                   : 24;\
          }
    union { UNSG32 u32PDM_INTLMAP;
            struct w32PDM_INTLMAP;
          };
    ///////////////////////////////////////////////////////////
              SIE_PDMCH                                        ie_PDM0;
    ///////////////////////////////////////////////////////////
              SIE_PDMCH                                        ie_PDM1;
    ///////////////////////////////////////////////////////////
              SIE_PDMCH                                        ie_PDM2;
    ///////////////////////////////////////////////////////////
              SIE_PDMCH                                        ie_PDM3;
    ///////////////////////////////////////////////////////////
    } SIE_PDM;

    typedef union  T32PDM_CTRL1
          { UNSG32 u32;
            struct w32PDM_CTRL1;
                 } T32PDM_CTRL1;
    typedef union  T32PDM_RXDATA
          { UNSG32 u32;
            struct w32PDM_RXDATA;
                 } T32PDM_RXDATA;
    typedef union  T32PDM_INTLMODE
          { UNSG32 u32;
            struct w32PDM_INTLMODE;
                 } T32PDM_INTLMODE;
    typedef union  T32PDM_INTLMAP
          { UNSG32 u32;
            struct w32PDM_INTLMAP;
                 } T32PDM_INTLMAP;
    ///////////////////////////////////////////////////////////

    typedef union  TPDM_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32PDM_CTRL1;
                   };
                 } TPDM_CTRL1;
    typedef union  TPDM_RXDATA
          { UNSG32 u32[1];
            struct {
            struct w32PDM_RXDATA;
                   };
                 } TPDM_RXDATA;
    typedef union  TPDM_INTLMODE
          { UNSG32 u32[1];
            struct {
            struct w32PDM_INTLMODE;
                   };
                 } TPDM_INTLMODE;
    typedef union  TPDM_INTLMAP
          { UNSG32 u32[1];
            struct {
            struct w32PDM_INTLMAP;
                   };
                 } TPDM_INTLMAP;

    ///////////////////////////////////////////////////////////
     SIGN32 PDM_drvrd(SIE_PDM *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 PDM_drvwr(SIE_PDM *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void PDM_reset(SIE_PDM *p);
     SIGN32 PDM_cmp  (SIE_PDM *p, SIE_PDM *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define PDM_check(p,pie,pfx,hLOG) PDM_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define PDM_print(p,    pfx,hLOG) PDM_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: PDM
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE DSDCH                   biu              (4,4)
///     ###
///     * Audio Port Control registers
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P)
///               ###
///               * Audio Port Control register
///               ###
///               %unsigned 1  ENABLE                    0x0
///                                    ###
///                                    * Control bit to enable/disable an audio channel:
///                                    * 0: Disable a audio Channel (default)
///                                    * 1: Enable a audio Channel
///                                    * Note: Bit-clock (BCLK) is not controlled using this bit. For switching off the Bit Clock the output enable register should be used(IOSEL).
///                                    ###
///                                    : DISABLE                   0x0
///                                    : ENABLE                    0x1
///               %unsigned 1  MUTE                      0x0
///                                    ###
///                                    * Control bit to turn mute function ON or OFF
///                                    * 0: Mute turned OFF (default)
///                                    * 1: Mute turned ON
///                                    ###
///                                    : MUTE_OFF                  0x0
///                                    : MUTE_ON                   0x1
///               %unsigned 1  LRSWITCH                  0x0
///                                    ###
///                                    * Control bit for switching the left channel data with right channel data:
///                                    * 0: Do not switch data (default)
///                                    * 1: Switch Data
///                                    * Note: Not supported for S/PDIF.
///                                    ###
///                                    : SWITCH_OFF                0x0
///                                    : SWITCH_ON                 0x1
///               %unsigned 1  FLUSH                     0x0
///                                    ###
///                                    * Control bit to clear the Data FIFO pointers related to a port:
///                                    * 0: Do not flush (default)
///                                    * 1: Flush
///                                    ###
///                                    : ON                        0x1
///                                    : OFF                       0x0
///               %%        28         # Stuffing bits...
///     @ 0x00004 CTRL2                (P)
///               ###
///               * Audio Port Control 2 register
///               ###
///               %unsigned 16 RDLT                      0x1E
///                                    ###
///                                    * Rise Data Latch Time
///                                    * This registers decides DSD input data latch time after the Rising edge of DSD clock in-terms of sysClk cycles + 1, when Data Latch mode is counter
///                                    ###
///               %unsigned 16 FDLT                      0x1E
///                                    ###
///                                    * Fall Data Latch Time
///                                    * This registers decides DSD input data latch time after the falling edge of DSD CLK in-terms of sysClk cycles + 1, when Data Latch mode is counter
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:      36b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DSDCH
#define h_DSDCH (){}

    #define     RA_DSDCH_CTRL                                  0x0000

    #define     BA_DSDCH_CTRL_ENABLE                           0x0000
    #define     B16DSDCH_CTRL_ENABLE                           0x0000
    #define   LSb32DSDCH_CTRL_ENABLE                              0
    #define   LSb16DSDCH_CTRL_ENABLE                              0
    #define       bDSDCH_CTRL_ENABLE                           1
    #define   MSK32DSDCH_CTRL_ENABLE                              0x00000001
    #define        DSDCH_CTRL_ENABLE_DISABLE                                0x0
    #define        DSDCH_CTRL_ENABLE_ENABLE                                 0x1

    #define     BA_DSDCH_CTRL_MUTE                             0x0000
    #define     B16DSDCH_CTRL_MUTE                             0x0000
    #define   LSb32DSDCH_CTRL_MUTE                                1
    #define   LSb16DSDCH_CTRL_MUTE                                1
    #define       bDSDCH_CTRL_MUTE                             1
    #define   MSK32DSDCH_CTRL_MUTE                                0x00000002
    #define        DSDCH_CTRL_MUTE_MUTE_OFF                                 0x0
    #define        DSDCH_CTRL_MUTE_MUTE_ON                                  0x1

    #define     BA_DSDCH_CTRL_LRSWITCH                         0x0000
    #define     B16DSDCH_CTRL_LRSWITCH                         0x0000
    #define   LSb32DSDCH_CTRL_LRSWITCH                            2
    #define   LSb16DSDCH_CTRL_LRSWITCH                            2
    #define       bDSDCH_CTRL_LRSWITCH                         1
    #define   MSK32DSDCH_CTRL_LRSWITCH                            0x00000004
    #define        DSDCH_CTRL_LRSWITCH_SWITCH_OFF                           0x0
    #define        DSDCH_CTRL_LRSWITCH_SWITCH_ON                            0x1

    #define     BA_DSDCH_CTRL_FLUSH                            0x0000
    #define     B16DSDCH_CTRL_FLUSH                            0x0000
    #define   LSb32DSDCH_CTRL_FLUSH                               3
    #define   LSb16DSDCH_CTRL_FLUSH                               3
    #define       bDSDCH_CTRL_FLUSH                            1
    #define   MSK32DSDCH_CTRL_FLUSH                               0x00000008
    #define        DSDCH_CTRL_FLUSH_ON                                      0x1
    #define        DSDCH_CTRL_FLUSH_OFF                                     0x0
    ///////////////////////////////////////////////////////////
    #define     RA_DSDCH_CTRL2                                 0x0004

    #define     BA_DSDCH_CTRL2_RDLT                            0x0004
    #define     B16DSDCH_CTRL2_RDLT                            0x0004
    #define   LSb32DSDCH_CTRL2_RDLT                               0
    #define   LSb16DSDCH_CTRL2_RDLT                               0
    #define       bDSDCH_CTRL2_RDLT                            16
    #define   MSK32DSDCH_CTRL2_RDLT                               0x0000FFFF

    #define     BA_DSDCH_CTRL2_FDLT                            0x0006
    #define     B16DSDCH_CTRL2_FDLT                            0x0006
    #define   LSb32DSDCH_CTRL2_FDLT                               16
    #define   LSb16DSDCH_CTRL2_FDLT                               0
    #define       bDSDCH_CTRL2_FDLT                            16
    #define   MSK32DSDCH_CTRL2_FDLT                               0xFFFF0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DSDCH {
    ///////////////////////////////////////////////////////////
    #define   GET32DSDCH_CTRL_ENABLE(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32DSDCH_CTRL_ENABLE(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16DSDCH_CTRL_ENABLE(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16DSDCH_CTRL_ENABLE(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define   GET32DSDCH_CTRL_MUTE(r32)                        _BFGET_(r32, 1, 1)
    #define   SET32DSDCH_CTRL_MUTE(r32,v)                      _BFSET_(r32, 1, 1,v)
    #define   GET16DSDCH_CTRL_MUTE(r16)                        _BFGET_(r16, 1, 1)
    #define   SET16DSDCH_CTRL_MUTE(r16,v)                      _BFSET_(r16, 1, 1,v)

    #define   GET32DSDCH_CTRL_LRSWITCH(r32)                    _BFGET_(r32, 2, 2)
    #define   SET32DSDCH_CTRL_LRSWITCH(r32,v)                  _BFSET_(r32, 2, 2,v)
    #define   GET16DSDCH_CTRL_LRSWITCH(r16)                    _BFGET_(r16, 2, 2)
    #define   SET16DSDCH_CTRL_LRSWITCH(r16,v)                  _BFSET_(r16, 2, 2,v)

    #define   GET32DSDCH_CTRL_FLUSH(r32)                       _BFGET_(r32, 3, 3)
    #define   SET32DSDCH_CTRL_FLUSH(r32,v)                     _BFSET_(r32, 3, 3,v)
    #define   GET16DSDCH_CTRL_FLUSH(r16)                       _BFGET_(r16, 3, 3)
    #define   SET16DSDCH_CTRL_FLUSH(r16,v)                     _BFSET_(r16, 3, 3,v)

    #define     w32DSDCH_CTRL                                  {\
            UNSG32 uCTRL_ENABLE                                :  1;\
            UNSG32 uCTRL_MUTE                                  :  1;\
            UNSG32 uCTRL_LRSWITCH                              :  1;\
            UNSG32 uCTRL_FLUSH                                 :  1;\
            UNSG32 RSVDx0_b4                                   : 28;\
          }
    union { UNSG32 u32DSDCH_CTRL;
            struct w32DSDCH_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DSDCH_CTRL2_RDLT(r32)                       _BFGET_(r32,15, 0)
    #define   SET32DSDCH_CTRL2_RDLT(r32,v)                     _BFSET_(r32,15, 0,v)
    #define   GET16DSDCH_CTRL2_RDLT(r16)                       _BFGET_(r16,15, 0)
    #define   SET16DSDCH_CTRL2_RDLT(r16,v)                     _BFSET_(r16,15, 0,v)

    #define   GET32DSDCH_CTRL2_FDLT(r32)                       _BFGET_(r32,31,16)
    #define   SET32DSDCH_CTRL2_FDLT(r32,v)                     _BFSET_(r32,31,16,v)
    #define   GET16DSDCH_CTRL2_FDLT(r16)                       _BFGET_(r16,15, 0)
    #define   SET16DSDCH_CTRL2_FDLT(r16,v)                     _BFSET_(r16,15, 0,v)

    #define     w32DSDCH_CTRL2                                 {\
            UNSG32 uCTRL2_RDLT                                 : 16;\
            UNSG32 uCTRL2_FDLT                                 : 16;\
          }
    union { UNSG32 u32DSDCH_CTRL2;
            struct w32DSDCH_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    } SIE_DSDCH;

    typedef union  T32DSDCH_CTRL
          { UNSG32 u32;
            struct w32DSDCH_CTRL;
                 } T32DSDCH_CTRL;
    typedef union  T32DSDCH_CTRL2
          { UNSG32 u32;
            struct w32DSDCH_CTRL2;
                 } T32DSDCH_CTRL2;
    ///////////////////////////////////////////////////////////

    typedef union  TDSDCH_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32DSDCH_CTRL;
                   };
                 } TDSDCH_CTRL;
    typedef union  TDSDCH_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32DSDCH_CTRL2;
                   };
                 } TDSDCH_CTRL2;

    ///////////////////////////////////////////////////////////
     SIGN32 DSDCH_drvrd(SIE_DSDCH *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DSDCH_drvwr(SIE_DSDCH *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DSDCH_reset(SIE_DSDCH *p);
     SIGN32 DSDCH_cmp  (SIE_DSDCH *p, SIE_DSDCH *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DSDCH_check(p,pie,pfx,hLOG) DSDCH_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DSDCH_print(p,    pfx,hLOG) DSDCH_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DSDCH
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE DSD                                      (4,4)
///     ###
///     * PDM Port registers - This section is consolidated registers for 8 channel PDM.
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL1                (P)
///               %unsigned 4  CLKDIV                    0x4
///                                    ###
///                                    * DSD CLKOUT Divider.
///                                    * 0: Divide by 1
///                                    * 1: Divide by 2
///                                    * 2: Divide by 4
///                                    * 3: Divide by 8
///                                    * 4: Divide by 16 (default)
///                                    * 5: Divide by 32
///                                    * 6: Divide by 64
///                                    * ........................
///                                    * ........................
///                                    * 14: Divide by 16384
///                                    * 15: Divide by 32768
///                                    ###
///               %unsigned 1  INVCLK_OUT                0x0
///               %unsigned 1  INVCLK_INT                0x0
///                                    ###
///                                    * Invert DSD CLK Internal
///                                    * 0: Not inverted (default)
///                                    * 1: Inverted
///                                    ###
///               %unsigned 1  CLKINT_SEL                0x1
///               %unsigned 1  RLSB                      0x0
///                                    ###
///                                    * Decides which bit is received first(left):
///                                    * 0: MSB first (default)
///                                    * 1: LSB first
///                                    ###
///               %unsigned 3  RDM                       0x3
///                                    ###
///                                    * L/R Channel resolution
///                                    * 0: 16-bits per channel
///                                    * 1: 18-bits per channel
///                                    * 2: 20-bits per channel
///                                    * 3: 24-bits per channel
///                                    * 4: 32-bits per channel (default)
///                                    * 5-7: Reserved
///                                    * DSD input is always 24 bits per channel.
///                                    ###
///               %unsigned 1  MODE                      0x0
///                                    ###
///                                    * 0 : Half cycle PDM (DDR) (default)
///                                    * 1 : Classic PDM      (SDR)
///                                    * DSD only uses DDR mode. Keep it 0.
///                                    ###
///               %unsigned 1  SDR_CLKSEL                0x0
///                                    ###
///                                    * SDR Data latch clock edge select
///                                    * 0: Latch data on falling clock edge of CLKOUT (default)
///                                    * 1: Latch data on rising clock edge of CLKOUT
///                                    * Unused for DSD. Keep it 0
///                                    ###
///               %unsigned 1  LATCH_MODE                0x0
///                                    ###
///                                    * PDM Data input latch mode
///                                    * 0: Counter, Use oversampling clock (400Mhz, sysClk) to lath the input data (default)
///                                    * 1: Edge, Use PDM CLKOUT Edge to latch the the input data
///                                    * DSD only uses counter mode. Keep it 0.
///                                    ###
///               %%        18         # Stuffing bits...
///     @ 0x00004 RXDATA               (P)
///               %unsigned 1  INTL                      0x1
///                                    ###
///                                    * Register Bit enables Interleaved Mode
///                                    * Interleaved Mode will send all 6-channel data over 1 dHub Channel.
///                                    * 1 : Enabled
///                                    * 0 : OFF
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00008 INTLMODE             (P)
///               %unsigned 1  PORT0_EN                  0x0
///                                    ###
///                                    * Indicated if Port 0 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT1_EN                  0x0
///                                    ###
///                                    * Indicated if Port 1 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT2_EN                  0x0
///                                    ###
///                                    * Indicated if Port 2 of MIC1 is enabled
///                                    ###
///               %unsigned 1  PORT3_EN                  0x0
///                                    ###
///                                    * Indicated if Port 3 of MIC1 is enabled. This port is always disabled for DSD.
///                                    ###
///               %unsigned 1  DUMMYDATA_EN              0x0
///                                    ###
///                                    * Indicates if Dummy data has to be sent in the non enabled ports.
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x0000C INTLMAP              (P)
///               ###
///               * INTL DATA MAP Register (if INTLMODE is enabled)
///               * In 8-Channel INTL Mode. 256-bit of data is received by SoC. These registers bits allows the users to map the 64 bits received on each port to the desired place in 256-bits.
///               ###
///               %unsigned 2  PORT0                     0x0
///                                    ###
///                                    * Data select for [31:0]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT1                     0x1
///                                    ###
///                                    * Data select for [63:32]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT2                     0x2
///                                    ###
///                                    * Data select for [95:64]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    ###
///               %unsigned 2  PORT3                     0x3
///                                    ###
///                                    * Data select for [127:96]:
///                                    * 00 : Port 0 data
///                                    * 01 : Port 1 data
///                                    * 10 : Port 2 data
///                                    * 11 : Port 3 data
///                                    * PORT3 is always disabled for DSD.
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00010                      (P)
///     # 0x00010 DSD0                 
///               $DSDCH               DSD0              REG          
///     @ 0x00018                      (P)
///     # 0x00018 DSD1                 
///               $DSDCH               DSD1              REG          
///     @ 0x00020                      (P)
///     # 0x00020 DSD2                 
///               $DSDCH               DSD2              REG          
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      40B, bits:     136b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DSD
#define h_DSD (){}

    #define     RA_DSD_CTRL1                                   0x0000

    #define     BA_DSD_CTRL1_CLKDIV                            0x0000
    #define     B16DSD_CTRL1_CLKDIV                            0x0000
    #define   LSb32DSD_CTRL1_CLKDIV                               0
    #define   LSb16DSD_CTRL1_CLKDIV                               0
    #define       bDSD_CTRL1_CLKDIV                            4
    #define   MSK32DSD_CTRL1_CLKDIV                               0x0000000F

    #define     BA_DSD_CTRL1_INVCLK_OUT                        0x0000
    #define     B16DSD_CTRL1_INVCLK_OUT                        0x0000
    #define   LSb32DSD_CTRL1_INVCLK_OUT                           4
    #define   LSb16DSD_CTRL1_INVCLK_OUT                           4
    #define       bDSD_CTRL1_INVCLK_OUT                        1
    #define   MSK32DSD_CTRL1_INVCLK_OUT                           0x00000010

    #define     BA_DSD_CTRL1_INVCLK_INT                        0x0000
    #define     B16DSD_CTRL1_INVCLK_INT                        0x0000
    #define   LSb32DSD_CTRL1_INVCLK_INT                           5
    #define   LSb16DSD_CTRL1_INVCLK_INT                           5
    #define       bDSD_CTRL1_INVCLK_INT                        1
    #define   MSK32DSD_CTRL1_INVCLK_INT                           0x00000020

    #define     BA_DSD_CTRL1_CLKINT_SEL                        0x0000
    #define     B16DSD_CTRL1_CLKINT_SEL                        0x0000
    #define   LSb32DSD_CTRL1_CLKINT_SEL                           6
    #define   LSb16DSD_CTRL1_CLKINT_SEL                           6
    #define       bDSD_CTRL1_CLKINT_SEL                        1
    #define   MSK32DSD_CTRL1_CLKINT_SEL                           0x00000040

    #define     BA_DSD_CTRL1_RLSB                              0x0000
    #define     B16DSD_CTRL1_RLSB                              0x0000
    #define   LSb32DSD_CTRL1_RLSB                                 7
    #define   LSb16DSD_CTRL1_RLSB                                 7
    #define       bDSD_CTRL1_RLSB                              1
    #define   MSK32DSD_CTRL1_RLSB                                 0x00000080

    #define     BA_DSD_CTRL1_RDM                               0x0001
    #define     B16DSD_CTRL1_RDM                               0x0000
    #define   LSb32DSD_CTRL1_RDM                                  8
    #define   LSb16DSD_CTRL1_RDM                                  8
    #define       bDSD_CTRL1_RDM                               3
    #define   MSK32DSD_CTRL1_RDM                                  0x00000700

    #define     BA_DSD_CTRL1_MODE                              0x0001
    #define     B16DSD_CTRL1_MODE                              0x0000
    #define   LSb32DSD_CTRL1_MODE                                 11
    #define   LSb16DSD_CTRL1_MODE                                 11
    #define       bDSD_CTRL1_MODE                              1
    #define   MSK32DSD_CTRL1_MODE                                 0x00000800

    #define     BA_DSD_CTRL1_SDR_CLKSEL                        0x0001
    #define     B16DSD_CTRL1_SDR_CLKSEL                        0x0000
    #define   LSb32DSD_CTRL1_SDR_CLKSEL                           12
    #define   LSb16DSD_CTRL1_SDR_CLKSEL                           12
    #define       bDSD_CTRL1_SDR_CLKSEL                        1
    #define   MSK32DSD_CTRL1_SDR_CLKSEL                           0x00001000

    #define     BA_DSD_CTRL1_LATCH_MODE                        0x0001
    #define     B16DSD_CTRL1_LATCH_MODE                        0x0000
    #define   LSb32DSD_CTRL1_LATCH_MODE                           13
    #define   LSb16DSD_CTRL1_LATCH_MODE                           13
    #define       bDSD_CTRL1_LATCH_MODE                        1
    #define   MSK32DSD_CTRL1_LATCH_MODE                           0x00002000
    ///////////////////////////////////////////////////////////
    #define     RA_DSD_RXDATA                                  0x0004

    #define     BA_DSD_RXDATA_INTL                             0x0004
    #define     B16DSD_RXDATA_INTL                             0x0004
    #define   LSb32DSD_RXDATA_INTL                                0
    #define   LSb16DSD_RXDATA_INTL                                0
    #define       bDSD_RXDATA_INTL                             1
    #define   MSK32DSD_RXDATA_INTL                                0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_DSD_INTLMODE                                0x0008

    #define     BA_DSD_INTLMODE_PORT0_EN                       0x0008
    #define     B16DSD_INTLMODE_PORT0_EN                       0x0008
    #define   LSb32DSD_INTLMODE_PORT0_EN                          0
    #define   LSb16DSD_INTLMODE_PORT0_EN                          0
    #define       bDSD_INTLMODE_PORT0_EN                       1
    #define   MSK32DSD_INTLMODE_PORT0_EN                          0x00000001

    #define     BA_DSD_INTLMODE_PORT1_EN                       0x0008
    #define     B16DSD_INTLMODE_PORT1_EN                       0x0008
    #define   LSb32DSD_INTLMODE_PORT1_EN                          1
    #define   LSb16DSD_INTLMODE_PORT1_EN                          1
    #define       bDSD_INTLMODE_PORT1_EN                       1
    #define   MSK32DSD_INTLMODE_PORT1_EN                          0x00000002

    #define     BA_DSD_INTLMODE_PORT2_EN                       0x0008
    #define     B16DSD_INTLMODE_PORT2_EN                       0x0008
    #define   LSb32DSD_INTLMODE_PORT2_EN                          2
    #define   LSb16DSD_INTLMODE_PORT2_EN                          2
    #define       bDSD_INTLMODE_PORT2_EN                       1
    #define   MSK32DSD_INTLMODE_PORT2_EN                          0x00000004

    #define     BA_DSD_INTLMODE_PORT3_EN                       0x0008
    #define     B16DSD_INTLMODE_PORT3_EN                       0x0008
    #define   LSb32DSD_INTLMODE_PORT3_EN                          3
    #define   LSb16DSD_INTLMODE_PORT3_EN                          3
    #define       bDSD_INTLMODE_PORT3_EN                       1
    #define   MSK32DSD_INTLMODE_PORT3_EN                          0x00000008

    #define     BA_DSD_INTLMODE_DUMMYDATA_EN                   0x0008
    #define     B16DSD_INTLMODE_DUMMYDATA_EN                   0x0008
    #define   LSb32DSD_INTLMODE_DUMMYDATA_EN                      4
    #define   LSb16DSD_INTLMODE_DUMMYDATA_EN                      4
    #define       bDSD_INTLMODE_DUMMYDATA_EN                   1
    #define   MSK32DSD_INTLMODE_DUMMYDATA_EN                      0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_DSD_INTLMAP                                 0x000C

    #define     BA_DSD_INTLMAP_PORT0                           0x000C
    #define     B16DSD_INTLMAP_PORT0                           0x000C
    #define   LSb32DSD_INTLMAP_PORT0                              0
    #define   LSb16DSD_INTLMAP_PORT0                              0
    #define       bDSD_INTLMAP_PORT0                           2
    #define   MSK32DSD_INTLMAP_PORT0                              0x00000003

    #define     BA_DSD_INTLMAP_PORT1                           0x000C
    #define     B16DSD_INTLMAP_PORT1                           0x000C
    #define   LSb32DSD_INTLMAP_PORT1                              2
    #define   LSb16DSD_INTLMAP_PORT1                              2
    #define       bDSD_INTLMAP_PORT1                           2
    #define   MSK32DSD_INTLMAP_PORT1                              0x0000000C

    #define     BA_DSD_INTLMAP_PORT2                           0x000C
    #define     B16DSD_INTLMAP_PORT2                           0x000C
    #define   LSb32DSD_INTLMAP_PORT2                              4
    #define   LSb16DSD_INTLMAP_PORT2                              4
    #define       bDSD_INTLMAP_PORT2                           2
    #define   MSK32DSD_INTLMAP_PORT2                              0x00000030

    #define     BA_DSD_INTLMAP_PORT3                           0x000C
    #define     B16DSD_INTLMAP_PORT3                           0x000C
    #define   LSb32DSD_INTLMAP_PORT3                              6
    #define   LSb16DSD_INTLMAP_PORT3                              6
    #define       bDSD_INTLMAP_PORT3                           2
    #define   MSK32DSD_INTLMAP_PORT3                              0x000000C0
    ///////////////////////////////////////////////////////////
    #define     RA_DSD_DSD0                                    0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_DSD_DSD1                                    0x0018
    ///////////////////////////////////////////////////////////
    #define     RA_DSD_DSD2                                    0x0020
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DSD {
    ///////////////////////////////////////////////////////////
    #define   GET32DSD_CTRL1_CLKDIV(r32)                       _BFGET_(r32, 3, 0)
    #define   SET32DSD_CTRL1_CLKDIV(r32,v)                     _BFSET_(r32, 3, 0,v)
    #define   GET16DSD_CTRL1_CLKDIV(r16)                       _BFGET_(r16, 3, 0)
    #define   SET16DSD_CTRL1_CLKDIV(r16,v)                     _BFSET_(r16, 3, 0,v)

    #define   GET32DSD_CTRL1_INVCLK_OUT(r32)                   _BFGET_(r32, 4, 4)
    #define   SET32DSD_CTRL1_INVCLK_OUT(r32,v)                 _BFSET_(r32, 4, 4,v)
    #define   GET16DSD_CTRL1_INVCLK_OUT(r16)                   _BFGET_(r16, 4, 4)
    #define   SET16DSD_CTRL1_INVCLK_OUT(r16,v)                 _BFSET_(r16, 4, 4,v)

    #define   GET32DSD_CTRL1_INVCLK_INT(r32)                   _BFGET_(r32, 5, 5)
    #define   SET32DSD_CTRL1_INVCLK_INT(r32,v)                 _BFSET_(r32, 5, 5,v)
    #define   GET16DSD_CTRL1_INVCLK_INT(r16)                   _BFGET_(r16, 5, 5)
    #define   SET16DSD_CTRL1_INVCLK_INT(r16,v)                 _BFSET_(r16, 5, 5,v)

    #define   GET32DSD_CTRL1_CLKINT_SEL(r32)                   _BFGET_(r32, 6, 6)
    #define   SET32DSD_CTRL1_CLKINT_SEL(r32,v)                 _BFSET_(r32, 6, 6,v)
    #define   GET16DSD_CTRL1_CLKINT_SEL(r16)                   _BFGET_(r16, 6, 6)
    #define   SET16DSD_CTRL1_CLKINT_SEL(r16,v)                 _BFSET_(r16, 6, 6,v)

    #define   GET32DSD_CTRL1_RLSB(r32)                         _BFGET_(r32, 7, 7)
    #define   SET32DSD_CTRL1_RLSB(r32,v)                       _BFSET_(r32, 7, 7,v)
    #define   GET16DSD_CTRL1_RLSB(r16)                         _BFGET_(r16, 7, 7)
    #define   SET16DSD_CTRL1_RLSB(r16,v)                       _BFSET_(r16, 7, 7,v)

    #define   GET32DSD_CTRL1_RDM(r32)                          _BFGET_(r32,10, 8)
    #define   SET32DSD_CTRL1_RDM(r32,v)                        _BFSET_(r32,10, 8,v)
    #define   GET16DSD_CTRL1_RDM(r16)                          _BFGET_(r16,10, 8)
    #define   SET16DSD_CTRL1_RDM(r16,v)                        _BFSET_(r16,10, 8,v)

    #define   GET32DSD_CTRL1_MODE(r32)                         _BFGET_(r32,11,11)
    #define   SET32DSD_CTRL1_MODE(r32,v)                       _BFSET_(r32,11,11,v)
    #define   GET16DSD_CTRL1_MODE(r16)                         _BFGET_(r16,11,11)
    #define   SET16DSD_CTRL1_MODE(r16,v)                       _BFSET_(r16,11,11,v)

    #define   GET32DSD_CTRL1_SDR_CLKSEL(r32)                   _BFGET_(r32,12,12)
    #define   SET32DSD_CTRL1_SDR_CLKSEL(r32,v)                 _BFSET_(r32,12,12,v)
    #define   GET16DSD_CTRL1_SDR_CLKSEL(r16)                   _BFGET_(r16,12,12)
    #define   SET16DSD_CTRL1_SDR_CLKSEL(r16,v)                 _BFSET_(r16,12,12,v)

    #define   GET32DSD_CTRL1_LATCH_MODE(r32)                   _BFGET_(r32,13,13)
    #define   SET32DSD_CTRL1_LATCH_MODE(r32,v)                 _BFSET_(r32,13,13,v)
    #define   GET16DSD_CTRL1_LATCH_MODE(r16)                   _BFGET_(r16,13,13)
    #define   SET16DSD_CTRL1_LATCH_MODE(r16,v)                 _BFSET_(r16,13,13,v)

    #define     w32DSD_CTRL1                                   {\
            UNSG32 uCTRL1_CLKDIV                               :  4;\
            UNSG32 uCTRL1_INVCLK_OUT                           :  1;\
            UNSG32 uCTRL1_INVCLK_INT                           :  1;\
            UNSG32 uCTRL1_CLKINT_SEL                           :  1;\
            UNSG32 uCTRL1_RLSB                                 :  1;\
            UNSG32 uCTRL1_RDM                                  :  3;\
            UNSG32 uCTRL1_MODE                                 :  1;\
            UNSG32 uCTRL1_SDR_CLKSEL                           :  1;\
            UNSG32 uCTRL1_LATCH_MODE                           :  1;\
            UNSG32 RSVDx0_b14                                  : 18;\
          }
    union { UNSG32 u32DSD_CTRL1;
            struct w32DSD_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DSD_RXDATA_INTL(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32DSD_RXDATA_INTL(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16DSD_RXDATA_INTL(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16DSD_RXDATA_INTL(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define     w32DSD_RXDATA                                  {\
            UNSG32 uRXDATA_INTL                                :  1;\
            UNSG32 RSVDx4_b1                                   : 31;\
          }
    union { UNSG32 u32DSD_RXDATA;
            struct w32DSD_RXDATA;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DSD_INTLMODE_PORT0_EN(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32DSD_INTLMODE_PORT0_EN(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16DSD_INTLMODE_PORT0_EN(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16DSD_INTLMODE_PORT0_EN(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32DSD_INTLMODE_PORT1_EN(r32)                  _BFGET_(r32, 1, 1)
    #define   SET32DSD_INTLMODE_PORT1_EN(r32,v)                _BFSET_(r32, 1, 1,v)
    #define   GET16DSD_INTLMODE_PORT1_EN(r16)                  _BFGET_(r16, 1, 1)
    #define   SET16DSD_INTLMODE_PORT1_EN(r16,v)                _BFSET_(r16, 1, 1,v)

    #define   GET32DSD_INTLMODE_PORT2_EN(r32)                  _BFGET_(r32, 2, 2)
    #define   SET32DSD_INTLMODE_PORT2_EN(r32,v)                _BFSET_(r32, 2, 2,v)
    #define   GET16DSD_INTLMODE_PORT2_EN(r16)                  _BFGET_(r16, 2, 2)
    #define   SET16DSD_INTLMODE_PORT2_EN(r16,v)                _BFSET_(r16, 2, 2,v)

    #define   GET32DSD_INTLMODE_PORT3_EN(r32)                  _BFGET_(r32, 3, 3)
    #define   SET32DSD_INTLMODE_PORT3_EN(r32,v)                _BFSET_(r32, 3, 3,v)
    #define   GET16DSD_INTLMODE_PORT3_EN(r16)                  _BFGET_(r16, 3, 3)
    #define   SET16DSD_INTLMODE_PORT3_EN(r16,v)                _BFSET_(r16, 3, 3,v)

    #define   GET32DSD_INTLMODE_DUMMYDATA_EN(r32)              _BFGET_(r32, 4, 4)
    #define   SET32DSD_INTLMODE_DUMMYDATA_EN(r32,v)            _BFSET_(r32, 4, 4,v)
    #define   GET16DSD_INTLMODE_DUMMYDATA_EN(r16)              _BFGET_(r16, 4, 4)
    #define   SET16DSD_INTLMODE_DUMMYDATA_EN(r16,v)            _BFSET_(r16, 4, 4,v)

    #define     w32DSD_INTLMODE                                {\
            UNSG32 uINTLMODE_PORT0_EN                          :  1;\
            UNSG32 uINTLMODE_PORT1_EN                          :  1;\
            UNSG32 uINTLMODE_PORT2_EN                          :  1;\
            UNSG32 uINTLMODE_PORT3_EN                          :  1;\
            UNSG32 uINTLMODE_DUMMYDATA_EN                      :  1;\
            UNSG32 RSVDx8_b5                                   : 27;\
          }
    union { UNSG32 u32DSD_INTLMODE;
            struct w32DSD_INTLMODE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DSD_INTLMAP_PORT0(r32)                      _BFGET_(r32, 1, 0)
    #define   SET32DSD_INTLMAP_PORT0(r32,v)                    _BFSET_(r32, 1, 0,v)
    #define   GET16DSD_INTLMAP_PORT0(r16)                      _BFGET_(r16, 1, 0)
    #define   SET16DSD_INTLMAP_PORT0(r16,v)                    _BFSET_(r16, 1, 0,v)

    #define   GET32DSD_INTLMAP_PORT1(r32)                      _BFGET_(r32, 3, 2)
    #define   SET32DSD_INTLMAP_PORT1(r32,v)                    _BFSET_(r32, 3, 2,v)
    #define   GET16DSD_INTLMAP_PORT1(r16)                      _BFGET_(r16, 3, 2)
    #define   SET16DSD_INTLMAP_PORT1(r16,v)                    _BFSET_(r16, 3, 2,v)

    #define   GET32DSD_INTLMAP_PORT2(r32)                      _BFGET_(r32, 5, 4)
    #define   SET32DSD_INTLMAP_PORT2(r32,v)                    _BFSET_(r32, 5, 4,v)
    #define   GET16DSD_INTLMAP_PORT2(r16)                      _BFGET_(r16, 5, 4)
    #define   SET16DSD_INTLMAP_PORT2(r16,v)                    _BFSET_(r16, 5, 4,v)

    #define   GET32DSD_INTLMAP_PORT3(r32)                      _BFGET_(r32, 7, 6)
    #define   SET32DSD_INTLMAP_PORT3(r32,v)                    _BFSET_(r32, 7, 6,v)
    #define   GET16DSD_INTLMAP_PORT3(r16)                      _BFGET_(r16, 7, 6)
    #define   SET16DSD_INTLMAP_PORT3(r16,v)                    _BFSET_(r16, 7, 6,v)

    #define     w32DSD_INTLMAP                                 {\
            UNSG32 uINTLMAP_PORT0                              :  2;\
            UNSG32 uINTLMAP_PORT1                              :  2;\
            UNSG32 uINTLMAP_PORT2                              :  2;\
            UNSG32 uINTLMAP_PORT3                              :  2;\
            UNSG32 RSVDxC_b8                                   : 24;\
          }
    union { UNSG32 u32DSD_INTLMAP;
            struct w32DSD_INTLMAP;
          };
    ///////////////////////////////////////////////////////////
              SIE_DSDCH                                        ie_DSD0;
    ///////////////////////////////////////////////////////////
              SIE_DSDCH                                        ie_DSD1;
    ///////////////////////////////////////////////////////////
              SIE_DSDCH                                        ie_DSD2;
    ///////////////////////////////////////////////////////////
    } SIE_DSD;

    typedef union  T32DSD_CTRL1
          { UNSG32 u32;
            struct w32DSD_CTRL1;
                 } T32DSD_CTRL1;
    typedef union  T32DSD_RXDATA
          { UNSG32 u32;
            struct w32DSD_RXDATA;
                 } T32DSD_RXDATA;
    typedef union  T32DSD_INTLMODE
          { UNSG32 u32;
            struct w32DSD_INTLMODE;
                 } T32DSD_INTLMODE;
    typedef union  T32DSD_INTLMAP
          { UNSG32 u32;
            struct w32DSD_INTLMAP;
                 } T32DSD_INTLMAP;
    ///////////////////////////////////////////////////////////

    typedef union  TDSD_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32DSD_CTRL1;
                   };
                 } TDSD_CTRL1;
    typedef union  TDSD_RXDATA
          { UNSG32 u32[1];
            struct {
            struct w32DSD_RXDATA;
                   };
                 } TDSD_RXDATA;
    typedef union  TDSD_INTLMODE
          { UNSG32 u32[1];
            struct {
            struct w32DSD_INTLMODE;
                   };
                 } TDSD_INTLMODE;
    typedef union  TDSD_INTLMAP
          { UNSG32 u32[1];
            struct {
            struct w32DSD_INTLMAP;
                   };
                 } TDSD_INTLMAP;

    ///////////////////////////////////////////////////////////
     SIGN32 DSD_drvrd(SIE_DSD *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DSD_drvwr(SIE_DSD *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DSD_reset(SIE_DSD *p);
     SIGN32 DSD_cmp  (SIE_DSD *p, SIE_DSD *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DSD_check(p,pie,pfx,hLOG) DSD_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DSD_print(p,    pfx,hLOG) DSD_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DSD
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE DMIC                                     (4,4)
///     ###
///     * DMIC Registers.
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 STATUS               (WOC-)
///               %unsigned 1  Wake                      0x0
///                                    ###
///                                    * DMIC Wake-on-Sound Interrupt
///                                    ###
///               %unsigned 1  PCM_FIFO_full             0x0
///                                    ###
///                                    * DMIC interrupt generated because PCM write data path FIFO overflowed. This happens when DHUB is slower (less throughput on OCPf) than incoming DMIC data stream. (PCM datapath propagates data from DMIC/PDM data pins to DHUB)
///                                    ###
///               %unsigned 1  PDM_LFIFO_emp             0x0
///                                    ###
///                                    * DMIC interrupt generated because PDM read datapath FIFO (left channel) under-flowed. This happens when DHUB is slower (less throughput on OCPf) than required PDM data throughput. (PDM read datapath propagates data from DHUB to DMIC)
///                                    ###
///               %unsigned 1  PDM_RFIFO_emp             0x0
///                                    ###
///                                    * DMIC interrupt generated because PDM read datapath FIFO (right channel) under-flowed. This happens when DHUB is slower (less throughput on OCPf) than required PDM data throughput. (PDM read datapath propagates data from DHUB to DMIC)
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00004 CONTROL              (P)
///               %unsigned 1  Enable                    0x0
///                                    ###
///                                    * When set, enables the module for operation.
///                                    * When cleared, disables the module, and returns it to the idle state.
///                                    ###
///               %unsigned 1  Enable_A                  0x0
///                                    ###
///                                    * When set, enables the stereo microphone pair A to operate.
///                                    * When cleared, disables stereo microphone pair A, and returns the associateddecimation datapath to its default idle state.
///                                    ###
///               %unsigned 1  Enable_B                  0x0
///                                    ###
///                                    * When set, enables the stereo microphone pair B to operate.
///                                    * When cleared, disables stereo microphone pair B, and returns the associateddecimation data path to its default idle state.
///                                    ###
///               %unsigned 1  Enable_C                  0x0
///                                    ###
///                                    * When set, enables the stereo microphone pair C to operate.
///                                    * When cleared, disables stereo microphone pair C, and returns the associateddecimation data path to its default idle state.
///                                    ###
///               %unsigned 1  Enable_D                  0x0
///                                    ###
///                                    * When set, enables the stereo microphone pair D to operate.
///                                    * When cleared, disables stereo microphone pair D, and returns the associateddecimation data path to its default idle state.
///                                    ###
///               %unsigned 1  Run_A_L                   0x0
///                                    ###
///                                    * When set, allows microphone pair A to place left channel samples into DMAdata frames.
///                                    * When cleared, prevents microphone pair A from placing left channel samples into DMA data frames. However, the decimation data path continues to operate normally.
///                                    ###
///               %unsigned 1  Run_A_R                   0x0
///                                    ###
///                                    * When set, allows microphone pair A to place right channel samples into DMAdata frames.
///                                    * When cleared, prevents microphone pair A from placing right channel samples into DMA data frames. However, the decimation data path continues to operate normally.
///                                    * Note that in order to maintain temporal alignment between left and right channels, Run_A_R should be set at the same time as Run_A_L.
///                                    ###
///               %unsigned 1  Run_B_L                   0x0
///                                    ###
///                                    * When set, allows microphone pair B to place left channel samples into DMA data frames.
///                                    * When cleared, prevents microphone pair B from placing left channel samples into DMA data frames. However, the decimation data path continues to operate normally.
///                                    * Note that in order to maintain temporal alignment between left and right channels, Run_B_L should be set at the same time as Run_B_R.
///                                    ###
///               %unsigned 1  Run_B_R                   0x0
///                                    ###
///                                    * When set, allows microphone pair B to place right channel samples into DMA data frames.
///                                    * When cleared, prevents microphone pair B from placing right channel samples into DMA data frames. However, the decimation data path continues to operate normally.
///                                    * Note that in order to maintain temporal alignment between left.
///                                    ###
///               %unsigned 1  Run_C_L                   0x0
///                                    ###
///                                    * When set, allows microphone pair C to place left channel samples into DMA data frames.
///                                    * When cleared, prevents microphone pair C from placing left channel samples into DMA data frames. However, the decimation data path continues to operate normally.
///                                    * Note that in order to maintain temporal alignment between left and right channels, Run_C_L should be set at the same time as Run_C_R.
///                                    ###
///               %unsigned 1  Run_C_R                   0x0
///                                    ###
///                                    * When set, allows microphone pair C to place right channel samples into DMA data frames.
///                                    * When cleared, prevents microphone pair C from placing right channel samples into DMA data frames. However, the decimation data path continues to operate normally.
///                                    * Note that in order to maintain temporal alignment between left and right channels, Run_C_R should be set at the same time as Run_C_L.
///                                    ###
///               %unsigned 1  Run_D_L                   0x0
///                                    ###
///                                    * When set, allows microphone pair D to place left channel samples into DMA data frames.
///                                    * When cleared, prevents microphone pair D from placing left channel samples into DMA data frames. However, the decimation data path continues to operate normally.
///                                    * Note that in order to maintain temporal alignment between left and right channels, Run_D_L should be set at the same time as Run_D_R.
///                                    ###
///               %unsigned 1  Run_D_R                   0x0
///                                    ###
///                                    * When set, allows microphone pair D to place right channel samples into DMA data frames.
///                                    * When cleared, prevents microphone pair D from placing right channel samples into DMA data frames. However, the decimation data path continues to operate normally.
///                                    * Note that in order to maintain temporal alignment between left and right channels, Run_D_R should be set at the same time as Run_D_L.
///                                    ###
///               %unsigned 4  Wake_On_Sound             0x0
///                                    ###
///                                    * When set, each bit establishes wake-on-sound mode for the corresponding DMIC interface.[31]: Microphone Pair D[30]: Microphone Pair C[29]: Microphone Pair B[28]: Microphone Pair A
///                                    ###
///               %unsigned 1  Enable_DC_A               0x0
///                                    ###
///                                    * When set, enables DC filter operation for microphone pair A.
///                                    * Should not be modified while decimation is occurring.
///                                    ###
///               %unsigned 1  Enable_DC_B               0x0
///                                    ###
///                                    * When set, enables DC filter operation for microphone pair B.
///                                    * Should not be modified while decimation is occurring.
///                                    ###
///               %unsigned 1  Enable_DC_C               0x0
///                                    ###
///                                    * When set, enables DC filter operation for microphone pair C.
///                                    * Should not be modified while decimation is occurring.
///                                    ###
///               %unsigned 1  Enable_DC_D               0x0
///                                    ###
///                                    * When set, enables DC filter operation for microphone pair D.
///                                    * Should not be modified while decimation is occurring.
///                                    ###
///               %unsigned 1  Mono_A                    0x0
///                                    ###
///                                    * When set, causes microphone pair A to operate in mono mode, using the left microphone input. (Note that the left input can be captured on either the rising or falling clock edge, as configured in the Microphone_Config register below).
///                                    ###
///               %unsigned 1  Mono_B                    0x0
///                                    ###
///                                    * When set, causes microphone pair B to operate in mono mode, using the left microphone input. (Note that the left input can be captured on either the rising or falling clock edge, as configured in the Microphone_Config register below).
///                                    ###
///               %unsigned 1  Mono_C                    0x0
///                                    ###
///                                    * When set, causes microphone pair C to operate in mono mode, using the left microphone input. (Note that the left input can be captured on either the rising or falling clock edge, as configured in the Microphone_Config register below)
///                                    ###
///               %unsigned 1  Mono_D                    0x0
///                                    ###
///                                    * When set, causes microphone pair D to operate in mono mode, using the left microphone input. (Note that the left input can be captured on either the rising or falling clock edge, as configured in the Microphone_Config register below).
///                                    ###
///               %unsigned 1  PDMIn_D_LRSwp             0x0
///                                    ###
///                                    * Left-Right sample switching for PDM data read from DRAM. This data are fed to the D lane of DMIC.
///                                    ###
///               %unsigned 1  PDMIn_D_LJn_RJ            0x0
///                                    ###
///                                    * Specifies the position of the PDM sample in 32-bit word.
///                                    * 0: PDM sample (16b/18b/20b/24b) is left justified – LSBs are zeros
///                                    * 1: PDM sample (16b/18b/20b/24b) is right-justified – MSBs are zeros.
///                                    ###
///               %unsigned 1  PCM_LJn_RJ                0x0
///                                    ###
///                                    * Specifies the position of the PCM sample in 32-bit word. This bit works on all the DMIC channels
///                                    * 0: PCM sample (24b) is left justified – LSBs are zeros
///                                    * 1: PCM sample (24b) is right justified – MSBs are zeros
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00008 FLUSH                (RW-)
///               %unsigned 1  PCMWR_FLUSH               0x0
///                                    ###
///                                    * Explicit flush for all the FIFOs on PCM write data path – between DMIC and DHUB. This bit is set by software and cleared by hardware. Flush operation is considered complete when it is cleared by HW.
///                                    ###
///               %unsigned 1  PDMRD_FLUSH               0x0
///                                    ###
///                                    * Explicit flush for all the FIFOs on PDM read data path – between DHUB and DMIC. This bit is set by software and cleared by hardware. Flush operation is considered complete when it is cleared by HW.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x0000C DECIMATION_CONTROL   (P)
///               %unsigned 7  CIC_Ratio_PCM             0x8
///                                    ###
///                                    * Establishes the down-sample ratio of the CIC filters used for all channels, except for stereo pair D.
///                                    * Valid values are 4 through 64.
///                                    ###
///               %unsigned 7  CIC_Ratio_PCM_D           0x8
///                                    ###
///                                    * Establishes the down-sample ratio of the CIC filters used for stereo pair D, only when datapath D is configured to decimate PDM from memory (D_PDM_from_ADMA bit is set in Microphone_Config register).
///                                    * Valid values are 4 through 64
///                                    ###
///               %unsigned 2  PDM_Slots_Per_Frame       0x0
///                                    ###
///                                    * Unused. Keep it 0.
///                                    ###
///               %unsigned 2  FIR_Filter_Selection      0x0
///                                    ###
///                                    * This bit field determines which filter coefficient sets are used for the FIR1 and FIR2 filters. Encoded as:00: High performance filters. Automatically selecting the correctFIR1 coefficient set as a function of the configured CIC ratio.01: Low power filters.10: High performance filters, using only the low-CIC-ratio version of FIR111: High performance filters, using only the high-CIC-ratio version of FIR1
///                                    ###
///               %unsigned 5  PDM_Bits_Per_Slot         0x17
///                                    ###
///                                    * This bit is utilized only for PDM data being read from DHUB. Establishes the number of PDM bits used within each sample of PDM data. (PDM sample resolution)
///                                    * Encoded as:0: 1 bit1: 2 bits....23: 24 bits
///                                    ###
///               %%        9          # Stuffing bits...
///     @ 0x00010 MICROPHONE_CONFIGURATION (P)
///               %unsigned 1  A_Left_Right_Swap         0x0
///                                    ###
///                                    * When cleared, the left channel is captured one the falling edge of the microphone clock, while the right channel is captured on the rising edge.
///                                    * When set, the right channel is captured on the falling edge of the microphone clock, while the left channel is captured on the rising edge.
///                                    ###
///               %unsigned 1  A_Left_Right_Time_Order   0x0
///                                    ###
///                                    * When cleared, a PDM bit captured on the falling edge of the microphone clock is paired with the bit captured on the following rising edge to form a stereo pair.
///                                    * When set, a PDM bit captured on the falling edge of the microphone clock is paired with the bit captured on the preceding rising edge to form a stereo pair.
///                                    ###
///               %unsigned 1  A_Store_PDM               0x0
///                                    ###
///                                    * * NOT USED **
///                                    ###
///               %unsigned 1  B_Left_Right_Swap         0x0
///                                    ###
///                                    * When cleared, the left channel is captured one the falling edge of the microphone clock, while the right channel is captured on the rising edge.
///                                    * When set, the right channel is captured on the falling edge of the microphone clock, while the left channel is captured on the rising edge.
///                                    ###
///               %unsigned 1  B_Left_Right_Time_Order   0x0
///                                    ###
///                                    * When cleared, a PDM bit captured on the falling edge of the microphone clock is paired with the bit captured on the following rising edge to form a stereo pair.
///                                    * When set, a PDM bit captured on the falling edge of the microphone clock is paired with the bit captured on the preceding rising edge to form a stereo pair.
///                                    ###
///               %unsigned 1  B_Store_PDM               0x0
///                                    ###
///                                    * * NOT USED **
///                                    ###
///               %unsigned 1  C_Left_Right_Swapz        0x0
///                                    ###
///                                    * When cleared, the left channel is captured one the falling edge of the microphone clock, while the right channel is captured on the rising edge.
///                                    * When set, the right channel is captured on the falling edge of the microphone clock, while the left channel is captured on the rising edge.
///                                    ###
///               %unsigned 1  C_Left_Right_Time_Order   0x0
///                                    ###
///                                    * When cleared, a PDM bit captured on the falling edge of the microphone clock is paired with the bit captured on the following rising edge to form a stereo pair.
///                                    * When set, a PDM bit captured on the falling edge of the microphone clock is paired with the bit captured on the preceding rising edge to form a stereo pair.
///                                    ###
///               %unsigned 1  C_Store_PDM               0x0
///                                    ###
///                                    * * NOT USED **
///                                    ###
///               %unsigned 1  D_Left_Right_Swap         0x0
///                                    ###
///                                    * When cleared, the left channel is captured one the falling edge of the microphone clock, while the right channel is captured on the rising edge.
///                                    * When set, the right channel is captured on the falling edge of the microphone clock, while the left channel is captured on the rising edge.
///                                    ###
///               %unsigned 1  D_Left_Right_Time_Order   0x0
///                                    ###
///                                    * When cleared, a PDM bit captured on the falling edge of the microphone clock is paired with the bit captured on the following rising edge to form a stereo pair.
///                                    * When set, a PDM bit captured on the falling edge of the microphone clock is paired with the bit captured on the preceding rising edge to form a stereo pair .
///                                    ###
///               %unsigned 1  D_Store_PDM               0x0
///                                    ###
///                                    * * NOT USED **
///                                    ###
///               %unsigned 2  D_PDM_from_ADMA           0x0
///                                    ###
///                                    * Enables the reception of PDM data from DHUB, to be decimated in place of microphone PDM data.00: No data received from DHUB (decimate microphone data)01: Left channel data received from DHUB (right ch unused)10: Right channel data received from DHUB (left ch unused)11: Left and right channel data received from DHUB.
///                                    ###
///               %%        18         # Stuffing bits...
///     @ 0x00014 GAIN_MIC_PAIR_A      (P)
///               %unsigned 10 Gain_L                    0x0
///                                    ###
///                                    * Establishes the gain applied to the left channel of microphone pair A.
///                                    ###
///               %unsigned 10 Gain_R                    0x0
///                                    ###
///                                    * Establishes the gain applied to the right channel of microphone pairA. Available settings are from -75dB to +12dB, in increments of0.125dB.Encoded as follows:0x000: -75.000dB0x001: -74.875dB0x002: -74.750dB........0x257: -0.125dB0x258: 0.000dB0x259: +0.125dB........0x2B6: +11.750dB0x2B7: +11.875dB0x2B8: +12.000dB
///                                    ###
///               %%        12         # Stuffing bits...
///     @ 0x00018 GAIN_MIC_PAIR_B      (P)
///               %unsigned 10 Gain_L                    0x0
///                                    ###
///                                    * Establishes the gain applied to the left channel of microphone pair B.
///                                    ###
///               %unsigned 10 Gain_R                    0x0
///                                    ###
///                                    * Establishes the gain applied to the right channel of microphone pair B. Available settings are from -75dB to +12dB, in increments of 0.125dB.Encoded as follows:0x000: -75.000dB0x001: -74.875dB0x002: -74.750dB........0x257: -0.125dB0x258: 0.000dB0x259: +0.125dB........0x2B6: +11.750dB0x2B7: +11.875dB0x2B8: +12.000dB
///                                    ###
///               %%        12         # Stuffing bits...
///     @ 0x0001C GAIN_MIC_PAIR_C      (P)
///               %unsigned 10 Gain_L                    0x0
///                                    ###
///                                    * Establishes the gain applied to the left channel of microphone pair C.
///                                    ###
///               %unsigned 10 Gain_R                    0x0
///                                    ###
///                                    * Establishes the gain applied to the right channel of microphone pair C. Available settings are from -75dB to +12dB, in increments of 0.125dB.Encoded as follows:0x000: -75.000dB0x001: -74.875dB0x002: -74.750dB........0x257: -0.125dB0x258: 0.000dB0x259: +0.125dB........0x2B6: +11.750dB0x2B7: +11.875dB0x2B8: +12.000dB
///                                    ###
///               %%        12         # Stuffing bits...
///     @ 0x00020 GAIN_MIC_PAIR_D      (P)
///               %unsigned 10 Gain_L                    0x0
///                                    ###
///                                    * Establishes the gain applied to the left channel of microphone pair D.
///                                    ###
///               %unsigned 10 Gain_R                    0x0
///                                    ###
///                                    * Establishes the gain applied to the right channel of microphone pair D. Available settings are from -75dB to +12dB, in increments of 0.125dB. Encoded as follows: 0x000: -75.000dB0x001: -74.875dB0x002: -74.750dB........0x257: -0.125dB0x258: 0.000dB0x259: +0.125dB........0x2B6: +11.750dB0x2B7: +11.875dB0x2B8: +12.000dB
///                                    ###
///               %%        12         # Stuffing bits...
///     @ 0x00024 GAIN_RAMP_CONTROL    (P)
///               %unsigned 8  Step_Size                 0x80
///                                    ###
///                                    * Establishes the step size used for gain ramping. The units are 1 LSb of the 19-bit linear gain coefficients used to represent gain.
///                                    ###
///               %unsigned 3  Step_Rate                 0x0
///                                    ###
///                                    * Establishes the rate at which gain steps are applied, whenever volume settings are changed. Encoded as:0x0: 1x the configured sample rate0x1: 1/2x the configured sample rate0x2: 1/4x the configured sample rate0x3: 1/8x the configured sample rate0x4: 1/16x the configured sample rate0x5: 1/32x the configured sample rate
///                                    ###
///               %%        21         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      40B, bits:     162b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DMIC
#define h_DMIC (){}

    #define     RA_DMIC_STATUS                                 0x0000

    #define     BA_DMIC_STATUS_Wake                            0x0000
    #define     B16DMIC_STATUS_Wake                            0x0000
    #define   LSb32DMIC_STATUS_Wake                               0
    #define   LSb16DMIC_STATUS_Wake                               0
    #define       bDMIC_STATUS_Wake                            1
    #define   MSK32DMIC_STATUS_Wake                               0x00000001

    #define     BA_DMIC_STATUS_PCM_FIFO_full                   0x0000
    #define     B16DMIC_STATUS_PCM_FIFO_full                   0x0000
    #define   LSb32DMIC_STATUS_PCM_FIFO_full                      1
    #define   LSb16DMIC_STATUS_PCM_FIFO_full                      1
    #define       bDMIC_STATUS_PCM_FIFO_full                   1
    #define   MSK32DMIC_STATUS_PCM_FIFO_full                      0x00000002

    #define     BA_DMIC_STATUS_PDM_LFIFO_emp                   0x0000
    #define     B16DMIC_STATUS_PDM_LFIFO_emp                   0x0000
    #define   LSb32DMIC_STATUS_PDM_LFIFO_emp                      2
    #define   LSb16DMIC_STATUS_PDM_LFIFO_emp                      2
    #define       bDMIC_STATUS_PDM_LFIFO_emp                   1
    #define   MSK32DMIC_STATUS_PDM_LFIFO_emp                      0x00000004

    #define     BA_DMIC_STATUS_PDM_RFIFO_emp                   0x0000
    #define     B16DMIC_STATUS_PDM_RFIFO_emp                   0x0000
    #define   LSb32DMIC_STATUS_PDM_RFIFO_emp                      3
    #define   LSb16DMIC_STATUS_PDM_RFIFO_emp                      3
    #define       bDMIC_STATUS_PDM_RFIFO_emp                   1
    #define   MSK32DMIC_STATUS_PDM_RFIFO_emp                      0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_DMIC_CONTROL                                0x0004

    #define     BA_DMIC_CONTROL_Enable                         0x0004
    #define     B16DMIC_CONTROL_Enable                         0x0004
    #define   LSb32DMIC_CONTROL_Enable                            0
    #define   LSb16DMIC_CONTROL_Enable                            0
    #define       bDMIC_CONTROL_Enable                         1
    #define   MSK32DMIC_CONTROL_Enable                            0x00000001

    #define     BA_DMIC_CONTROL_Enable_A                       0x0004
    #define     B16DMIC_CONTROL_Enable_A                       0x0004
    #define   LSb32DMIC_CONTROL_Enable_A                          1
    #define   LSb16DMIC_CONTROL_Enable_A                          1
    #define       bDMIC_CONTROL_Enable_A                       1
    #define   MSK32DMIC_CONTROL_Enable_A                          0x00000002

    #define     BA_DMIC_CONTROL_Enable_B                       0x0004
    #define     B16DMIC_CONTROL_Enable_B                       0x0004
    #define   LSb32DMIC_CONTROL_Enable_B                          2
    #define   LSb16DMIC_CONTROL_Enable_B                          2
    #define       bDMIC_CONTROL_Enable_B                       1
    #define   MSK32DMIC_CONTROL_Enable_B                          0x00000004

    #define     BA_DMIC_CONTROL_Enable_C                       0x0004
    #define     B16DMIC_CONTROL_Enable_C                       0x0004
    #define   LSb32DMIC_CONTROL_Enable_C                          3
    #define   LSb16DMIC_CONTROL_Enable_C                          3
    #define       bDMIC_CONTROL_Enable_C                       1
    #define   MSK32DMIC_CONTROL_Enable_C                          0x00000008

    #define     BA_DMIC_CONTROL_Enable_D                       0x0004
    #define     B16DMIC_CONTROL_Enable_D                       0x0004
    #define   LSb32DMIC_CONTROL_Enable_D                          4
    #define   LSb16DMIC_CONTROL_Enable_D                          4
    #define       bDMIC_CONTROL_Enable_D                       1
    #define   MSK32DMIC_CONTROL_Enable_D                          0x00000010

    #define     BA_DMIC_CONTROL_Run_A_L                        0x0004
    #define     B16DMIC_CONTROL_Run_A_L                        0x0004
    #define   LSb32DMIC_CONTROL_Run_A_L                           5
    #define   LSb16DMIC_CONTROL_Run_A_L                           5
    #define       bDMIC_CONTROL_Run_A_L                        1
    #define   MSK32DMIC_CONTROL_Run_A_L                           0x00000020

    #define     BA_DMIC_CONTROL_Run_A_R                        0x0004
    #define     B16DMIC_CONTROL_Run_A_R                        0x0004
    #define   LSb32DMIC_CONTROL_Run_A_R                           6
    #define   LSb16DMIC_CONTROL_Run_A_R                           6
    #define       bDMIC_CONTROL_Run_A_R                        1
    #define   MSK32DMIC_CONTROL_Run_A_R                           0x00000040

    #define     BA_DMIC_CONTROL_Run_B_L                        0x0004
    #define     B16DMIC_CONTROL_Run_B_L                        0x0004
    #define   LSb32DMIC_CONTROL_Run_B_L                           7
    #define   LSb16DMIC_CONTROL_Run_B_L                           7
    #define       bDMIC_CONTROL_Run_B_L                        1
    #define   MSK32DMIC_CONTROL_Run_B_L                           0x00000080

    #define     BA_DMIC_CONTROL_Run_B_R                        0x0005
    #define     B16DMIC_CONTROL_Run_B_R                        0x0004
    #define   LSb32DMIC_CONTROL_Run_B_R                           8
    #define   LSb16DMIC_CONTROL_Run_B_R                           8
    #define       bDMIC_CONTROL_Run_B_R                        1
    #define   MSK32DMIC_CONTROL_Run_B_R                           0x00000100

    #define     BA_DMIC_CONTROL_Run_C_L                        0x0005
    #define     B16DMIC_CONTROL_Run_C_L                        0x0004
    #define   LSb32DMIC_CONTROL_Run_C_L                           9
    #define   LSb16DMIC_CONTROL_Run_C_L                           9
    #define       bDMIC_CONTROL_Run_C_L                        1
    #define   MSK32DMIC_CONTROL_Run_C_L                           0x00000200

    #define     BA_DMIC_CONTROL_Run_C_R                        0x0005
    #define     B16DMIC_CONTROL_Run_C_R                        0x0004
    #define   LSb32DMIC_CONTROL_Run_C_R                           10
    #define   LSb16DMIC_CONTROL_Run_C_R                           10
    #define       bDMIC_CONTROL_Run_C_R                        1
    #define   MSK32DMIC_CONTROL_Run_C_R                           0x00000400

    #define     BA_DMIC_CONTROL_Run_D_L                        0x0005
    #define     B16DMIC_CONTROL_Run_D_L                        0x0004
    #define   LSb32DMIC_CONTROL_Run_D_L                           11
    #define   LSb16DMIC_CONTROL_Run_D_L                           11
    #define       bDMIC_CONTROL_Run_D_L                        1
    #define   MSK32DMIC_CONTROL_Run_D_L                           0x00000800

    #define     BA_DMIC_CONTROL_Run_D_R                        0x0005
    #define     B16DMIC_CONTROL_Run_D_R                        0x0004
    #define   LSb32DMIC_CONTROL_Run_D_R                           12
    #define   LSb16DMIC_CONTROL_Run_D_R                           12
    #define       bDMIC_CONTROL_Run_D_R                        1
    #define   MSK32DMIC_CONTROL_Run_D_R                           0x00001000

    #define     BA_DMIC_CONTROL_Wake_On_Sound                  0x0005
    #define     B16DMIC_CONTROL_Wake_On_Sound                  0x0004
    #define   LSb32DMIC_CONTROL_Wake_On_Sound                     13
    #define   LSb16DMIC_CONTROL_Wake_On_Sound                     13
    #define       bDMIC_CONTROL_Wake_On_Sound                  4
    #define   MSK32DMIC_CONTROL_Wake_On_Sound                     0x0001E000

    #define     BA_DMIC_CONTROL_Enable_DC_A                    0x0006
    #define     B16DMIC_CONTROL_Enable_DC_A                    0x0006
    #define   LSb32DMIC_CONTROL_Enable_DC_A                       17
    #define   LSb16DMIC_CONTROL_Enable_DC_A                       1
    #define       bDMIC_CONTROL_Enable_DC_A                    1
    #define   MSK32DMIC_CONTROL_Enable_DC_A                       0x00020000

    #define     BA_DMIC_CONTROL_Enable_DC_B                    0x0006
    #define     B16DMIC_CONTROL_Enable_DC_B                    0x0006
    #define   LSb32DMIC_CONTROL_Enable_DC_B                       18
    #define   LSb16DMIC_CONTROL_Enable_DC_B                       2
    #define       bDMIC_CONTROL_Enable_DC_B                    1
    #define   MSK32DMIC_CONTROL_Enable_DC_B                       0x00040000

    #define     BA_DMIC_CONTROL_Enable_DC_C                    0x0006
    #define     B16DMIC_CONTROL_Enable_DC_C                    0x0006
    #define   LSb32DMIC_CONTROL_Enable_DC_C                       19
    #define   LSb16DMIC_CONTROL_Enable_DC_C                       3
    #define       bDMIC_CONTROL_Enable_DC_C                    1
    #define   MSK32DMIC_CONTROL_Enable_DC_C                       0x00080000

    #define     BA_DMIC_CONTROL_Enable_DC_D                    0x0006
    #define     B16DMIC_CONTROL_Enable_DC_D                    0x0006
    #define   LSb32DMIC_CONTROL_Enable_DC_D                       20
    #define   LSb16DMIC_CONTROL_Enable_DC_D                       4
    #define       bDMIC_CONTROL_Enable_DC_D                    1
    #define   MSK32DMIC_CONTROL_Enable_DC_D                       0x00100000

    #define     BA_DMIC_CONTROL_Mono_A                         0x0006
    #define     B16DMIC_CONTROL_Mono_A                         0x0006
    #define   LSb32DMIC_CONTROL_Mono_A                            21
    #define   LSb16DMIC_CONTROL_Mono_A                            5
    #define       bDMIC_CONTROL_Mono_A                         1
    #define   MSK32DMIC_CONTROL_Mono_A                            0x00200000

    #define     BA_DMIC_CONTROL_Mono_B                         0x0006
    #define     B16DMIC_CONTROL_Mono_B                         0x0006
    #define   LSb32DMIC_CONTROL_Mono_B                            22
    #define   LSb16DMIC_CONTROL_Mono_B                            6
    #define       bDMIC_CONTROL_Mono_B                         1
    #define   MSK32DMIC_CONTROL_Mono_B                            0x00400000

    #define     BA_DMIC_CONTROL_Mono_C                         0x0006
    #define     B16DMIC_CONTROL_Mono_C                         0x0006
    #define   LSb32DMIC_CONTROL_Mono_C                            23
    #define   LSb16DMIC_CONTROL_Mono_C                            7
    #define       bDMIC_CONTROL_Mono_C                         1
    #define   MSK32DMIC_CONTROL_Mono_C                            0x00800000

    #define     BA_DMIC_CONTROL_Mono_D                         0x0007
    #define     B16DMIC_CONTROL_Mono_D                         0x0006
    #define   LSb32DMIC_CONTROL_Mono_D                            24
    #define   LSb16DMIC_CONTROL_Mono_D                            8
    #define       bDMIC_CONTROL_Mono_D                         1
    #define   MSK32DMIC_CONTROL_Mono_D                            0x01000000

    #define     BA_DMIC_CONTROL_PDMIn_D_LRSwp                  0x0007
    #define     B16DMIC_CONTROL_PDMIn_D_LRSwp                  0x0006
    #define   LSb32DMIC_CONTROL_PDMIn_D_LRSwp                     25
    #define   LSb16DMIC_CONTROL_PDMIn_D_LRSwp                     9
    #define       bDMIC_CONTROL_PDMIn_D_LRSwp                  1
    #define   MSK32DMIC_CONTROL_PDMIn_D_LRSwp                     0x02000000

    #define     BA_DMIC_CONTROL_PDMIn_D_LJn_RJ                 0x0007
    #define     B16DMIC_CONTROL_PDMIn_D_LJn_RJ                 0x0006
    #define   LSb32DMIC_CONTROL_PDMIn_D_LJn_RJ                    26
    #define   LSb16DMIC_CONTROL_PDMIn_D_LJn_RJ                    10
    #define       bDMIC_CONTROL_PDMIn_D_LJn_RJ                 1
    #define   MSK32DMIC_CONTROL_PDMIn_D_LJn_RJ                    0x04000000

    #define     BA_DMIC_CONTROL_PCM_LJn_RJ                     0x0007
    #define     B16DMIC_CONTROL_PCM_LJn_RJ                     0x0006
    #define   LSb32DMIC_CONTROL_PCM_LJn_RJ                        27
    #define   LSb16DMIC_CONTROL_PCM_LJn_RJ                        11
    #define       bDMIC_CONTROL_PCM_LJn_RJ                     1
    #define   MSK32DMIC_CONTROL_PCM_LJn_RJ                        0x08000000
    ///////////////////////////////////////////////////////////
    #define     RA_DMIC_FLUSH                                  0x0008

    #define     BA_DMIC_FLUSH_PCMWR_FLUSH                      0x0008
    #define     B16DMIC_FLUSH_PCMWR_FLUSH                      0x0008
    #define   LSb32DMIC_FLUSH_PCMWR_FLUSH                         0
    #define   LSb16DMIC_FLUSH_PCMWR_FLUSH                         0
    #define       bDMIC_FLUSH_PCMWR_FLUSH                      1
    #define   MSK32DMIC_FLUSH_PCMWR_FLUSH                         0x00000001

    #define     BA_DMIC_FLUSH_PDMRD_FLUSH                      0x0008
    #define     B16DMIC_FLUSH_PDMRD_FLUSH                      0x0008
    #define   LSb32DMIC_FLUSH_PDMRD_FLUSH                         1
    #define   LSb16DMIC_FLUSH_PDMRD_FLUSH                         1
    #define       bDMIC_FLUSH_PDMRD_FLUSH                      1
    #define   MSK32DMIC_FLUSH_PDMRD_FLUSH                         0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_DMIC_DECIMATION_CONTROL                     0x000C

    #define     BA_DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM       0x000C
    #define     B16DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM       0x000C
    #define   LSb32DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM          0
    #define   LSb16DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM          0
    #define       bDMIC_DECIMATION_CONTROL_CIC_Ratio_PCM       7
    #define   MSK32DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM          0x0000007F

    #define     BA_DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM_D     0x000C
    #define     B16DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM_D     0x000C
    #define   LSb32DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM_D        7
    #define   LSb16DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM_D        7
    #define       bDMIC_DECIMATION_CONTROL_CIC_Ratio_PCM_D     7
    #define   MSK32DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM_D        0x00003F80

    #define     BA_DMIC_DECIMATION_CONTROL_PDM_Slots_Per_Frame 0x000D
    #define     B16DMIC_DECIMATION_CONTROL_PDM_Slots_Per_Frame 0x000C
    #define   LSb32DMIC_DECIMATION_CONTROL_PDM_Slots_Per_Frame    14
    #define   LSb16DMIC_DECIMATION_CONTROL_PDM_Slots_Per_Frame    14
    #define       bDMIC_DECIMATION_CONTROL_PDM_Slots_Per_Frame 2
    #define   MSK32DMIC_DECIMATION_CONTROL_PDM_Slots_Per_Frame    0x0000C000

    #define     BA_DMIC_DECIMATION_CONTROL_FIR_Filter_Selection 0x000E
    #define     B16DMIC_DECIMATION_CONTROL_FIR_Filter_Selection 0x000E
    #define   LSb32DMIC_DECIMATION_CONTROL_FIR_Filter_Selection    16
    #define   LSb16DMIC_DECIMATION_CONTROL_FIR_Filter_Selection    0
    #define       bDMIC_DECIMATION_CONTROL_FIR_Filter_Selection 2
    #define   MSK32DMIC_DECIMATION_CONTROL_FIR_Filter_Selection    0x00030000

    #define     BA_DMIC_DECIMATION_CONTROL_PDM_Bits_Per_Slot   0x000E
    #define     B16DMIC_DECIMATION_CONTROL_PDM_Bits_Per_Slot   0x000E
    #define   LSb32DMIC_DECIMATION_CONTROL_PDM_Bits_Per_Slot      18
    #define   LSb16DMIC_DECIMATION_CONTROL_PDM_Bits_Per_Slot      2
    #define       bDMIC_DECIMATION_CONTROL_PDM_Bits_Per_Slot   5
    #define   MSK32DMIC_DECIMATION_CONTROL_PDM_Bits_Per_Slot      0x007C0000
    ///////////////////////////////////////////////////////////
    #define     RA_DMIC_MICROPHONE_CONFIGURATION               0x0010

    #define     BA_DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Swap 0x0010
    #define     B16DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Swap 0x0010
    #define   LSb32DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Swap    0
    #define   LSb16DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Swap    0
    #define       bDMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Swap 1
    #define   MSK32DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Swap    0x00000001

    #define     BA_DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Time_Order 0x0010
    #define     B16DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Time_Order 0x0010
    #define   LSb32DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Time_Order    1
    #define   LSb16DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Time_Order    1
    #define       bDMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Time_Order 1
    #define   MSK32DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Time_Order    0x00000002

    #define     BA_DMIC_MICROPHONE_CONFIGURATION_A_Store_PDM   0x0010
    #define     B16DMIC_MICROPHONE_CONFIGURATION_A_Store_PDM   0x0010
    #define   LSb32DMIC_MICROPHONE_CONFIGURATION_A_Store_PDM      2
    #define   LSb16DMIC_MICROPHONE_CONFIGURATION_A_Store_PDM      2
    #define       bDMIC_MICROPHONE_CONFIGURATION_A_Store_PDM   1
    #define   MSK32DMIC_MICROPHONE_CONFIGURATION_A_Store_PDM      0x00000004

    #define     BA_DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Swap 0x0010
    #define     B16DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Swap 0x0010
    #define   LSb32DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Swap    3
    #define   LSb16DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Swap    3
    #define       bDMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Swap 1
    #define   MSK32DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Swap    0x00000008

    #define     BA_DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Time_Order 0x0010
    #define     B16DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Time_Order 0x0010
    #define   LSb32DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Time_Order    4
    #define   LSb16DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Time_Order    4
    #define       bDMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Time_Order 1
    #define   MSK32DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Time_Order    0x00000010

    #define     BA_DMIC_MICROPHONE_CONFIGURATION_B_Store_PDM   0x0010
    #define     B16DMIC_MICROPHONE_CONFIGURATION_B_Store_PDM   0x0010
    #define   LSb32DMIC_MICROPHONE_CONFIGURATION_B_Store_PDM      5
    #define   LSb16DMIC_MICROPHONE_CONFIGURATION_B_Store_PDM      5
    #define       bDMIC_MICROPHONE_CONFIGURATION_B_Store_PDM   1
    #define   MSK32DMIC_MICROPHONE_CONFIGURATION_B_Store_PDM      0x00000020

    #define     BA_DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Swapz 0x0010
    #define     B16DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Swapz 0x0010
    #define   LSb32DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Swapz    6
    #define   LSb16DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Swapz    6
    #define       bDMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Swapz 1
    #define   MSK32DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Swapz    0x00000040

    #define     BA_DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Time_Order 0x0010
    #define     B16DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Time_Order 0x0010
    #define   LSb32DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Time_Order    7
    #define   LSb16DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Time_Order    7
    #define       bDMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Time_Order 1
    #define   MSK32DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Time_Order    0x00000080

    #define     BA_DMIC_MICROPHONE_CONFIGURATION_C_Store_PDM   0x0011
    #define     B16DMIC_MICROPHONE_CONFIGURATION_C_Store_PDM   0x0010
    #define   LSb32DMIC_MICROPHONE_CONFIGURATION_C_Store_PDM      8
    #define   LSb16DMIC_MICROPHONE_CONFIGURATION_C_Store_PDM      8
    #define       bDMIC_MICROPHONE_CONFIGURATION_C_Store_PDM   1
    #define   MSK32DMIC_MICROPHONE_CONFIGURATION_C_Store_PDM      0x00000100

    #define     BA_DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Swap 0x0011
    #define     B16DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Swap 0x0010
    #define   LSb32DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Swap    9
    #define   LSb16DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Swap    9
    #define       bDMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Swap 1
    #define   MSK32DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Swap    0x00000200

    #define     BA_DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Time_Order 0x0011
    #define     B16DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Time_Order 0x0010
    #define   LSb32DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Time_Order    10
    #define   LSb16DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Time_Order    10
    #define       bDMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Time_Order 1
    #define   MSK32DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Time_Order    0x00000400

    #define     BA_DMIC_MICROPHONE_CONFIGURATION_D_Store_PDM   0x0011
    #define     B16DMIC_MICROPHONE_CONFIGURATION_D_Store_PDM   0x0010
    #define   LSb32DMIC_MICROPHONE_CONFIGURATION_D_Store_PDM      11
    #define   LSb16DMIC_MICROPHONE_CONFIGURATION_D_Store_PDM      11
    #define       bDMIC_MICROPHONE_CONFIGURATION_D_Store_PDM   1
    #define   MSK32DMIC_MICROPHONE_CONFIGURATION_D_Store_PDM      0x00000800

    #define     BA_DMIC_MICROPHONE_CONFIGURATION_D_PDM_from_ADMA 0x0011
    #define     B16DMIC_MICROPHONE_CONFIGURATION_D_PDM_from_ADMA 0x0010
    #define   LSb32DMIC_MICROPHONE_CONFIGURATION_D_PDM_from_ADMA    12
    #define   LSb16DMIC_MICROPHONE_CONFIGURATION_D_PDM_from_ADMA    12
    #define       bDMIC_MICROPHONE_CONFIGURATION_D_PDM_from_ADMA 2
    #define   MSK32DMIC_MICROPHONE_CONFIGURATION_D_PDM_from_ADMA    0x00003000
    ///////////////////////////////////////////////////////////
    #define     RA_DMIC_GAIN_MIC_PAIR_A                        0x0014

    #define     BA_DMIC_GAIN_MIC_PAIR_A_Gain_L                 0x0014
    #define     B16DMIC_GAIN_MIC_PAIR_A_Gain_L                 0x0014
    #define   LSb32DMIC_GAIN_MIC_PAIR_A_Gain_L                    0
    #define   LSb16DMIC_GAIN_MIC_PAIR_A_Gain_L                    0
    #define       bDMIC_GAIN_MIC_PAIR_A_Gain_L                 10
    #define   MSK32DMIC_GAIN_MIC_PAIR_A_Gain_L                    0x000003FF

    #define     BA_DMIC_GAIN_MIC_PAIR_A_Gain_R                 0x0015
    #define     B16DMIC_GAIN_MIC_PAIR_A_Gain_R                 0x0014
    #define   LSb32DMIC_GAIN_MIC_PAIR_A_Gain_R                    10
    #define   LSb16DMIC_GAIN_MIC_PAIR_A_Gain_R                    10
    #define       bDMIC_GAIN_MIC_PAIR_A_Gain_R                 10
    #define   MSK32DMIC_GAIN_MIC_PAIR_A_Gain_R                    0x000FFC00
    ///////////////////////////////////////////////////////////
    #define     RA_DMIC_GAIN_MIC_PAIR_B                        0x0018

    #define     BA_DMIC_GAIN_MIC_PAIR_B_Gain_L                 0x0018
    #define     B16DMIC_GAIN_MIC_PAIR_B_Gain_L                 0x0018
    #define   LSb32DMIC_GAIN_MIC_PAIR_B_Gain_L                    0
    #define   LSb16DMIC_GAIN_MIC_PAIR_B_Gain_L                    0
    #define       bDMIC_GAIN_MIC_PAIR_B_Gain_L                 10
    #define   MSK32DMIC_GAIN_MIC_PAIR_B_Gain_L                    0x000003FF

    #define     BA_DMIC_GAIN_MIC_PAIR_B_Gain_R                 0x0019
    #define     B16DMIC_GAIN_MIC_PAIR_B_Gain_R                 0x0018
    #define   LSb32DMIC_GAIN_MIC_PAIR_B_Gain_R                    10
    #define   LSb16DMIC_GAIN_MIC_PAIR_B_Gain_R                    10
    #define       bDMIC_GAIN_MIC_PAIR_B_Gain_R                 10
    #define   MSK32DMIC_GAIN_MIC_PAIR_B_Gain_R                    0x000FFC00
    ///////////////////////////////////////////////////////////
    #define     RA_DMIC_GAIN_MIC_PAIR_C                        0x001C

    #define     BA_DMIC_GAIN_MIC_PAIR_C_Gain_L                 0x001C
    #define     B16DMIC_GAIN_MIC_PAIR_C_Gain_L                 0x001C
    #define   LSb32DMIC_GAIN_MIC_PAIR_C_Gain_L                    0
    #define   LSb16DMIC_GAIN_MIC_PAIR_C_Gain_L                    0
    #define       bDMIC_GAIN_MIC_PAIR_C_Gain_L                 10
    #define   MSK32DMIC_GAIN_MIC_PAIR_C_Gain_L                    0x000003FF

    #define     BA_DMIC_GAIN_MIC_PAIR_C_Gain_R                 0x001D
    #define     B16DMIC_GAIN_MIC_PAIR_C_Gain_R                 0x001C
    #define   LSb32DMIC_GAIN_MIC_PAIR_C_Gain_R                    10
    #define   LSb16DMIC_GAIN_MIC_PAIR_C_Gain_R                    10
    #define       bDMIC_GAIN_MIC_PAIR_C_Gain_R                 10
    #define   MSK32DMIC_GAIN_MIC_PAIR_C_Gain_R                    0x000FFC00
    ///////////////////////////////////////////////////////////
    #define     RA_DMIC_GAIN_MIC_PAIR_D                        0x0020

    #define     BA_DMIC_GAIN_MIC_PAIR_D_Gain_L                 0x0020
    #define     B16DMIC_GAIN_MIC_PAIR_D_Gain_L                 0x0020
    #define   LSb32DMIC_GAIN_MIC_PAIR_D_Gain_L                    0
    #define   LSb16DMIC_GAIN_MIC_PAIR_D_Gain_L                    0
    #define       bDMIC_GAIN_MIC_PAIR_D_Gain_L                 10
    #define   MSK32DMIC_GAIN_MIC_PAIR_D_Gain_L                    0x000003FF

    #define     BA_DMIC_GAIN_MIC_PAIR_D_Gain_R                 0x0021
    #define     B16DMIC_GAIN_MIC_PAIR_D_Gain_R                 0x0020
    #define   LSb32DMIC_GAIN_MIC_PAIR_D_Gain_R                    10
    #define   LSb16DMIC_GAIN_MIC_PAIR_D_Gain_R                    10
    #define       bDMIC_GAIN_MIC_PAIR_D_Gain_R                 10
    #define   MSK32DMIC_GAIN_MIC_PAIR_D_Gain_R                    0x000FFC00
    ///////////////////////////////////////////////////////////
    #define     RA_DMIC_GAIN_RAMP_CONTROL                      0x0024

    #define     BA_DMIC_GAIN_RAMP_CONTROL_Step_Size            0x0024
    #define     B16DMIC_GAIN_RAMP_CONTROL_Step_Size            0x0024
    #define   LSb32DMIC_GAIN_RAMP_CONTROL_Step_Size               0
    #define   LSb16DMIC_GAIN_RAMP_CONTROL_Step_Size               0
    #define       bDMIC_GAIN_RAMP_CONTROL_Step_Size            8
    #define   MSK32DMIC_GAIN_RAMP_CONTROL_Step_Size               0x000000FF

    #define     BA_DMIC_GAIN_RAMP_CONTROL_Step_Rate            0x0025
    #define     B16DMIC_GAIN_RAMP_CONTROL_Step_Rate            0x0024
    #define   LSb32DMIC_GAIN_RAMP_CONTROL_Step_Rate               8
    #define   LSb16DMIC_GAIN_RAMP_CONTROL_Step_Rate               8
    #define       bDMIC_GAIN_RAMP_CONTROL_Step_Rate            3
    #define   MSK32DMIC_GAIN_RAMP_CONTROL_Step_Rate               0x00000700
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DMIC {
    ///////////////////////////////////////////////////////////
    #define   GET32DMIC_STATUS_Wake(r32)                       _BFGET_(r32, 0, 0)
    #define   SET32DMIC_STATUS_Wake(r32,v)                     _BFSET_(r32, 0, 0,v)
    #define   GET16DMIC_STATUS_Wake(r16)                       _BFGET_(r16, 0, 0)
    #define   SET16DMIC_STATUS_Wake(r16,v)                     _BFSET_(r16, 0, 0,v)

    #define   GET32DMIC_STATUS_PCM_FIFO_full(r32)              _BFGET_(r32, 1, 1)
    #define   SET32DMIC_STATUS_PCM_FIFO_full(r32,v)            _BFSET_(r32, 1, 1,v)
    #define   GET16DMIC_STATUS_PCM_FIFO_full(r16)              _BFGET_(r16, 1, 1)
    #define   SET16DMIC_STATUS_PCM_FIFO_full(r16,v)            _BFSET_(r16, 1, 1,v)

    #define   GET32DMIC_STATUS_PDM_LFIFO_emp(r32)              _BFGET_(r32, 2, 2)
    #define   SET32DMIC_STATUS_PDM_LFIFO_emp(r32,v)            _BFSET_(r32, 2, 2,v)
    #define   GET16DMIC_STATUS_PDM_LFIFO_emp(r16)              _BFGET_(r16, 2, 2)
    #define   SET16DMIC_STATUS_PDM_LFIFO_emp(r16,v)            _BFSET_(r16, 2, 2,v)

    #define   GET32DMIC_STATUS_PDM_RFIFO_emp(r32)              _BFGET_(r32, 3, 3)
    #define   SET32DMIC_STATUS_PDM_RFIFO_emp(r32,v)            _BFSET_(r32, 3, 3,v)
    #define   GET16DMIC_STATUS_PDM_RFIFO_emp(r16)              _BFGET_(r16, 3, 3)
    #define   SET16DMIC_STATUS_PDM_RFIFO_emp(r16,v)            _BFSET_(r16, 3, 3,v)

    #define     w32DMIC_STATUS                                 {\
            UNSG32 uSTATUS_Wake                                :  1;\
            UNSG32 uSTATUS_PCM_FIFO_full                       :  1;\
            UNSG32 uSTATUS_PDM_LFIFO_emp                       :  1;\
            UNSG32 uSTATUS_PDM_RFIFO_emp                       :  1;\
            UNSG32 RSVDx0_b4                                   : 28;\
          }
    union { UNSG32 u32DMIC_STATUS;
            struct w32DMIC_STATUS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DMIC_CONTROL_Enable(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32DMIC_CONTROL_Enable(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16DMIC_CONTROL_Enable(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16DMIC_CONTROL_Enable(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32DMIC_CONTROL_Enable_A(r32)                  _BFGET_(r32, 1, 1)
    #define   SET32DMIC_CONTROL_Enable_A(r32,v)                _BFSET_(r32, 1, 1,v)
    #define   GET16DMIC_CONTROL_Enable_A(r16)                  _BFGET_(r16, 1, 1)
    #define   SET16DMIC_CONTROL_Enable_A(r16,v)                _BFSET_(r16, 1, 1,v)

    #define   GET32DMIC_CONTROL_Enable_B(r32)                  _BFGET_(r32, 2, 2)
    #define   SET32DMIC_CONTROL_Enable_B(r32,v)                _BFSET_(r32, 2, 2,v)
    #define   GET16DMIC_CONTROL_Enable_B(r16)                  _BFGET_(r16, 2, 2)
    #define   SET16DMIC_CONTROL_Enable_B(r16,v)                _BFSET_(r16, 2, 2,v)

    #define   GET32DMIC_CONTROL_Enable_C(r32)                  _BFGET_(r32, 3, 3)
    #define   SET32DMIC_CONTROL_Enable_C(r32,v)                _BFSET_(r32, 3, 3,v)
    #define   GET16DMIC_CONTROL_Enable_C(r16)                  _BFGET_(r16, 3, 3)
    #define   SET16DMIC_CONTROL_Enable_C(r16,v)                _BFSET_(r16, 3, 3,v)

    #define   GET32DMIC_CONTROL_Enable_D(r32)                  _BFGET_(r32, 4, 4)
    #define   SET32DMIC_CONTROL_Enable_D(r32,v)                _BFSET_(r32, 4, 4,v)
    #define   GET16DMIC_CONTROL_Enable_D(r16)                  _BFGET_(r16, 4, 4)
    #define   SET16DMIC_CONTROL_Enable_D(r16,v)                _BFSET_(r16, 4, 4,v)

    #define   GET32DMIC_CONTROL_Run_A_L(r32)                   _BFGET_(r32, 5, 5)
    #define   SET32DMIC_CONTROL_Run_A_L(r32,v)                 _BFSET_(r32, 5, 5,v)
    #define   GET16DMIC_CONTROL_Run_A_L(r16)                   _BFGET_(r16, 5, 5)
    #define   SET16DMIC_CONTROL_Run_A_L(r16,v)                 _BFSET_(r16, 5, 5,v)

    #define   GET32DMIC_CONTROL_Run_A_R(r32)                   _BFGET_(r32, 6, 6)
    #define   SET32DMIC_CONTROL_Run_A_R(r32,v)                 _BFSET_(r32, 6, 6,v)
    #define   GET16DMIC_CONTROL_Run_A_R(r16)                   _BFGET_(r16, 6, 6)
    #define   SET16DMIC_CONTROL_Run_A_R(r16,v)                 _BFSET_(r16, 6, 6,v)

    #define   GET32DMIC_CONTROL_Run_B_L(r32)                   _BFGET_(r32, 7, 7)
    #define   SET32DMIC_CONTROL_Run_B_L(r32,v)                 _BFSET_(r32, 7, 7,v)
    #define   GET16DMIC_CONTROL_Run_B_L(r16)                   _BFGET_(r16, 7, 7)
    #define   SET16DMIC_CONTROL_Run_B_L(r16,v)                 _BFSET_(r16, 7, 7,v)

    #define   GET32DMIC_CONTROL_Run_B_R(r32)                   _BFGET_(r32, 8, 8)
    #define   SET32DMIC_CONTROL_Run_B_R(r32,v)                 _BFSET_(r32, 8, 8,v)
    #define   GET16DMIC_CONTROL_Run_B_R(r16)                   _BFGET_(r16, 8, 8)
    #define   SET16DMIC_CONTROL_Run_B_R(r16,v)                 _BFSET_(r16, 8, 8,v)

    #define   GET32DMIC_CONTROL_Run_C_L(r32)                   _BFGET_(r32, 9, 9)
    #define   SET32DMIC_CONTROL_Run_C_L(r32,v)                 _BFSET_(r32, 9, 9,v)
    #define   GET16DMIC_CONTROL_Run_C_L(r16)                   _BFGET_(r16, 9, 9)
    #define   SET16DMIC_CONTROL_Run_C_L(r16,v)                 _BFSET_(r16, 9, 9,v)

    #define   GET32DMIC_CONTROL_Run_C_R(r32)                   _BFGET_(r32,10,10)
    #define   SET32DMIC_CONTROL_Run_C_R(r32,v)                 _BFSET_(r32,10,10,v)
    #define   GET16DMIC_CONTROL_Run_C_R(r16)                   _BFGET_(r16,10,10)
    #define   SET16DMIC_CONTROL_Run_C_R(r16,v)                 _BFSET_(r16,10,10,v)

    #define   GET32DMIC_CONTROL_Run_D_L(r32)                   _BFGET_(r32,11,11)
    #define   SET32DMIC_CONTROL_Run_D_L(r32,v)                 _BFSET_(r32,11,11,v)
    #define   GET16DMIC_CONTROL_Run_D_L(r16)                   _BFGET_(r16,11,11)
    #define   SET16DMIC_CONTROL_Run_D_L(r16,v)                 _BFSET_(r16,11,11,v)

    #define   GET32DMIC_CONTROL_Run_D_R(r32)                   _BFGET_(r32,12,12)
    #define   SET32DMIC_CONTROL_Run_D_R(r32,v)                 _BFSET_(r32,12,12,v)
    #define   GET16DMIC_CONTROL_Run_D_R(r16)                   _BFGET_(r16,12,12)
    #define   SET16DMIC_CONTROL_Run_D_R(r16,v)                 _BFSET_(r16,12,12,v)

    #define   GET32DMIC_CONTROL_Wake_On_Sound(r32)             _BFGET_(r32,16,13)
    #define   SET32DMIC_CONTROL_Wake_On_Sound(r32,v)           _BFSET_(r32,16,13,v)

    #define   GET32DMIC_CONTROL_Enable_DC_A(r32)               _BFGET_(r32,17,17)
    #define   SET32DMIC_CONTROL_Enable_DC_A(r32,v)             _BFSET_(r32,17,17,v)
    #define   GET16DMIC_CONTROL_Enable_DC_A(r16)               _BFGET_(r16, 1, 1)
    #define   SET16DMIC_CONTROL_Enable_DC_A(r16,v)             _BFSET_(r16, 1, 1,v)

    #define   GET32DMIC_CONTROL_Enable_DC_B(r32)               _BFGET_(r32,18,18)
    #define   SET32DMIC_CONTROL_Enable_DC_B(r32,v)             _BFSET_(r32,18,18,v)
    #define   GET16DMIC_CONTROL_Enable_DC_B(r16)               _BFGET_(r16, 2, 2)
    #define   SET16DMIC_CONTROL_Enable_DC_B(r16,v)             _BFSET_(r16, 2, 2,v)

    #define   GET32DMIC_CONTROL_Enable_DC_C(r32)               _BFGET_(r32,19,19)
    #define   SET32DMIC_CONTROL_Enable_DC_C(r32,v)             _BFSET_(r32,19,19,v)
    #define   GET16DMIC_CONTROL_Enable_DC_C(r16)               _BFGET_(r16, 3, 3)
    #define   SET16DMIC_CONTROL_Enable_DC_C(r16,v)             _BFSET_(r16, 3, 3,v)

    #define   GET32DMIC_CONTROL_Enable_DC_D(r32)               _BFGET_(r32,20,20)
    #define   SET32DMIC_CONTROL_Enable_DC_D(r32,v)             _BFSET_(r32,20,20,v)
    #define   GET16DMIC_CONTROL_Enable_DC_D(r16)               _BFGET_(r16, 4, 4)
    #define   SET16DMIC_CONTROL_Enable_DC_D(r16,v)             _BFSET_(r16, 4, 4,v)

    #define   GET32DMIC_CONTROL_Mono_A(r32)                    _BFGET_(r32,21,21)
    #define   SET32DMIC_CONTROL_Mono_A(r32,v)                  _BFSET_(r32,21,21,v)
    #define   GET16DMIC_CONTROL_Mono_A(r16)                    _BFGET_(r16, 5, 5)
    #define   SET16DMIC_CONTROL_Mono_A(r16,v)                  _BFSET_(r16, 5, 5,v)

    #define   GET32DMIC_CONTROL_Mono_B(r32)                    _BFGET_(r32,22,22)
    #define   SET32DMIC_CONTROL_Mono_B(r32,v)                  _BFSET_(r32,22,22,v)
    #define   GET16DMIC_CONTROL_Mono_B(r16)                    _BFGET_(r16, 6, 6)
    #define   SET16DMIC_CONTROL_Mono_B(r16,v)                  _BFSET_(r16, 6, 6,v)

    #define   GET32DMIC_CONTROL_Mono_C(r32)                    _BFGET_(r32,23,23)
    #define   SET32DMIC_CONTROL_Mono_C(r32,v)                  _BFSET_(r32,23,23,v)
    #define   GET16DMIC_CONTROL_Mono_C(r16)                    _BFGET_(r16, 7, 7)
    #define   SET16DMIC_CONTROL_Mono_C(r16,v)                  _BFSET_(r16, 7, 7,v)

    #define   GET32DMIC_CONTROL_Mono_D(r32)                    _BFGET_(r32,24,24)
    #define   SET32DMIC_CONTROL_Mono_D(r32,v)                  _BFSET_(r32,24,24,v)
    #define   GET16DMIC_CONTROL_Mono_D(r16)                    _BFGET_(r16, 8, 8)
    #define   SET16DMIC_CONTROL_Mono_D(r16,v)                  _BFSET_(r16, 8, 8,v)

    #define   GET32DMIC_CONTROL_PDMIn_D_LRSwp(r32)             _BFGET_(r32,25,25)
    #define   SET32DMIC_CONTROL_PDMIn_D_LRSwp(r32,v)           _BFSET_(r32,25,25,v)
    #define   GET16DMIC_CONTROL_PDMIn_D_LRSwp(r16)             _BFGET_(r16, 9, 9)
    #define   SET16DMIC_CONTROL_PDMIn_D_LRSwp(r16,v)           _BFSET_(r16, 9, 9,v)

    #define   GET32DMIC_CONTROL_PDMIn_D_LJn_RJ(r32)            _BFGET_(r32,26,26)
    #define   SET32DMIC_CONTROL_PDMIn_D_LJn_RJ(r32,v)          _BFSET_(r32,26,26,v)
    #define   GET16DMIC_CONTROL_PDMIn_D_LJn_RJ(r16)            _BFGET_(r16,10,10)
    #define   SET16DMIC_CONTROL_PDMIn_D_LJn_RJ(r16,v)          _BFSET_(r16,10,10,v)

    #define   GET32DMIC_CONTROL_PCM_LJn_RJ(r32)                _BFGET_(r32,27,27)
    #define   SET32DMIC_CONTROL_PCM_LJn_RJ(r32,v)              _BFSET_(r32,27,27,v)
    #define   GET16DMIC_CONTROL_PCM_LJn_RJ(r16)                _BFGET_(r16,11,11)
    #define   SET16DMIC_CONTROL_PCM_LJn_RJ(r16,v)              _BFSET_(r16,11,11,v)

    #define     w32DMIC_CONTROL                                {\
            UNSG32 uCONTROL_Enable                             :  1;\
            UNSG32 uCONTROL_Enable_A                           :  1;\
            UNSG32 uCONTROL_Enable_B                           :  1;\
            UNSG32 uCONTROL_Enable_C                           :  1;\
            UNSG32 uCONTROL_Enable_D                           :  1;\
            UNSG32 uCONTROL_Run_A_L                            :  1;\
            UNSG32 uCONTROL_Run_A_R                            :  1;\
            UNSG32 uCONTROL_Run_B_L                            :  1;\
            UNSG32 uCONTROL_Run_B_R                            :  1;\
            UNSG32 uCONTROL_Run_C_L                            :  1;\
            UNSG32 uCONTROL_Run_C_R                            :  1;\
            UNSG32 uCONTROL_Run_D_L                            :  1;\
            UNSG32 uCONTROL_Run_D_R                            :  1;\
            UNSG32 uCONTROL_Wake_On_Sound                      :  4;\
            UNSG32 uCONTROL_Enable_DC_A                        :  1;\
            UNSG32 uCONTROL_Enable_DC_B                        :  1;\
            UNSG32 uCONTROL_Enable_DC_C                        :  1;\
            UNSG32 uCONTROL_Enable_DC_D                        :  1;\
            UNSG32 uCONTROL_Mono_A                             :  1;\
            UNSG32 uCONTROL_Mono_B                             :  1;\
            UNSG32 uCONTROL_Mono_C                             :  1;\
            UNSG32 uCONTROL_Mono_D                             :  1;\
            UNSG32 uCONTROL_PDMIn_D_LRSwp                      :  1;\
            UNSG32 uCONTROL_PDMIn_D_LJn_RJ                     :  1;\
            UNSG32 uCONTROL_PCM_LJn_RJ                         :  1;\
            UNSG32 RSVDx4_b28                                  :  4;\
          }
    union { UNSG32 u32DMIC_CONTROL;
            struct w32DMIC_CONTROL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DMIC_FLUSH_PCMWR_FLUSH(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32DMIC_FLUSH_PCMWR_FLUSH(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16DMIC_FLUSH_PCMWR_FLUSH(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16DMIC_FLUSH_PCMWR_FLUSH(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32DMIC_FLUSH_PDMRD_FLUSH(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32DMIC_FLUSH_PDMRD_FLUSH(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16DMIC_FLUSH_PDMRD_FLUSH(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16DMIC_FLUSH_PDMRD_FLUSH(r16,v)               _BFSET_(r16, 1, 1,v)

    #define     w32DMIC_FLUSH                                  {\
            UNSG32 uFLUSH_PCMWR_FLUSH                          :  1;\
            UNSG32 uFLUSH_PDMRD_FLUSH                          :  1;\
            UNSG32 RSVDx8_b2                                   : 30;\
          }
    union { UNSG32 u32DMIC_FLUSH;
            struct w32DMIC_FLUSH;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM(r32)  _BFGET_(r32, 6, 0)
    #define   SET32DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM(r32,v) _BFSET_(r32, 6, 0,v)
    #define   GET16DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM(r16)  _BFGET_(r16, 6, 0)
    #define   SET16DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM(r16,v) _BFSET_(r16, 6, 0,v)

    #define   GET32DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM_D(r32) _BFGET_(r32,13, 7)
    #define   SET32DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM_D(r32,v) _BFSET_(r32,13, 7,v)
    #define   GET16DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM_D(r16) _BFGET_(r16,13, 7)
    #define   SET16DMIC_DECIMATION_CONTROL_CIC_Ratio_PCM_D(r16,v) _BFSET_(r16,13, 7,v)

    #define   GET32DMIC_DECIMATION_CONTROL_PDM_Slots_Per_Frame(r32) _BFGET_(r32,15,14)
    #define   SET32DMIC_DECIMATION_CONTROL_PDM_Slots_Per_Frame(r32,v) _BFSET_(r32,15,14,v)
    #define   GET16DMIC_DECIMATION_CONTROL_PDM_Slots_Per_Frame(r16) _BFGET_(r16,15,14)
    #define   SET16DMIC_DECIMATION_CONTROL_PDM_Slots_Per_Frame(r16,v) _BFSET_(r16,15,14,v)

    #define   GET32DMIC_DECIMATION_CONTROL_FIR_Filter_Selection(r32) _BFGET_(r32,17,16)
    #define   SET32DMIC_DECIMATION_CONTROL_FIR_Filter_Selection(r32,v) _BFSET_(r32,17,16,v)
    #define   GET16DMIC_DECIMATION_CONTROL_FIR_Filter_Selection(r16) _BFGET_(r16, 1, 0)
    #define   SET16DMIC_DECIMATION_CONTROL_FIR_Filter_Selection(r16,v) _BFSET_(r16, 1, 0,v)

    #define   GET32DMIC_DECIMATION_CONTROL_PDM_Bits_Per_Slot(r32) _BFGET_(r32,22,18)
    #define   SET32DMIC_DECIMATION_CONTROL_PDM_Bits_Per_Slot(r32,v) _BFSET_(r32,22,18,v)
    #define   GET16DMIC_DECIMATION_CONTROL_PDM_Bits_Per_Slot(r16) _BFGET_(r16, 6, 2)
    #define   SET16DMIC_DECIMATION_CONTROL_PDM_Bits_Per_Slot(r16,v) _BFSET_(r16, 6, 2,v)

    #define     w32DMIC_DECIMATION_CONTROL                     {\
            UNSG32 uDECIMATION_CONTROL_CIC_Ratio_PCM           :  7;\
            UNSG32 uDECIMATION_CONTROL_CIC_Ratio_PCM_D         :  7;\
            UNSG32 uDECIMATION_CONTROL_PDM_Slots_Per_Frame     :  2;\
            UNSG32 uDECIMATION_CONTROL_FIR_Filter_Selection    :  2;\
            UNSG32 uDECIMATION_CONTROL_PDM_Bits_Per_Slot       :  5;\
            UNSG32 RSVDxC_b23                                  :  9;\
          }
    union { UNSG32 u32DMIC_DECIMATION_CONTROL;
            struct w32DMIC_DECIMATION_CONTROL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Swap(r32) _BFGET_(r32, 0, 0)
    #define   SET32DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Swap(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Swap(r16) _BFGET_(r16, 0, 0)
    #define   SET16DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Swap(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Time_Order(r32) _BFGET_(r32, 1, 1)
    #define   SET32DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Time_Order(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Time_Order(r16) _BFGET_(r16, 1, 1)
    #define   SET16DMIC_MICROPHONE_CONFIGURATION_A_Left_Right_Time_Order(r16,v) _BFSET_(r16, 1, 1,v)

    #define   GET32DMIC_MICROPHONE_CONFIGURATION_A_Store_PDM(r32) _BFGET_(r32, 2, 2)
    #define   SET32DMIC_MICROPHONE_CONFIGURATION_A_Store_PDM(r32,v) _BFSET_(r32, 2, 2,v)
    #define   GET16DMIC_MICROPHONE_CONFIGURATION_A_Store_PDM(r16) _BFGET_(r16, 2, 2)
    #define   SET16DMIC_MICROPHONE_CONFIGURATION_A_Store_PDM(r16,v) _BFSET_(r16, 2, 2,v)

    #define   GET32DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Swap(r32) _BFGET_(r32, 3, 3)
    #define   SET32DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Swap(r32,v) _BFSET_(r32, 3, 3,v)
    #define   GET16DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Swap(r16) _BFGET_(r16, 3, 3)
    #define   SET16DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Swap(r16,v) _BFSET_(r16, 3, 3,v)

    #define   GET32DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Time_Order(r32) _BFGET_(r32, 4, 4)
    #define   SET32DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Time_Order(r32,v) _BFSET_(r32, 4, 4,v)
    #define   GET16DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Time_Order(r16) _BFGET_(r16, 4, 4)
    #define   SET16DMIC_MICROPHONE_CONFIGURATION_B_Left_Right_Time_Order(r16,v) _BFSET_(r16, 4, 4,v)

    #define   GET32DMIC_MICROPHONE_CONFIGURATION_B_Store_PDM(r32) _BFGET_(r32, 5, 5)
    #define   SET32DMIC_MICROPHONE_CONFIGURATION_B_Store_PDM(r32,v) _BFSET_(r32, 5, 5,v)
    #define   GET16DMIC_MICROPHONE_CONFIGURATION_B_Store_PDM(r16) _BFGET_(r16, 5, 5)
    #define   SET16DMIC_MICROPHONE_CONFIGURATION_B_Store_PDM(r16,v) _BFSET_(r16, 5, 5,v)

    #define   GET32DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Swapz(r32) _BFGET_(r32, 6, 6)
    #define   SET32DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Swapz(r32,v) _BFSET_(r32, 6, 6,v)
    #define   GET16DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Swapz(r16) _BFGET_(r16, 6, 6)
    #define   SET16DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Swapz(r16,v) _BFSET_(r16, 6, 6,v)

    #define   GET32DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Time_Order(r32) _BFGET_(r32, 7, 7)
    #define   SET32DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Time_Order(r32,v) _BFSET_(r32, 7, 7,v)
    #define   GET16DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Time_Order(r16) _BFGET_(r16, 7, 7)
    #define   SET16DMIC_MICROPHONE_CONFIGURATION_C_Left_Right_Time_Order(r16,v) _BFSET_(r16, 7, 7,v)

    #define   GET32DMIC_MICROPHONE_CONFIGURATION_C_Store_PDM(r32) _BFGET_(r32, 8, 8)
    #define   SET32DMIC_MICROPHONE_CONFIGURATION_C_Store_PDM(r32,v) _BFSET_(r32, 8, 8,v)
    #define   GET16DMIC_MICROPHONE_CONFIGURATION_C_Store_PDM(r16) _BFGET_(r16, 8, 8)
    #define   SET16DMIC_MICROPHONE_CONFIGURATION_C_Store_PDM(r16,v) _BFSET_(r16, 8, 8,v)

    #define   GET32DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Swap(r32) _BFGET_(r32, 9, 9)
    #define   SET32DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Swap(r32,v) _BFSET_(r32, 9, 9,v)
    #define   GET16DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Swap(r16) _BFGET_(r16, 9, 9)
    #define   SET16DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Swap(r16,v) _BFSET_(r16, 9, 9,v)

    #define   GET32DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Time_Order(r32) _BFGET_(r32,10,10)
    #define   SET32DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Time_Order(r32,v) _BFSET_(r32,10,10,v)
    #define   GET16DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Time_Order(r16) _BFGET_(r16,10,10)
    #define   SET16DMIC_MICROPHONE_CONFIGURATION_D_Left_Right_Time_Order(r16,v) _BFSET_(r16,10,10,v)

    #define   GET32DMIC_MICROPHONE_CONFIGURATION_D_Store_PDM(r32) _BFGET_(r32,11,11)
    #define   SET32DMIC_MICROPHONE_CONFIGURATION_D_Store_PDM(r32,v) _BFSET_(r32,11,11,v)
    #define   GET16DMIC_MICROPHONE_CONFIGURATION_D_Store_PDM(r16) _BFGET_(r16,11,11)
    #define   SET16DMIC_MICROPHONE_CONFIGURATION_D_Store_PDM(r16,v) _BFSET_(r16,11,11,v)

    #define   GET32DMIC_MICROPHONE_CONFIGURATION_D_PDM_from_ADMA(r32) _BFGET_(r32,13,12)
    #define   SET32DMIC_MICROPHONE_CONFIGURATION_D_PDM_from_ADMA(r32,v) _BFSET_(r32,13,12,v)
    #define   GET16DMIC_MICROPHONE_CONFIGURATION_D_PDM_from_ADMA(r16) _BFGET_(r16,13,12)
    #define   SET16DMIC_MICROPHONE_CONFIGURATION_D_PDM_from_ADMA(r16,v) _BFSET_(r16,13,12,v)

    #define     w32DMIC_MICROPHONE_CONFIGURATION               {\
            UNSG32 uMICROPHONE_CONFIGURATION_A_Left_Right_Swap :  1;\
            UNSG32 uMICROPHONE_CONFIGURATION_A_Left_Right_Time_Order :  1;\
            UNSG32 uMICROPHONE_CONFIGURATION_A_Store_PDM       :  1;\
            UNSG32 uMICROPHONE_CONFIGURATION_B_Left_Right_Swap :  1;\
            UNSG32 uMICROPHONE_CONFIGURATION_B_Left_Right_Time_Order :  1;\
            UNSG32 uMICROPHONE_CONFIGURATION_B_Store_PDM       :  1;\
            UNSG32 uMICROPHONE_CONFIGURATION_C_Left_Right_Swapz :  1;\
            UNSG32 uMICROPHONE_CONFIGURATION_C_Left_Right_Time_Order :  1;\
            UNSG32 uMICROPHONE_CONFIGURATION_C_Store_PDM       :  1;\
            UNSG32 uMICROPHONE_CONFIGURATION_D_Left_Right_Swap :  1;\
            UNSG32 uMICROPHONE_CONFIGURATION_D_Left_Right_Time_Order :  1;\
            UNSG32 uMICROPHONE_CONFIGURATION_D_Store_PDM       :  1;\
            UNSG32 uMICROPHONE_CONFIGURATION_D_PDM_from_ADMA   :  2;\
            UNSG32 RSVDx10_b14                                 : 18;\
          }
    union { UNSG32 u32DMIC_MICROPHONE_CONFIGURATION;
            struct w32DMIC_MICROPHONE_CONFIGURATION;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DMIC_GAIN_MIC_PAIR_A_Gain_L(r32)            _BFGET_(r32, 9, 0)
    #define   SET32DMIC_GAIN_MIC_PAIR_A_Gain_L(r32,v)          _BFSET_(r32, 9, 0,v)
    #define   GET16DMIC_GAIN_MIC_PAIR_A_Gain_L(r16)            _BFGET_(r16, 9, 0)
    #define   SET16DMIC_GAIN_MIC_PAIR_A_Gain_L(r16,v)          _BFSET_(r16, 9, 0,v)

    #define   GET32DMIC_GAIN_MIC_PAIR_A_Gain_R(r32)            _BFGET_(r32,19,10)
    #define   SET32DMIC_GAIN_MIC_PAIR_A_Gain_R(r32,v)          _BFSET_(r32,19,10,v)

    #define     w32DMIC_GAIN_MIC_PAIR_A                        {\
            UNSG32 uGAIN_MIC_PAIR_A_Gain_L                     : 10;\
            UNSG32 uGAIN_MIC_PAIR_A_Gain_R                     : 10;\
            UNSG32 RSVDx14_b20                                 : 12;\
          }
    union { UNSG32 u32DMIC_GAIN_MIC_PAIR_A;
            struct w32DMIC_GAIN_MIC_PAIR_A;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DMIC_GAIN_MIC_PAIR_B_Gain_L(r32)            _BFGET_(r32, 9, 0)
    #define   SET32DMIC_GAIN_MIC_PAIR_B_Gain_L(r32,v)          _BFSET_(r32, 9, 0,v)
    #define   GET16DMIC_GAIN_MIC_PAIR_B_Gain_L(r16)            _BFGET_(r16, 9, 0)
    #define   SET16DMIC_GAIN_MIC_PAIR_B_Gain_L(r16,v)          _BFSET_(r16, 9, 0,v)

    #define   GET32DMIC_GAIN_MIC_PAIR_B_Gain_R(r32)            _BFGET_(r32,19,10)
    #define   SET32DMIC_GAIN_MIC_PAIR_B_Gain_R(r32,v)          _BFSET_(r32,19,10,v)

    #define     w32DMIC_GAIN_MIC_PAIR_B                        {\
            UNSG32 uGAIN_MIC_PAIR_B_Gain_L                     : 10;\
            UNSG32 uGAIN_MIC_PAIR_B_Gain_R                     : 10;\
            UNSG32 RSVDx18_b20                                 : 12;\
          }
    union { UNSG32 u32DMIC_GAIN_MIC_PAIR_B;
            struct w32DMIC_GAIN_MIC_PAIR_B;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DMIC_GAIN_MIC_PAIR_C_Gain_L(r32)            _BFGET_(r32, 9, 0)
    #define   SET32DMIC_GAIN_MIC_PAIR_C_Gain_L(r32,v)          _BFSET_(r32, 9, 0,v)
    #define   GET16DMIC_GAIN_MIC_PAIR_C_Gain_L(r16)            _BFGET_(r16, 9, 0)
    #define   SET16DMIC_GAIN_MIC_PAIR_C_Gain_L(r16,v)          _BFSET_(r16, 9, 0,v)

    #define   GET32DMIC_GAIN_MIC_PAIR_C_Gain_R(r32)            _BFGET_(r32,19,10)
    #define   SET32DMIC_GAIN_MIC_PAIR_C_Gain_R(r32,v)          _BFSET_(r32,19,10,v)

    #define     w32DMIC_GAIN_MIC_PAIR_C                        {\
            UNSG32 uGAIN_MIC_PAIR_C_Gain_L                     : 10;\
            UNSG32 uGAIN_MIC_PAIR_C_Gain_R                     : 10;\
            UNSG32 RSVDx1C_b20                                 : 12;\
          }
    union { UNSG32 u32DMIC_GAIN_MIC_PAIR_C;
            struct w32DMIC_GAIN_MIC_PAIR_C;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DMIC_GAIN_MIC_PAIR_D_Gain_L(r32)            _BFGET_(r32, 9, 0)
    #define   SET32DMIC_GAIN_MIC_PAIR_D_Gain_L(r32,v)          _BFSET_(r32, 9, 0,v)
    #define   GET16DMIC_GAIN_MIC_PAIR_D_Gain_L(r16)            _BFGET_(r16, 9, 0)
    #define   SET16DMIC_GAIN_MIC_PAIR_D_Gain_L(r16,v)          _BFSET_(r16, 9, 0,v)

    #define   GET32DMIC_GAIN_MIC_PAIR_D_Gain_R(r32)            _BFGET_(r32,19,10)
    #define   SET32DMIC_GAIN_MIC_PAIR_D_Gain_R(r32,v)          _BFSET_(r32,19,10,v)

    #define     w32DMIC_GAIN_MIC_PAIR_D                        {\
            UNSG32 uGAIN_MIC_PAIR_D_Gain_L                     : 10;\
            UNSG32 uGAIN_MIC_PAIR_D_Gain_R                     : 10;\
            UNSG32 RSVDx20_b20                                 : 12;\
          }
    union { UNSG32 u32DMIC_GAIN_MIC_PAIR_D;
            struct w32DMIC_GAIN_MIC_PAIR_D;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DMIC_GAIN_RAMP_CONTROL_Step_Size(r32)       _BFGET_(r32, 7, 0)
    #define   SET32DMIC_GAIN_RAMP_CONTROL_Step_Size(r32,v)     _BFSET_(r32, 7, 0,v)
    #define   GET16DMIC_GAIN_RAMP_CONTROL_Step_Size(r16)       _BFGET_(r16, 7, 0)
    #define   SET16DMIC_GAIN_RAMP_CONTROL_Step_Size(r16,v)     _BFSET_(r16, 7, 0,v)

    #define   GET32DMIC_GAIN_RAMP_CONTROL_Step_Rate(r32)       _BFGET_(r32,10, 8)
    #define   SET32DMIC_GAIN_RAMP_CONTROL_Step_Rate(r32,v)     _BFSET_(r32,10, 8,v)
    #define   GET16DMIC_GAIN_RAMP_CONTROL_Step_Rate(r16)       _BFGET_(r16,10, 8)
    #define   SET16DMIC_GAIN_RAMP_CONTROL_Step_Rate(r16,v)     _BFSET_(r16,10, 8,v)

    #define     w32DMIC_GAIN_RAMP_CONTROL                      {\
            UNSG32 uGAIN_RAMP_CONTROL_Step_Size                :  8;\
            UNSG32 uGAIN_RAMP_CONTROL_Step_Rate                :  3;\
            UNSG32 RSVDx24_b11                                 : 21;\
          }
    union { UNSG32 u32DMIC_GAIN_RAMP_CONTROL;
            struct w32DMIC_GAIN_RAMP_CONTROL;
          };
    ///////////////////////////////////////////////////////////
    } SIE_DMIC;

    typedef union  T32DMIC_STATUS
          { UNSG32 u32;
            struct w32DMIC_STATUS;
                 } T32DMIC_STATUS;
    typedef union  T32DMIC_CONTROL
          { UNSG32 u32;
            struct w32DMIC_CONTROL;
                 } T32DMIC_CONTROL;
    typedef union  T32DMIC_FLUSH
          { UNSG32 u32;
            struct w32DMIC_FLUSH;
                 } T32DMIC_FLUSH;
    typedef union  T32DMIC_DECIMATION_CONTROL
          { UNSG32 u32;
            struct w32DMIC_DECIMATION_CONTROL;
                 } T32DMIC_DECIMATION_CONTROL;
    typedef union  T32DMIC_MICROPHONE_CONFIGURATION
          { UNSG32 u32;
            struct w32DMIC_MICROPHONE_CONFIGURATION;
                 } T32DMIC_MICROPHONE_CONFIGURATION;
    typedef union  T32DMIC_GAIN_MIC_PAIR_A
          { UNSG32 u32;
            struct w32DMIC_GAIN_MIC_PAIR_A;
                 } T32DMIC_GAIN_MIC_PAIR_A;
    typedef union  T32DMIC_GAIN_MIC_PAIR_B
          { UNSG32 u32;
            struct w32DMIC_GAIN_MIC_PAIR_B;
                 } T32DMIC_GAIN_MIC_PAIR_B;
    typedef union  T32DMIC_GAIN_MIC_PAIR_C
          { UNSG32 u32;
            struct w32DMIC_GAIN_MIC_PAIR_C;
                 } T32DMIC_GAIN_MIC_PAIR_C;
    typedef union  T32DMIC_GAIN_MIC_PAIR_D
          { UNSG32 u32;
            struct w32DMIC_GAIN_MIC_PAIR_D;
                 } T32DMIC_GAIN_MIC_PAIR_D;
    typedef union  T32DMIC_GAIN_RAMP_CONTROL
          { UNSG32 u32;
            struct w32DMIC_GAIN_RAMP_CONTROL;
                 } T32DMIC_GAIN_RAMP_CONTROL;
    ///////////////////////////////////////////////////////////

    typedef union  TDMIC_STATUS
          { UNSG32 u32[1];
            struct {
            struct w32DMIC_STATUS;
                   };
                 } TDMIC_STATUS;
    typedef union  TDMIC_CONTROL
          { UNSG32 u32[1];
            struct {
            struct w32DMIC_CONTROL;
                   };
                 } TDMIC_CONTROL;
    typedef union  TDMIC_FLUSH
          { UNSG32 u32[1];
            struct {
            struct w32DMIC_FLUSH;
                   };
                 } TDMIC_FLUSH;
    typedef union  TDMIC_DECIMATION_CONTROL
          { UNSG32 u32[1];
            struct {
            struct w32DMIC_DECIMATION_CONTROL;
                   };
                 } TDMIC_DECIMATION_CONTROL;
    typedef union  TDMIC_MICROPHONE_CONFIGURATION
          { UNSG32 u32[1];
            struct {
            struct w32DMIC_MICROPHONE_CONFIGURATION;
                   };
                 } TDMIC_MICROPHONE_CONFIGURATION;
    typedef union  TDMIC_GAIN_MIC_PAIR_A
          { UNSG32 u32[1];
            struct {
            struct w32DMIC_GAIN_MIC_PAIR_A;
                   };
                 } TDMIC_GAIN_MIC_PAIR_A;
    typedef union  TDMIC_GAIN_MIC_PAIR_B
          { UNSG32 u32[1];
            struct {
            struct w32DMIC_GAIN_MIC_PAIR_B;
                   };
                 } TDMIC_GAIN_MIC_PAIR_B;
    typedef union  TDMIC_GAIN_MIC_PAIR_C
          { UNSG32 u32[1];
            struct {
            struct w32DMIC_GAIN_MIC_PAIR_C;
                   };
                 } TDMIC_GAIN_MIC_PAIR_C;
    typedef union  TDMIC_GAIN_MIC_PAIR_D
          { UNSG32 u32[1];
            struct {
            struct w32DMIC_GAIN_MIC_PAIR_D;
                   };
                 } TDMIC_GAIN_MIC_PAIR_D;
    typedef union  TDMIC_GAIN_RAMP_CONTROL
          { UNSG32 u32[1];
            struct {
            struct w32DMIC_GAIN_RAMP_CONTROL;
                   };
                 } TDMIC_GAIN_RAMP_CONTROL;

    ///////////////////////////////////////////////////////////
     SIGN32 DMIC_drvrd(SIE_DMIC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DMIC_drvwr(SIE_DMIC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DMIC_reset(SIE_DMIC *p);
     SIGN32 DMIC_cmp  (SIE_DMIC *p, SIE_DMIC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DMIC_check(p,pie,pfx,hLOG) DMIC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DMIC_print(p,    pfx,hLOG) DMIC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DMIC
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE IOSEL                   biu              (4,4)
///     ###
///     * PAD Output Enable selection register
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 PRIMCLK              (P)
///               ###
///               * Primary Port MCLK output enable register.
///               ###
///               %unsigned 1  SEL                       0x0
///                                    ###
///                                    * Note: Not used. MCLK source is selected using register defined in products Global Unit.
///                                    * *INTERNAL_ONLY**
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00004 MIC1MCLK             (P)
///               ###
///               * MIC Port MCLK output enable register.
///               ###
///               %unsigned 1  SEL                       0x0
///                                    ###
///                                    * Note: Not used. MCLK source is selected using register defined in products Global Unit.
///                                    * *INTERNAL_ONLY**
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00008 PRIBCLK              (P)
///               ###
///               * Primary port Bit-clock output enable register.
///               ###
///               %unsigned 2  SEL                       0x1
///                                    ###
///                                    * 0: Bit clock is from external
///                                    * 1: Bit clock generated internally using Master Clock (MCLK) (default)
///                                    * 2 : ** RESERVED**
///                                    ###
///               %unsigned 1  INV                       0x0
///                                    ###
///                                    * * RESERVED**
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x0000C SECBCLK              (P)
///               ###
///               * Secondary port Bit-clock output enable register.
///               ###
///               %unsigned 2  SEL                       0x1
///                                    ###
///                                    * 0: Bit clock is from external
///                                    * 1: Bit clock generated internally using Master Clock (MCLK) (default)
///                                    * 2 : ** RESERVED**
///                                    ###
///               %unsigned 1  INV                       0x0
///                                    ###
///                                    * * RESERVED**
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x00010 MIC1BCLK             (P)
///               ###
///               * MIC port Bit-clock output enable register.
///               ###
///               %unsigned 2  SEL                       0x0
///                                    ###
///                                    * 0: Bit clock is from external (default)
///                                    * 1: Bit clock generated internally using MCLK
///                                    * 2 : ** RESERVED**
///                                    ###
///               %unsigned 1  INV                       0x0
///                                    ###
///                                    * Setting INV = 0 will make the WS be driven on the posedge BCLK to the External Device
///                                    * Setting INV = 1 will make the WS be driven on the negedge BCLK to the External Device
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x00014 PRIFSYNC             (P)
///               ###
///               * PRI FSync for use inside AIO core
///               ###
///               %unsigned 1  SEL                       0x0
///                                    ###
///                                    * * RESERVED**
///                                    ###
///               %unsigned 1  INV                       0x0
///                                    ###
///                                    * 0: Fync not inverted
///                                    * 1 : Fsync inverted
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00018 SECFSYNC             (P)
///               ###
///               * SEC FSync for use inside AIO core
///               ###
///               %unsigned 1  SEL                       0x0
///                                    ###
///                                    * * RESERVED**
///                                    ###
///               %unsigned 1  INV                       0x0
///                                    ###
///                                    * 0: Fync not inverted
///                                    * 1 : Fsync inverted
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x0001C MIC1FSYNC            (P)
///               ###
///               * MIC1 FSync output enable register.
///               ###
///               %unsigned 1  SEL                       0x0
///                                    ###
///                                    * * RESERVED**
///                                    ###
///               %unsigned 1  INV                       0x0
///                                    ###
///                                    * * RESERVED**
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00020 MIC2FSYNC            (P)
///               ###
///               * MIC2 FSync output enable register.
///               ###
///               %unsigned 1  SEL                       0x0
///                                    ###
///                                    * * RESERVED**
///                                    ###
///               %unsigned 1  INV                       0x0
///                                    ###
///                                    * * RESERVED**
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00024 MIC2BCLK             (P)
///               ###
///               * MIC2 Bit-clock output enable register.
///               ###
///               %unsigned 2  SEL                       0x0
///                                    ###
///                                    * 0: Bit clock is from external (default)
///                                    * 1: Bit clock generated internally using MCLK.
///                                    * 2 : ** RESERVED**
///                                    ###
///               %unsigned 1  INV                       0x0
///                                    ###
///                                    * * RESERVED**
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x00028 PDM                  (P)
///               %unsigned 1  GENABLE                   0x0
///                                    ###
///                                    * PDM GLOBAL Enable
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0002C DSD                  (P)
///               %unsigned 1  GENABLE                   0x0
///                                    ###
///                                    * DSD GLOBAL Enable
///                                    ###
///               %%        31         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      48B, bits:      24b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_IOSEL
#define h_IOSEL (){}

    #define     RA_IOSEL_PRIMCLK                               0x0000

    #define     BA_IOSEL_PRIMCLK_SEL                           0x0000
    #define     B16IOSEL_PRIMCLK_SEL                           0x0000
    #define   LSb32IOSEL_PRIMCLK_SEL                              0
    #define   LSb16IOSEL_PRIMCLK_SEL                              0
    #define       bIOSEL_PRIMCLK_SEL                           1
    #define   MSK32IOSEL_PRIMCLK_SEL                              0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_IOSEL_MIC1MCLK                              0x0004

    #define     BA_IOSEL_MIC1MCLK_SEL                          0x0004
    #define     B16IOSEL_MIC1MCLK_SEL                          0x0004
    #define   LSb32IOSEL_MIC1MCLK_SEL                             0
    #define   LSb16IOSEL_MIC1MCLK_SEL                             0
    #define       bIOSEL_MIC1MCLK_SEL                          1
    #define   MSK32IOSEL_MIC1MCLK_SEL                             0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_IOSEL_PRIBCLK                               0x0008

    #define     BA_IOSEL_PRIBCLK_SEL                           0x0008
    #define     B16IOSEL_PRIBCLK_SEL                           0x0008
    #define   LSb32IOSEL_PRIBCLK_SEL                              0
    #define   LSb16IOSEL_PRIBCLK_SEL                              0
    #define       bIOSEL_PRIBCLK_SEL                           2
    #define   MSK32IOSEL_PRIBCLK_SEL                              0x00000003

    #define     BA_IOSEL_PRIBCLK_INV                           0x0008
    #define     B16IOSEL_PRIBCLK_INV                           0x0008
    #define   LSb32IOSEL_PRIBCLK_INV                              2
    #define   LSb16IOSEL_PRIBCLK_INV                              2
    #define       bIOSEL_PRIBCLK_INV                           1
    #define   MSK32IOSEL_PRIBCLK_INV                              0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_IOSEL_SECBCLK                               0x000C

    #define     BA_IOSEL_SECBCLK_SEL                           0x000C
    #define     B16IOSEL_SECBCLK_SEL                           0x000C
    #define   LSb32IOSEL_SECBCLK_SEL                              0
    #define   LSb16IOSEL_SECBCLK_SEL                              0
    #define       bIOSEL_SECBCLK_SEL                           2
    #define   MSK32IOSEL_SECBCLK_SEL                              0x00000003

    #define     BA_IOSEL_SECBCLK_INV                           0x000C
    #define     B16IOSEL_SECBCLK_INV                           0x000C
    #define   LSb32IOSEL_SECBCLK_INV                              2
    #define   LSb16IOSEL_SECBCLK_INV                              2
    #define       bIOSEL_SECBCLK_INV                           1
    #define   MSK32IOSEL_SECBCLK_INV                              0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_IOSEL_MIC1BCLK                              0x0010

    #define     BA_IOSEL_MIC1BCLK_SEL                          0x0010
    #define     B16IOSEL_MIC1BCLK_SEL                          0x0010
    #define   LSb32IOSEL_MIC1BCLK_SEL                             0
    #define   LSb16IOSEL_MIC1BCLK_SEL                             0
    #define       bIOSEL_MIC1BCLK_SEL                          2
    #define   MSK32IOSEL_MIC1BCLK_SEL                             0x00000003

    #define     BA_IOSEL_MIC1BCLK_INV                          0x0010
    #define     B16IOSEL_MIC1BCLK_INV                          0x0010
    #define   LSb32IOSEL_MIC1BCLK_INV                             2
    #define   LSb16IOSEL_MIC1BCLK_INV                             2
    #define       bIOSEL_MIC1BCLK_INV                          1
    #define   MSK32IOSEL_MIC1BCLK_INV                             0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_IOSEL_PRIFSYNC                              0x0014

    #define     BA_IOSEL_PRIFSYNC_SEL                          0x0014
    #define     B16IOSEL_PRIFSYNC_SEL                          0x0014
    #define   LSb32IOSEL_PRIFSYNC_SEL                             0
    #define   LSb16IOSEL_PRIFSYNC_SEL                             0
    #define       bIOSEL_PRIFSYNC_SEL                          1
    #define   MSK32IOSEL_PRIFSYNC_SEL                             0x00000001

    #define     BA_IOSEL_PRIFSYNC_INV                          0x0014
    #define     B16IOSEL_PRIFSYNC_INV                          0x0014
    #define   LSb32IOSEL_PRIFSYNC_INV                             1
    #define   LSb16IOSEL_PRIFSYNC_INV                             1
    #define       bIOSEL_PRIFSYNC_INV                          1
    #define   MSK32IOSEL_PRIFSYNC_INV                             0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_IOSEL_SECFSYNC                              0x0018

    #define     BA_IOSEL_SECFSYNC_SEL                          0x0018
    #define     B16IOSEL_SECFSYNC_SEL                          0x0018
    #define   LSb32IOSEL_SECFSYNC_SEL                             0
    #define   LSb16IOSEL_SECFSYNC_SEL                             0
    #define       bIOSEL_SECFSYNC_SEL                          1
    #define   MSK32IOSEL_SECFSYNC_SEL                             0x00000001

    #define     BA_IOSEL_SECFSYNC_INV                          0x0018
    #define     B16IOSEL_SECFSYNC_INV                          0x0018
    #define   LSb32IOSEL_SECFSYNC_INV                             1
    #define   LSb16IOSEL_SECFSYNC_INV                             1
    #define       bIOSEL_SECFSYNC_INV                          1
    #define   MSK32IOSEL_SECFSYNC_INV                             0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_IOSEL_MIC1FSYNC                             0x001C

    #define     BA_IOSEL_MIC1FSYNC_SEL                         0x001C
    #define     B16IOSEL_MIC1FSYNC_SEL                         0x001C
    #define   LSb32IOSEL_MIC1FSYNC_SEL                            0
    #define   LSb16IOSEL_MIC1FSYNC_SEL                            0
    #define       bIOSEL_MIC1FSYNC_SEL                         1
    #define   MSK32IOSEL_MIC1FSYNC_SEL                            0x00000001

    #define     BA_IOSEL_MIC1FSYNC_INV                         0x001C
    #define     B16IOSEL_MIC1FSYNC_INV                         0x001C
    #define   LSb32IOSEL_MIC1FSYNC_INV                            1
    #define   LSb16IOSEL_MIC1FSYNC_INV                            1
    #define       bIOSEL_MIC1FSYNC_INV                         1
    #define   MSK32IOSEL_MIC1FSYNC_INV                            0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_IOSEL_MIC2FSYNC                             0x0020

    #define     BA_IOSEL_MIC2FSYNC_SEL                         0x0020
    #define     B16IOSEL_MIC2FSYNC_SEL                         0x0020
    #define   LSb32IOSEL_MIC2FSYNC_SEL                            0
    #define   LSb16IOSEL_MIC2FSYNC_SEL                            0
    #define       bIOSEL_MIC2FSYNC_SEL                         1
    #define   MSK32IOSEL_MIC2FSYNC_SEL                            0x00000001

    #define     BA_IOSEL_MIC2FSYNC_INV                         0x0020
    #define     B16IOSEL_MIC2FSYNC_INV                         0x0020
    #define   LSb32IOSEL_MIC2FSYNC_INV                            1
    #define   LSb16IOSEL_MIC2FSYNC_INV                            1
    #define       bIOSEL_MIC2FSYNC_INV                         1
    #define   MSK32IOSEL_MIC2FSYNC_INV                            0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_IOSEL_MIC2BCLK                              0x0024

    #define     BA_IOSEL_MIC2BCLK_SEL                          0x0024
    #define     B16IOSEL_MIC2BCLK_SEL                          0x0024
    #define   LSb32IOSEL_MIC2BCLK_SEL                             0
    #define   LSb16IOSEL_MIC2BCLK_SEL                             0
    #define       bIOSEL_MIC2BCLK_SEL                          2
    #define   MSK32IOSEL_MIC2BCLK_SEL                             0x00000003

    #define     BA_IOSEL_MIC2BCLK_INV                          0x0024
    #define     B16IOSEL_MIC2BCLK_INV                          0x0024
    #define   LSb32IOSEL_MIC2BCLK_INV                             2
    #define   LSb16IOSEL_MIC2BCLK_INV                             2
    #define       bIOSEL_MIC2BCLK_INV                          1
    #define   MSK32IOSEL_MIC2BCLK_INV                             0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_IOSEL_PDM                                   0x0028

    #define     BA_IOSEL_PDM_GENABLE                           0x0028
    #define     B16IOSEL_PDM_GENABLE                           0x0028
    #define   LSb32IOSEL_PDM_GENABLE                              0
    #define   LSb16IOSEL_PDM_GENABLE                              0
    #define       bIOSEL_PDM_GENABLE                           1
    #define   MSK32IOSEL_PDM_GENABLE                              0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_IOSEL_DSD                                   0x002C

    #define     BA_IOSEL_DSD_GENABLE                           0x002C
    #define     B16IOSEL_DSD_GENABLE                           0x002C
    #define   LSb32IOSEL_DSD_GENABLE                              0
    #define   LSb16IOSEL_DSD_GENABLE                              0
    #define       bIOSEL_DSD_GENABLE                           1
    #define   MSK32IOSEL_DSD_GENABLE                              0x00000001
    ///////////////////////////////////////////////////////////

    typedef struct SIE_IOSEL {
    ///////////////////////////////////////////////////////////
    #define   GET32IOSEL_PRIMCLK_SEL(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32IOSEL_PRIMCLK_SEL(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16IOSEL_PRIMCLK_SEL(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16IOSEL_PRIMCLK_SEL(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define     w32IOSEL_PRIMCLK                               {\
            UNSG32 uPRIMCLK_SEL                                :  1;\
            UNSG32 RSVDx0_b1                                   : 31;\
          }
    union { UNSG32 u32IOSEL_PRIMCLK;
            struct w32IOSEL_PRIMCLK;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IOSEL_MIC1MCLK_SEL(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32IOSEL_MIC1MCLK_SEL(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16IOSEL_MIC1MCLK_SEL(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16IOSEL_MIC1MCLK_SEL(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32IOSEL_MIC1MCLK                              {\
            UNSG32 uMIC1MCLK_SEL                               :  1;\
            UNSG32 RSVDx4_b1                                   : 31;\
          }
    union { UNSG32 u32IOSEL_MIC1MCLK;
            struct w32IOSEL_MIC1MCLK;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IOSEL_PRIBCLK_SEL(r32)                      _BFGET_(r32, 1, 0)
    #define   SET32IOSEL_PRIBCLK_SEL(r32,v)                    _BFSET_(r32, 1, 0,v)
    #define   GET16IOSEL_PRIBCLK_SEL(r16)                      _BFGET_(r16, 1, 0)
    #define   SET16IOSEL_PRIBCLK_SEL(r16,v)                    _BFSET_(r16, 1, 0,v)

    #define   GET32IOSEL_PRIBCLK_INV(r32)                      _BFGET_(r32, 2, 2)
    #define   SET32IOSEL_PRIBCLK_INV(r32,v)                    _BFSET_(r32, 2, 2,v)
    #define   GET16IOSEL_PRIBCLK_INV(r16)                      _BFGET_(r16, 2, 2)
    #define   SET16IOSEL_PRIBCLK_INV(r16,v)                    _BFSET_(r16, 2, 2,v)

    #define     w32IOSEL_PRIBCLK                               {\
            UNSG32 uPRIBCLK_SEL                                :  2;\
            UNSG32 uPRIBCLK_INV                                :  1;\
            UNSG32 RSVDx8_b3                                   : 29;\
          }
    union { UNSG32 u32IOSEL_PRIBCLK;
            struct w32IOSEL_PRIBCLK;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IOSEL_SECBCLK_SEL(r32)                      _BFGET_(r32, 1, 0)
    #define   SET32IOSEL_SECBCLK_SEL(r32,v)                    _BFSET_(r32, 1, 0,v)
    #define   GET16IOSEL_SECBCLK_SEL(r16)                      _BFGET_(r16, 1, 0)
    #define   SET16IOSEL_SECBCLK_SEL(r16,v)                    _BFSET_(r16, 1, 0,v)

    #define   GET32IOSEL_SECBCLK_INV(r32)                      _BFGET_(r32, 2, 2)
    #define   SET32IOSEL_SECBCLK_INV(r32,v)                    _BFSET_(r32, 2, 2,v)
    #define   GET16IOSEL_SECBCLK_INV(r16)                      _BFGET_(r16, 2, 2)
    #define   SET16IOSEL_SECBCLK_INV(r16,v)                    _BFSET_(r16, 2, 2,v)

    #define     w32IOSEL_SECBCLK                               {\
            UNSG32 uSECBCLK_SEL                                :  2;\
            UNSG32 uSECBCLK_INV                                :  1;\
            UNSG32 RSVDxC_b3                                   : 29;\
          }
    union { UNSG32 u32IOSEL_SECBCLK;
            struct w32IOSEL_SECBCLK;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IOSEL_MIC1BCLK_SEL(r32)                     _BFGET_(r32, 1, 0)
    #define   SET32IOSEL_MIC1BCLK_SEL(r32,v)                   _BFSET_(r32, 1, 0,v)
    #define   GET16IOSEL_MIC1BCLK_SEL(r16)                     _BFGET_(r16, 1, 0)
    #define   SET16IOSEL_MIC1BCLK_SEL(r16,v)                   _BFSET_(r16, 1, 0,v)

    #define   GET32IOSEL_MIC1BCLK_INV(r32)                     _BFGET_(r32, 2, 2)
    #define   SET32IOSEL_MIC1BCLK_INV(r32,v)                   _BFSET_(r32, 2, 2,v)
    #define   GET16IOSEL_MIC1BCLK_INV(r16)                     _BFGET_(r16, 2, 2)
    #define   SET16IOSEL_MIC1BCLK_INV(r16,v)                   _BFSET_(r16, 2, 2,v)

    #define     w32IOSEL_MIC1BCLK                              {\
            UNSG32 uMIC1BCLK_SEL                               :  2;\
            UNSG32 uMIC1BCLK_INV                               :  1;\
            UNSG32 RSVDx10_b3                                  : 29;\
          }
    union { UNSG32 u32IOSEL_MIC1BCLK;
            struct w32IOSEL_MIC1BCLK;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IOSEL_PRIFSYNC_SEL(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32IOSEL_PRIFSYNC_SEL(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16IOSEL_PRIFSYNC_SEL(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16IOSEL_PRIFSYNC_SEL(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define   GET32IOSEL_PRIFSYNC_INV(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32IOSEL_PRIFSYNC_INV(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16IOSEL_PRIFSYNC_INV(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16IOSEL_PRIFSYNC_INV(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define     w32IOSEL_PRIFSYNC                              {\
            UNSG32 uPRIFSYNC_SEL                               :  1;\
            UNSG32 uPRIFSYNC_INV                               :  1;\
            UNSG32 RSVDx14_b2                                  : 30;\
          }
    union { UNSG32 u32IOSEL_PRIFSYNC;
            struct w32IOSEL_PRIFSYNC;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IOSEL_SECFSYNC_SEL(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32IOSEL_SECFSYNC_SEL(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16IOSEL_SECFSYNC_SEL(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16IOSEL_SECFSYNC_SEL(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define   GET32IOSEL_SECFSYNC_INV(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32IOSEL_SECFSYNC_INV(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16IOSEL_SECFSYNC_INV(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16IOSEL_SECFSYNC_INV(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define     w32IOSEL_SECFSYNC                              {\
            UNSG32 uSECFSYNC_SEL                               :  1;\
            UNSG32 uSECFSYNC_INV                               :  1;\
            UNSG32 RSVDx18_b2                                  : 30;\
          }
    union { UNSG32 u32IOSEL_SECFSYNC;
            struct w32IOSEL_SECFSYNC;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IOSEL_MIC1FSYNC_SEL(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32IOSEL_MIC1FSYNC_SEL(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16IOSEL_MIC1FSYNC_SEL(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16IOSEL_MIC1FSYNC_SEL(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32IOSEL_MIC1FSYNC_INV(r32)                    _BFGET_(r32, 1, 1)
    #define   SET32IOSEL_MIC1FSYNC_INV(r32,v)                  _BFSET_(r32, 1, 1,v)
    #define   GET16IOSEL_MIC1FSYNC_INV(r16)                    _BFGET_(r16, 1, 1)
    #define   SET16IOSEL_MIC1FSYNC_INV(r16,v)                  _BFSET_(r16, 1, 1,v)

    #define     w32IOSEL_MIC1FSYNC                             {\
            UNSG32 uMIC1FSYNC_SEL                              :  1;\
            UNSG32 uMIC1FSYNC_INV                              :  1;\
            UNSG32 RSVDx1C_b2                                  : 30;\
          }
    union { UNSG32 u32IOSEL_MIC1FSYNC;
            struct w32IOSEL_MIC1FSYNC;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IOSEL_MIC2FSYNC_SEL(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32IOSEL_MIC2FSYNC_SEL(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16IOSEL_MIC2FSYNC_SEL(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16IOSEL_MIC2FSYNC_SEL(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32IOSEL_MIC2FSYNC_INV(r32)                    _BFGET_(r32, 1, 1)
    #define   SET32IOSEL_MIC2FSYNC_INV(r32,v)                  _BFSET_(r32, 1, 1,v)
    #define   GET16IOSEL_MIC2FSYNC_INV(r16)                    _BFGET_(r16, 1, 1)
    #define   SET16IOSEL_MIC2FSYNC_INV(r16,v)                  _BFSET_(r16, 1, 1,v)

    #define     w32IOSEL_MIC2FSYNC                             {\
            UNSG32 uMIC2FSYNC_SEL                              :  1;\
            UNSG32 uMIC2FSYNC_INV                              :  1;\
            UNSG32 RSVDx20_b2                                  : 30;\
          }
    union { UNSG32 u32IOSEL_MIC2FSYNC;
            struct w32IOSEL_MIC2FSYNC;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IOSEL_MIC2BCLK_SEL(r32)                     _BFGET_(r32, 1, 0)
    #define   SET32IOSEL_MIC2BCLK_SEL(r32,v)                   _BFSET_(r32, 1, 0,v)
    #define   GET16IOSEL_MIC2BCLK_SEL(r16)                     _BFGET_(r16, 1, 0)
    #define   SET16IOSEL_MIC2BCLK_SEL(r16,v)                   _BFSET_(r16, 1, 0,v)

    #define   GET32IOSEL_MIC2BCLK_INV(r32)                     _BFGET_(r32, 2, 2)
    #define   SET32IOSEL_MIC2BCLK_INV(r32,v)                   _BFSET_(r32, 2, 2,v)
    #define   GET16IOSEL_MIC2BCLK_INV(r16)                     _BFGET_(r16, 2, 2)
    #define   SET16IOSEL_MIC2BCLK_INV(r16,v)                   _BFSET_(r16, 2, 2,v)

    #define     w32IOSEL_MIC2BCLK                              {\
            UNSG32 uMIC2BCLK_SEL                               :  2;\
            UNSG32 uMIC2BCLK_INV                               :  1;\
            UNSG32 RSVDx24_b3                                  : 29;\
          }
    union { UNSG32 u32IOSEL_MIC2BCLK;
            struct w32IOSEL_MIC2BCLK;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IOSEL_PDM_GENABLE(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32IOSEL_PDM_GENABLE(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16IOSEL_PDM_GENABLE(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16IOSEL_PDM_GENABLE(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define     w32IOSEL_PDM                                   {\
            UNSG32 uPDM_GENABLE                                :  1;\
            UNSG32 RSVDx28_b1                                  : 31;\
          }
    union { UNSG32 u32IOSEL_PDM;
            struct w32IOSEL_PDM;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IOSEL_DSD_GENABLE(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32IOSEL_DSD_GENABLE(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16IOSEL_DSD_GENABLE(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16IOSEL_DSD_GENABLE(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define     w32IOSEL_DSD                                   {\
            UNSG32 uDSD_GENABLE                                :  1;\
            UNSG32 RSVDx2C_b1                                  : 31;\
          }
    union { UNSG32 u32IOSEL_DSD;
            struct w32IOSEL_DSD;
          };
    ///////////////////////////////////////////////////////////
    } SIE_IOSEL;

    typedef union  T32IOSEL_PRIMCLK
          { UNSG32 u32;
            struct w32IOSEL_PRIMCLK;
                 } T32IOSEL_PRIMCLK;
    typedef union  T32IOSEL_MIC1MCLK
          { UNSG32 u32;
            struct w32IOSEL_MIC1MCLK;
                 } T32IOSEL_MIC1MCLK;
    typedef union  T32IOSEL_PRIBCLK
          { UNSG32 u32;
            struct w32IOSEL_PRIBCLK;
                 } T32IOSEL_PRIBCLK;
    typedef union  T32IOSEL_SECBCLK
          { UNSG32 u32;
            struct w32IOSEL_SECBCLK;
                 } T32IOSEL_SECBCLK;
    typedef union  T32IOSEL_MIC1BCLK
          { UNSG32 u32;
            struct w32IOSEL_MIC1BCLK;
                 } T32IOSEL_MIC1BCLK;
    typedef union  T32IOSEL_PRIFSYNC
          { UNSG32 u32;
            struct w32IOSEL_PRIFSYNC;
                 } T32IOSEL_PRIFSYNC;
    typedef union  T32IOSEL_SECFSYNC
          { UNSG32 u32;
            struct w32IOSEL_SECFSYNC;
                 } T32IOSEL_SECFSYNC;
    typedef union  T32IOSEL_MIC1FSYNC
          { UNSG32 u32;
            struct w32IOSEL_MIC1FSYNC;
                 } T32IOSEL_MIC1FSYNC;
    typedef union  T32IOSEL_MIC2FSYNC
          { UNSG32 u32;
            struct w32IOSEL_MIC2FSYNC;
                 } T32IOSEL_MIC2FSYNC;
    typedef union  T32IOSEL_MIC2BCLK
          { UNSG32 u32;
            struct w32IOSEL_MIC2BCLK;
                 } T32IOSEL_MIC2BCLK;
    typedef union  T32IOSEL_PDM
          { UNSG32 u32;
            struct w32IOSEL_PDM;
                 } T32IOSEL_PDM;
    typedef union  T32IOSEL_DSD
          { UNSG32 u32;
            struct w32IOSEL_DSD;
                 } T32IOSEL_DSD;
    ///////////////////////////////////////////////////////////

    typedef union  TIOSEL_PRIMCLK
          { UNSG32 u32[1];
            struct {
            struct w32IOSEL_PRIMCLK;
                   };
                 } TIOSEL_PRIMCLK;
    typedef union  TIOSEL_MIC1MCLK
          { UNSG32 u32[1];
            struct {
            struct w32IOSEL_MIC1MCLK;
                   };
                 } TIOSEL_MIC1MCLK;
    typedef union  TIOSEL_PRIBCLK
          { UNSG32 u32[1];
            struct {
            struct w32IOSEL_PRIBCLK;
                   };
                 } TIOSEL_PRIBCLK;
    typedef union  TIOSEL_SECBCLK
          { UNSG32 u32[1];
            struct {
            struct w32IOSEL_SECBCLK;
                   };
                 } TIOSEL_SECBCLK;
    typedef union  TIOSEL_MIC1BCLK
          { UNSG32 u32[1];
            struct {
            struct w32IOSEL_MIC1BCLK;
                   };
                 } TIOSEL_MIC1BCLK;
    typedef union  TIOSEL_PRIFSYNC
          { UNSG32 u32[1];
            struct {
            struct w32IOSEL_PRIFSYNC;
                   };
                 } TIOSEL_PRIFSYNC;
    typedef union  TIOSEL_SECFSYNC
          { UNSG32 u32[1];
            struct {
            struct w32IOSEL_SECFSYNC;
                   };
                 } TIOSEL_SECFSYNC;
    typedef union  TIOSEL_MIC1FSYNC
          { UNSG32 u32[1];
            struct {
            struct w32IOSEL_MIC1FSYNC;
                   };
                 } TIOSEL_MIC1FSYNC;
    typedef union  TIOSEL_MIC2FSYNC
          { UNSG32 u32[1];
            struct {
            struct w32IOSEL_MIC2FSYNC;
                   };
                 } TIOSEL_MIC2FSYNC;
    typedef union  TIOSEL_MIC2BCLK
          { UNSG32 u32[1];
            struct {
            struct w32IOSEL_MIC2BCLK;
                   };
                 } TIOSEL_MIC2BCLK;
    typedef union  TIOSEL_PDM
          { UNSG32 u32[1];
            struct {
            struct w32IOSEL_PDM;
                   };
                 } TIOSEL_PDM;
    typedef union  TIOSEL_DSD
          { UNSG32 u32[1];
            struct {
            struct w32IOSEL_DSD;
                   };
                 } TIOSEL_DSD;

    ///////////////////////////////////////////////////////////
     SIGN32 IOSEL_drvrd(SIE_IOSEL *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 IOSEL_drvwr(SIE_IOSEL *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void IOSEL_reset(SIE_IOSEL *p);
     SIGN32 IOSEL_cmp  (SIE_IOSEL *p, SIE_IOSEL *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define IOSEL_check(p,pie,pfx,hLOG) IOSEL_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define IOSEL_print(p,    pfx,hLOG) IOSEL_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: IOSEL
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE AIO                     biu              (4,4)
///     ###
///     * Audio Input Output Unit Registers
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 PRI                  
///               $PRI                 PRI               REG          
///                                    ###
///                                    * Primary Port Registers
///                                    ###
///     @ 0x0002C                      (P)
///     # 0x0002C SEC                  
///               $SEC                 SEC               REG          
///                                    ###
///                                    * Secondary Port Registers
///                                    ###
///     @ 0x0004C                      (P)
///     # 0x0004C HDMI                 
///               $HDMI                HDMI              REG          
///                                    ###
///                                    * HDMI Port Registers
///                                    * ARCTX HDMI Port Registers
///                                    ###
///     @ 0x0006C                      (P)
///     # 0x0006C SPDIF                
///               $SPDIF               SPDIF             REG          
///                                    ###
///                                    * S/PDIF Port Registers
///                                    ###
///     @ 0x0007C                      (P)
///     # 0x0007C MIC1                 
///               $MIC1                MIC1              REG          
///                                    ###
///                                    * MIC1 Registers
///                                    ###
///     @ 0x000B8                      (P)
///     # 0x000B8 MIC2                 
///               $MIC2                MIC2              REG          
///     @ 0x000E4                      (P)
///     # 0x000E4 MIC3                 
///               $MIC3                MIC3              REG          
///     @ 0x0011C                      (P)
///     # 0x0011C MIC4                 
///               $MIC4                MIC4              REG          
///     @ 0x00154                      (P)
///     # 0x00154 MIC5                 
///               $MIC5                MIC5              REG          
///     @ 0x0018C                      (P)
///     # 0x0018C MIC6                 
///               $MIC6                MIC6              REG          
///                                    ###
///                                    * MIC Registers
///                                    ###
///     @ 0x001C8                      (P)
///     # 0x001C8 DSD                  
///               $DSD                 DSD               REG          
///                                    ###
///                                    * DSD (6 channel DSD) with individual port controls.
///                                    ###
///     @ 0x001F0                      (P)
///     # 0x001F0 PDM                  
///               $PDM                 PDM               REG          
///                                    ###
///                                    * PDM (8 channel PDM) with individual port controls.
///                                    ###
///     @ 0x00220                      (P)
///     # 0x00220 DMIC_CLK             
///               $DMIC_CLK            DMIC_CLK          REG          
///                                    ###
///                                    * DMIC Clock Control Register.
///                                    ###
///     @ 0x00230                      (P)
///     # 0x00230 DMIC                 
///               $DMIC                DMIC              REG          
///                                    ###
///                                    * DMIC Configuration Registers.
///                                    ###
///     @ 0x00258                      (P)
///     # 0x00258 SPDIFRX_CTRL         
///               $SPDIFRX_CTRL        SPDIFRX_CTRL      REG          
///                                    ###
///                                    * SPDIFRX control registers
///                                    ###
///     @ 0x00288                      (P)
///     # 0x00288 SPDIFRX_STATUS       
///               $SPDIFRX_STATUS      SPDIFRX_STATUS    REG          
///                                    ###
///                                    * SPDIFRX status registers
///                                    ###
///     @ 0x0028C                      (P)
///     # 0x0028C IOSEL                
///               $IOSEL               IOSEL             REG          
///                                    ###
///                                    * Pad output enable control register
///                                    ###
///     @ 0x002BC EARC_SRC             (P)
///               %unsigned 2  SEL                       0x0
///                                    ###
///                                    * 0 : Selects SPDIF RX input or eARC RX SPDIF input
///                                    * 1 : Selects eARC RX DSD input
///                                    * 2 or 3: Selects eARC RX I2S input
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x002C0 IRQENABLE            (P)
///               ###
///               * Interrupt Enable register
///               ###
///               %unsigned 1  PRIIRQ                    0x0
///                                    ###
///                                    * Primary Port Interrupt enable:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %unsigned 1  SECIRQ                    0x0
///                                    ###
///                                    * Secondary Port Interrupt enable:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %unsigned 1  MIC1IRQ                   0x0
///                                    ###
///                                    * MIC Port Interrupt enable:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %unsigned 1  MIC2IRQ                   0x0
///                                    ###
///                                    * MIC2 Port Interrupt enable:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %unsigned 1  MIC3IRQ                   0x0
///                                    ###
///                                    * MIC3 Port (HDMI RX) Interrupt enable:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %unsigned 1  MIC4IRQ                   0x0
///                                    ###
///                                    * MIC4 Port (Loop Back Primary) Interrupt enable:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %unsigned 1  MIC5IRQ                   0x0
///                                    ###
///                                    * MIC5 Port (Loop Back HDMITX) Interrupt enable:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %unsigned 1  MIC6IRQ                   0x0
///                                    ###
///                                    * MIC6 Port (eARC Rx I2S) Interrupt enable:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %unsigned 1  SPDIFIRQ                  0x0
///                                    ###
///                                    * S/PDIF Port Interrupt enable:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %unsigned 1  SPDIF1IRQ                 0x0
///                                    ###
///                                    * S/PDIF1 Port Interrupt enable:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    * Reserved
///                                    ###
///               %unsigned 1  HDMIIRQ                   0x0
///                                    ###
///                                    * HD Port Interrupt enable:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %unsigned 1  PDMIRQ                    0x0
///                                    ###
///                                    * PDM port Interrupt enable:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %unsigned 1  DSDIRQ                    0x0
///                                    ###
///                                    * DSD port Interrupt enable:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %unsigned 1  SPDIFRXIRQ                0x0
///                                    ###
///                                    * SPDIFRX port Interrupt enable:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %unsigned 1  DMICIRQ                   0x0
///                                    ###
///                                    * DMIC port Interrupt enable:
///                                    * 0: Not enabled
///                                    * 1: Enabled
///                                    ###
///               %%        17         # Stuffing bits...
///     @ 0x002C4 IRQSTS               (WOC-)
///               ###
///               * Interrupt status register, write 1 to clear.
///               * Interrupt is generated when corresponding data FIFO underflow.
///               * For MIC when FIFO overflow.
///               * Please note : Writing of '1' to clear the interrupt register should be done on one of 2 below conditions
///               * 1. once the source of interrupt is really cleared at source.
///               * 2. If there is no indication (for overflow/underflow clear) from interrupt source, then S/W should keep Write & Read this register (100 sysClk) , until this status bit is Indeed cleared.
///               ###
///               %unsigned 1  PRISTS                    0x0
///                                    ###
///                                    * Primary port interrupt status:
///                                    * 0: No interrupt (default)
///                                    * 1: Interrupt Pending
///                                    ###
///               %unsigned 1  SECSTS                    0x0
///                                    ###
///                                    * Secondary port interrupt status:
///                                    * 0: No interrupt (default)
///                                    * 1: Interrupt Pending
///                                    ###
///               %unsigned 1  MIC1STS                   0x0
///                                    ###
///                                    * MIC port interrupt status:
///                                    * 0: No interrupt (default)
///                                    * 1: Interrupt Pending
///                                    ###
///               %unsigned 1  MIC2STS                   0x0
///                                    ###
///                                    * MIC2 port interrupt status:
///                                    * 0: No interrupt (default)
///                                    * 1: Interrupt Pending
///                                    ###
///               %unsigned 1  MIC3STS                   0x0
///                                    ###
///                                    * MIC 3 port interrupt status:
///                                    * 0: No interrupt (default)
///                                    * 1: Interrupt Pending
///                                    ###
///               %unsigned 1  MIC4STS                   0x0
///                                    ###
///                                    * MIC4 port interrupt status:
///                                    * 0: No interrupt (default)
///                                    * 1: Interrupt Pending
///                                    ###
///               %unsigned 1  MIC5STS                   0x0
///                                    ###
///                                    * MIC5 port interrupt status:
///                                    * 0: No interrupt (default)
///                                    * 1: Interrupt Pending
///                                    ###
///               %unsigned 1  MIC6STS                   0x0
///                                    ###
///                                    * MIC6 port interrupt status:
///                                    * 0: No interrupt (default)
///                                    * 1: Interrupt Pending
///                                    ###
///               %unsigned 1  SPDIFSTS                  0x0
///                                    ###
///                                    * S/PDIF port interrupt status:
///                                    * 0: No interrupt (default)
///                                    * 1: Interrupt Pending
///                                    ###
///               %unsigned 1  SPDIF1STS                 0x0
///                                    ###
///                                    * S/PDIF1 port interrupt status:
///                                    * 0: No interrupt (default)
///                                    * 1: Interrupt Pending.
///                                    * Reserved
///                                    ###
///               %unsigned 1  HDMISTS                   0x0
///                                    ###
///                                    * HD port interrupt status:
///                                    * 0: No interrupt (default)
///                                    * 1: Interrupt Pending
///                                    ###
///               %unsigned 1  PDMSTS                    0x0
///                                    ###
///                                    * PDM port interrupt status:
///                                    * 0: No interrupt (default)
///                                    * 1: Interrupt Pending
///                                    ###
///               %unsigned 1  DSDSTS                    0x0
///                                    ###
///                                    * DSD port interrupt status:
///                                    * 0: No interrupt (default)
///                                    * 1: Interrupt Pending
///                                    ###
///               %unsigned 1  SPDIFRXSTS                0x0
///                                    ###
///                                    * SPDIFRX port interrupt status:
///                                    * 0: No interrupt (default)
///                                    * 1: Interrupt Pending
///                                    ###
///               %unsigned 1  DMICSTS                   0x0
///                                    ###
///                                    * DMIC port interrupt status:
///                                    * 0: No interrupt (default)
///                                    * 1: Interrupt Pending (Check AIO_DMIC_STATUS register to know exact source of interrupt.)
///                                    ###
///               %%        17         # Stuffing bits...
///     @ 0x002C8 PRISRC               (P)
///               ###
///               * Primary Audio source selection register
///               ###
///               %unsigned 2  SEL                       0x0
///                                    ###
///                                    * Register to indicate no of audio channel active.
///                                    * 00 : 2 Channel I2S Data sent out (1 LR read from dHub) / 8 Channel TDM Mode
///                                    * 01 : 4 Channel I2S Data sent out (2 LR read from dHub) / 8 Channel TDM Mode over 2 Lanes
///                                    * 10 : 6 Channel I2S Data sent out (3 LR read from dHub)
///                                    * 11 : 8 Channel I2S Data sent out (4 LR read from dHub)
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %unsigned 2  L0DATAMAP                 0x0
///               %unsigned 2  L1DATAMAP                 0x1
///               %unsigned 2  L2DATAMAP                 0x2
///               %unsigned 2  L3DATAMAP                 0x3
///                                    ###
///                                    * Data map
///                                    * 00 : First data read from dHUB is sent
///                                    * 01 : Second data read from dHUB is sent
///                                    * 10 : Third data read from dHUB is sent
///                                    * 11 : Fourth data read from dHUB is sent
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %unsigned 1  SLAVEMODE                 0x0
///                                    ###
///                                    * 0 – NORMAL operation
///                                    * 1- SLAVE MODE Active
///                                    ###
///               %%        21         # Stuffing bits...
///     @ 0x002CC SECSRC               (P)
///               ###
///               * Secondary Audio source selection register
///               ###
///               %unsigned 2  SEL                       0x0
///                                    ###
///                                    * Register to indicate no of audio channel active.
///                                    * 00 : 2 Channel I2S Data sent out (1 LR read from dHub) / 8 Channel TDM Mode
///                                    * 01 : 4 Channel I2S Data sent out (2 LR read from dHub) / 8 Channel TDM Mode over 2 Lanes
///                                    * 10 : 6 Channel I2S Data sent out (3 LR read from dHub)
///                                    * 11 : 8 Channel I2S Data sent out (4 LR read from dHub)
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %unsigned 2  L0DATAMAP                 0x0
///               %unsigned 2  L1DATAMAP                 0x1
///               %unsigned 2  L2DATAMAP                 0x2
///               %unsigned 2  L3DATAMAP                 0x3
///                                    ###
///                                    * Data map
///                                    * 00 : First data read from dHUB is sent
///                                    * 01 : Second data read from dHUB is sent
///                                    * 10 : Third data read from dHUB is sent
///                                    * 11 : Fourth data read from dHUB is sent
///                                    * USED ONLY WHEN INTERLEAVED MODE IS ACTIVE
///                                    ###
///               %unsigned 1  SLAVEMODE                 0x0
///                                    ###
///                                    * 0 – NORMAL operation
///                                    * 1- SLAVE MODE Active
///                                    ###
///               %%        21         # Stuffing bits...
///     @ 0x002D0 HDSRC                (P)
///               ###
///               * HBR Audio source selection register
///               ###
///               %unsigned 2  SEL                       0x0
///                                    ###
///                                    * Register to indicate number of samples per 64-bit data from DDR.
///                                    * 00 : HD data (2 samples {2pair of Left & Right} per 64-bit data from DDR) transmitted in 2 LRCK (over 2 channel)
///                                    * 01: L-PCM data (1 Sample {one pair of Left &Right} per 64-bit data from DDR) transmitted in 1 LRCK (over 2 channel)
///                                    * 10: HD data (4 samples {4pair of Left & Right } per 128-bit data from DDR) transmitter in 1 LRCK (over 8 channels)
///                                    * 11: 8 channel LPCM data (4 samples {4pair of Left & Right } per 256-bit data from DDR) transmitted in 1 LRCK (over 8 channels)
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x002D4 PDM_MIC_SEL          (P)
///               %unsigned 4  CTRL                      0x0
///                                    ###
///                                    * PDM – MIC1 Mux selection
///                                    * PDM_MIC_SEL[0] : Reserved
///                                    * PDM_MIC_SEL[1] : Reserved
///                                    * PDM_MIC_SEL[2] : Set to 1 if MIC1 5-6 Channel is active or Set to 0 if PDM 5-6 Channel is active
///                                    * PDM_MIC_SEL[3] : Set to 1 if MIC1 7-8 Channel is active or Set to 0 if PDM 7-8 Channel is active
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x002D8                      (P)
///     # 0x002D8 MCLKPRI              
///               $ACLK                MCLKPRI           REG          
///     @ 0x002DC                      (P)
///     # 0x002DC MCLKSEC              
///               $ACLK                MCLKSEC           REG          
///     @ 0x002E0                      (P)
///     # 0x002E0 MCLKHD               
///               $ACLK                MCLKHD            REG          
///     @ 0x002E4                      (P)
///     # 0x002E4 MCLKSPF              
///               $ACLK                MCLKSPF           REG          
///     @ 0x002E8                      (P)
///     # 0x002E8 MCLKPDM              
///               $ACLK                MCLKPDM           REG          
///     @ 0x002EC                      (P)
///     # 0x002EC MCLKMIC1             
///               $ACLK                MCLKMIC1          REG          
///     @ 0x002F0                      (P)
///     # 0x002F0 MCLKMIC2             
///               $ACLK                MCLKMIC2          REG          
///                                    ###
///                                    * Audio Clock & Reset Control
///                                    ###
///     @ 0x002F4 SW_RST               (P)
///               ###
///               * Software Reset
///               ###
///               %unsigned 1  SPFRX                     0x1
///                                    ###
///                                    * Software Reset
///                                    ###
///               %unsigned 1  REFCLK                    0x1
///               %unsigned 1  MIC3                      0x1
///               %unsigned 1  MIC4                      0x1
///               %unsigned 1  MIC5                      0x1
///               %unsigned 1  MIC6                      0x1
///                                    ###
///                                    * Software Reset
///                                    * Software Reset
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x002F8 CLK_GATE_EN          (P)
///               ###
///               * Clock gate for Loopback Logic
///               ###
///               %unsigned 1  MIC3                      0x1
///               %unsigned 1  MIC4                      0x1
///               %unsigned 1  MIC5                      0x1
///               %unsigned 1  MIC6                      0x1
///               %unsigned 1  DSD                       0x1
///                                    ###
///                                    * 0 – Clock Not gated
///                                    * 1 – Clock Gated
///                                    ###
///               %unsigned 1  GBL                       0x1
///                                    ###
///                                    * 0 – Bypass module level clock gating
///                                    * 1 – Enable module level clock gating
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x002FC EARC_ARC             (P)
///               %unsigned 1  SEL                       0x0
///                                    ###
///                                    * 0 – EARC HDAD channel Active
///                                    * 1 – ARC SPDIF Channel Active
///                                    * Reserved. Keep it 0.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00300 SAMP_CTRL            (P)
///               ###
///               * Audio Sample counter
///               ###
///               %unsigned 1  EN_I2STX1                 0x0
///                                    ###
///                                    * Enable the counter
///                                    ###
///               %unsigned 1  EN_I2STX2                 0x0
///                                    ###
///                                    * Enable the counter
///                                    ###
///               %unsigned 1  EN_SPDIFTX                0x0
///                                    ###
///                                    * Enable the counter
///                                    ###
///               %unsigned 1  EN_SPDIFTX1               0x0
///                                    ###
///                                    * Enable the counter
///                                    * Reserved
///                                    ###
///               %unsigned 1  EN_HDMI                   0x0
///                                    ###
///                                    * Enable the counter
///                                    ###
///               %unsigned 1  EN_HDMIARCTX              0x0
///                                    ###
///                                    * Enable the counter.
///                                    * Reserved
///                                    ###
///               %unsigned 1  EN_SPDIFRX                0x0
///                                    ###
///                                    * Enable the counter
///                                    ###
///               %unsigned 1  EN_I2SRX1                 0x0
///                                    ###
///                                    * Enable the counter
///                                    ###
///               %unsigned 1  EN_I2SRX2                 0x0
///                                    ###
///                                    * Enable the counter
///                                    ###
///               %unsigned 1  EN_I2SRX3                 0x0
///                                    ###
///                                    * Enable the counter
///                                    ###
///               %unsigned 1  EN_I2SRX4                 0x0
///                                    ###
///                                    * Enable the counter
///                                    ###
///               %unsigned 1  EN_I2SRX5                 0x0
///                                    ###
///                                    * Enable the counter
///                                    ###
///               %unsigned 1  EN_I2SRX6                 0x0
///                                    ###
///                                    * Enable the counter
///                                    ###
///               %unsigned 1  EN_AUDTIMER               0x0
///                                    ###
///                                    * Enable the Audio Timer
///                                    ###
///               %unsigned 1  EN_PDMRX1                 0x0
///                                    ###
///                                    * Enable the counter
///                                    ###
///               %unsigned 1  EN_DSDRX1                 0x0
///                                    ###
///                                    * Enable the counter
///                                    * Audio Sample counter and timer controls.
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00304 SAMPINFO_REQ         (P)
///               ###
///               * Info request from SW.
///               * Writing 1 to this register latches the Sample Count & Timestamp value to the respective SCR & STR.
///               * Writing 0 does not have any effect.
///               ###
///               %unsigned 1  I2STX1                    0x0
///                                    ###
///                                    * Request sample count and timestamp
///                                    ###
///               %unsigned 1  I2STX2                    0x0
///                                    ###
///                                    * Request sample count and timestamp
///                                    ###
///               %unsigned 1  HDMITX                    0x0
///                                    ###
///                                    * Request sample count and timestamp
///                                    ###
///               %unsigned 1  HDMIARCTX                 0x0
///                                    ###
///                                    * Request sample count and timestamp.
///                                    * Reserved
///                                    ###
///               %unsigned 1  SPDIFTX                   0x0
///                                    ###
///                                    * Request sample count and timestamp
///                                    ###
///               %unsigned 1  SPDIFTX1                  0x0
///                                    ###
///                                    * Request sample count and timestamp.
///                                    * Reserved
///                                    ###
///               %unsigned 1  SPDIFRX                   0x0
///                                    ###
///                                    * Request sample count and timestamp
///                                    ###
///               %unsigned 1  I2SRX1                    0x0
///                                    ###
///                                    * Request sample count and timestamp
///                                    ###
///               %unsigned 1  I2SRX2                    0x0
///                                    ###
///                                    * Request sample count and timestamp
///                                    ###
///               %unsigned 1  I2SRX3                    0x0
///                                    ###
///                                    * Request sample count and timestamp
///                                    ###
///               %unsigned 1  I2SRX4                    0x0
///                                    ###
///                                    * Request sample count and timestamp
///                                    ###
///               %unsigned 1  I2SRX5                    0x0
///                                    ###
///                                    * Request sample count and timestamp
///                                    ###
///               %unsigned 1  I2SRX6                    0x0
///                                    ###
///                                    * Request sample count and timestamp
///                                    ###
///               %unsigned 1  PDMRX1                    0x0
///                                    ###
///                                    * Request sample count and timestamp
///                                    ###
///               %unsigned 1  DSDRX1                    0x0
///                                    ###
///                                    * Request sample count and timestamp
///                                    ###
///               %%        17         # Stuffing bits...
///     @ 0x00308 SCR                  (R-)
///               %unsigned 32 I2STX1                    0x0
///                                    ###
///                                    * Sample Counter Register
///                                    ###
///     # 0x0030C SCR1                 
///               %unsigned 32 I2STX2                    0x0
///                                    ###
///                                    * Sample Counter Register
///                                    ###
///     # 0x00310 SCR2                 
///               %unsigned 32 HDMITX                    0x0
///                                    ###
///                                    * Sample Counter Register
///                                    ###
///     # 0x00314 SCR3                 
///               %unsigned 32 HDMIARCTX                 0x0
///                                    ###
///                                    * Sample Counter Register.
///                                    * Reserved
///                                    ###
///     # 0x00318 SCR4                 
///               %unsigned 32 SPDIFTX                   0x0
///                                    ###
///                                    * Sample Counter Register
///                                    ###
///     # 0x0031C SCR5                 
///               %unsigned 32 SPDIFTX1                  0x0
///                                    ###
///                                    * Sample Counter Register.
///                                    * Reserved
///                                    ###
///     # 0x00320 SCR6                 
///               %unsigned 32 SPDIFRX                   0x0
///                                    ###
///                                    * Sample Counter Register
///                                    ###
///     # 0x00324 SCR7                 
///               %unsigned 32 I2SRX1                    0x0
///                                    ###
///                                    * Sample Counter Register
///                                    ###
///     # 0x00328 SCR8                 
///               %unsigned 32 I2SRX2                    0x0
///                                    ###
///                                    * Sample Counter Register
///                                    ###
///     # 0x0032C SCR9                 
///               %unsigned 32 I2SRX3                    0x0
///                                    ###
///                                    * Sample Counter Register
///                                    ###
///     # 0x00330 SCR10                
///               %unsigned 32 I2SRX4                    0x0
///                                    ###
///                                    * Sample Counter Register
///                                    ###
///     # 0x00334 SCR11                
///               %unsigned 32 I2SRX5                    0x0
///                                    ###
///                                    * Sample Counter Register
///                                    ###
///     # 0x00338 SCR12                
///               %unsigned 32 I2SRX6                    0x0
///                                    ###
///                                    * Sample Counter Register
///                                    ###
///     # 0x0033C SCR13                
///               %unsigned 32 PDMRX1                    0x0
///                                    ###
///                                    * Sample Counter Register
///                                    ###
///     # 0x00340 SCR14                
///               %unsigned 32 DSDRX1                    0x0
///                                    ###
///                                    * Sample Counter Register
///                                    ###
///     @ 0x00344 STR                  (R-)
///               %unsigned 32 I2STX1                    0x0
///                                    ###
///                                    * Sample Timestamp Register
///                                    ###
///     # 0x00348 STR1                 
///               %unsigned 32 I2STX2                    0x0
///                                    ###
///                                    * Sample Timestamp Register
///                                    ###
///     # 0x0034C STR2                 
///               %unsigned 32 SPDIFTX                   0x0
///                                    ###
///                                    * Sample Timestamp Register
///                                    ###
///     # 0x00350 STR3                 
///               %unsigned 32 SPDIFTX1                  0x0
///                                    ###
///                                    * Sample Timestamp Register.
///                                    * Reserved
///                                    ###
///     # 0x00354 STR4                 
///               %unsigned 32 HDMITX                    0x0
///                                    ###
///                                    * Sample Timestamp Register
///                                    ###
///     # 0x00358 STR5                 
///               %unsigned 32 HDMIARCTX                 0x0
///                                    ###
///                                    * Sample Timestamp Register.
///                                    * Reserved
///                                    ###
///     # 0x0035C STR6                 
///               %unsigned 32 SPDIFRX                   0x0
///                                    ###
///                                    * Sample Timestamp Register
///                                    ###
///     # 0x00360 STR7                 
///               %unsigned 32 I2SRX1                    0x0
///                                    ###
///                                    * Sample Timestamp Register
///                                    ###
///     # 0x00364 STR8                 
///               %unsigned 32 I2SRX2                    0x0
///                                    ###
///                                    * Sample Timestamp Register
///                                    ###
///     # 0x00368 STR9                 
///               %unsigned 32 I2SRX3                    0x0
///                                    ###
///                                    * Sample Timestamp Register
///                                    ###
///     # 0x0036C STR10                
///               %unsigned 32 I2SRX4                    0x0
///                                    ###
///                                    * Sample Timestamp Register
///                                    ###
///     # 0x00370 STR11                
///               %unsigned 32 I2SRX5                    0x0
///                                    ###
///                                    * Sample Timestamp Register
///                                    ###
///     # 0x00374 STR12                
///               %unsigned 32 I2SRX6                    0x0
///                                    ###
///                                    * Sample Timestamp Register
///                                    ###
///     # 0x00378 STR13                
///               %unsigned 32 PDMRX1                    0x0
///                                    ###
///                                    * Sample Timestamp Register
///                                    ###
///     # 0x0037C STR14                
///               %unsigned 32 DSDRX1                    0x0
///                                    ###
///                                    * Sample Timestamp Register
///                                    * Data information to be read by SW
///                                    ###
///     @ 0x00380 ATR                  (R-)
///               %unsigned 32 TIMER                     0x0
///                                    ###
///                                    * Audio Timer Register
///                                    * Audio Timer to be read by SW
///                                    ###
///     @ 0x00384 XFEED                (P)
///               %unsigned 2  I2S1_LRCKIO_MODE          0x1
///                                    ###
///                                    * I2S1 LRCK Input Mux Selection
///                                    * 00: Master mode and I2S1_LRCKIO_DO_FB (From core → loopback just before I2S1_LRCKIO pad → mux input)
///                                    * 01: Slave mode and I2S1_LRCKIO_DI_2mux (From I2S1_LRCKIO pad)
///                                    * 10: Cross-feed Master Mode and I2S2_LRCKIO_DO_FB (From core → loopback just before I2S2_LRCKIO pad → mux input)
///                                    * 11: Cross-feed Slave Mode and I2S2_LRCKIO_DI_2mux (From I2S2_LRCKIO pad)
///                                    ###
///               %unsigned 2  I2S1_BCLKIO_MODE          0x1
///                                    ###
///                                    * I2S1 BCLK Input Mux Selection
///                                    * 00: Master mode and I2S1_BCLKIO_DO_FB (From core → loopback just before I2S1_BCLKIO pad → mux input)
///                                    * 01: Slave mode and I2S1_BCLKIO_DI_2mux (From I2S1_BCLKIO pad)
///                                    * 10: Cross-feed Master Mode and I2S2_BCLKIO_DO_FB (From core → loopback just before I2S2_BCLKIO pad → mux input)
///                                    * 11: Cross-feed Slave Mode and I2S2_BCLKIO_DI_2mux (From I2S2_BCLKIO pad)
///                                    ###
///               %unsigned 2  I2S2_LRCKIO_MODE          0x1
///                                    ###
///                                    * I2S2 LRCK Input Mux Selection
///                                    * 00: Master mode and I2S2_LRCKIO_DO_FB (From core and loopback just before I2S2_LRCKIO pad to mux input)
///                                    * 01: Slave mode and I2S2_LRCKIO_DI_2mux (From I2S2_LRCKIO pad)
///                                    * 10: Cross-feed Master Mode and I2S1_LRCKIO_DO_FB (From core → loopback just before I2S1_LRCKIO pad → mux input)
///                                    * 11: Cross-feed Slave Mode and I2S1_LRCKIO_DI_2mux (From I2S1_LRCKIO pad)
///                                    ###
///               %unsigned 2  I2S2_BCLKIO_MODE          0x1
///                                    ###
///                                    * I2S2 BCLK Input Mux Selection
///                                    * 00: Master mode and I2S2_BCLKIO_DO_FB (From core → loopback just before I2S2_BCLKIO pad → mux input)
///                                    * 01: Slave mode and I2S2_BCLKIO_DI_2mux (From I2S2_BCLKIO pad)
///                                    * 10: Cross-feed Master Mode and I2S1_BCLKIO_DO_FB (From core → loopback just before I2S1_BCLKIO pad → mux input)
///                                    * 11: Cross-feed Slave Mode and I2S1_BCLKIO_DI_2mux (From I2S1_BCLKIO pad)
///                                    ###
///               %unsigned 1  I2S3_LRCKIO_MODE          0x1
///                                    ###
///                                    * I2S3 BCLK Input Mux Selection
///                                    * 0: Master mode and I2S3_BCLKIO_DO_FB (From core → loopback just before I2S3_BCLKIO → mux input)
///                                    * 1: Slave mode and I2S3_BCLKIO_DI_2mux (From I2S3_LRCKIO pad)
///                                    ###
///               %unsigned 1  I2S3_BCLKIO_MODE          0x1
///                                    ###
///                                    * I2S3 BCLK Input Mux Selection
///                                    * 0: Master mode and I2S3_BCLKIO_DO_FB (From core → loopback just before I2S3_BCLKIO → mux input)
///                                    * 1: Slave mode and I2S3_BCLKIO_DI_2mux (From I2S3_LRCKIO pad)
///                                    ###
///               %unsigned 3  PDM_CLK_SEL               0x1
///                                    ###
///                                    * PDM Clock Input Mux Selection
///                                    * 000: Clock A Master Mode and PDMA_CLKIO_DO_FB (From core → loopback just before I2S2_BCLKIO pad → mux input)
///                                    * 001: Clock A Slave Mode and PDMA_CLKIO_DI_2mux (From I2S2_BCLKIO pad)
///                                    * 010: Clock B Master Mode and PDMB_CLKIO_DO_FB (From core → loopback just before I2S2_MCLK pad → input of mux) 011: Clock B Slave Mode and PDMB_CLKIO_DI_2mux (From I2S2_MCLK pad)1xx: I2S2 BCLK Cross feed and I2S2_BCLKIO_DI_2module (After I2S2BCLK Final clock mux. Refer I2S2_BCLKIO_MODE mux)
///                                    ###
///               %unsigned 1  PDMC_SEL                  0x0
///                                    ###
///                                    * PDM Data Input Mux Selection
///                                    * If 1, PDM_DATA_IN[0] is connected to SPDIFI pad and PDM_DATA_IN[1] is 0
///                                    * If 0, PDM_DATA_IN[0] is connected to I2S2_DI[3] pad &
///                                    * PDM_DATA_IN[1] is connected to I2S2_DI[2] pad
///                                    * PDM_DATA_IN[3:2] connections are as per PDM_SEL description
///                                    ###
///               %unsigned 4  PDM_SEL                   0x0
///                                    ###
///                                    * 0x0: PDM_DATA_IN[2] is connected to I2S1_DO[2] pad
///                                    * PDM_DATA_IN[3] is connected to I2S1_DO[3] pad
///                                    * 0xF: PDM_DATA_IN[2] is connected to I2S2_DI[1] pad
///                                    * PDM_DATA_IN[3] is connected to I2S2_DI[0] pad
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x00388                      (P)
///     # 0x00388 DMIC_SRAMPWR         
///               $SRAMPWR             DMIC_SRAMPWR      REG          
///                                    ###
///                                    * DMIC SRAM Power Control
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     908B, bits:    3509b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_AIO
#define h_AIO (){}

    #define     RA_AIO_PRI                                     0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_SEC                                     0x002C
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_HDMI                                    0x004C
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_SPDIF                                   0x006C
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_MIC1                                    0x007C
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_MIC2                                    0x00B8
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_MIC3                                    0x00E4
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_MIC4                                    0x011C
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_MIC5                                    0x0154
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_MIC6                                    0x018C
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_DSD                                     0x01C8
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_PDM                                     0x01F0
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_DMIC_CLK                                0x0220
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_DMIC                                    0x0230
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_SPDIFRX_CTRL                            0x0258
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_SPDIFRX_STATUS                          0x0288
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_IOSEL                                   0x028C
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_EARC_SRC                                0x02BC

    #define     BA_AIO_EARC_SRC_SEL                            0x02BC
    #define     B16AIO_EARC_SRC_SEL                            0x02BC
    #define   LSb32AIO_EARC_SRC_SEL                               0
    #define   LSb16AIO_EARC_SRC_SEL                               0
    #define       bAIO_EARC_SRC_SEL                            2
    #define   MSK32AIO_EARC_SRC_SEL                               0x00000003
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_IRQENABLE                               0x02C0

    #define     BA_AIO_IRQENABLE_PRIIRQ                        0x02C0
    #define     B16AIO_IRQENABLE_PRIIRQ                        0x02C0
    #define   LSb32AIO_IRQENABLE_PRIIRQ                           0
    #define   LSb16AIO_IRQENABLE_PRIIRQ                           0
    #define       bAIO_IRQENABLE_PRIIRQ                        1
    #define   MSK32AIO_IRQENABLE_PRIIRQ                           0x00000001

    #define     BA_AIO_IRQENABLE_SECIRQ                        0x02C0
    #define     B16AIO_IRQENABLE_SECIRQ                        0x02C0
    #define   LSb32AIO_IRQENABLE_SECIRQ                           1
    #define   LSb16AIO_IRQENABLE_SECIRQ                           1
    #define       bAIO_IRQENABLE_SECIRQ                        1
    #define   MSK32AIO_IRQENABLE_SECIRQ                           0x00000002

    #define     BA_AIO_IRQENABLE_MIC1IRQ                       0x02C0
    #define     B16AIO_IRQENABLE_MIC1IRQ                       0x02C0
    #define   LSb32AIO_IRQENABLE_MIC1IRQ                          2
    #define   LSb16AIO_IRQENABLE_MIC1IRQ                          2
    #define       bAIO_IRQENABLE_MIC1IRQ                       1
    #define   MSK32AIO_IRQENABLE_MIC1IRQ                          0x00000004

    #define     BA_AIO_IRQENABLE_MIC2IRQ                       0x02C0
    #define     B16AIO_IRQENABLE_MIC2IRQ                       0x02C0
    #define   LSb32AIO_IRQENABLE_MIC2IRQ                          3
    #define   LSb16AIO_IRQENABLE_MIC2IRQ                          3
    #define       bAIO_IRQENABLE_MIC2IRQ                       1
    #define   MSK32AIO_IRQENABLE_MIC2IRQ                          0x00000008

    #define     BA_AIO_IRQENABLE_MIC3IRQ                       0x02C0
    #define     B16AIO_IRQENABLE_MIC3IRQ                       0x02C0
    #define   LSb32AIO_IRQENABLE_MIC3IRQ                          4
    #define   LSb16AIO_IRQENABLE_MIC3IRQ                          4
    #define       bAIO_IRQENABLE_MIC3IRQ                       1
    #define   MSK32AIO_IRQENABLE_MIC3IRQ                          0x00000010

    #define     BA_AIO_IRQENABLE_MIC4IRQ                       0x02C0
    #define     B16AIO_IRQENABLE_MIC4IRQ                       0x02C0
    #define   LSb32AIO_IRQENABLE_MIC4IRQ                          5
    #define   LSb16AIO_IRQENABLE_MIC4IRQ                          5
    #define       bAIO_IRQENABLE_MIC4IRQ                       1
    #define   MSK32AIO_IRQENABLE_MIC4IRQ                          0x00000020

    #define     BA_AIO_IRQENABLE_MIC5IRQ                       0x02C0
    #define     B16AIO_IRQENABLE_MIC5IRQ                       0x02C0
    #define   LSb32AIO_IRQENABLE_MIC5IRQ                          6
    #define   LSb16AIO_IRQENABLE_MIC5IRQ                          6
    #define       bAIO_IRQENABLE_MIC5IRQ                       1
    #define   MSK32AIO_IRQENABLE_MIC5IRQ                          0x00000040

    #define     BA_AIO_IRQENABLE_MIC6IRQ                       0x02C0
    #define     B16AIO_IRQENABLE_MIC6IRQ                       0x02C0
    #define   LSb32AIO_IRQENABLE_MIC6IRQ                          7
    #define   LSb16AIO_IRQENABLE_MIC6IRQ                          7
    #define       bAIO_IRQENABLE_MIC6IRQ                       1
    #define   MSK32AIO_IRQENABLE_MIC6IRQ                          0x00000080

    #define     BA_AIO_IRQENABLE_SPDIFIRQ                      0x02C1
    #define     B16AIO_IRQENABLE_SPDIFIRQ                      0x02C0
    #define   LSb32AIO_IRQENABLE_SPDIFIRQ                         8
    #define   LSb16AIO_IRQENABLE_SPDIFIRQ                         8
    #define       bAIO_IRQENABLE_SPDIFIRQ                      1
    #define   MSK32AIO_IRQENABLE_SPDIFIRQ                         0x00000100

    #define     BA_AIO_IRQENABLE_SPDIF1IRQ                     0x02C1
    #define     B16AIO_IRQENABLE_SPDIF1IRQ                     0x02C0
    #define   LSb32AIO_IRQENABLE_SPDIF1IRQ                        9
    #define   LSb16AIO_IRQENABLE_SPDIF1IRQ                        9
    #define       bAIO_IRQENABLE_SPDIF1IRQ                     1
    #define   MSK32AIO_IRQENABLE_SPDIF1IRQ                        0x00000200

    #define     BA_AIO_IRQENABLE_HDMIIRQ                       0x02C1
    #define     B16AIO_IRQENABLE_HDMIIRQ                       0x02C0
    #define   LSb32AIO_IRQENABLE_HDMIIRQ                          10
    #define   LSb16AIO_IRQENABLE_HDMIIRQ                          10
    #define       bAIO_IRQENABLE_HDMIIRQ                       1
    #define   MSK32AIO_IRQENABLE_HDMIIRQ                          0x00000400

    #define     BA_AIO_IRQENABLE_PDMIRQ                        0x02C1
    #define     B16AIO_IRQENABLE_PDMIRQ                        0x02C0
    #define   LSb32AIO_IRQENABLE_PDMIRQ                           11
    #define   LSb16AIO_IRQENABLE_PDMIRQ                           11
    #define       bAIO_IRQENABLE_PDMIRQ                        1
    #define   MSK32AIO_IRQENABLE_PDMIRQ                           0x00000800

    #define     BA_AIO_IRQENABLE_DSDIRQ                        0x02C1
    #define     B16AIO_IRQENABLE_DSDIRQ                        0x02C0
    #define   LSb32AIO_IRQENABLE_DSDIRQ                           12
    #define   LSb16AIO_IRQENABLE_DSDIRQ                           12
    #define       bAIO_IRQENABLE_DSDIRQ                        1
    #define   MSK32AIO_IRQENABLE_DSDIRQ                           0x00001000

    #define     BA_AIO_IRQENABLE_SPDIFRXIRQ                    0x02C1
    #define     B16AIO_IRQENABLE_SPDIFRXIRQ                    0x02C0
    #define   LSb32AIO_IRQENABLE_SPDIFRXIRQ                       13
    #define   LSb16AIO_IRQENABLE_SPDIFRXIRQ                       13
    #define       bAIO_IRQENABLE_SPDIFRXIRQ                    1
    #define   MSK32AIO_IRQENABLE_SPDIFRXIRQ                       0x00002000

    #define     BA_AIO_IRQENABLE_DMICIRQ                       0x02C1
    #define     B16AIO_IRQENABLE_DMICIRQ                       0x02C0
    #define   LSb32AIO_IRQENABLE_DMICIRQ                          14
    #define   LSb16AIO_IRQENABLE_DMICIRQ                          14
    #define       bAIO_IRQENABLE_DMICIRQ                       1
    #define   MSK32AIO_IRQENABLE_DMICIRQ                          0x00004000
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_IRQSTS                                  0x02C4

    #define     BA_AIO_IRQSTS_PRISTS                           0x02C4
    #define     B16AIO_IRQSTS_PRISTS                           0x02C4
    #define   LSb32AIO_IRQSTS_PRISTS                              0
    #define   LSb16AIO_IRQSTS_PRISTS                              0
    #define       bAIO_IRQSTS_PRISTS                           1
    #define   MSK32AIO_IRQSTS_PRISTS                              0x00000001

    #define     BA_AIO_IRQSTS_SECSTS                           0x02C4
    #define     B16AIO_IRQSTS_SECSTS                           0x02C4
    #define   LSb32AIO_IRQSTS_SECSTS                              1
    #define   LSb16AIO_IRQSTS_SECSTS                              1
    #define       bAIO_IRQSTS_SECSTS                           1
    #define   MSK32AIO_IRQSTS_SECSTS                              0x00000002

    #define     BA_AIO_IRQSTS_MIC1STS                          0x02C4
    #define     B16AIO_IRQSTS_MIC1STS                          0x02C4
    #define   LSb32AIO_IRQSTS_MIC1STS                             2
    #define   LSb16AIO_IRQSTS_MIC1STS                             2
    #define       bAIO_IRQSTS_MIC1STS                          1
    #define   MSK32AIO_IRQSTS_MIC1STS                             0x00000004

    #define     BA_AIO_IRQSTS_MIC2STS                          0x02C4
    #define     B16AIO_IRQSTS_MIC2STS                          0x02C4
    #define   LSb32AIO_IRQSTS_MIC2STS                             3
    #define   LSb16AIO_IRQSTS_MIC2STS                             3
    #define       bAIO_IRQSTS_MIC2STS                          1
    #define   MSK32AIO_IRQSTS_MIC2STS                             0x00000008

    #define     BA_AIO_IRQSTS_MIC3STS                          0x02C4
    #define     B16AIO_IRQSTS_MIC3STS                          0x02C4
    #define   LSb32AIO_IRQSTS_MIC3STS                             4
    #define   LSb16AIO_IRQSTS_MIC3STS                             4
    #define       bAIO_IRQSTS_MIC3STS                          1
    #define   MSK32AIO_IRQSTS_MIC3STS                             0x00000010

    #define     BA_AIO_IRQSTS_MIC4STS                          0x02C4
    #define     B16AIO_IRQSTS_MIC4STS                          0x02C4
    #define   LSb32AIO_IRQSTS_MIC4STS                             5
    #define   LSb16AIO_IRQSTS_MIC4STS                             5
    #define       bAIO_IRQSTS_MIC4STS                          1
    #define   MSK32AIO_IRQSTS_MIC4STS                             0x00000020

    #define     BA_AIO_IRQSTS_MIC5STS                          0x02C4
    #define     B16AIO_IRQSTS_MIC5STS                          0x02C4
    #define   LSb32AIO_IRQSTS_MIC5STS                             6
    #define   LSb16AIO_IRQSTS_MIC5STS                             6
    #define       bAIO_IRQSTS_MIC5STS                          1
    #define   MSK32AIO_IRQSTS_MIC5STS                             0x00000040

    #define     BA_AIO_IRQSTS_MIC6STS                          0x02C4
    #define     B16AIO_IRQSTS_MIC6STS                          0x02C4
    #define   LSb32AIO_IRQSTS_MIC6STS                             7
    #define   LSb16AIO_IRQSTS_MIC6STS                             7
    #define       bAIO_IRQSTS_MIC6STS                          1
    #define   MSK32AIO_IRQSTS_MIC6STS                             0x00000080

    #define     BA_AIO_IRQSTS_SPDIFSTS                         0x02C5
    #define     B16AIO_IRQSTS_SPDIFSTS                         0x02C4
    #define   LSb32AIO_IRQSTS_SPDIFSTS                            8
    #define   LSb16AIO_IRQSTS_SPDIFSTS                            8
    #define       bAIO_IRQSTS_SPDIFSTS                         1
    #define   MSK32AIO_IRQSTS_SPDIFSTS                            0x00000100

    #define     BA_AIO_IRQSTS_SPDIF1STS                        0x02C5
    #define     B16AIO_IRQSTS_SPDIF1STS                        0x02C4
    #define   LSb32AIO_IRQSTS_SPDIF1STS                           9
    #define   LSb16AIO_IRQSTS_SPDIF1STS                           9
    #define       bAIO_IRQSTS_SPDIF1STS                        1
    #define   MSK32AIO_IRQSTS_SPDIF1STS                           0x00000200

    #define     BA_AIO_IRQSTS_HDMISTS                          0x02C5
    #define     B16AIO_IRQSTS_HDMISTS                          0x02C4
    #define   LSb32AIO_IRQSTS_HDMISTS                             10
    #define   LSb16AIO_IRQSTS_HDMISTS                             10
    #define       bAIO_IRQSTS_HDMISTS                          1
    #define   MSK32AIO_IRQSTS_HDMISTS                             0x00000400

    #define     BA_AIO_IRQSTS_PDMSTS                           0x02C5
    #define     B16AIO_IRQSTS_PDMSTS                           0x02C4
    #define   LSb32AIO_IRQSTS_PDMSTS                              11
    #define   LSb16AIO_IRQSTS_PDMSTS                              11
    #define       bAIO_IRQSTS_PDMSTS                           1
    #define   MSK32AIO_IRQSTS_PDMSTS                              0x00000800

    #define     BA_AIO_IRQSTS_DSDSTS                           0x02C5
    #define     B16AIO_IRQSTS_DSDSTS                           0x02C4
    #define   LSb32AIO_IRQSTS_DSDSTS                              12
    #define   LSb16AIO_IRQSTS_DSDSTS                              12
    #define       bAIO_IRQSTS_DSDSTS                           1
    #define   MSK32AIO_IRQSTS_DSDSTS                              0x00001000

    #define     BA_AIO_IRQSTS_SPDIFRXSTS                       0x02C5
    #define     B16AIO_IRQSTS_SPDIFRXSTS                       0x02C4
    #define   LSb32AIO_IRQSTS_SPDIFRXSTS                          13
    #define   LSb16AIO_IRQSTS_SPDIFRXSTS                          13
    #define       bAIO_IRQSTS_SPDIFRXSTS                       1
    #define   MSK32AIO_IRQSTS_SPDIFRXSTS                          0x00002000

    #define     BA_AIO_IRQSTS_DMICSTS                          0x02C5
    #define     B16AIO_IRQSTS_DMICSTS                          0x02C4
    #define   LSb32AIO_IRQSTS_DMICSTS                             14
    #define   LSb16AIO_IRQSTS_DMICSTS                             14
    #define       bAIO_IRQSTS_DMICSTS                          1
    #define   MSK32AIO_IRQSTS_DMICSTS                             0x00004000
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_PRISRC                                  0x02C8

    #define     BA_AIO_PRISRC_SEL                              0x02C8
    #define     B16AIO_PRISRC_SEL                              0x02C8
    #define   LSb32AIO_PRISRC_SEL                                 0
    #define   LSb16AIO_PRISRC_SEL                                 0
    #define       bAIO_PRISRC_SEL                              2
    #define   MSK32AIO_PRISRC_SEL                                 0x00000003

    #define     BA_AIO_PRISRC_L0DATAMAP                        0x02C8
    #define     B16AIO_PRISRC_L0DATAMAP                        0x02C8
    #define   LSb32AIO_PRISRC_L0DATAMAP                           2
    #define   LSb16AIO_PRISRC_L0DATAMAP                           2
    #define       bAIO_PRISRC_L0DATAMAP                        2
    #define   MSK32AIO_PRISRC_L0DATAMAP                           0x0000000C

    #define     BA_AIO_PRISRC_L1DATAMAP                        0x02C8
    #define     B16AIO_PRISRC_L1DATAMAP                        0x02C8
    #define   LSb32AIO_PRISRC_L1DATAMAP                           4
    #define   LSb16AIO_PRISRC_L1DATAMAP                           4
    #define       bAIO_PRISRC_L1DATAMAP                        2
    #define   MSK32AIO_PRISRC_L1DATAMAP                           0x00000030

    #define     BA_AIO_PRISRC_L2DATAMAP                        0x02C8
    #define     B16AIO_PRISRC_L2DATAMAP                        0x02C8
    #define   LSb32AIO_PRISRC_L2DATAMAP                           6
    #define   LSb16AIO_PRISRC_L2DATAMAP                           6
    #define       bAIO_PRISRC_L2DATAMAP                        2
    #define   MSK32AIO_PRISRC_L2DATAMAP                           0x000000C0

    #define     BA_AIO_PRISRC_L3DATAMAP                        0x02C9
    #define     B16AIO_PRISRC_L3DATAMAP                        0x02C8
    #define   LSb32AIO_PRISRC_L3DATAMAP                           8
    #define   LSb16AIO_PRISRC_L3DATAMAP                           8
    #define       bAIO_PRISRC_L3DATAMAP                        2
    #define   MSK32AIO_PRISRC_L3DATAMAP                           0x00000300

    #define     BA_AIO_PRISRC_SLAVEMODE                        0x02C9
    #define     B16AIO_PRISRC_SLAVEMODE                        0x02C8
    #define   LSb32AIO_PRISRC_SLAVEMODE                           10
    #define   LSb16AIO_PRISRC_SLAVEMODE                           10
    #define       bAIO_PRISRC_SLAVEMODE                        1
    #define   MSK32AIO_PRISRC_SLAVEMODE                           0x00000400
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_SECSRC                                  0x02CC

    #define     BA_AIO_SECSRC_SEL                              0x02CC
    #define     B16AIO_SECSRC_SEL                              0x02CC
    #define   LSb32AIO_SECSRC_SEL                                 0
    #define   LSb16AIO_SECSRC_SEL                                 0
    #define       bAIO_SECSRC_SEL                              2
    #define   MSK32AIO_SECSRC_SEL                                 0x00000003

    #define     BA_AIO_SECSRC_L0DATAMAP                        0x02CC
    #define     B16AIO_SECSRC_L0DATAMAP                        0x02CC
    #define   LSb32AIO_SECSRC_L0DATAMAP                           2
    #define   LSb16AIO_SECSRC_L0DATAMAP                           2
    #define       bAIO_SECSRC_L0DATAMAP                        2
    #define   MSK32AIO_SECSRC_L0DATAMAP                           0x0000000C

    #define     BA_AIO_SECSRC_L1DATAMAP                        0x02CC
    #define     B16AIO_SECSRC_L1DATAMAP                        0x02CC
    #define   LSb32AIO_SECSRC_L1DATAMAP                           4
    #define   LSb16AIO_SECSRC_L1DATAMAP                           4
    #define       bAIO_SECSRC_L1DATAMAP                        2
    #define   MSK32AIO_SECSRC_L1DATAMAP                           0x00000030

    #define     BA_AIO_SECSRC_L2DATAMAP                        0x02CC
    #define     B16AIO_SECSRC_L2DATAMAP                        0x02CC
    #define   LSb32AIO_SECSRC_L2DATAMAP                           6
    #define   LSb16AIO_SECSRC_L2DATAMAP                           6
    #define       bAIO_SECSRC_L2DATAMAP                        2
    #define   MSK32AIO_SECSRC_L2DATAMAP                           0x000000C0

    #define     BA_AIO_SECSRC_L3DATAMAP                        0x02CD
    #define     B16AIO_SECSRC_L3DATAMAP                        0x02CC
    #define   LSb32AIO_SECSRC_L3DATAMAP                           8
    #define   LSb16AIO_SECSRC_L3DATAMAP                           8
    #define       bAIO_SECSRC_L3DATAMAP                        2
    #define   MSK32AIO_SECSRC_L3DATAMAP                           0x00000300

    #define     BA_AIO_SECSRC_SLAVEMODE                        0x02CD
    #define     B16AIO_SECSRC_SLAVEMODE                        0x02CC
    #define   LSb32AIO_SECSRC_SLAVEMODE                           10
    #define   LSb16AIO_SECSRC_SLAVEMODE                           10
    #define       bAIO_SECSRC_SLAVEMODE                        1
    #define   MSK32AIO_SECSRC_SLAVEMODE                           0x00000400
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_HDSRC                                   0x02D0

    #define     BA_AIO_HDSRC_SEL                               0x02D0
    #define     B16AIO_HDSRC_SEL                               0x02D0
    #define   LSb32AIO_HDSRC_SEL                                  0
    #define   LSb16AIO_HDSRC_SEL                                  0
    #define       bAIO_HDSRC_SEL                               2
    #define   MSK32AIO_HDSRC_SEL                                  0x00000003
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_PDM_MIC_SEL                             0x02D4

    #define     BA_AIO_PDM_MIC_SEL_CTRL                        0x02D4
    #define     B16AIO_PDM_MIC_SEL_CTRL                        0x02D4
    #define   LSb32AIO_PDM_MIC_SEL_CTRL                           0
    #define   LSb16AIO_PDM_MIC_SEL_CTRL                           0
    #define       bAIO_PDM_MIC_SEL_CTRL                        4
    #define   MSK32AIO_PDM_MIC_SEL_CTRL                           0x0000000F
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_MCLKPRI                                 0x02D8
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_MCLKSEC                                 0x02DC
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_MCLKHD                                  0x02E0
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_MCLKSPF                                 0x02E4
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_MCLKPDM                                 0x02E8
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_MCLKMIC1                                0x02EC
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_MCLKMIC2                                0x02F0
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_SW_RST                                  0x02F4

    #define     BA_AIO_SW_RST_SPFRX                            0x02F4
    #define     B16AIO_SW_RST_SPFRX                            0x02F4
    #define   LSb32AIO_SW_RST_SPFRX                               0
    #define   LSb16AIO_SW_RST_SPFRX                               0
    #define       bAIO_SW_RST_SPFRX                            1
    #define   MSK32AIO_SW_RST_SPFRX                               0x00000001

    #define     BA_AIO_SW_RST_REFCLK                           0x02F4
    #define     B16AIO_SW_RST_REFCLK                           0x02F4
    #define   LSb32AIO_SW_RST_REFCLK                              1
    #define   LSb16AIO_SW_RST_REFCLK                              1
    #define       bAIO_SW_RST_REFCLK                           1
    #define   MSK32AIO_SW_RST_REFCLK                              0x00000002

    #define     BA_AIO_SW_RST_MIC3                             0x02F4
    #define     B16AIO_SW_RST_MIC3                             0x02F4
    #define   LSb32AIO_SW_RST_MIC3                                2
    #define   LSb16AIO_SW_RST_MIC3                                2
    #define       bAIO_SW_RST_MIC3                             1
    #define   MSK32AIO_SW_RST_MIC3                                0x00000004

    #define     BA_AIO_SW_RST_MIC4                             0x02F4
    #define     B16AIO_SW_RST_MIC4                             0x02F4
    #define   LSb32AIO_SW_RST_MIC4                                3
    #define   LSb16AIO_SW_RST_MIC4                                3
    #define       bAIO_SW_RST_MIC4                             1
    #define   MSK32AIO_SW_RST_MIC4                                0x00000008

    #define     BA_AIO_SW_RST_MIC5                             0x02F4
    #define     B16AIO_SW_RST_MIC5                             0x02F4
    #define   LSb32AIO_SW_RST_MIC5                                4
    #define   LSb16AIO_SW_RST_MIC5                                4
    #define       bAIO_SW_RST_MIC5                             1
    #define   MSK32AIO_SW_RST_MIC5                                0x00000010

    #define     BA_AIO_SW_RST_MIC6                             0x02F4
    #define     B16AIO_SW_RST_MIC6                             0x02F4
    #define   LSb32AIO_SW_RST_MIC6                                5
    #define   LSb16AIO_SW_RST_MIC6                                5
    #define       bAIO_SW_RST_MIC6                             1
    #define   MSK32AIO_SW_RST_MIC6                                0x00000020
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_CLK_GATE_EN                             0x02F8

    #define     BA_AIO_CLK_GATE_EN_MIC3                        0x02F8
    #define     B16AIO_CLK_GATE_EN_MIC3                        0x02F8
    #define   LSb32AIO_CLK_GATE_EN_MIC3                           0
    #define   LSb16AIO_CLK_GATE_EN_MIC3                           0
    #define       bAIO_CLK_GATE_EN_MIC3                        1
    #define   MSK32AIO_CLK_GATE_EN_MIC3                           0x00000001

    #define     BA_AIO_CLK_GATE_EN_MIC4                        0x02F8
    #define     B16AIO_CLK_GATE_EN_MIC4                        0x02F8
    #define   LSb32AIO_CLK_GATE_EN_MIC4                           1
    #define   LSb16AIO_CLK_GATE_EN_MIC4                           1
    #define       bAIO_CLK_GATE_EN_MIC4                        1
    #define   MSK32AIO_CLK_GATE_EN_MIC4                           0x00000002

    #define     BA_AIO_CLK_GATE_EN_MIC5                        0x02F8
    #define     B16AIO_CLK_GATE_EN_MIC5                        0x02F8
    #define   LSb32AIO_CLK_GATE_EN_MIC5                           2
    #define   LSb16AIO_CLK_GATE_EN_MIC5                           2
    #define       bAIO_CLK_GATE_EN_MIC5                        1
    #define   MSK32AIO_CLK_GATE_EN_MIC5                           0x00000004

    #define     BA_AIO_CLK_GATE_EN_MIC6                        0x02F8
    #define     B16AIO_CLK_GATE_EN_MIC6                        0x02F8
    #define   LSb32AIO_CLK_GATE_EN_MIC6                           3
    #define   LSb16AIO_CLK_GATE_EN_MIC6                           3
    #define       bAIO_CLK_GATE_EN_MIC6                        1
    #define   MSK32AIO_CLK_GATE_EN_MIC6                           0x00000008

    #define     BA_AIO_CLK_GATE_EN_DSD                         0x02F8
    #define     B16AIO_CLK_GATE_EN_DSD                         0x02F8
    #define   LSb32AIO_CLK_GATE_EN_DSD                            4
    #define   LSb16AIO_CLK_GATE_EN_DSD                            4
    #define       bAIO_CLK_GATE_EN_DSD                         1
    #define   MSK32AIO_CLK_GATE_EN_DSD                            0x00000010

    #define     BA_AIO_CLK_GATE_EN_GBL                         0x02F8
    #define     B16AIO_CLK_GATE_EN_GBL                         0x02F8
    #define   LSb32AIO_CLK_GATE_EN_GBL                            5
    #define   LSb16AIO_CLK_GATE_EN_GBL                            5
    #define       bAIO_CLK_GATE_EN_GBL                         1
    #define   MSK32AIO_CLK_GATE_EN_GBL                            0x00000020
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_EARC_ARC                                0x02FC

    #define     BA_AIO_EARC_ARC_SEL                            0x02FC
    #define     B16AIO_EARC_ARC_SEL                            0x02FC
    #define   LSb32AIO_EARC_ARC_SEL                               0
    #define   LSb16AIO_EARC_ARC_SEL                               0
    #define       bAIO_EARC_ARC_SEL                            1
    #define   MSK32AIO_EARC_ARC_SEL                               0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_SAMP_CTRL                               0x0300

    #define     BA_AIO_SAMP_CTRL_EN_I2STX1                     0x0300
    #define     B16AIO_SAMP_CTRL_EN_I2STX1                     0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_I2STX1                        0
    #define   LSb16AIO_SAMP_CTRL_EN_I2STX1                        0
    #define       bAIO_SAMP_CTRL_EN_I2STX1                     1
    #define   MSK32AIO_SAMP_CTRL_EN_I2STX1                        0x00000001

    #define     BA_AIO_SAMP_CTRL_EN_I2STX2                     0x0300
    #define     B16AIO_SAMP_CTRL_EN_I2STX2                     0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_I2STX2                        1
    #define   LSb16AIO_SAMP_CTRL_EN_I2STX2                        1
    #define       bAIO_SAMP_CTRL_EN_I2STX2                     1
    #define   MSK32AIO_SAMP_CTRL_EN_I2STX2                        0x00000002

    #define     BA_AIO_SAMP_CTRL_EN_SPDIFTX                    0x0300
    #define     B16AIO_SAMP_CTRL_EN_SPDIFTX                    0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_SPDIFTX                       2
    #define   LSb16AIO_SAMP_CTRL_EN_SPDIFTX                       2
    #define       bAIO_SAMP_CTRL_EN_SPDIFTX                    1
    #define   MSK32AIO_SAMP_CTRL_EN_SPDIFTX                       0x00000004

    #define     BA_AIO_SAMP_CTRL_EN_SPDIFTX1                   0x0300
    #define     B16AIO_SAMP_CTRL_EN_SPDIFTX1                   0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_SPDIFTX1                      3
    #define   LSb16AIO_SAMP_CTRL_EN_SPDIFTX1                      3
    #define       bAIO_SAMP_CTRL_EN_SPDIFTX1                   1
    #define   MSK32AIO_SAMP_CTRL_EN_SPDIFTX1                      0x00000008

    #define     BA_AIO_SAMP_CTRL_EN_HDMI                       0x0300
    #define     B16AIO_SAMP_CTRL_EN_HDMI                       0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_HDMI                          4
    #define   LSb16AIO_SAMP_CTRL_EN_HDMI                          4
    #define       bAIO_SAMP_CTRL_EN_HDMI                       1
    #define   MSK32AIO_SAMP_CTRL_EN_HDMI                          0x00000010

    #define     BA_AIO_SAMP_CTRL_EN_HDMIARCTX                  0x0300
    #define     B16AIO_SAMP_CTRL_EN_HDMIARCTX                  0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_HDMIARCTX                     5
    #define   LSb16AIO_SAMP_CTRL_EN_HDMIARCTX                     5
    #define       bAIO_SAMP_CTRL_EN_HDMIARCTX                  1
    #define   MSK32AIO_SAMP_CTRL_EN_HDMIARCTX                     0x00000020

    #define     BA_AIO_SAMP_CTRL_EN_SPDIFRX                    0x0300
    #define     B16AIO_SAMP_CTRL_EN_SPDIFRX                    0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_SPDIFRX                       6
    #define   LSb16AIO_SAMP_CTRL_EN_SPDIFRX                       6
    #define       bAIO_SAMP_CTRL_EN_SPDIFRX                    1
    #define   MSK32AIO_SAMP_CTRL_EN_SPDIFRX                       0x00000040

    #define     BA_AIO_SAMP_CTRL_EN_I2SRX1                     0x0300
    #define     B16AIO_SAMP_CTRL_EN_I2SRX1                     0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_I2SRX1                        7
    #define   LSb16AIO_SAMP_CTRL_EN_I2SRX1                        7
    #define       bAIO_SAMP_CTRL_EN_I2SRX1                     1
    #define   MSK32AIO_SAMP_CTRL_EN_I2SRX1                        0x00000080

    #define     BA_AIO_SAMP_CTRL_EN_I2SRX2                     0x0301
    #define     B16AIO_SAMP_CTRL_EN_I2SRX2                     0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_I2SRX2                        8
    #define   LSb16AIO_SAMP_CTRL_EN_I2SRX2                        8
    #define       bAIO_SAMP_CTRL_EN_I2SRX2                     1
    #define   MSK32AIO_SAMP_CTRL_EN_I2SRX2                        0x00000100

    #define     BA_AIO_SAMP_CTRL_EN_I2SRX3                     0x0301
    #define     B16AIO_SAMP_CTRL_EN_I2SRX3                     0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_I2SRX3                        9
    #define   LSb16AIO_SAMP_CTRL_EN_I2SRX3                        9
    #define       bAIO_SAMP_CTRL_EN_I2SRX3                     1
    #define   MSK32AIO_SAMP_CTRL_EN_I2SRX3                        0x00000200

    #define     BA_AIO_SAMP_CTRL_EN_I2SRX4                     0x0301
    #define     B16AIO_SAMP_CTRL_EN_I2SRX4                     0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_I2SRX4                        10
    #define   LSb16AIO_SAMP_CTRL_EN_I2SRX4                        10
    #define       bAIO_SAMP_CTRL_EN_I2SRX4                     1
    #define   MSK32AIO_SAMP_CTRL_EN_I2SRX4                        0x00000400

    #define     BA_AIO_SAMP_CTRL_EN_I2SRX5                     0x0301
    #define     B16AIO_SAMP_CTRL_EN_I2SRX5                     0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_I2SRX5                        11
    #define   LSb16AIO_SAMP_CTRL_EN_I2SRX5                        11
    #define       bAIO_SAMP_CTRL_EN_I2SRX5                     1
    #define   MSK32AIO_SAMP_CTRL_EN_I2SRX5                        0x00000800

    #define     BA_AIO_SAMP_CTRL_EN_I2SRX6                     0x0301
    #define     B16AIO_SAMP_CTRL_EN_I2SRX6                     0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_I2SRX6                        12
    #define   LSb16AIO_SAMP_CTRL_EN_I2SRX6                        12
    #define       bAIO_SAMP_CTRL_EN_I2SRX6                     1
    #define   MSK32AIO_SAMP_CTRL_EN_I2SRX6                        0x00001000

    #define     BA_AIO_SAMP_CTRL_EN_AUDTIMER                   0x0301
    #define     B16AIO_SAMP_CTRL_EN_AUDTIMER                   0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_AUDTIMER                      13
    #define   LSb16AIO_SAMP_CTRL_EN_AUDTIMER                      13
    #define       bAIO_SAMP_CTRL_EN_AUDTIMER                   1
    #define   MSK32AIO_SAMP_CTRL_EN_AUDTIMER                      0x00002000

    #define     BA_AIO_SAMP_CTRL_EN_PDMRX1                     0x0301
    #define     B16AIO_SAMP_CTRL_EN_PDMRX1                     0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_PDMRX1                        14
    #define   LSb16AIO_SAMP_CTRL_EN_PDMRX1                        14
    #define       bAIO_SAMP_CTRL_EN_PDMRX1                     1
    #define   MSK32AIO_SAMP_CTRL_EN_PDMRX1                        0x00004000

    #define     BA_AIO_SAMP_CTRL_EN_DSDRX1                     0x0301
    #define     B16AIO_SAMP_CTRL_EN_DSDRX1                     0x0300
    #define   LSb32AIO_SAMP_CTRL_EN_DSDRX1                        15
    #define   LSb16AIO_SAMP_CTRL_EN_DSDRX1                        15
    #define       bAIO_SAMP_CTRL_EN_DSDRX1                     1
    #define   MSK32AIO_SAMP_CTRL_EN_DSDRX1                        0x00008000
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_SAMPINFO_REQ                            0x0304

    #define     BA_AIO_SAMPINFO_REQ_I2STX1                     0x0304
    #define     B16AIO_SAMPINFO_REQ_I2STX1                     0x0304
    #define   LSb32AIO_SAMPINFO_REQ_I2STX1                        0
    #define   LSb16AIO_SAMPINFO_REQ_I2STX1                        0
    #define       bAIO_SAMPINFO_REQ_I2STX1                     1
    #define   MSK32AIO_SAMPINFO_REQ_I2STX1                        0x00000001

    #define     BA_AIO_SAMPINFO_REQ_I2STX2                     0x0304
    #define     B16AIO_SAMPINFO_REQ_I2STX2                     0x0304
    #define   LSb32AIO_SAMPINFO_REQ_I2STX2                        1
    #define   LSb16AIO_SAMPINFO_REQ_I2STX2                        1
    #define       bAIO_SAMPINFO_REQ_I2STX2                     1
    #define   MSK32AIO_SAMPINFO_REQ_I2STX2                        0x00000002

    #define     BA_AIO_SAMPINFO_REQ_HDMITX                     0x0304
    #define     B16AIO_SAMPINFO_REQ_HDMITX                     0x0304
    #define   LSb32AIO_SAMPINFO_REQ_HDMITX                        2
    #define   LSb16AIO_SAMPINFO_REQ_HDMITX                        2
    #define       bAIO_SAMPINFO_REQ_HDMITX                     1
    #define   MSK32AIO_SAMPINFO_REQ_HDMITX                        0x00000004

    #define     BA_AIO_SAMPINFO_REQ_HDMIARCTX                  0x0304
    #define     B16AIO_SAMPINFO_REQ_HDMIARCTX                  0x0304
    #define   LSb32AIO_SAMPINFO_REQ_HDMIARCTX                     3
    #define   LSb16AIO_SAMPINFO_REQ_HDMIARCTX                     3
    #define       bAIO_SAMPINFO_REQ_HDMIARCTX                  1
    #define   MSK32AIO_SAMPINFO_REQ_HDMIARCTX                     0x00000008

    #define     BA_AIO_SAMPINFO_REQ_SPDIFTX                    0x0304
    #define     B16AIO_SAMPINFO_REQ_SPDIFTX                    0x0304
    #define   LSb32AIO_SAMPINFO_REQ_SPDIFTX                       4
    #define   LSb16AIO_SAMPINFO_REQ_SPDIFTX                       4
    #define       bAIO_SAMPINFO_REQ_SPDIFTX                    1
    #define   MSK32AIO_SAMPINFO_REQ_SPDIFTX                       0x00000010

    #define     BA_AIO_SAMPINFO_REQ_SPDIFTX1                   0x0304
    #define     B16AIO_SAMPINFO_REQ_SPDIFTX1                   0x0304
    #define   LSb32AIO_SAMPINFO_REQ_SPDIFTX1                      5
    #define   LSb16AIO_SAMPINFO_REQ_SPDIFTX1                      5
    #define       bAIO_SAMPINFO_REQ_SPDIFTX1                   1
    #define   MSK32AIO_SAMPINFO_REQ_SPDIFTX1                      0x00000020

    #define     BA_AIO_SAMPINFO_REQ_SPDIFRX                    0x0304
    #define     B16AIO_SAMPINFO_REQ_SPDIFRX                    0x0304
    #define   LSb32AIO_SAMPINFO_REQ_SPDIFRX                       6
    #define   LSb16AIO_SAMPINFO_REQ_SPDIFRX                       6
    #define       bAIO_SAMPINFO_REQ_SPDIFRX                    1
    #define   MSK32AIO_SAMPINFO_REQ_SPDIFRX                       0x00000040

    #define     BA_AIO_SAMPINFO_REQ_I2SRX1                     0x0304
    #define     B16AIO_SAMPINFO_REQ_I2SRX1                     0x0304
    #define   LSb32AIO_SAMPINFO_REQ_I2SRX1                        7
    #define   LSb16AIO_SAMPINFO_REQ_I2SRX1                        7
    #define       bAIO_SAMPINFO_REQ_I2SRX1                     1
    #define   MSK32AIO_SAMPINFO_REQ_I2SRX1                        0x00000080

    #define     BA_AIO_SAMPINFO_REQ_I2SRX2                     0x0305
    #define     B16AIO_SAMPINFO_REQ_I2SRX2                     0x0304
    #define   LSb32AIO_SAMPINFO_REQ_I2SRX2                        8
    #define   LSb16AIO_SAMPINFO_REQ_I2SRX2                        8
    #define       bAIO_SAMPINFO_REQ_I2SRX2                     1
    #define   MSK32AIO_SAMPINFO_REQ_I2SRX2                        0x00000100

    #define     BA_AIO_SAMPINFO_REQ_I2SRX3                     0x0305
    #define     B16AIO_SAMPINFO_REQ_I2SRX3                     0x0304
    #define   LSb32AIO_SAMPINFO_REQ_I2SRX3                        9
    #define   LSb16AIO_SAMPINFO_REQ_I2SRX3                        9
    #define       bAIO_SAMPINFO_REQ_I2SRX3                     1
    #define   MSK32AIO_SAMPINFO_REQ_I2SRX3                        0x00000200

    #define     BA_AIO_SAMPINFO_REQ_I2SRX4                     0x0305
    #define     B16AIO_SAMPINFO_REQ_I2SRX4                     0x0304
    #define   LSb32AIO_SAMPINFO_REQ_I2SRX4                        10
    #define   LSb16AIO_SAMPINFO_REQ_I2SRX4                        10
    #define       bAIO_SAMPINFO_REQ_I2SRX4                     1
    #define   MSK32AIO_SAMPINFO_REQ_I2SRX4                        0x00000400

    #define     BA_AIO_SAMPINFO_REQ_I2SRX5                     0x0305
    #define     B16AIO_SAMPINFO_REQ_I2SRX5                     0x0304
    #define   LSb32AIO_SAMPINFO_REQ_I2SRX5                        11
    #define   LSb16AIO_SAMPINFO_REQ_I2SRX5                        11
    #define       bAIO_SAMPINFO_REQ_I2SRX5                     1
    #define   MSK32AIO_SAMPINFO_REQ_I2SRX5                        0x00000800

    #define     BA_AIO_SAMPINFO_REQ_I2SRX6                     0x0305
    #define     B16AIO_SAMPINFO_REQ_I2SRX6                     0x0304
    #define   LSb32AIO_SAMPINFO_REQ_I2SRX6                        12
    #define   LSb16AIO_SAMPINFO_REQ_I2SRX6                        12
    #define       bAIO_SAMPINFO_REQ_I2SRX6                     1
    #define   MSK32AIO_SAMPINFO_REQ_I2SRX6                        0x00001000

    #define     BA_AIO_SAMPINFO_REQ_PDMRX1                     0x0305
    #define     B16AIO_SAMPINFO_REQ_PDMRX1                     0x0304
    #define   LSb32AIO_SAMPINFO_REQ_PDMRX1                        13
    #define   LSb16AIO_SAMPINFO_REQ_PDMRX1                        13
    #define       bAIO_SAMPINFO_REQ_PDMRX1                     1
    #define   MSK32AIO_SAMPINFO_REQ_PDMRX1                        0x00002000

    #define     BA_AIO_SAMPINFO_REQ_DSDRX1                     0x0305
    #define     B16AIO_SAMPINFO_REQ_DSDRX1                     0x0304
    #define   LSb32AIO_SAMPINFO_REQ_DSDRX1                        14
    #define   LSb16AIO_SAMPINFO_REQ_DSDRX1                        14
    #define       bAIO_SAMPINFO_REQ_DSDRX1                     1
    #define   MSK32AIO_SAMPINFO_REQ_DSDRX1                        0x00004000
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_SCR                                     0x0308

    #define     BA_AIO_SCR_I2STX1                              0x0308
    #define     B16AIO_SCR_I2STX1                              0x0308
    #define   LSb32AIO_SCR_I2STX1                                 0
    #define   LSb16AIO_SCR_I2STX1                                 0
    #define       bAIO_SCR_I2STX1                              32
    #define   MSK32AIO_SCR_I2STX1                                 0xFFFFFFFF

    #define     RA_AIO_SCR1                                    0x030C

    #define     BA_AIO_SCR_I2STX2                              0x030C
    #define     B16AIO_SCR_I2STX2                              0x030C
    #define   LSb32AIO_SCR_I2STX2                                 0
    #define   LSb16AIO_SCR_I2STX2                                 0
    #define       bAIO_SCR_I2STX2                              32
    #define   MSK32AIO_SCR_I2STX2                                 0xFFFFFFFF

    #define     RA_AIO_SCR2                                    0x0310

    #define     BA_AIO_SCR_HDMITX                              0x0310
    #define     B16AIO_SCR_HDMITX                              0x0310
    #define   LSb32AIO_SCR_HDMITX                                 0
    #define   LSb16AIO_SCR_HDMITX                                 0
    #define       bAIO_SCR_HDMITX                              32
    #define   MSK32AIO_SCR_HDMITX                                 0xFFFFFFFF

    #define     RA_AIO_SCR3                                    0x0314

    #define     BA_AIO_SCR_HDMIARCTX                           0x0314
    #define     B16AIO_SCR_HDMIARCTX                           0x0314
    #define   LSb32AIO_SCR_HDMIARCTX                              0
    #define   LSb16AIO_SCR_HDMIARCTX                              0
    #define       bAIO_SCR_HDMIARCTX                           32
    #define   MSK32AIO_SCR_HDMIARCTX                              0xFFFFFFFF

    #define     RA_AIO_SCR4                                    0x0318

    #define     BA_AIO_SCR_SPDIFTX                             0x0318
    #define     B16AIO_SCR_SPDIFTX                             0x0318
    #define   LSb32AIO_SCR_SPDIFTX                                0
    #define   LSb16AIO_SCR_SPDIFTX                                0
    #define       bAIO_SCR_SPDIFTX                             32
    #define   MSK32AIO_SCR_SPDIFTX                                0xFFFFFFFF

    #define     RA_AIO_SCR5                                    0x031C

    #define     BA_AIO_SCR_SPDIFTX1                            0x031C
    #define     B16AIO_SCR_SPDIFTX1                            0x031C
    #define   LSb32AIO_SCR_SPDIFTX1                               0
    #define   LSb16AIO_SCR_SPDIFTX1                               0
    #define       bAIO_SCR_SPDIFTX1                            32
    #define   MSK32AIO_SCR_SPDIFTX1                               0xFFFFFFFF

    #define     RA_AIO_SCR6                                    0x0320

    #define     BA_AIO_SCR_SPDIFRX                             0x0320
    #define     B16AIO_SCR_SPDIFRX                             0x0320
    #define   LSb32AIO_SCR_SPDIFRX                                0
    #define   LSb16AIO_SCR_SPDIFRX                                0
    #define       bAIO_SCR_SPDIFRX                             32
    #define   MSK32AIO_SCR_SPDIFRX                                0xFFFFFFFF

    #define     RA_AIO_SCR7                                    0x0324

    #define     BA_AIO_SCR_I2SRX1                              0x0324
    #define     B16AIO_SCR_I2SRX1                              0x0324
    #define   LSb32AIO_SCR_I2SRX1                                 0
    #define   LSb16AIO_SCR_I2SRX1                                 0
    #define       bAIO_SCR_I2SRX1                              32
    #define   MSK32AIO_SCR_I2SRX1                                 0xFFFFFFFF

    #define     RA_AIO_SCR8                                    0x0328

    #define     BA_AIO_SCR_I2SRX2                              0x0328
    #define     B16AIO_SCR_I2SRX2                              0x0328
    #define   LSb32AIO_SCR_I2SRX2                                 0
    #define   LSb16AIO_SCR_I2SRX2                                 0
    #define       bAIO_SCR_I2SRX2                              32
    #define   MSK32AIO_SCR_I2SRX2                                 0xFFFFFFFF

    #define     RA_AIO_SCR9                                    0x032C

    #define     BA_AIO_SCR_I2SRX3                              0x032C
    #define     B16AIO_SCR_I2SRX3                              0x032C
    #define   LSb32AIO_SCR_I2SRX3                                 0
    #define   LSb16AIO_SCR_I2SRX3                                 0
    #define       bAIO_SCR_I2SRX3                              32
    #define   MSK32AIO_SCR_I2SRX3                                 0xFFFFFFFF

    #define     RA_AIO_SCR10                                   0x0330

    #define     BA_AIO_SCR_I2SRX4                              0x0330
    #define     B16AIO_SCR_I2SRX4                              0x0330
    #define   LSb32AIO_SCR_I2SRX4                                 0
    #define   LSb16AIO_SCR_I2SRX4                                 0
    #define       bAIO_SCR_I2SRX4                              32
    #define   MSK32AIO_SCR_I2SRX4                                 0xFFFFFFFF

    #define     RA_AIO_SCR11                                   0x0334

    #define     BA_AIO_SCR_I2SRX5                              0x0334
    #define     B16AIO_SCR_I2SRX5                              0x0334
    #define   LSb32AIO_SCR_I2SRX5                                 0
    #define   LSb16AIO_SCR_I2SRX5                                 0
    #define       bAIO_SCR_I2SRX5                              32
    #define   MSK32AIO_SCR_I2SRX5                                 0xFFFFFFFF

    #define     RA_AIO_SCR12                                   0x0338

    #define     BA_AIO_SCR_I2SRX6                              0x0338
    #define     B16AIO_SCR_I2SRX6                              0x0338
    #define   LSb32AIO_SCR_I2SRX6                                 0
    #define   LSb16AIO_SCR_I2SRX6                                 0
    #define       bAIO_SCR_I2SRX6                              32
    #define   MSK32AIO_SCR_I2SRX6                                 0xFFFFFFFF

    #define     RA_AIO_SCR13                                   0x033C

    #define     BA_AIO_SCR_PDMRX1                              0x033C
    #define     B16AIO_SCR_PDMRX1                              0x033C
    #define   LSb32AIO_SCR_PDMRX1                                 0
    #define   LSb16AIO_SCR_PDMRX1                                 0
    #define       bAIO_SCR_PDMRX1                              32
    #define   MSK32AIO_SCR_PDMRX1                                 0xFFFFFFFF

    #define     RA_AIO_SCR14                                   0x0340

    #define     BA_AIO_SCR_DSDRX1                              0x0340
    #define     B16AIO_SCR_DSDRX1                              0x0340
    #define   LSb32AIO_SCR_DSDRX1                                 0
    #define   LSb16AIO_SCR_DSDRX1                                 0
    #define       bAIO_SCR_DSDRX1                              32
    #define   MSK32AIO_SCR_DSDRX1                                 0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_STR                                     0x0344

    #define     BA_AIO_STR_I2STX1                              0x0344
    #define     B16AIO_STR_I2STX1                              0x0344
    #define   LSb32AIO_STR_I2STX1                                 0
    #define   LSb16AIO_STR_I2STX1                                 0
    #define       bAIO_STR_I2STX1                              32
    #define   MSK32AIO_STR_I2STX1                                 0xFFFFFFFF

    #define     RA_AIO_STR1                                    0x0348

    #define     BA_AIO_STR_I2STX2                              0x0348
    #define     B16AIO_STR_I2STX2                              0x0348
    #define   LSb32AIO_STR_I2STX2                                 0
    #define   LSb16AIO_STR_I2STX2                                 0
    #define       bAIO_STR_I2STX2                              32
    #define   MSK32AIO_STR_I2STX2                                 0xFFFFFFFF

    #define     RA_AIO_STR2                                    0x034C

    #define     BA_AIO_STR_SPDIFTX                             0x034C
    #define     B16AIO_STR_SPDIFTX                             0x034C
    #define   LSb32AIO_STR_SPDIFTX                                0
    #define   LSb16AIO_STR_SPDIFTX                                0
    #define       bAIO_STR_SPDIFTX                             32
    #define   MSK32AIO_STR_SPDIFTX                                0xFFFFFFFF

    #define     RA_AIO_STR3                                    0x0350

    #define     BA_AIO_STR_SPDIFTX1                            0x0350
    #define     B16AIO_STR_SPDIFTX1                            0x0350
    #define   LSb32AIO_STR_SPDIFTX1                               0
    #define   LSb16AIO_STR_SPDIFTX1                               0
    #define       bAIO_STR_SPDIFTX1                            32
    #define   MSK32AIO_STR_SPDIFTX1                               0xFFFFFFFF

    #define     RA_AIO_STR4                                    0x0354

    #define     BA_AIO_STR_HDMITX                              0x0354
    #define     B16AIO_STR_HDMITX                              0x0354
    #define   LSb32AIO_STR_HDMITX                                 0
    #define   LSb16AIO_STR_HDMITX                                 0
    #define       bAIO_STR_HDMITX                              32
    #define   MSK32AIO_STR_HDMITX                                 0xFFFFFFFF

    #define     RA_AIO_STR5                                    0x0358

    #define     BA_AIO_STR_HDMIARCTX                           0x0358
    #define     B16AIO_STR_HDMIARCTX                           0x0358
    #define   LSb32AIO_STR_HDMIARCTX                              0
    #define   LSb16AIO_STR_HDMIARCTX                              0
    #define       bAIO_STR_HDMIARCTX                           32
    #define   MSK32AIO_STR_HDMIARCTX                              0xFFFFFFFF

    #define     RA_AIO_STR6                                    0x035C

    #define     BA_AIO_STR_SPDIFRX                             0x035C
    #define     B16AIO_STR_SPDIFRX                             0x035C
    #define   LSb32AIO_STR_SPDIFRX                                0
    #define   LSb16AIO_STR_SPDIFRX                                0
    #define       bAIO_STR_SPDIFRX                             32
    #define   MSK32AIO_STR_SPDIFRX                                0xFFFFFFFF

    #define     RA_AIO_STR7                                    0x0360

    #define     BA_AIO_STR_I2SRX1                              0x0360
    #define     B16AIO_STR_I2SRX1                              0x0360
    #define   LSb32AIO_STR_I2SRX1                                 0
    #define   LSb16AIO_STR_I2SRX1                                 0
    #define       bAIO_STR_I2SRX1                              32
    #define   MSK32AIO_STR_I2SRX1                                 0xFFFFFFFF

    #define     RA_AIO_STR8                                    0x0364

    #define     BA_AIO_STR_I2SRX2                              0x0364
    #define     B16AIO_STR_I2SRX2                              0x0364
    #define   LSb32AIO_STR_I2SRX2                                 0
    #define   LSb16AIO_STR_I2SRX2                                 0
    #define       bAIO_STR_I2SRX2                              32
    #define   MSK32AIO_STR_I2SRX2                                 0xFFFFFFFF

    #define     RA_AIO_STR9                                    0x0368

    #define     BA_AIO_STR_I2SRX3                              0x0368
    #define     B16AIO_STR_I2SRX3                              0x0368
    #define   LSb32AIO_STR_I2SRX3                                 0
    #define   LSb16AIO_STR_I2SRX3                                 0
    #define       bAIO_STR_I2SRX3                              32
    #define   MSK32AIO_STR_I2SRX3                                 0xFFFFFFFF

    #define     RA_AIO_STR10                                   0x036C

    #define     BA_AIO_STR_I2SRX4                              0x036C
    #define     B16AIO_STR_I2SRX4                              0x036C
    #define   LSb32AIO_STR_I2SRX4                                 0
    #define   LSb16AIO_STR_I2SRX4                                 0
    #define       bAIO_STR_I2SRX4                              32
    #define   MSK32AIO_STR_I2SRX4                                 0xFFFFFFFF

    #define     RA_AIO_STR11                                   0x0370

    #define     BA_AIO_STR_I2SRX5                              0x0370
    #define     B16AIO_STR_I2SRX5                              0x0370
    #define   LSb32AIO_STR_I2SRX5                                 0
    #define   LSb16AIO_STR_I2SRX5                                 0
    #define       bAIO_STR_I2SRX5                              32
    #define   MSK32AIO_STR_I2SRX5                                 0xFFFFFFFF

    #define     RA_AIO_STR12                                   0x0374

    #define     BA_AIO_STR_I2SRX6                              0x0374
    #define     B16AIO_STR_I2SRX6                              0x0374
    #define   LSb32AIO_STR_I2SRX6                                 0
    #define   LSb16AIO_STR_I2SRX6                                 0
    #define       bAIO_STR_I2SRX6                              32
    #define   MSK32AIO_STR_I2SRX6                                 0xFFFFFFFF

    #define     RA_AIO_STR13                                   0x0378

    #define     BA_AIO_STR_PDMRX1                              0x0378
    #define     B16AIO_STR_PDMRX1                              0x0378
    #define   LSb32AIO_STR_PDMRX1                                 0
    #define   LSb16AIO_STR_PDMRX1                                 0
    #define       bAIO_STR_PDMRX1                              32
    #define   MSK32AIO_STR_PDMRX1                                 0xFFFFFFFF

    #define     RA_AIO_STR14                                   0x037C

    #define     BA_AIO_STR_DSDRX1                              0x037C
    #define     B16AIO_STR_DSDRX1                              0x037C
    #define   LSb32AIO_STR_DSDRX1                                 0
    #define   LSb16AIO_STR_DSDRX1                                 0
    #define       bAIO_STR_DSDRX1                              32
    #define   MSK32AIO_STR_DSDRX1                                 0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_ATR                                     0x0380

    #define     BA_AIO_ATR_TIMER                               0x0380
    #define     B16AIO_ATR_TIMER                               0x0380
    #define   LSb32AIO_ATR_TIMER                                  0
    #define   LSb16AIO_ATR_TIMER                                  0
    #define       bAIO_ATR_TIMER                               32
    #define   MSK32AIO_ATR_TIMER                                  0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_XFEED                                   0x0384

    #define     BA_AIO_XFEED_I2S1_LRCKIO_MODE                  0x0384
    #define     B16AIO_XFEED_I2S1_LRCKIO_MODE                  0x0384
    #define   LSb32AIO_XFEED_I2S1_LRCKIO_MODE                     0
    #define   LSb16AIO_XFEED_I2S1_LRCKIO_MODE                     0
    #define       bAIO_XFEED_I2S1_LRCKIO_MODE                  2
    #define   MSK32AIO_XFEED_I2S1_LRCKIO_MODE                     0x00000003

    #define     BA_AIO_XFEED_I2S1_BCLKIO_MODE                  0x0384
    #define     B16AIO_XFEED_I2S1_BCLKIO_MODE                  0x0384
    #define   LSb32AIO_XFEED_I2S1_BCLKIO_MODE                     2
    #define   LSb16AIO_XFEED_I2S1_BCLKIO_MODE                     2
    #define       bAIO_XFEED_I2S1_BCLKIO_MODE                  2
    #define   MSK32AIO_XFEED_I2S1_BCLKIO_MODE                     0x0000000C

    #define     BA_AIO_XFEED_I2S2_LRCKIO_MODE                  0x0384
    #define     B16AIO_XFEED_I2S2_LRCKIO_MODE                  0x0384
    #define   LSb32AIO_XFEED_I2S2_LRCKIO_MODE                     4
    #define   LSb16AIO_XFEED_I2S2_LRCKIO_MODE                     4
    #define       bAIO_XFEED_I2S2_LRCKIO_MODE                  2
    #define   MSK32AIO_XFEED_I2S2_LRCKIO_MODE                     0x00000030

    #define     BA_AIO_XFEED_I2S2_BCLKIO_MODE                  0x0384
    #define     B16AIO_XFEED_I2S2_BCLKIO_MODE                  0x0384
    #define   LSb32AIO_XFEED_I2S2_BCLKIO_MODE                     6
    #define   LSb16AIO_XFEED_I2S2_BCLKIO_MODE                     6
    #define       bAIO_XFEED_I2S2_BCLKIO_MODE                  2
    #define   MSK32AIO_XFEED_I2S2_BCLKIO_MODE                     0x000000C0

    #define     BA_AIO_XFEED_I2S3_LRCKIO_MODE                  0x0385
    #define     B16AIO_XFEED_I2S3_LRCKIO_MODE                  0x0384
    #define   LSb32AIO_XFEED_I2S3_LRCKIO_MODE                     8
    #define   LSb16AIO_XFEED_I2S3_LRCKIO_MODE                     8
    #define       bAIO_XFEED_I2S3_LRCKIO_MODE                  1
    #define   MSK32AIO_XFEED_I2S3_LRCKIO_MODE                     0x00000100

    #define     BA_AIO_XFEED_I2S3_BCLKIO_MODE                  0x0385
    #define     B16AIO_XFEED_I2S3_BCLKIO_MODE                  0x0384
    #define   LSb32AIO_XFEED_I2S3_BCLKIO_MODE                     9
    #define   LSb16AIO_XFEED_I2S3_BCLKIO_MODE                     9
    #define       bAIO_XFEED_I2S3_BCLKIO_MODE                  1
    #define   MSK32AIO_XFEED_I2S3_BCLKIO_MODE                     0x00000200

    #define     BA_AIO_XFEED_PDM_CLK_SEL                       0x0385
    #define     B16AIO_XFEED_PDM_CLK_SEL                       0x0384
    #define   LSb32AIO_XFEED_PDM_CLK_SEL                          10
    #define   LSb16AIO_XFEED_PDM_CLK_SEL                          10
    #define       bAIO_XFEED_PDM_CLK_SEL                       3
    #define   MSK32AIO_XFEED_PDM_CLK_SEL                          0x00001C00

    #define     BA_AIO_XFEED_PDMC_SEL                          0x0385
    #define     B16AIO_XFEED_PDMC_SEL                          0x0384
    #define   LSb32AIO_XFEED_PDMC_SEL                             13
    #define   LSb16AIO_XFEED_PDMC_SEL                             13
    #define       bAIO_XFEED_PDMC_SEL                          1
    #define   MSK32AIO_XFEED_PDMC_SEL                             0x00002000

    #define     BA_AIO_XFEED_PDM_SEL                           0x0385
    #define     B16AIO_XFEED_PDM_SEL                           0x0384
    #define   LSb32AIO_XFEED_PDM_SEL                              14
    #define   LSb16AIO_XFEED_PDM_SEL                              14
    #define       bAIO_XFEED_PDM_SEL                           4
    #define   MSK32AIO_XFEED_PDM_SEL                              0x0003C000
    ///////////////////////////////////////////////////////////
    #define     RA_AIO_DMIC_SRAMPWR                            0x0388
    ///////////////////////////////////////////////////////////

    typedef struct SIE_AIO {
    ///////////////////////////////////////////////////////////
              SIE_PRI                                          ie_PRI;
    ///////////////////////////////////////////////////////////
              SIE_SEC                                          ie_SEC;
    ///////////////////////////////////////////////////////////
              SIE_HDMI                                         ie_HDMI;
    ///////////////////////////////////////////////////////////
              SIE_SPDIF                                        ie_SPDIF;
    ///////////////////////////////////////////////////////////
              SIE_MIC1                                         ie_MIC1;
    ///////////////////////////////////////////////////////////
              SIE_MIC2                                         ie_MIC2;
    ///////////////////////////////////////////////////////////
              SIE_MIC3                                         ie_MIC3;
    ///////////////////////////////////////////////////////////
              SIE_MIC4                                         ie_MIC4;
    ///////////////////////////////////////////////////////////
              SIE_MIC5                                         ie_MIC5;
    ///////////////////////////////////////////////////////////
              SIE_MIC6                                         ie_MIC6;
    ///////////////////////////////////////////////////////////
              SIE_DSD                                          ie_DSD;
    ///////////////////////////////////////////////////////////
              SIE_PDM                                          ie_PDM;
    ///////////////////////////////////////////////////////////
              SIE_DMIC_CLK                                     ie_DMIC_CLK;
    ///////////////////////////////////////////////////////////
              SIE_DMIC                                         ie_DMIC;
    ///////////////////////////////////////////////////////////
              SIE_SPDIFRX_CTRL                                 ie_SPDIFRX_CTRL;
    ///////////////////////////////////////////////////////////
              SIE_SPDIFRX_STATUS                               ie_SPDIFRX_STATUS;
    ///////////////////////////////////////////////////////////
              SIE_IOSEL                                        ie_IOSEL;
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_EARC_SRC_SEL(r32)                       _BFGET_(r32, 1, 0)
    #define   SET32AIO_EARC_SRC_SEL(r32,v)                     _BFSET_(r32, 1, 0,v)
    #define   GET16AIO_EARC_SRC_SEL(r16)                       _BFGET_(r16, 1, 0)
    #define   SET16AIO_EARC_SRC_SEL(r16,v)                     _BFSET_(r16, 1, 0,v)

    #define     w32AIO_EARC_SRC                                {\
            UNSG32 uEARC_SRC_SEL                               :  2;\
            UNSG32 RSVDx2BC_b2                                 : 30;\
          }
    union { UNSG32 u32AIO_EARC_SRC;
            struct w32AIO_EARC_SRC;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_IRQENABLE_PRIIRQ(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32AIO_IRQENABLE_PRIIRQ(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16AIO_IRQENABLE_PRIIRQ(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16AIO_IRQENABLE_PRIIRQ(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define   GET32AIO_IRQENABLE_SECIRQ(r32)                   _BFGET_(r32, 1, 1)
    #define   SET32AIO_IRQENABLE_SECIRQ(r32,v)                 _BFSET_(r32, 1, 1,v)
    #define   GET16AIO_IRQENABLE_SECIRQ(r16)                   _BFGET_(r16, 1, 1)
    #define   SET16AIO_IRQENABLE_SECIRQ(r16,v)                 _BFSET_(r16, 1, 1,v)

    #define   GET32AIO_IRQENABLE_MIC1IRQ(r32)                  _BFGET_(r32, 2, 2)
    #define   SET32AIO_IRQENABLE_MIC1IRQ(r32,v)                _BFSET_(r32, 2, 2,v)
    #define   GET16AIO_IRQENABLE_MIC1IRQ(r16)                  _BFGET_(r16, 2, 2)
    #define   SET16AIO_IRQENABLE_MIC1IRQ(r16,v)                _BFSET_(r16, 2, 2,v)

    #define   GET32AIO_IRQENABLE_MIC2IRQ(r32)                  _BFGET_(r32, 3, 3)
    #define   SET32AIO_IRQENABLE_MIC2IRQ(r32,v)                _BFSET_(r32, 3, 3,v)
    #define   GET16AIO_IRQENABLE_MIC2IRQ(r16)                  _BFGET_(r16, 3, 3)
    #define   SET16AIO_IRQENABLE_MIC2IRQ(r16,v)                _BFSET_(r16, 3, 3,v)

    #define   GET32AIO_IRQENABLE_MIC3IRQ(r32)                  _BFGET_(r32, 4, 4)
    #define   SET32AIO_IRQENABLE_MIC3IRQ(r32,v)                _BFSET_(r32, 4, 4,v)
    #define   GET16AIO_IRQENABLE_MIC3IRQ(r16)                  _BFGET_(r16, 4, 4)
    #define   SET16AIO_IRQENABLE_MIC3IRQ(r16,v)                _BFSET_(r16, 4, 4,v)

    #define   GET32AIO_IRQENABLE_MIC4IRQ(r32)                  _BFGET_(r32, 5, 5)
    #define   SET32AIO_IRQENABLE_MIC4IRQ(r32,v)                _BFSET_(r32, 5, 5,v)
    #define   GET16AIO_IRQENABLE_MIC4IRQ(r16)                  _BFGET_(r16, 5, 5)
    #define   SET16AIO_IRQENABLE_MIC4IRQ(r16,v)                _BFSET_(r16, 5, 5,v)

    #define   GET32AIO_IRQENABLE_MIC5IRQ(r32)                  _BFGET_(r32, 6, 6)
    #define   SET32AIO_IRQENABLE_MIC5IRQ(r32,v)                _BFSET_(r32, 6, 6,v)
    #define   GET16AIO_IRQENABLE_MIC5IRQ(r16)                  _BFGET_(r16, 6, 6)
    #define   SET16AIO_IRQENABLE_MIC5IRQ(r16,v)                _BFSET_(r16, 6, 6,v)

    #define   GET32AIO_IRQENABLE_MIC6IRQ(r32)                  _BFGET_(r32, 7, 7)
    #define   SET32AIO_IRQENABLE_MIC6IRQ(r32,v)                _BFSET_(r32, 7, 7,v)
    #define   GET16AIO_IRQENABLE_MIC6IRQ(r16)                  _BFGET_(r16, 7, 7)
    #define   SET16AIO_IRQENABLE_MIC6IRQ(r16,v)                _BFSET_(r16, 7, 7,v)

    #define   GET32AIO_IRQENABLE_SPDIFIRQ(r32)                 _BFGET_(r32, 8, 8)
    #define   SET32AIO_IRQENABLE_SPDIFIRQ(r32,v)               _BFSET_(r32, 8, 8,v)
    #define   GET16AIO_IRQENABLE_SPDIFIRQ(r16)                 _BFGET_(r16, 8, 8)
    #define   SET16AIO_IRQENABLE_SPDIFIRQ(r16,v)               _BFSET_(r16, 8, 8,v)

    #define   GET32AIO_IRQENABLE_SPDIF1IRQ(r32)                _BFGET_(r32, 9, 9)
    #define   SET32AIO_IRQENABLE_SPDIF1IRQ(r32,v)              _BFSET_(r32, 9, 9,v)
    #define   GET16AIO_IRQENABLE_SPDIF1IRQ(r16)                _BFGET_(r16, 9, 9)
    #define   SET16AIO_IRQENABLE_SPDIF1IRQ(r16,v)              _BFSET_(r16, 9, 9,v)

    #define   GET32AIO_IRQENABLE_HDMIIRQ(r32)                  _BFGET_(r32,10,10)
    #define   SET32AIO_IRQENABLE_HDMIIRQ(r32,v)                _BFSET_(r32,10,10,v)
    #define   GET16AIO_IRQENABLE_HDMIIRQ(r16)                  _BFGET_(r16,10,10)
    #define   SET16AIO_IRQENABLE_HDMIIRQ(r16,v)                _BFSET_(r16,10,10,v)

    #define   GET32AIO_IRQENABLE_PDMIRQ(r32)                   _BFGET_(r32,11,11)
    #define   SET32AIO_IRQENABLE_PDMIRQ(r32,v)                 _BFSET_(r32,11,11,v)
    #define   GET16AIO_IRQENABLE_PDMIRQ(r16)                   _BFGET_(r16,11,11)
    #define   SET16AIO_IRQENABLE_PDMIRQ(r16,v)                 _BFSET_(r16,11,11,v)

    #define   GET32AIO_IRQENABLE_DSDIRQ(r32)                   _BFGET_(r32,12,12)
    #define   SET32AIO_IRQENABLE_DSDIRQ(r32,v)                 _BFSET_(r32,12,12,v)
    #define   GET16AIO_IRQENABLE_DSDIRQ(r16)                   _BFGET_(r16,12,12)
    #define   SET16AIO_IRQENABLE_DSDIRQ(r16,v)                 _BFSET_(r16,12,12,v)

    #define   GET32AIO_IRQENABLE_SPDIFRXIRQ(r32)               _BFGET_(r32,13,13)
    #define   SET32AIO_IRQENABLE_SPDIFRXIRQ(r32,v)             _BFSET_(r32,13,13,v)
    #define   GET16AIO_IRQENABLE_SPDIFRXIRQ(r16)               _BFGET_(r16,13,13)
    #define   SET16AIO_IRQENABLE_SPDIFRXIRQ(r16,v)             _BFSET_(r16,13,13,v)

    #define   GET32AIO_IRQENABLE_DMICIRQ(r32)                  _BFGET_(r32,14,14)
    #define   SET32AIO_IRQENABLE_DMICIRQ(r32,v)                _BFSET_(r32,14,14,v)
    #define   GET16AIO_IRQENABLE_DMICIRQ(r16)                  _BFGET_(r16,14,14)
    #define   SET16AIO_IRQENABLE_DMICIRQ(r16,v)                _BFSET_(r16,14,14,v)

    #define     w32AIO_IRQENABLE                               {\
            UNSG32 uIRQENABLE_PRIIRQ                           :  1;\
            UNSG32 uIRQENABLE_SECIRQ                           :  1;\
            UNSG32 uIRQENABLE_MIC1IRQ                          :  1;\
            UNSG32 uIRQENABLE_MIC2IRQ                          :  1;\
            UNSG32 uIRQENABLE_MIC3IRQ                          :  1;\
            UNSG32 uIRQENABLE_MIC4IRQ                          :  1;\
            UNSG32 uIRQENABLE_MIC5IRQ                          :  1;\
            UNSG32 uIRQENABLE_MIC6IRQ                          :  1;\
            UNSG32 uIRQENABLE_SPDIFIRQ                         :  1;\
            UNSG32 uIRQENABLE_SPDIF1IRQ                        :  1;\
            UNSG32 uIRQENABLE_HDMIIRQ                          :  1;\
            UNSG32 uIRQENABLE_PDMIRQ                           :  1;\
            UNSG32 uIRQENABLE_DSDIRQ                           :  1;\
            UNSG32 uIRQENABLE_SPDIFRXIRQ                       :  1;\
            UNSG32 uIRQENABLE_DMICIRQ                          :  1;\
            UNSG32 RSVDx2C0_b15                                : 17;\
          }
    union { UNSG32 u32AIO_IRQENABLE;
            struct w32AIO_IRQENABLE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_IRQSTS_PRISTS(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32AIO_IRQSTS_PRISTS(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16AIO_IRQSTS_PRISTS(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16AIO_IRQSTS_PRISTS(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define   GET32AIO_IRQSTS_SECSTS(r32)                      _BFGET_(r32, 1, 1)
    #define   SET32AIO_IRQSTS_SECSTS(r32,v)                    _BFSET_(r32, 1, 1,v)
    #define   GET16AIO_IRQSTS_SECSTS(r16)                      _BFGET_(r16, 1, 1)
    #define   SET16AIO_IRQSTS_SECSTS(r16,v)                    _BFSET_(r16, 1, 1,v)

    #define   GET32AIO_IRQSTS_MIC1STS(r32)                     _BFGET_(r32, 2, 2)
    #define   SET32AIO_IRQSTS_MIC1STS(r32,v)                   _BFSET_(r32, 2, 2,v)
    #define   GET16AIO_IRQSTS_MIC1STS(r16)                     _BFGET_(r16, 2, 2)
    #define   SET16AIO_IRQSTS_MIC1STS(r16,v)                   _BFSET_(r16, 2, 2,v)

    #define   GET32AIO_IRQSTS_MIC2STS(r32)                     _BFGET_(r32, 3, 3)
    #define   SET32AIO_IRQSTS_MIC2STS(r32,v)                   _BFSET_(r32, 3, 3,v)
    #define   GET16AIO_IRQSTS_MIC2STS(r16)                     _BFGET_(r16, 3, 3)
    #define   SET16AIO_IRQSTS_MIC2STS(r16,v)                   _BFSET_(r16, 3, 3,v)

    #define   GET32AIO_IRQSTS_MIC3STS(r32)                     _BFGET_(r32, 4, 4)
    #define   SET32AIO_IRQSTS_MIC3STS(r32,v)                   _BFSET_(r32, 4, 4,v)
    #define   GET16AIO_IRQSTS_MIC3STS(r16)                     _BFGET_(r16, 4, 4)
    #define   SET16AIO_IRQSTS_MIC3STS(r16,v)                   _BFSET_(r16, 4, 4,v)

    #define   GET32AIO_IRQSTS_MIC4STS(r32)                     _BFGET_(r32, 5, 5)
    #define   SET32AIO_IRQSTS_MIC4STS(r32,v)                   _BFSET_(r32, 5, 5,v)
    #define   GET16AIO_IRQSTS_MIC4STS(r16)                     _BFGET_(r16, 5, 5)
    #define   SET16AIO_IRQSTS_MIC4STS(r16,v)                   _BFSET_(r16, 5, 5,v)

    #define   GET32AIO_IRQSTS_MIC5STS(r32)                     _BFGET_(r32, 6, 6)
    #define   SET32AIO_IRQSTS_MIC5STS(r32,v)                   _BFSET_(r32, 6, 6,v)
    #define   GET16AIO_IRQSTS_MIC5STS(r16)                     _BFGET_(r16, 6, 6)
    #define   SET16AIO_IRQSTS_MIC5STS(r16,v)                   _BFSET_(r16, 6, 6,v)

    #define   GET32AIO_IRQSTS_MIC6STS(r32)                     _BFGET_(r32, 7, 7)
    #define   SET32AIO_IRQSTS_MIC6STS(r32,v)                   _BFSET_(r32, 7, 7,v)
    #define   GET16AIO_IRQSTS_MIC6STS(r16)                     _BFGET_(r16, 7, 7)
    #define   SET16AIO_IRQSTS_MIC6STS(r16,v)                   _BFSET_(r16, 7, 7,v)

    #define   GET32AIO_IRQSTS_SPDIFSTS(r32)                    _BFGET_(r32, 8, 8)
    #define   SET32AIO_IRQSTS_SPDIFSTS(r32,v)                  _BFSET_(r32, 8, 8,v)
    #define   GET16AIO_IRQSTS_SPDIFSTS(r16)                    _BFGET_(r16, 8, 8)
    #define   SET16AIO_IRQSTS_SPDIFSTS(r16,v)                  _BFSET_(r16, 8, 8,v)

    #define   GET32AIO_IRQSTS_SPDIF1STS(r32)                   _BFGET_(r32, 9, 9)
    #define   SET32AIO_IRQSTS_SPDIF1STS(r32,v)                 _BFSET_(r32, 9, 9,v)
    #define   GET16AIO_IRQSTS_SPDIF1STS(r16)                   _BFGET_(r16, 9, 9)
    #define   SET16AIO_IRQSTS_SPDIF1STS(r16,v)                 _BFSET_(r16, 9, 9,v)

    #define   GET32AIO_IRQSTS_HDMISTS(r32)                     _BFGET_(r32,10,10)
    #define   SET32AIO_IRQSTS_HDMISTS(r32,v)                   _BFSET_(r32,10,10,v)
    #define   GET16AIO_IRQSTS_HDMISTS(r16)                     _BFGET_(r16,10,10)
    #define   SET16AIO_IRQSTS_HDMISTS(r16,v)                   _BFSET_(r16,10,10,v)

    #define   GET32AIO_IRQSTS_PDMSTS(r32)                      _BFGET_(r32,11,11)
    #define   SET32AIO_IRQSTS_PDMSTS(r32,v)                    _BFSET_(r32,11,11,v)
    #define   GET16AIO_IRQSTS_PDMSTS(r16)                      _BFGET_(r16,11,11)
    #define   SET16AIO_IRQSTS_PDMSTS(r16,v)                    _BFSET_(r16,11,11,v)

    #define   GET32AIO_IRQSTS_DSDSTS(r32)                      _BFGET_(r32,12,12)
    #define   SET32AIO_IRQSTS_DSDSTS(r32,v)                    _BFSET_(r32,12,12,v)
    #define   GET16AIO_IRQSTS_DSDSTS(r16)                      _BFGET_(r16,12,12)
    #define   SET16AIO_IRQSTS_DSDSTS(r16,v)                    _BFSET_(r16,12,12,v)

    #define   GET32AIO_IRQSTS_SPDIFRXSTS(r32)                  _BFGET_(r32,13,13)
    #define   SET32AIO_IRQSTS_SPDIFRXSTS(r32,v)                _BFSET_(r32,13,13,v)
    #define   GET16AIO_IRQSTS_SPDIFRXSTS(r16)                  _BFGET_(r16,13,13)
    #define   SET16AIO_IRQSTS_SPDIFRXSTS(r16,v)                _BFSET_(r16,13,13,v)

    #define   GET32AIO_IRQSTS_DMICSTS(r32)                     _BFGET_(r32,14,14)
    #define   SET32AIO_IRQSTS_DMICSTS(r32,v)                   _BFSET_(r32,14,14,v)
    #define   GET16AIO_IRQSTS_DMICSTS(r16)                     _BFGET_(r16,14,14)
    #define   SET16AIO_IRQSTS_DMICSTS(r16,v)                   _BFSET_(r16,14,14,v)

    #define     w32AIO_IRQSTS                                  {\
            UNSG32 uIRQSTS_PRISTS                              :  1;\
            UNSG32 uIRQSTS_SECSTS                              :  1;\
            UNSG32 uIRQSTS_MIC1STS                             :  1;\
            UNSG32 uIRQSTS_MIC2STS                             :  1;\
            UNSG32 uIRQSTS_MIC3STS                             :  1;\
            UNSG32 uIRQSTS_MIC4STS                             :  1;\
            UNSG32 uIRQSTS_MIC5STS                             :  1;\
            UNSG32 uIRQSTS_MIC6STS                             :  1;\
            UNSG32 uIRQSTS_SPDIFSTS                            :  1;\
            UNSG32 uIRQSTS_SPDIF1STS                           :  1;\
            UNSG32 uIRQSTS_HDMISTS                             :  1;\
            UNSG32 uIRQSTS_PDMSTS                              :  1;\
            UNSG32 uIRQSTS_DSDSTS                              :  1;\
            UNSG32 uIRQSTS_SPDIFRXSTS                          :  1;\
            UNSG32 uIRQSTS_DMICSTS                             :  1;\
            UNSG32 RSVDx2C4_b15                                : 17;\
          }
    union { UNSG32 u32AIO_IRQSTS;
            struct w32AIO_IRQSTS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_PRISRC_SEL(r32)                         _BFGET_(r32, 1, 0)
    #define   SET32AIO_PRISRC_SEL(r32,v)                       _BFSET_(r32, 1, 0,v)
    #define   GET16AIO_PRISRC_SEL(r16)                         _BFGET_(r16, 1, 0)
    #define   SET16AIO_PRISRC_SEL(r16,v)                       _BFSET_(r16, 1, 0,v)

    #define   GET32AIO_PRISRC_L0DATAMAP(r32)                   _BFGET_(r32, 3, 2)
    #define   SET32AIO_PRISRC_L0DATAMAP(r32,v)                 _BFSET_(r32, 3, 2,v)
    #define   GET16AIO_PRISRC_L0DATAMAP(r16)                   _BFGET_(r16, 3, 2)
    #define   SET16AIO_PRISRC_L0DATAMAP(r16,v)                 _BFSET_(r16, 3, 2,v)

    #define   GET32AIO_PRISRC_L1DATAMAP(r32)                   _BFGET_(r32, 5, 4)
    #define   SET32AIO_PRISRC_L1DATAMAP(r32,v)                 _BFSET_(r32, 5, 4,v)
    #define   GET16AIO_PRISRC_L1DATAMAP(r16)                   _BFGET_(r16, 5, 4)
    #define   SET16AIO_PRISRC_L1DATAMAP(r16,v)                 _BFSET_(r16, 5, 4,v)

    #define   GET32AIO_PRISRC_L2DATAMAP(r32)                   _BFGET_(r32, 7, 6)
    #define   SET32AIO_PRISRC_L2DATAMAP(r32,v)                 _BFSET_(r32, 7, 6,v)
    #define   GET16AIO_PRISRC_L2DATAMAP(r16)                   _BFGET_(r16, 7, 6)
    #define   SET16AIO_PRISRC_L2DATAMAP(r16,v)                 _BFSET_(r16, 7, 6,v)

    #define   GET32AIO_PRISRC_L3DATAMAP(r32)                   _BFGET_(r32, 9, 8)
    #define   SET32AIO_PRISRC_L3DATAMAP(r32,v)                 _BFSET_(r32, 9, 8,v)
    #define   GET16AIO_PRISRC_L3DATAMAP(r16)                   _BFGET_(r16, 9, 8)
    #define   SET16AIO_PRISRC_L3DATAMAP(r16,v)                 _BFSET_(r16, 9, 8,v)

    #define   GET32AIO_PRISRC_SLAVEMODE(r32)                   _BFGET_(r32,10,10)
    #define   SET32AIO_PRISRC_SLAVEMODE(r32,v)                 _BFSET_(r32,10,10,v)
    #define   GET16AIO_PRISRC_SLAVEMODE(r16)                   _BFGET_(r16,10,10)
    #define   SET16AIO_PRISRC_SLAVEMODE(r16,v)                 _BFSET_(r16,10,10,v)

    #define     w32AIO_PRISRC                                  {\
            UNSG32 uPRISRC_SEL                                 :  2;\
            UNSG32 uPRISRC_L0DATAMAP                           :  2;\
            UNSG32 uPRISRC_L1DATAMAP                           :  2;\
            UNSG32 uPRISRC_L2DATAMAP                           :  2;\
            UNSG32 uPRISRC_L3DATAMAP                           :  2;\
            UNSG32 uPRISRC_SLAVEMODE                           :  1;\
            UNSG32 RSVDx2C8_b11                                : 21;\
          }
    union { UNSG32 u32AIO_PRISRC;
            struct w32AIO_PRISRC;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_SECSRC_SEL(r32)                         _BFGET_(r32, 1, 0)
    #define   SET32AIO_SECSRC_SEL(r32,v)                       _BFSET_(r32, 1, 0,v)
    #define   GET16AIO_SECSRC_SEL(r16)                         _BFGET_(r16, 1, 0)
    #define   SET16AIO_SECSRC_SEL(r16,v)                       _BFSET_(r16, 1, 0,v)

    #define   GET32AIO_SECSRC_L0DATAMAP(r32)                   _BFGET_(r32, 3, 2)
    #define   SET32AIO_SECSRC_L0DATAMAP(r32,v)                 _BFSET_(r32, 3, 2,v)
    #define   GET16AIO_SECSRC_L0DATAMAP(r16)                   _BFGET_(r16, 3, 2)
    #define   SET16AIO_SECSRC_L0DATAMAP(r16,v)                 _BFSET_(r16, 3, 2,v)

    #define   GET32AIO_SECSRC_L1DATAMAP(r32)                   _BFGET_(r32, 5, 4)
    #define   SET32AIO_SECSRC_L1DATAMAP(r32,v)                 _BFSET_(r32, 5, 4,v)
    #define   GET16AIO_SECSRC_L1DATAMAP(r16)                   _BFGET_(r16, 5, 4)
    #define   SET16AIO_SECSRC_L1DATAMAP(r16,v)                 _BFSET_(r16, 5, 4,v)

    #define   GET32AIO_SECSRC_L2DATAMAP(r32)                   _BFGET_(r32, 7, 6)
    #define   SET32AIO_SECSRC_L2DATAMAP(r32,v)                 _BFSET_(r32, 7, 6,v)
    #define   GET16AIO_SECSRC_L2DATAMAP(r16)                   _BFGET_(r16, 7, 6)
    #define   SET16AIO_SECSRC_L2DATAMAP(r16,v)                 _BFSET_(r16, 7, 6,v)

    #define   GET32AIO_SECSRC_L3DATAMAP(r32)                   _BFGET_(r32, 9, 8)
    #define   SET32AIO_SECSRC_L3DATAMAP(r32,v)                 _BFSET_(r32, 9, 8,v)
    #define   GET16AIO_SECSRC_L3DATAMAP(r16)                   _BFGET_(r16, 9, 8)
    #define   SET16AIO_SECSRC_L3DATAMAP(r16,v)                 _BFSET_(r16, 9, 8,v)

    #define   GET32AIO_SECSRC_SLAVEMODE(r32)                   _BFGET_(r32,10,10)
    #define   SET32AIO_SECSRC_SLAVEMODE(r32,v)                 _BFSET_(r32,10,10,v)
    #define   GET16AIO_SECSRC_SLAVEMODE(r16)                   _BFGET_(r16,10,10)
    #define   SET16AIO_SECSRC_SLAVEMODE(r16,v)                 _BFSET_(r16,10,10,v)

    #define     w32AIO_SECSRC                                  {\
            UNSG32 uSECSRC_SEL                                 :  2;\
            UNSG32 uSECSRC_L0DATAMAP                           :  2;\
            UNSG32 uSECSRC_L1DATAMAP                           :  2;\
            UNSG32 uSECSRC_L2DATAMAP                           :  2;\
            UNSG32 uSECSRC_L3DATAMAP                           :  2;\
            UNSG32 uSECSRC_SLAVEMODE                           :  1;\
            UNSG32 RSVDx2CC_b11                                : 21;\
          }
    union { UNSG32 u32AIO_SECSRC;
            struct w32AIO_SECSRC;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_HDSRC_SEL(r32)                          _BFGET_(r32, 1, 0)
    #define   SET32AIO_HDSRC_SEL(r32,v)                        _BFSET_(r32, 1, 0,v)
    #define   GET16AIO_HDSRC_SEL(r16)                          _BFGET_(r16, 1, 0)
    #define   SET16AIO_HDSRC_SEL(r16,v)                        _BFSET_(r16, 1, 0,v)

    #define     w32AIO_HDSRC                                   {\
            UNSG32 uHDSRC_SEL                                  :  2;\
            UNSG32 RSVDx2D0_b2                                 : 30;\
          }
    union { UNSG32 u32AIO_HDSRC;
            struct w32AIO_HDSRC;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_PDM_MIC_SEL_CTRL(r32)                   _BFGET_(r32, 3, 0)
    #define   SET32AIO_PDM_MIC_SEL_CTRL(r32,v)                 _BFSET_(r32, 3, 0,v)
    #define   GET16AIO_PDM_MIC_SEL_CTRL(r16)                   _BFGET_(r16, 3, 0)
    #define   SET16AIO_PDM_MIC_SEL_CTRL(r16,v)                 _BFSET_(r16, 3, 0,v)

    #define     w32AIO_PDM_MIC_SEL                             {\
            UNSG32 uPDM_MIC_SEL_CTRL                           :  4;\
            UNSG32 RSVDx2D4_b4                                 : 28;\
          }
    union { UNSG32 u32AIO_PDM_MIC_SEL;
            struct w32AIO_PDM_MIC_SEL;
          };
    ///////////////////////////////////////////////////////////
              SIE_ACLK                                         ie_MCLKPRI;
    ///////////////////////////////////////////////////////////
              SIE_ACLK                                         ie_MCLKSEC;
    ///////////////////////////////////////////////////////////
              SIE_ACLK                                         ie_MCLKHD;
    ///////////////////////////////////////////////////////////
              SIE_ACLK                                         ie_MCLKSPF;
    ///////////////////////////////////////////////////////////
              SIE_ACLK                                         ie_MCLKPDM;
    ///////////////////////////////////////////////////////////
              SIE_ACLK                                         ie_MCLKMIC1;
    ///////////////////////////////////////////////////////////
              SIE_ACLK                                         ie_MCLKMIC2;
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_SW_RST_SPFRX(r32)                       _BFGET_(r32, 0, 0)
    #define   SET32AIO_SW_RST_SPFRX(r32,v)                     _BFSET_(r32, 0, 0,v)
    #define   GET16AIO_SW_RST_SPFRX(r16)                       _BFGET_(r16, 0, 0)
    #define   SET16AIO_SW_RST_SPFRX(r16,v)                     _BFSET_(r16, 0, 0,v)

    #define   GET32AIO_SW_RST_REFCLK(r32)                      _BFGET_(r32, 1, 1)
    #define   SET32AIO_SW_RST_REFCLK(r32,v)                    _BFSET_(r32, 1, 1,v)
    #define   GET16AIO_SW_RST_REFCLK(r16)                      _BFGET_(r16, 1, 1)
    #define   SET16AIO_SW_RST_REFCLK(r16,v)                    _BFSET_(r16, 1, 1,v)

    #define   GET32AIO_SW_RST_MIC3(r32)                        _BFGET_(r32, 2, 2)
    #define   SET32AIO_SW_RST_MIC3(r32,v)                      _BFSET_(r32, 2, 2,v)
    #define   GET16AIO_SW_RST_MIC3(r16)                        _BFGET_(r16, 2, 2)
    #define   SET16AIO_SW_RST_MIC3(r16,v)                      _BFSET_(r16, 2, 2,v)

    #define   GET32AIO_SW_RST_MIC4(r32)                        _BFGET_(r32, 3, 3)
    #define   SET32AIO_SW_RST_MIC4(r32,v)                      _BFSET_(r32, 3, 3,v)
    #define   GET16AIO_SW_RST_MIC4(r16)                        _BFGET_(r16, 3, 3)
    #define   SET16AIO_SW_RST_MIC4(r16,v)                      _BFSET_(r16, 3, 3,v)

    #define   GET32AIO_SW_RST_MIC5(r32)                        _BFGET_(r32, 4, 4)
    #define   SET32AIO_SW_RST_MIC5(r32,v)                      _BFSET_(r32, 4, 4,v)
    #define   GET16AIO_SW_RST_MIC5(r16)                        _BFGET_(r16, 4, 4)
    #define   SET16AIO_SW_RST_MIC5(r16,v)                      _BFSET_(r16, 4, 4,v)

    #define   GET32AIO_SW_RST_MIC6(r32)                        _BFGET_(r32, 5, 5)
    #define   SET32AIO_SW_RST_MIC6(r32,v)                      _BFSET_(r32, 5, 5,v)
    #define   GET16AIO_SW_RST_MIC6(r16)                        _BFGET_(r16, 5, 5)
    #define   SET16AIO_SW_RST_MIC6(r16,v)                      _BFSET_(r16, 5, 5,v)

    #define     w32AIO_SW_RST                                  {\
            UNSG32 uSW_RST_SPFRX                               :  1;\
            UNSG32 uSW_RST_REFCLK                              :  1;\
            UNSG32 uSW_RST_MIC3                                :  1;\
            UNSG32 uSW_RST_MIC4                                :  1;\
            UNSG32 uSW_RST_MIC5                                :  1;\
            UNSG32 uSW_RST_MIC6                                :  1;\
            UNSG32 RSVDx2F4_b6                                 : 26;\
          }
    union { UNSG32 u32AIO_SW_RST;
            struct w32AIO_SW_RST;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_CLK_GATE_EN_MIC3(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32AIO_CLK_GATE_EN_MIC3(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16AIO_CLK_GATE_EN_MIC3(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16AIO_CLK_GATE_EN_MIC3(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define   GET32AIO_CLK_GATE_EN_MIC4(r32)                   _BFGET_(r32, 1, 1)
    #define   SET32AIO_CLK_GATE_EN_MIC4(r32,v)                 _BFSET_(r32, 1, 1,v)
    #define   GET16AIO_CLK_GATE_EN_MIC4(r16)                   _BFGET_(r16, 1, 1)
    #define   SET16AIO_CLK_GATE_EN_MIC4(r16,v)                 _BFSET_(r16, 1, 1,v)

    #define   GET32AIO_CLK_GATE_EN_MIC5(r32)                   _BFGET_(r32, 2, 2)
    #define   SET32AIO_CLK_GATE_EN_MIC5(r32,v)                 _BFSET_(r32, 2, 2,v)
    #define   GET16AIO_CLK_GATE_EN_MIC5(r16)                   _BFGET_(r16, 2, 2)
    #define   SET16AIO_CLK_GATE_EN_MIC5(r16,v)                 _BFSET_(r16, 2, 2,v)

    #define   GET32AIO_CLK_GATE_EN_MIC6(r32)                   _BFGET_(r32, 3, 3)
    #define   SET32AIO_CLK_GATE_EN_MIC6(r32,v)                 _BFSET_(r32, 3, 3,v)
    #define   GET16AIO_CLK_GATE_EN_MIC6(r16)                   _BFGET_(r16, 3, 3)
    #define   SET16AIO_CLK_GATE_EN_MIC6(r16,v)                 _BFSET_(r16, 3, 3,v)

    #define   GET32AIO_CLK_GATE_EN_DSD(r32)                    _BFGET_(r32, 4, 4)
    #define   SET32AIO_CLK_GATE_EN_DSD(r32,v)                  _BFSET_(r32, 4, 4,v)
    #define   GET16AIO_CLK_GATE_EN_DSD(r16)                    _BFGET_(r16, 4, 4)
    #define   SET16AIO_CLK_GATE_EN_DSD(r16,v)                  _BFSET_(r16, 4, 4,v)

    #define   GET32AIO_CLK_GATE_EN_GBL(r32)                    _BFGET_(r32, 5, 5)
    #define   SET32AIO_CLK_GATE_EN_GBL(r32,v)                  _BFSET_(r32, 5, 5,v)
    #define   GET16AIO_CLK_GATE_EN_GBL(r16)                    _BFGET_(r16, 5, 5)
    #define   SET16AIO_CLK_GATE_EN_GBL(r16,v)                  _BFSET_(r16, 5, 5,v)

    #define     w32AIO_CLK_GATE_EN                             {\
            UNSG32 uCLK_GATE_EN_MIC3                           :  1;\
            UNSG32 uCLK_GATE_EN_MIC4                           :  1;\
            UNSG32 uCLK_GATE_EN_MIC5                           :  1;\
            UNSG32 uCLK_GATE_EN_MIC6                           :  1;\
            UNSG32 uCLK_GATE_EN_DSD                            :  1;\
            UNSG32 uCLK_GATE_EN_GBL                            :  1;\
            UNSG32 RSVDx2F8_b6                                 : 26;\
          }
    union { UNSG32 u32AIO_CLK_GATE_EN;
            struct w32AIO_CLK_GATE_EN;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_EARC_ARC_SEL(r32)                       _BFGET_(r32, 0, 0)
    #define   SET32AIO_EARC_ARC_SEL(r32,v)                     _BFSET_(r32, 0, 0,v)
    #define   GET16AIO_EARC_ARC_SEL(r16)                       _BFGET_(r16, 0, 0)
    #define   SET16AIO_EARC_ARC_SEL(r16,v)                     _BFSET_(r16, 0, 0,v)

    #define     w32AIO_EARC_ARC                                {\
            UNSG32 uEARC_ARC_SEL                               :  1;\
            UNSG32 RSVDx2FC_b1                                 : 31;\
          }
    union { UNSG32 u32AIO_EARC_ARC;
            struct w32AIO_EARC_ARC;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_SAMP_CTRL_EN_I2STX1(r32)                _BFGET_(r32, 0, 0)
    #define   SET32AIO_SAMP_CTRL_EN_I2STX1(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16AIO_SAMP_CTRL_EN_I2STX1(r16)                _BFGET_(r16, 0, 0)
    #define   SET16AIO_SAMP_CTRL_EN_I2STX1(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32AIO_SAMP_CTRL_EN_I2STX2(r32)                _BFGET_(r32, 1, 1)
    #define   SET32AIO_SAMP_CTRL_EN_I2STX2(r32,v)              _BFSET_(r32, 1, 1,v)
    #define   GET16AIO_SAMP_CTRL_EN_I2STX2(r16)                _BFGET_(r16, 1, 1)
    #define   SET16AIO_SAMP_CTRL_EN_I2STX2(r16,v)              _BFSET_(r16, 1, 1,v)

    #define   GET32AIO_SAMP_CTRL_EN_SPDIFTX(r32)               _BFGET_(r32, 2, 2)
    #define   SET32AIO_SAMP_CTRL_EN_SPDIFTX(r32,v)             _BFSET_(r32, 2, 2,v)
    #define   GET16AIO_SAMP_CTRL_EN_SPDIFTX(r16)               _BFGET_(r16, 2, 2)
    #define   SET16AIO_SAMP_CTRL_EN_SPDIFTX(r16,v)             _BFSET_(r16, 2, 2,v)

    #define   GET32AIO_SAMP_CTRL_EN_SPDIFTX1(r32)              _BFGET_(r32, 3, 3)
    #define   SET32AIO_SAMP_CTRL_EN_SPDIFTX1(r32,v)            _BFSET_(r32, 3, 3,v)
    #define   GET16AIO_SAMP_CTRL_EN_SPDIFTX1(r16)              _BFGET_(r16, 3, 3)
    #define   SET16AIO_SAMP_CTRL_EN_SPDIFTX1(r16,v)            _BFSET_(r16, 3, 3,v)

    #define   GET32AIO_SAMP_CTRL_EN_HDMI(r32)                  _BFGET_(r32, 4, 4)
    #define   SET32AIO_SAMP_CTRL_EN_HDMI(r32,v)                _BFSET_(r32, 4, 4,v)
    #define   GET16AIO_SAMP_CTRL_EN_HDMI(r16)                  _BFGET_(r16, 4, 4)
    #define   SET16AIO_SAMP_CTRL_EN_HDMI(r16,v)                _BFSET_(r16, 4, 4,v)

    #define   GET32AIO_SAMP_CTRL_EN_HDMIARCTX(r32)             _BFGET_(r32, 5, 5)
    #define   SET32AIO_SAMP_CTRL_EN_HDMIARCTX(r32,v)           _BFSET_(r32, 5, 5,v)
    #define   GET16AIO_SAMP_CTRL_EN_HDMIARCTX(r16)             _BFGET_(r16, 5, 5)
    #define   SET16AIO_SAMP_CTRL_EN_HDMIARCTX(r16,v)           _BFSET_(r16, 5, 5,v)

    #define   GET32AIO_SAMP_CTRL_EN_SPDIFRX(r32)               _BFGET_(r32, 6, 6)
    #define   SET32AIO_SAMP_CTRL_EN_SPDIFRX(r32,v)             _BFSET_(r32, 6, 6,v)
    #define   GET16AIO_SAMP_CTRL_EN_SPDIFRX(r16)               _BFGET_(r16, 6, 6)
    #define   SET16AIO_SAMP_CTRL_EN_SPDIFRX(r16,v)             _BFSET_(r16, 6, 6,v)

    #define   GET32AIO_SAMP_CTRL_EN_I2SRX1(r32)                _BFGET_(r32, 7, 7)
    #define   SET32AIO_SAMP_CTRL_EN_I2SRX1(r32,v)              _BFSET_(r32, 7, 7,v)
    #define   GET16AIO_SAMP_CTRL_EN_I2SRX1(r16)                _BFGET_(r16, 7, 7)
    #define   SET16AIO_SAMP_CTRL_EN_I2SRX1(r16,v)              _BFSET_(r16, 7, 7,v)

    #define   GET32AIO_SAMP_CTRL_EN_I2SRX2(r32)                _BFGET_(r32, 8, 8)
    #define   SET32AIO_SAMP_CTRL_EN_I2SRX2(r32,v)              _BFSET_(r32, 8, 8,v)
    #define   GET16AIO_SAMP_CTRL_EN_I2SRX2(r16)                _BFGET_(r16, 8, 8)
    #define   SET16AIO_SAMP_CTRL_EN_I2SRX2(r16,v)              _BFSET_(r16, 8, 8,v)

    #define   GET32AIO_SAMP_CTRL_EN_I2SRX3(r32)                _BFGET_(r32, 9, 9)
    #define   SET32AIO_SAMP_CTRL_EN_I2SRX3(r32,v)              _BFSET_(r32, 9, 9,v)
    #define   GET16AIO_SAMP_CTRL_EN_I2SRX3(r16)                _BFGET_(r16, 9, 9)
    #define   SET16AIO_SAMP_CTRL_EN_I2SRX3(r16,v)              _BFSET_(r16, 9, 9,v)

    #define   GET32AIO_SAMP_CTRL_EN_I2SRX4(r32)                _BFGET_(r32,10,10)
    #define   SET32AIO_SAMP_CTRL_EN_I2SRX4(r32,v)              _BFSET_(r32,10,10,v)
    #define   GET16AIO_SAMP_CTRL_EN_I2SRX4(r16)                _BFGET_(r16,10,10)
    #define   SET16AIO_SAMP_CTRL_EN_I2SRX4(r16,v)              _BFSET_(r16,10,10,v)

    #define   GET32AIO_SAMP_CTRL_EN_I2SRX5(r32)                _BFGET_(r32,11,11)
    #define   SET32AIO_SAMP_CTRL_EN_I2SRX5(r32,v)              _BFSET_(r32,11,11,v)
    #define   GET16AIO_SAMP_CTRL_EN_I2SRX5(r16)                _BFGET_(r16,11,11)
    #define   SET16AIO_SAMP_CTRL_EN_I2SRX5(r16,v)              _BFSET_(r16,11,11,v)

    #define   GET32AIO_SAMP_CTRL_EN_I2SRX6(r32)                _BFGET_(r32,12,12)
    #define   SET32AIO_SAMP_CTRL_EN_I2SRX6(r32,v)              _BFSET_(r32,12,12,v)
    #define   GET16AIO_SAMP_CTRL_EN_I2SRX6(r16)                _BFGET_(r16,12,12)
    #define   SET16AIO_SAMP_CTRL_EN_I2SRX6(r16,v)              _BFSET_(r16,12,12,v)

    #define   GET32AIO_SAMP_CTRL_EN_AUDTIMER(r32)              _BFGET_(r32,13,13)
    #define   SET32AIO_SAMP_CTRL_EN_AUDTIMER(r32,v)            _BFSET_(r32,13,13,v)
    #define   GET16AIO_SAMP_CTRL_EN_AUDTIMER(r16)              _BFGET_(r16,13,13)
    #define   SET16AIO_SAMP_CTRL_EN_AUDTIMER(r16,v)            _BFSET_(r16,13,13,v)

    #define   GET32AIO_SAMP_CTRL_EN_PDMRX1(r32)                _BFGET_(r32,14,14)
    #define   SET32AIO_SAMP_CTRL_EN_PDMRX1(r32,v)              _BFSET_(r32,14,14,v)
    #define   GET16AIO_SAMP_CTRL_EN_PDMRX1(r16)                _BFGET_(r16,14,14)
    #define   SET16AIO_SAMP_CTRL_EN_PDMRX1(r16,v)              _BFSET_(r16,14,14,v)

    #define   GET32AIO_SAMP_CTRL_EN_DSDRX1(r32)                _BFGET_(r32,15,15)
    #define   SET32AIO_SAMP_CTRL_EN_DSDRX1(r32,v)              _BFSET_(r32,15,15,v)
    #define   GET16AIO_SAMP_CTRL_EN_DSDRX1(r16)                _BFGET_(r16,15,15)
    #define   SET16AIO_SAMP_CTRL_EN_DSDRX1(r16,v)              _BFSET_(r16,15,15,v)

    #define     w32AIO_SAMP_CTRL                               {\
            UNSG32 uSAMP_CTRL_EN_I2STX1                        :  1;\
            UNSG32 uSAMP_CTRL_EN_I2STX2                        :  1;\
            UNSG32 uSAMP_CTRL_EN_SPDIFTX                       :  1;\
            UNSG32 uSAMP_CTRL_EN_SPDIFTX1                      :  1;\
            UNSG32 uSAMP_CTRL_EN_HDMI                          :  1;\
            UNSG32 uSAMP_CTRL_EN_HDMIARCTX                     :  1;\
            UNSG32 uSAMP_CTRL_EN_SPDIFRX                       :  1;\
            UNSG32 uSAMP_CTRL_EN_I2SRX1                        :  1;\
            UNSG32 uSAMP_CTRL_EN_I2SRX2                        :  1;\
            UNSG32 uSAMP_CTRL_EN_I2SRX3                        :  1;\
            UNSG32 uSAMP_CTRL_EN_I2SRX4                        :  1;\
            UNSG32 uSAMP_CTRL_EN_I2SRX5                        :  1;\
            UNSG32 uSAMP_CTRL_EN_I2SRX6                        :  1;\
            UNSG32 uSAMP_CTRL_EN_AUDTIMER                      :  1;\
            UNSG32 uSAMP_CTRL_EN_PDMRX1                        :  1;\
            UNSG32 uSAMP_CTRL_EN_DSDRX1                        :  1;\
            UNSG32 RSVDx300_b16                                : 16;\
          }
    union { UNSG32 u32AIO_SAMP_CTRL;
            struct w32AIO_SAMP_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_SAMPINFO_REQ_I2STX1(r32)                _BFGET_(r32, 0, 0)
    #define   SET32AIO_SAMPINFO_REQ_I2STX1(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16AIO_SAMPINFO_REQ_I2STX1(r16)                _BFGET_(r16, 0, 0)
    #define   SET16AIO_SAMPINFO_REQ_I2STX1(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32AIO_SAMPINFO_REQ_I2STX2(r32)                _BFGET_(r32, 1, 1)
    #define   SET32AIO_SAMPINFO_REQ_I2STX2(r32,v)              _BFSET_(r32, 1, 1,v)
    #define   GET16AIO_SAMPINFO_REQ_I2STX2(r16)                _BFGET_(r16, 1, 1)
    #define   SET16AIO_SAMPINFO_REQ_I2STX2(r16,v)              _BFSET_(r16, 1, 1,v)

    #define   GET32AIO_SAMPINFO_REQ_HDMITX(r32)                _BFGET_(r32, 2, 2)
    #define   SET32AIO_SAMPINFO_REQ_HDMITX(r32,v)              _BFSET_(r32, 2, 2,v)
    #define   GET16AIO_SAMPINFO_REQ_HDMITX(r16)                _BFGET_(r16, 2, 2)
    #define   SET16AIO_SAMPINFO_REQ_HDMITX(r16,v)              _BFSET_(r16, 2, 2,v)

    #define   GET32AIO_SAMPINFO_REQ_HDMIARCTX(r32)             _BFGET_(r32, 3, 3)
    #define   SET32AIO_SAMPINFO_REQ_HDMIARCTX(r32,v)           _BFSET_(r32, 3, 3,v)
    #define   GET16AIO_SAMPINFO_REQ_HDMIARCTX(r16)             _BFGET_(r16, 3, 3)
    #define   SET16AIO_SAMPINFO_REQ_HDMIARCTX(r16,v)           _BFSET_(r16, 3, 3,v)

    #define   GET32AIO_SAMPINFO_REQ_SPDIFTX(r32)               _BFGET_(r32, 4, 4)
    #define   SET32AIO_SAMPINFO_REQ_SPDIFTX(r32,v)             _BFSET_(r32, 4, 4,v)
    #define   GET16AIO_SAMPINFO_REQ_SPDIFTX(r16)               _BFGET_(r16, 4, 4)
    #define   SET16AIO_SAMPINFO_REQ_SPDIFTX(r16,v)             _BFSET_(r16, 4, 4,v)

    #define   GET32AIO_SAMPINFO_REQ_SPDIFTX1(r32)              _BFGET_(r32, 5, 5)
    #define   SET32AIO_SAMPINFO_REQ_SPDIFTX1(r32,v)            _BFSET_(r32, 5, 5,v)
    #define   GET16AIO_SAMPINFO_REQ_SPDIFTX1(r16)              _BFGET_(r16, 5, 5)
    #define   SET16AIO_SAMPINFO_REQ_SPDIFTX1(r16,v)            _BFSET_(r16, 5, 5,v)

    #define   GET32AIO_SAMPINFO_REQ_SPDIFRX(r32)               _BFGET_(r32, 6, 6)
    #define   SET32AIO_SAMPINFO_REQ_SPDIFRX(r32,v)             _BFSET_(r32, 6, 6,v)
    #define   GET16AIO_SAMPINFO_REQ_SPDIFRX(r16)               _BFGET_(r16, 6, 6)
    #define   SET16AIO_SAMPINFO_REQ_SPDIFRX(r16,v)             _BFSET_(r16, 6, 6,v)

    #define   GET32AIO_SAMPINFO_REQ_I2SRX1(r32)                _BFGET_(r32, 7, 7)
    #define   SET32AIO_SAMPINFO_REQ_I2SRX1(r32,v)              _BFSET_(r32, 7, 7,v)
    #define   GET16AIO_SAMPINFO_REQ_I2SRX1(r16)                _BFGET_(r16, 7, 7)
    #define   SET16AIO_SAMPINFO_REQ_I2SRX1(r16,v)              _BFSET_(r16, 7, 7,v)

    #define   GET32AIO_SAMPINFO_REQ_I2SRX2(r32)                _BFGET_(r32, 8, 8)
    #define   SET32AIO_SAMPINFO_REQ_I2SRX2(r32,v)              _BFSET_(r32, 8, 8,v)
    #define   GET16AIO_SAMPINFO_REQ_I2SRX2(r16)                _BFGET_(r16, 8, 8)
    #define   SET16AIO_SAMPINFO_REQ_I2SRX2(r16,v)              _BFSET_(r16, 8, 8,v)

    #define   GET32AIO_SAMPINFO_REQ_I2SRX3(r32)                _BFGET_(r32, 9, 9)
    #define   SET32AIO_SAMPINFO_REQ_I2SRX3(r32,v)              _BFSET_(r32, 9, 9,v)
    #define   GET16AIO_SAMPINFO_REQ_I2SRX3(r16)                _BFGET_(r16, 9, 9)
    #define   SET16AIO_SAMPINFO_REQ_I2SRX3(r16,v)              _BFSET_(r16, 9, 9,v)

    #define   GET32AIO_SAMPINFO_REQ_I2SRX4(r32)                _BFGET_(r32,10,10)
    #define   SET32AIO_SAMPINFO_REQ_I2SRX4(r32,v)              _BFSET_(r32,10,10,v)
    #define   GET16AIO_SAMPINFO_REQ_I2SRX4(r16)                _BFGET_(r16,10,10)
    #define   SET16AIO_SAMPINFO_REQ_I2SRX4(r16,v)              _BFSET_(r16,10,10,v)

    #define   GET32AIO_SAMPINFO_REQ_I2SRX5(r32)                _BFGET_(r32,11,11)
    #define   SET32AIO_SAMPINFO_REQ_I2SRX5(r32,v)              _BFSET_(r32,11,11,v)
    #define   GET16AIO_SAMPINFO_REQ_I2SRX5(r16)                _BFGET_(r16,11,11)
    #define   SET16AIO_SAMPINFO_REQ_I2SRX5(r16,v)              _BFSET_(r16,11,11,v)

    #define   GET32AIO_SAMPINFO_REQ_I2SRX6(r32)                _BFGET_(r32,12,12)
    #define   SET32AIO_SAMPINFO_REQ_I2SRX6(r32,v)              _BFSET_(r32,12,12,v)
    #define   GET16AIO_SAMPINFO_REQ_I2SRX6(r16)                _BFGET_(r16,12,12)
    #define   SET16AIO_SAMPINFO_REQ_I2SRX6(r16,v)              _BFSET_(r16,12,12,v)

    #define   GET32AIO_SAMPINFO_REQ_PDMRX1(r32)                _BFGET_(r32,13,13)
    #define   SET32AIO_SAMPINFO_REQ_PDMRX1(r32,v)              _BFSET_(r32,13,13,v)
    #define   GET16AIO_SAMPINFO_REQ_PDMRX1(r16)                _BFGET_(r16,13,13)
    #define   SET16AIO_SAMPINFO_REQ_PDMRX1(r16,v)              _BFSET_(r16,13,13,v)

    #define   GET32AIO_SAMPINFO_REQ_DSDRX1(r32)                _BFGET_(r32,14,14)
    #define   SET32AIO_SAMPINFO_REQ_DSDRX1(r32,v)              _BFSET_(r32,14,14,v)
    #define   GET16AIO_SAMPINFO_REQ_DSDRX1(r16)                _BFGET_(r16,14,14)
    #define   SET16AIO_SAMPINFO_REQ_DSDRX1(r16,v)              _BFSET_(r16,14,14,v)

    #define     w32AIO_SAMPINFO_REQ                            {\
            UNSG32 uSAMPINFO_REQ_I2STX1                        :  1;\
            UNSG32 uSAMPINFO_REQ_I2STX2                        :  1;\
            UNSG32 uSAMPINFO_REQ_HDMITX                        :  1;\
            UNSG32 uSAMPINFO_REQ_HDMIARCTX                     :  1;\
            UNSG32 uSAMPINFO_REQ_SPDIFTX                       :  1;\
            UNSG32 uSAMPINFO_REQ_SPDIFTX1                      :  1;\
            UNSG32 uSAMPINFO_REQ_SPDIFRX                       :  1;\
            UNSG32 uSAMPINFO_REQ_I2SRX1                        :  1;\
            UNSG32 uSAMPINFO_REQ_I2SRX2                        :  1;\
            UNSG32 uSAMPINFO_REQ_I2SRX3                        :  1;\
            UNSG32 uSAMPINFO_REQ_I2SRX4                        :  1;\
            UNSG32 uSAMPINFO_REQ_I2SRX5                        :  1;\
            UNSG32 uSAMPINFO_REQ_I2SRX6                        :  1;\
            UNSG32 uSAMPINFO_REQ_PDMRX1                        :  1;\
            UNSG32 uSAMPINFO_REQ_DSDRX1                        :  1;\
            UNSG32 RSVDx304_b15                                : 17;\
          }
    union { UNSG32 u32AIO_SAMPINFO_REQ;
            struct w32AIO_SAMPINFO_REQ;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_SCR_I2STX1(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_SCR_I2STX1(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_SCR                                     {\
            UNSG32 uSCR_I2STX1                                 : 32;\
          }
    union { UNSG32 u32AIO_SCR;
            struct w32AIO_SCR;
          };
    #define   GET32AIO_SCR_I2STX2(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_SCR_I2STX2(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_SCR1                                    {\
            UNSG32 uSCR_I2STX2                                 : 32;\
          }
    union { UNSG32 u32AIO_SCR1;
            struct w32AIO_SCR1;
          };
    #define   GET32AIO_SCR_HDMITX(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_SCR_HDMITX(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_SCR2                                    {\
            UNSG32 uSCR_HDMITX                                 : 32;\
          }
    union { UNSG32 u32AIO_SCR2;
            struct w32AIO_SCR2;
          };
    #define   GET32AIO_SCR_HDMIARCTX(r32)                      _BFGET_(r32,31, 0)
    #define   SET32AIO_SCR_HDMIARCTX(r32,v)                    _BFSET_(r32,31, 0,v)

    #define     w32AIO_SCR3                                    {\
            UNSG32 uSCR_HDMIARCTX                              : 32;\
          }
    union { UNSG32 u32AIO_SCR3;
            struct w32AIO_SCR3;
          };
    #define   GET32AIO_SCR_SPDIFTX(r32)                        _BFGET_(r32,31, 0)
    #define   SET32AIO_SCR_SPDIFTX(r32,v)                      _BFSET_(r32,31, 0,v)

    #define     w32AIO_SCR4                                    {\
            UNSG32 uSCR_SPDIFTX                                : 32;\
          }
    union { UNSG32 u32AIO_SCR4;
            struct w32AIO_SCR4;
          };
    #define   GET32AIO_SCR_SPDIFTX1(r32)                       _BFGET_(r32,31, 0)
    #define   SET32AIO_SCR_SPDIFTX1(r32,v)                     _BFSET_(r32,31, 0,v)

    #define     w32AIO_SCR5                                    {\
            UNSG32 uSCR_SPDIFTX1                               : 32;\
          }
    union { UNSG32 u32AIO_SCR5;
            struct w32AIO_SCR5;
          };
    #define   GET32AIO_SCR_SPDIFRX(r32)                        _BFGET_(r32,31, 0)
    #define   SET32AIO_SCR_SPDIFRX(r32,v)                      _BFSET_(r32,31, 0,v)

    #define     w32AIO_SCR6                                    {\
            UNSG32 uSCR_SPDIFRX                                : 32;\
          }
    union { UNSG32 u32AIO_SCR6;
            struct w32AIO_SCR6;
          };
    #define   GET32AIO_SCR_I2SRX1(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_SCR_I2SRX1(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_SCR7                                    {\
            UNSG32 uSCR_I2SRX1                                 : 32;\
          }
    union { UNSG32 u32AIO_SCR7;
            struct w32AIO_SCR7;
          };
    #define   GET32AIO_SCR_I2SRX2(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_SCR_I2SRX2(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_SCR8                                    {\
            UNSG32 uSCR_I2SRX2                                 : 32;\
          }
    union { UNSG32 u32AIO_SCR8;
            struct w32AIO_SCR8;
          };
    #define   GET32AIO_SCR_I2SRX3(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_SCR_I2SRX3(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_SCR9                                    {\
            UNSG32 uSCR_I2SRX3                                 : 32;\
          }
    union { UNSG32 u32AIO_SCR9;
            struct w32AIO_SCR9;
          };
    #define   GET32AIO_SCR_I2SRX4(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_SCR_I2SRX4(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_SCR10                                   {\
            UNSG32 uSCR_I2SRX4                                 : 32;\
          }
    union { UNSG32 u32AIO_SCR10;
            struct w32AIO_SCR10;
          };
    #define   GET32AIO_SCR_I2SRX5(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_SCR_I2SRX5(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_SCR11                                   {\
            UNSG32 uSCR_I2SRX5                                 : 32;\
          }
    union { UNSG32 u32AIO_SCR11;
            struct w32AIO_SCR11;
          };
    #define   GET32AIO_SCR_I2SRX6(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_SCR_I2SRX6(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_SCR12                                   {\
            UNSG32 uSCR_I2SRX6                                 : 32;\
          }
    union { UNSG32 u32AIO_SCR12;
            struct w32AIO_SCR12;
          };
    #define   GET32AIO_SCR_PDMRX1(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_SCR_PDMRX1(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_SCR13                                   {\
            UNSG32 uSCR_PDMRX1                                 : 32;\
          }
    union { UNSG32 u32AIO_SCR13;
            struct w32AIO_SCR13;
          };
    #define   GET32AIO_SCR_DSDRX1(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_SCR_DSDRX1(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_SCR14                                   {\
            UNSG32 uSCR_DSDRX1                                 : 32;\
          }
    union { UNSG32 u32AIO_SCR14;
            struct w32AIO_SCR14;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_STR_I2STX1(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_STR_I2STX1(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_STR                                     {\
            UNSG32 uSTR_I2STX1                                 : 32;\
          }
    union { UNSG32 u32AIO_STR;
            struct w32AIO_STR;
          };
    #define   GET32AIO_STR_I2STX2(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_STR_I2STX2(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_STR1                                    {\
            UNSG32 uSTR_I2STX2                                 : 32;\
          }
    union { UNSG32 u32AIO_STR1;
            struct w32AIO_STR1;
          };
    #define   GET32AIO_STR_SPDIFTX(r32)                        _BFGET_(r32,31, 0)
    #define   SET32AIO_STR_SPDIFTX(r32,v)                      _BFSET_(r32,31, 0,v)

    #define     w32AIO_STR2                                    {\
            UNSG32 uSTR_SPDIFTX                                : 32;\
          }
    union { UNSG32 u32AIO_STR2;
            struct w32AIO_STR2;
          };
    #define   GET32AIO_STR_SPDIFTX1(r32)                       _BFGET_(r32,31, 0)
    #define   SET32AIO_STR_SPDIFTX1(r32,v)                     _BFSET_(r32,31, 0,v)

    #define     w32AIO_STR3                                    {\
            UNSG32 uSTR_SPDIFTX1                               : 32;\
          }
    union { UNSG32 u32AIO_STR3;
            struct w32AIO_STR3;
          };
    #define   GET32AIO_STR_HDMITX(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_STR_HDMITX(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_STR4                                    {\
            UNSG32 uSTR_HDMITX                                 : 32;\
          }
    union { UNSG32 u32AIO_STR4;
            struct w32AIO_STR4;
          };
    #define   GET32AIO_STR_HDMIARCTX(r32)                      _BFGET_(r32,31, 0)
    #define   SET32AIO_STR_HDMIARCTX(r32,v)                    _BFSET_(r32,31, 0,v)

    #define     w32AIO_STR5                                    {\
            UNSG32 uSTR_HDMIARCTX                              : 32;\
          }
    union { UNSG32 u32AIO_STR5;
            struct w32AIO_STR5;
          };
    #define   GET32AIO_STR_SPDIFRX(r32)                        _BFGET_(r32,31, 0)
    #define   SET32AIO_STR_SPDIFRX(r32,v)                      _BFSET_(r32,31, 0,v)

    #define     w32AIO_STR6                                    {\
            UNSG32 uSTR_SPDIFRX                                : 32;\
          }
    union { UNSG32 u32AIO_STR6;
            struct w32AIO_STR6;
          };
    #define   GET32AIO_STR_I2SRX1(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_STR_I2SRX1(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_STR7                                    {\
            UNSG32 uSTR_I2SRX1                                 : 32;\
          }
    union { UNSG32 u32AIO_STR7;
            struct w32AIO_STR7;
          };
    #define   GET32AIO_STR_I2SRX2(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_STR_I2SRX2(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_STR8                                    {\
            UNSG32 uSTR_I2SRX2                                 : 32;\
          }
    union { UNSG32 u32AIO_STR8;
            struct w32AIO_STR8;
          };
    #define   GET32AIO_STR_I2SRX3(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_STR_I2SRX3(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_STR9                                    {\
            UNSG32 uSTR_I2SRX3                                 : 32;\
          }
    union { UNSG32 u32AIO_STR9;
            struct w32AIO_STR9;
          };
    #define   GET32AIO_STR_I2SRX4(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_STR_I2SRX4(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_STR10                                   {\
            UNSG32 uSTR_I2SRX4                                 : 32;\
          }
    union { UNSG32 u32AIO_STR10;
            struct w32AIO_STR10;
          };
    #define   GET32AIO_STR_I2SRX5(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_STR_I2SRX5(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_STR11                                   {\
            UNSG32 uSTR_I2SRX5                                 : 32;\
          }
    union { UNSG32 u32AIO_STR11;
            struct w32AIO_STR11;
          };
    #define   GET32AIO_STR_I2SRX6(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_STR_I2SRX6(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_STR12                                   {\
            UNSG32 uSTR_I2SRX6                                 : 32;\
          }
    union { UNSG32 u32AIO_STR12;
            struct w32AIO_STR12;
          };
    #define   GET32AIO_STR_PDMRX1(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_STR_PDMRX1(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_STR13                                   {\
            UNSG32 uSTR_PDMRX1                                 : 32;\
          }
    union { UNSG32 u32AIO_STR13;
            struct w32AIO_STR13;
          };
    #define   GET32AIO_STR_DSDRX1(r32)                         _BFGET_(r32,31, 0)
    #define   SET32AIO_STR_DSDRX1(r32,v)                       _BFSET_(r32,31, 0,v)

    #define     w32AIO_STR14                                   {\
            UNSG32 uSTR_DSDRX1                                 : 32;\
          }
    union { UNSG32 u32AIO_STR14;
            struct w32AIO_STR14;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_ATR_TIMER(r32)                          _BFGET_(r32,31, 0)
    #define   SET32AIO_ATR_TIMER(r32,v)                        _BFSET_(r32,31, 0,v)

    #define     w32AIO_ATR                                     {\
            UNSG32 uATR_TIMER                                  : 32;\
          }
    union { UNSG32 u32AIO_ATR;
            struct w32AIO_ATR;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AIO_XFEED_I2S1_LRCKIO_MODE(r32)             _BFGET_(r32, 1, 0)
    #define   SET32AIO_XFEED_I2S1_LRCKIO_MODE(r32,v)           _BFSET_(r32, 1, 0,v)
    #define   GET16AIO_XFEED_I2S1_LRCKIO_MODE(r16)             _BFGET_(r16, 1, 0)
    #define   SET16AIO_XFEED_I2S1_LRCKIO_MODE(r16,v)           _BFSET_(r16, 1, 0,v)

    #define   GET32AIO_XFEED_I2S1_BCLKIO_MODE(r32)             _BFGET_(r32, 3, 2)
    #define   SET32AIO_XFEED_I2S1_BCLKIO_MODE(r32,v)           _BFSET_(r32, 3, 2,v)
    #define   GET16AIO_XFEED_I2S1_BCLKIO_MODE(r16)             _BFGET_(r16, 3, 2)
    #define   SET16AIO_XFEED_I2S1_BCLKIO_MODE(r16,v)           _BFSET_(r16, 3, 2,v)

    #define   GET32AIO_XFEED_I2S2_LRCKIO_MODE(r32)             _BFGET_(r32, 5, 4)
    #define   SET32AIO_XFEED_I2S2_LRCKIO_MODE(r32,v)           _BFSET_(r32, 5, 4,v)
    #define   GET16AIO_XFEED_I2S2_LRCKIO_MODE(r16)             _BFGET_(r16, 5, 4)
    #define   SET16AIO_XFEED_I2S2_LRCKIO_MODE(r16,v)           _BFSET_(r16, 5, 4,v)

    #define   GET32AIO_XFEED_I2S2_BCLKIO_MODE(r32)             _BFGET_(r32, 7, 6)
    #define   SET32AIO_XFEED_I2S2_BCLKIO_MODE(r32,v)           _BFSET_(r32, 7, 6,v)
    #define   GET16AIO_XFEED_I2S2_BCLKIO_MODE(r16)             _BFGET_(r16, 7, 6)
    #define   SET16AIO_XFEED_I2S2_BCLKIO_MODE(r16,v)           _BFSET_(r16, 7, 6,v)

    #define   GET32AIO_XFEED_I2S3_LRCKIO_MODE(r32)             _BFGET_(r32, 8, 8)
    #define   SET32AIO_XFEED_I2S3_LRCKIO_MODE(r32,v)           _BFSET_(r32, 8, 8,v)
    #define   GET16AIO_XFEED_I2S3_LRCKIO_MODE(r16)             _BFGET_(r16, 8, 8)
    #define   SET16AIO_XFEED_I2S3_LRCKIO_MODE(r16,v)           _BFSET_(r16, 8, 8,v)

    #define   GET32AIO_XFEED_I2S3_BCLKIO_MODE(r32)             _BFGET_(r32, 9, 9)
    #define   SET32AIO_XFEED_I2S3_BCLKIO_MODE(r32,v)           _BFSET_(r32, 9, 9,v)
    #define   GET16AIO_XFEED_I2S3_BCLKIO_MODE(r16)             _BFGET_(r16, 9, 9)
    #define   SET16AIO_XFEED_I2S3_BCLKIO_MODE(r16,v)           _BFSET_(r16, 9, 9,v)

    #define   GET32AIO_XFEED_PDM_CLK_SEL(r32)                  _BFGET_(r32,12,10)
    #define   SET32AIO_XFEED_PDM_CLK_SEL(r32,v)                _BFSET_(r32,12,10,v)
    #define   GET16AIO_XFEED_PDM_CLK_SEL(r16)                  _BFGET_(r16,12,10)
    #define   SET16AIO_XFEED_PDM_CLK_SEL(r16,v)                _BFSET_(r16,12,10,v)

    #define   GET32AIO_XFEED_PDMC_SEL(r32)                     _BFGET_(r32,13,13)
    #define   SET32AIO_XFEED_PDMC_SEL(r32,v)                   _BFSET_(r32,13,13,v)
    #define   GET16AIO_XFEED_PDMC_SEL(r16)                     _BFGET_(r16,13,13)
    #define   SET16AIO_XFEED_PDMC_SEL(r16,v)                   _BFSET_(r16,13,13,v)

    #define   GET32AIO_XFEED_PDM_SEL(r32)                      _BFGET_(r32,17,14)
    #define   SET32AIO_XFEED_PDM_SEL(r32,v)                    _BFSET_(r32,17,14,v)

    #define     w32AIO_XFEED                                   {\
            UNSG32 uXFEED_I2S1_LRCKIO_MODE                     :  2;\
            UNSG32 uXFEED_I2S1_BCLKIO_MODE                     :  2;\
            UNSG32 uXFEED_I2S2_LRCKIO_MODE                     :  2;\
            UNSG32 uXFEED_I2S2_BCLKIO_MODE                     :  2;\
            UNSG32 uXFEED_I2S3_LRCKIO_MODE                     :  1;\
            UNSG32 uXFEED_I2S3_BCLKIO_MODE                     :  1;\
            UNSG32 uXFEED_PDM_CLK_SEL                          :  3;\
            UNSG32 uXFEED_PDMC_SEL                             :  1;\
            UNSG32 uXFEED_PDM_SEL                              :  4;\
            UNSG32 RSVDx384_b18                                : 14;\
          }
    union { UNSG32 u32AIO_XFEED;
            struct w32AIO_XFEED;
          };
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_DMIC_SRAMPWR;
    ///////////////////////////////////////////////////////////
    } SIE_AIO;

    typedef union  T32AIO_EARC_SRC
          { UNSG32 u32;
            struct w32AIO_EARC_SRC;
                 } T32AIO_EARC_SRC;
    typedef union  T32AIO_IRQENABLE
          { UNSG32 u32;
            struct w32AIO_IRQENABLE;
                 } T32AIO_IRQENABLE;
    typedef union  T32AIO_IRQSTS
          { UNSG32 u32;
            struct w32AIO_IRQSTS;
                 } T32AIO_IRQSTS;
    typedef union  T32AIO_PRISRC
          { UNSG32 u32;
            struct w32AIO_PRISRC;
                 } T32AIO_PRISRC;
    typedef union  T32AIO_SECSRC
          { UNSG32 u32;
            struct w32AIO_SECSRC;
                 } T32AIO_SECSRC;
    typedef union  T32AIO_HDSRC
          { UNSG32 u32;
            struct w32AIO_HDSRC;
                 } T32AIO_HDSRC;
    typedef union  T32AIO_PDM_MIC_SEL
          { UNSG32 u32;
            struct w32AIO_PDM_MIC_SEL;
                 } T32AIO_PDM_MIC_SEL;
    typedef union  T32AIO_SW_RST
          { UNSG32 u32;
            struct w32AIO_SW_RST;
                 } T32AIO_SW_RST;
    typedef union  T32AIO_CLK_GATE_EN
          { UNSG32 u32;
            struct w32AIO_CLK_GATE_EN;
                 } T32AIO_CLK_GATE_EN;
    typedef union  T32AIO_EARC_ARC
          { UNSG32 u32;
            struct w32AIO_EARC_ARC;
                 } T32AIO_EARC_ARC;
    typedef union  T32AIO_SAMP_CTRL
          { UNSG32 u32;
            struct w32AIO_SAMP_CTRL;
                 } T32AIO_SAMP_CTRL;
    typedef union  T32AIO_SAMPINFO_REQ
          { UNSG32 u32;
            struct w32AIO_SAMPINFO_REQ;
                 } T32AIO_SAMPINFO_REQ;
    typedef union  T32AIO_SCR
          { UNSG32 u32;
            struct w32AIO_SCR;
                 } T32AIO_SCR;
    typedef union  T32AIO_SCR1
          { UNSG32 u32;
            struct w32AIO_SCR1;
                 } T32AIO_SCR1;
    typedef union  T32AIO_SCR2
          { UNSG32 u32;
            struct w32AIO_SCR2;
                 } T32AIO_SCR2;
    typedef union  T32AIO_SCR3
          { UNSG32 u32;
            struct w32AIO_SCR3;
                 } T32AIO_SCR3;
    typedef union  T32AIO_SCR4
          { UNSG32 u32;
            struct w32AIO_SCR4;
                 } T32AIO_SCR4;
    typedef union  T32AIO_SCR5
          { UNSG32 u32;
            struct w32AIO_SCR5;
                 } T32AIO_SCR5;
    typedef union  T32AIO_SCR6
          { UNSG32 u32;
            struct w32AIO_SCR6;
                 } T32AIO_SCR6;
    typedef union  T32AIO_SCR7
          { UNSG32 u32;
            struct w32AIO_SCR7;
                 } T32AIO_SCR7;
    typedef union  T32AIO_SCR8
          { UNSG32 u32;
            struct w32AIO_SCR8;
                 } T32AIO_SCR8;
    typedef union  T32AIO_SCR9
          { UNSG32 u32;
            struct w32AIO_SCR9;
                 } T32AIO_SCR9;
    typedef union  T32AIO_SCR10
          { UNSG32 u32;
            struct w32AIO_SCR10;
                 } T32AIO_SCR10;
    typedef union  T32AIO_SCR11
          { UNSG32 u32;
            struct w32AIO_SCR11;
                 } T32AIO_SCR11;
    typedef union  T32AIO_SCR12
          { UNSG32 u32;
            struct w32AIO_SCR12;
                 } T32AIO_SCR12;
    typedef union  T32AIO_SCR13
          { UNSG32 u32;
            struct w32AIO_SCR13;
                 } T32AIO_SCR13;
    typedef union  T32AIO_SCR14
          { UNSG32 u32;
            struct w32AIO_SCR14;
                 } T32AIO_SCR14;
    typedef union  T32AIO_STR
          { UNSG32 u32;
            struct w32AIO_STR;
                 } T32AIO_STR;
    typedef union  T32AIO_STR1
          { UNSG32 u32;
            struct w32AIO_STR1;
                 } T32AIO_STR1;
    typedef union  T32AIO_STR2
          { UNSG32 u32;
            struct w32AIO_STR2;
                 } T32AIO_STR2;
    typedef union  T32AIO_STR3
          { UNSG32 u32;
            struct w32AIO_STR3;
                 } T32AIO_STR3;
    typedef union  T32AIO_STR4
          { UNSG32 u32;
            struct w32AIO_STR4;
                 } T32AIO_STR4;
    typedef union  T32AIO_STR5
          { UNSG32 u32;
            struct w32AIO_STR5;
                 } T32AIO_STR5;
    typedef union  T32AIO_STR6
          { UNSG32 u32;
            struct w32AIO_STR6;
                 } T32AIO_STR6;
    typedef union  T32AIO_STR7
          { UNSG32 u32;
            struct w32AIO_STR7;
                 } T32AIO_STR7;
    typedef union  T32AIO_STR8
          { UNSG32 u32;
            struct w32AIO_STR8;
                 } T32AIO_STR8;
    typedef union  T32AIO_STR9
          { UNSG32 u32;
            struct w32AIO_STR9;
                 } T32AIO_STR9;
    typedef union  T32AIO_STR10
          { UNSG32 u32;
            struct w32AIO_STR10;
                 } T32AIO_STR10;
    typedef union  T32AIO_STR11
          { UNSG32 u32;
            struct w32AIO_STR11;
                 } T32AIO_STR11;
    typedef union  T32AIO_STR12
          { UNSG32 u32;
            struct w32AIO_STR12;
                 } T32AIO_STR12;
    typedef union  T32AIO_STR13
          { UNSG32 u32;
            struct w32AIO_STR13;
                 } T32AIO_STR13;
    typedef union  T32AIO_STR14
          { UNSG32 u32;
            struct w32AIO_STR14;
                 } T32AIO_STR14;
    typedef union  T32AIO_ATR
          { UNSG32 u32;
            struct w32AIO_ATR;
                 } T32AIO_ATR;
    typedef union  T32AIO_XFEED
          { UNSG32 u32;
            struct w32AIO_XFEED;
                 } T32AIO_XFEED;
    ///////////////////////////////////////////////////////////

    typedef union  TAIO_EARC_SRC
          { UNSG32 u32[1];
            struct {
            struct w32AIO_EARC_SRC;
                   };
                 } TAIO_EARC_SRC;
    typedef union  TAIO_IRQENABLE
          { UNSG32 u32[1];
            struct {
            struct w32AIO_IRQENABLE;
                   };
                 } TAIO_IRQENABLE;
    typedef union  TAIO_IRQSTS
          { UNSG32 u32[1];
            struct {
            struct w32AIO_IRQSTS;
                   };
                 } TAIO_IRQSTS;
    typedef union  TAIO_PRISRC
          { UNSG32 u32[1];
            struct {
            struct w32AIO_PRISRC;
                   };
                 } TAIO_PRISRC;
    typedef union  TAIO_SECSRC
          { UNSG32 u32[1];
            struct {
            struct w32AIO_SECSRC;
                   };
                 } TAIO_SECSRC;
    typedef union  TAIO_HDSRC
          { UNSG32 u32[1];
            struct {
            struct w32AIO_HDSRC;
                   };
                 } TAIO_HDSRC;
    typedef union  TAIO_PDM_MIC_SEL
          { UNSG32 u32[1];
            struct {
            struct w32AIO_PDM_MIC_SEL;
                   };
                 } TAIO_PDM_MIC_SEL;
    typedef union  TAIO_SW_RST
          { UNSG32 u32[1];
            struct {
            struct w32AIO_SW_RST;
                   };
                 } TAIO_SW_RST;
    typedef union  TAIO_CLK_GATE_EN
          { UNSG32 u32[1];
            struct {
            struct w32AIO_CLK_GATE_EN;
                   };
                 } TAIO_CLK_GATE_EN;
    typedef union  TAIO_EARC_ARC
          { UNSG32 u32[1];
            struct {
            struct w32AIO_EARC_ARC;
                   };
                 } TAIO_EARC_ARC;
    typedef union  TAIO_SAMP_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32AIO_SAMP_CTRL;
                   };
                 } TAIO_SAMP_CTRL;
    typedef union  TAIO_SAMPINFO_REQ
          { UNSG32 u32[1];
            struct {
            struct w32AIO_SAMPINFO_REQ;
                   };
                 } TAIO_SAMPINFO_REQ;
    typedef union  TAIO_SCR
          { UNSG32 u32[15];
            struct {
            struct w32AIO_SCR;
            struct w32AIO_SCR1;
            struct w32AIO_SCR2;
            struct w32AIO_SCR3;
            struct w32AIO_SCR4;
            struct w32AIO_SCR5;
            struct w32AIO_SCR6;
            struct w32AIO_SCR7;
            struct w32AIO_SCR8;
            struct w32AIO_SCR9;
            struct w32AIO_SCR10;
            struct w32AIO_SCR11;
            struct w32AIO_SCR12;
            struct w32AIO_SCR13;
            struct w32AIO_SCR14;
                   };
                 } TAIO_SCR;
    typedef union  TAIO_STR
          { UNSG32 u32[15];
            struct {
            struct w32AIO_STR;
            struct w32AIO_STR1;
            struct w32AIO_STR2;
            struct w32AIO_STR3;
            struct w32AIO_STR4;
            struct w32AIO_STR5;
            struct w32AIO_STR6;
            struct w32AIO_STR7;
            struct w32AIO_STR8;
            struct w32AIO_STR9;
            struct w32AIO_STR10;
            struct w32AIO_STR11;
            struct w32AIO_STR12;
            struct w32AIO_STR13;
            struct w32AIO_STR14;
                   };
                 } TAIO_STR;
    typedef union  TAIO_ATR
          { UNSG32 u32[1];
            struct {
            struct w32AIO_ATR;
                   };
                 } TAIO_ATR;
    typedef union  TAIO_XFEED
          { UNSG32 u32[1];
            struct {
            struct w32AIO_XFEED;
                   };
                 } TAIO_XFEED;

    ///////////////////////////////////////////////////////////
     SIGN32 AIO_drvrd(SIE_AIO *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 AIO_drvwr(SIE_AIO *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void AIO_reset(SIE_AIO *p);
     SIGN32 AIO_cmp  (SIE_AIO *p, SIE_AIO *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define AIO_check(p,pie,pfx,hLOG) AIO_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define AIO_print(p,    pfx,hLOG) AIO_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: AIO
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: aio.h
////////////////////////////////////////////////////////////

