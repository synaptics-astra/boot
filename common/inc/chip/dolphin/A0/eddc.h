//////
/// don't edit! auto-generated by docc: eddc.h
////////////////////////////////////////////////////////////
#ifndef eddc_h
#define eddc_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE EDDC                    biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG                  (P)
///               ###
///               * EDDC Master Configuration Register
///               ###
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * 0 : EDDC master is disabled
///                                    * 1 : EDDC master is enabled
///                                    ###
///               %unsigned 1  return_2_idle             0x0
///                                    ###
///                                    * Enables the internal state machine to return to Idle state in case the entire data is not available to transfer. Else the I2C will hold the clock low.
///                                    * In case of read once the Read FIFO is full and if this bit is set to 0, then the SCL will be held Low till the read fifo interrupt is cleared.
///                                    ###
///               %unsigned 1  access_type               0x1
///                                    ###
///                                    * 0 : Current adress access(no offset is sent)
///                                    * 1 : Random address access(offset is transmitted)
///                                    ###
///               %unsigned 2  xfer_mode                 0x0
///                                    ###
///                                    * Transfer mode
///                                    * 00   :   Single Byte     Write
///                                    * 01   :   Single Byte     Read
///                                    * 11   :   Burst Byte      Read
///                                    * 10   :   Burst Byte     Write
///                                    ###
///               %unsigned 1  eddc_mode                 0x0
///                                    ###
///                                    * 0   : DDC mode
///                                    * 1 : EDDC mode (segment pointer is transmitted).
///                                    ###
///               %unsigned 7  salve_addr                0x50
///                                    ###
///                                    * 7bit i2c slave address
///                                    * For EDID slave address is 7'h50.
///                                    * For HDCP slave address is 7'h3A.
///                                    * FOR SCDC slave address is 7'h54.
///                                    ###
///               %unsigned 1  hs_en                     0x0
///                                    ###
///                                    * 0 : High speed mode disalbled
///                                    * 1: High speed mode enabled
///                                    * eddc_mode is not supported in High speed mode. This mode is not required for any of the HDMI applications. It is kept only for debug purpose.
///                                    ###
///               %unsigned 8  master_code               0xA0
///                                    ###
///                                    * 8 bit master code indicates to other devices that an Hs-mode transfer is to begin and the connected devices must meet the Hs-mode specification
///                                    ###
///               %unsigned 1  timeout_en                0x1
///                                    ###
///                                    * 1 : enable timeout counter (if slave hold the clock more than the value specified in SCLLOW_TIMEOUT register master will go to idle state)
///                                    * 0 : diable timeout counter
///                                    ###
///               %unsigned 1  slave_read_req_en         0x1
///                                    ###
///                                    * 1 : enable read request feature
///                                    * 0 : diable timeout counter
///                                    * note:
///                                    * the soure will respond by giving stop condition after sink initiates read request.
///                                    * see the HDMI 2.0a Spec page no:   127 for more details,
///                                    ###
///               %unsigned 1  rStart_exp_en             0x1
///                                    ###
///                                    * 0:Clock high period is not stretched during repeat start
///                                    * 1:Clock high period is stretched during repeat start (bug BG4CTA0-79 fixed).
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x00004 OFFSET               (P)
///               ###
///               * Offset address register
///               ###
///               %unsigned 8  addr                      0x0
///                                    ###
///                                    * 8 bit I2C Slave memory offset address from where data needs to be transmitted/received
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00008 DATA_SIZE            (P)
///               ###
///               * Data size register
///               ###
///               %unsigned 16 len                       0x1
///                                    ###
///                                    * Data block/burst size is the amount of data to be transmitted/recived to/from Slave. For single byte accessprogram it to '1'.
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x0000C START_TRIG           (P)
///               ###
///               * The data transfer should start with writing into this register to trigger the transfer
///               ###
///               %unsigned 1  trig_on                   0x0
///                                    ###
///                                    * 1 : Start Data Transfer.
///                                    * 0 : Do not start data transfer.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00010 SEG_CFG              (P)
///               ###
///               * This register is to transmit segment address and segment value
///               ###
///               %unsigned 8  seg_ptr_addr              0x60
///                                    ###
///                                    * 8 bit segment pointer address
///                                    ###
///               %unsigned 8  seg_ptr_value             0x0
///                                    ###
///                                    * 8 bit segment pointer valu
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00014 START_STOP_SETUP     (P)
///               ###
///               * setup time for the start & stop condition on I2C
///               ###
///               %unsigned 16 strat_ts                  0x1E0
///                                    ###
///                                    * This is the time before the SDA line makes start transition after the SCL goes high
///                                    ###
///               %unsigned 16 stop_ts                   0x200
///                                    ###
///                                    * This is the time before the SDA line makes stop transition after the SCL goes high.
///                                    ###
///     @ 0x00018 DATA_SETUP           (P)
///               ###
///               * setup time for the data that is to be driven on I2C
///               ###
///               %unsigned 16 data_ts                   0x410
///                                    ###
///                                    * This is the time before the SDA line makes data value transition after the SCL goes high
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x0001C CLK_PERIOD           (P)
///               ###
///               * SCL Clock Period
///               ###
///               %unsigned 16 ck_low                    0x3E8
///                                    ###
///                                    * SCL Clock low time period in terms of CPU Clock
///                                    ###
///               %unsigned 16 ck_high                   0x3E8
///                                    ###
///                                    * SCL Clock high time period in terms of CPU Clock
///                                    ###
///     @ 0x00020 FIFO_PTRS            (P)
///               %unsigned 8  wfifo_wptr                0x0
///                                    ###
///                                    * This is the address to which the write FIFO's write pointer will be reset
///                                    ###
///               %unsigned 8  wfifo_rptr                0x0
///                                    ###
///                                    * This is the address to which the write FIFO's read pointer will be reset
///                                    ###
///               %unsigned 8  rfifo_wptr                0x0
///                                    ###
///                                    * This is the address to which the read FIFO's write pointer will be reset
///                                    ###
///               %unsigned 8  rfifo_rptr                0x0
///                                    ###
///                                    * This is the address to which the read FIFO's read pointer will be reset
///                                    ###
///     @ 0x00024 FIFO_CTRL            (P)
///               %unsigned 1  wfifo_soft_rst            0x0
///                                    ###
///                                    * 1: Write FIFO Reset Enabled
///                                    * 0: Write FIFO Reset disabled
///                                    ###
///               %unsigned 4  misc_cfg                  0xC
///                                    ###
///                                    * misc_cfg[0] =
///                                    * 1 : RdFifo will be used as a general purpose FIFO on mbus.The write and read will be done using mwr and mrd pulses.
///                                    * misc_cfg[1] =
///                                    * 1 : WrFifo will be used as a general purpose FIFO on mbus. The write and read will be done using mwr and mrd pulses.
///                                    * misc_cfg[2] =
///                                    * 1 : if ack not received master will wait till stop condition for ack and enter into idle state
///                                    * 0 : if ack not received master will immediately enter into idle state
///                                    * misc_cfg[3] =
///                                    * 1 : the scl clock will delayed according to start and stop conditions
///                                    * 0 : scl clock does not depend on start and stop conditions
///                                    ###
///               %unsigned 1  rfifo_soft_rst            0x0
///                                    ###
///                                    * 1 : Write FIFO Reset Enabled
///                                    * 0 : Write FIFO Reset disabled
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x00028 FIFO_STS             (R-)
///               %unsigned 4  wfifo_status              
///                                    ###
///                                    * wfifo_status[0] = 1 : Write FIFO is almost full;equal to threshold   value.
///                                    * wfifo_status[1] = 1 : Write FIFO is full.
///                                    * wfifo_status[2] = 1: Write FIFO is almost empty;equal to threshold value .
///                                    * wfifo_status[3] = 1: Write FIFO is empty.
///                                    ###
///               %unsigned 4  rfifo_status              
///                                    ###
///                                    * rfifo_status[0] = 1: read FIFO is almost full.equal to threshold   value.
///                                    * rfifo_status[1] = 1 : read FIFO is full;
///                                    * rfifo_status[2] = 1 : read FIFO is almost empty;equal to threshold value.
///                                    * rfifo_status[3]= 1 : read FIFO is empty.
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x0002C FIFO_THRES           (P)
///               %unsigned 16 wfifo_thres               0x7
///                                    ###
///                                    * Write FIFO Almost Full/Empty condition is generated based on this value
///                                    ###
///               %unsigned 16 rfifo_thres               0x7
///                                    ###
///                                    * Read FIFO Almost Full/Empty condition is generated based on this value
///                                    ###
///     @ 0x00030 INTR_CTRL            (P)
///               %unsigned 1  wfifo_ae_intr_en          0x0
///                                    ###
///                                    * Write FIFO Almost empty Interrupt enable.
///                                    * 0 : disbale
///                                    * 1 : enable.
///                                    ###
///               %unsigned 1  wfifo_e_intr_en           0x0
///                                    ###
///                                    * write FIFO empty Interrupt enable.
///                                    * 0 : disbale
///                                    * 1 : enable.
///                                    ###
///               %unsigned 1  rfifo_af_intr_en          0x0
///                                    ###
///                                    * Read FIFO Almost full Interrupt enable.
///                                    * 0 : disbale
///                                    * 1 : enable.
///                                    ###
///               %unsigned 1  rfifo_f_intr_en           0x0
///                                    ###
///                                    * Read FIFO Full Interrupt enable.
///                                    * 0 : disbale
///                                    * 1 : enable.
///                                    ###
///               %unsigned 1  master_done_intr_en       0x0
///                                    ###
///                                    * Master Request (write or read) done interrupt enable
///                                    * 0 : disbale
///                                    * 1 : enable.
///                                    ###
///               %unsigned 1  timeout_intr_en           0x0
///                                    ###
///                                    * timeout interrupt enable(time out interrupt occure only if slave stretch clock low till timeout conter reactch to FFFFFF)
///                                    * 0 : disbale
///                                    * 1 : enable.
///                                    ###
///               %unsigned 1  nack_intr_en              0x0
///                                    ###
///                                    * ACK not received interrupt enable(nack interrupt will come if master does not recive ack for slave address,offset address, write data and read request), this interrupt also called error interrupt
///                                    * 0 : disbale
///                                    * 1 : enable.
///                                    ###
///               %unsigned 1  slave_read_req_intr_en    0x0
///                                    ###
///                                    * 1 : enable read request interrupts
///                                    * 0 : disable slave read request interrupt
///                                    ###
///               %unsigned 1  arbit_lost_intr_en        0x0
///                                    ###
///                                    * 1 : enable arbitration lost interrupts
///                                    * 0 : disable arbitration lost interrupt
///                                    ###
///               %unsigned 1  wfifo_ae_intr_clr         0x0
///                                    ###
///                                    * write FIFO Almost empty Interrupt clear
///                                    * write '1' to clear this interrupt, writing '0' has no effect.
///                                    ###
///               %unsigned 1  wfifo_e_intr_clr          0x0
///                                    ###
///                                    * write FIFO empty Interrupt clear
///                                    * write '1' to clear this interrupt, writing '0' has no effect.
///                                    ###
///               %unsigned 1  rfifo_af_intr_clr         0x0
///                                    ###
///                                    * Read FIFO Almost full Interrupt clear
///                                    * write '1' to clear this interrupt, writing '0' has no effect.
///                                    ###
///               %unsigned 1  rfifo_f_intr_clr          0x0
///                                    ###
///                                    * Read FIFO Full Interrupt clear
///                                    * write '1' to clear this interrupt, writing '0' has no effect.
///                                    ###
///               %unsigned 1  master_done_intr_clr      0x0
///                                    ###
///                                    * Master Request (write or read) done interrupt clear
///                                    * write '1' to clear this interrupt, writing '0' has no effect.
///                                    ###
///               %unsigned 1  timeout_intr_clr          0x0
///                                    ###
///                                    * Time out interrupt clear
///                                    * write '1' to clear this interrupt, writing '0' has no effect.
///                                    ###
///               %unsigned 1  nack_intr_clr             0x0
///                                    ###
///                                    * If NACK interrupt clear
///                                    * write '1' to clear this interrupt, writing '0' has no effect.
///                                    ###
///               %unsigned 1  slave_read_req_intr_clr   0x0
///                                    ###
///                                    * write '1' to clear this interrupt, writing '0' has no effect.
///                                    ###
///               %unsigned 1  arbit_lost_intr_clr       0x0
///                                    ###
///                                    * write '1' to clear this interrupt, writing '0' has no effect.
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x00034 INTR_STS             (R-)
///               %unsigned 1  wfifo_ae_intr_sts_r       
///                                    ###
///                                    * Write FIFO Almost empty Interrupt raw status (Not depend on enable).
///                                    ###
///               %unsigned 1  wfifo_e_intr_sts_r        
///                                    ###
///                                    * Write FIFO empty Interrupt raw status (Not depend on enable).
///                                    ###
///               %unsigned 1  rfifo_af_intr_sts_r       
///                                    ###
///                                    * Read FIFO Almost full Interrupt raw status (Not depend on enable).
///                                    ###
///               %unsigned 1  rfifo_f_intr_sts_r        
///                                    ###
///                                    * Read FIFO Full Interrupt raw status (Not depend on enable).
///                                    ###
///               %unsigned 1  wfifo_ae_intr_sts         
///                                    ###
///                                    * Write FIFO Almost empty Interrupt status (if enable bit is “0” then this status is masked).
///                                    ###
///               %unsigned 1  wfifo_e_intr_sts          
///                                    ###
///                                    * Write FIFO empty Interrupt status (if enable bit is '0' then this status is masked).
///                                    ###
///               %unsigned 1  rfifo_af_intr_sts         
///                                    ###
///                                    * Read FIFO Almost full Interrupt status (if enable bit is '0' then this status is masked).
///                                    ###
///               %unsigned 1  rfifo_f_intr_sts          
///                                    ###
///                                    * Read FIFO Full Interrupt status (if enable bit is '0' then this status is masked).
///                                    ###
///               %unsigned 1  master_done_intr_sts      
///                                    ###
///                                    * Master Request (write or read) done interrupt status
///                                    ###
///               %unsigned 1  timeout_intr_sts          
///                                    ###
///                                    * timeout interrupt status
///                                    ###
///               %unsigned 1  nack_intr_sts             
///                                    ###
///                                    * Acknowledgement not received (error status) interrupt status
///                                    ###
///               %unsigned 1  slave_read_req_intr_sts   
///                                    ###
///                                    * Slave read request interrupt status register
///                                    ###
///               %unsigned 1  arbit_lost_intr_sts       
///                                    ###
///                                    * Arbitration lost interrupt status register
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x00038 WFIFO_ADDR           (RW)
///               %unsigned 8  wr_rd_data                0x0
///                                    ###
///                                    * This is the address of the Write FIFO. Data can be writing into Write FIFO at this address.
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x0003C RFIFO_ADDR           (RW)
///               %unsigned 8  wr_rd_data                0x0
///                                    ###
///                                    * This is the address of the Read FIFO. Contents of the Read FIFO can be read by reading this address.
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00040 SCLLOW_TIMEOUT       (P)
///               %unsigned 24 timeout                   0xFFFFFE
///                                    ###
///                                    * This is the time out event in case the SCL is low continuously(time out counter generates upto 167mssec)
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00044 STS                  (R-)
///               %unsigned 1  bus_busy_status           
///                                    ###
///                                    * 1 : i2c master busy
///                                    * 0 : i2c master freel
///                                    ###
///               %unsigned 13 debug                     
///                                    ###
///                                    * This register is for debug purpose
///                                    * [1:0] : {padSclIn,padSdaIn}
///                                    * [6:2] : state of the master
///                                    * [9:7] : counter of the state machin
///                                    * [11:10] : st signal
///                                    * [12] : sen signal
///                                    ###
///               %%        18         # Stuffing bits...
///     @ 0x00048 MEM_CTRL             (P)
///               %unsigned 1  RF_1P_write_fifo_cen_select 0x0
///                                    ###
///                                    * 0: Select HW generated CEN for i2c sync fifo memory
///                                    * 1: Select FW programmed CEN for i2c sync fifo memory
///                                    ###
///               %unsigned 1  RF_1P_read_fifo_cen_select 0x0
///                                    ###
///                                    * 0: Select HW generated CEN for i2c sync fifo memory
///                                    * 1: Select FW programmed CEN for i2c sync fifo memory
///                                    ###
///               %unsigned 1  RF_1P_write_fifo_cen      0x0
///                                    ###
///                                    * 0 : power up memory
///                                    * 1 : power down memory
///                                    ###
///               %unsigned 1  RF_1P_read_fifo_cen       0x0
///                                    ###
///                                    * 0 : power up memory
///                                    * 1 : power down memory
///                                    ###
///               %%        28         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      76B, bits:     313b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_EDDC
#define h_EDDC (){}

    #define     RA_EDDC_CFG                                    0x0000

    #define     BA_EDDC_CFG_enable                             0x0000
    #define     B16EDDC_CFG_enable                             0x0000
    #define   LSb32EDDC_CFG_enable                                0
    #define   LSb16EDDC_CFG_enable                                0
    #define       bEDDC_CFG_enable                             1
    #define   MSK32EDDC_CFG_enable                                0x00000001

    #define     BA_EDDC_CFG_return_2_idle                      0x0000
    #define     B16EDDC_CFG_return_2_idle                      0x0000
    #define   LSb32EDDC_CFG_return_2_idle                         1
    #define   LSb16EDDC_CFG_return_2_idle                         1
    #define       bEDDC_CFG_return_2_idle                      1
    #define   MSK32EDDC_CFG_return_2_idle                         0x00000002

    #define     BA_EDDC_CFG_access_type                        0x0000
    #define     B16EDDC_CFG_access_type                        0x0000
    #define   LSb32EDDC_CFG_access_type                           2
    #define   LSb16EDDC_CFG_access_type                           2
    #define       bEDDC_CFG_access_type                        1
    #define   MSK32EDDC_CFG_access_type                           0x00000004

    #define     BA_EDDC_CFG_xfer_mode                          0x0000
    #define     B16EDDC_CFG_xfer_mode                          0x0000
    #define   LSb32EDDC_CFG_xfer_mode                             3
    #define   LSb16EDDC_CFG_xfer_mode                             3
    #define       bEDDC_CFG_xfer_mode                          2
    #define   MSK32EDDC_CFG_xfer_mode                             0x00000018

    #define     BA_EDDC_CFG_eddc_mode                          0x0000
    #define     B16EDDC_CFG_eddc_mode                          0x0000
    #define   LSb32EDDC_CFG_eddc_mode                             5
    #define   LSb16EDDC_CFG_eddc_mode                             5
    #define       bEDDC_CFG_eddc_mode                          1
    #define   MSK32EDDC_CFG_eddc_mode                             0x00000020

    #define     BA_EDDC_CFG_salve_addr                         0x0000
    #define     B16EDDC_CFG_salve_addr                         0x0000
    #define   LSb32EDDC_CFG_salve_addr                            6
    #define   LSb16EDDC_CFG_salve_addr                            6
    #define       bEDDC_CFG_salve_addr                         7
    #define   MSK32EDDC_CFG_salve_addr                            0x00001FC0

    #define     BA_EDDC_CFG_hs_en                              0x0001
    #define     B16EDDC_CFG_hs_en                              0x0000
    #define   LSb32EDDC_CFG_hs_en                                 13
    #define   LSb16EDDC_CFG_hs_en                                 13
    #define       bEDDC_CFG_hs_en                              1
    #define   MSK32EDDC_CFG_hs_en                                 0x00002000

    #define     BA_EDDC_CFG_master_code                        0x0001
    #define     B16EDDC_CFG_master_code                        0x0000
    #define   LSb32EDDC_CFG_master_code                           14
    #define   LSb16EDDC_CFG_master_code                           14
    #define       bEDDC_CFG_master_code                        8
    #define   MSK32EDDC_CFG_master_code                           0x003FC000

    #define     BA_EDDC_CFG_timeout_en                         0x0002
    #define     B16EDDC_CFG_timeout_en                         0x0002
    #define   LSb32EDDC_CFG_timeout_en                            22
    #define   LSb16EDDC_CFG_timeout_en                            6
    #define       bEDDC_CFG_timeout_en                         1
    #define   MSK32EDDC_CFG_timeout_en                            0x00400000

    #define     BA_EDDC_CFG_slave_read_req_en                  0x0002
    #define     B16EDDC_CFG_slave_read_req_en                  0x0002
    #define   LSb32EDDC_CFG_slave_read_req_en                     23
    #define   LSb16EDDC_CFG_slave_read_req_en                     7
    #define       bEDDC_CFG_slave_read_req_en                  1
    #define   MSK32EDDC_CFG_slave_read_req_en                     0x00800000

    #define     BA_EDDC_CFG_rStart_exp_en                      0x0003
    #define     B16EDDC_CFG_rStart_exp_en                      0x0002
    #define   LSb32EDDC_CFG_rStart_exp_en                         24
    #define   LSb16EDDC_CFG_rStart_exp_en                         8
    #define       bEDDC_CFG_rStart_exp_en                      1
    #define   MSK32EDDC_CFG_rStart_exp_en                         0x01000000
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_OFFSET                                 0x0004

    #define     BA_EDDC_OFFSET_addr                            0x0004
    #define     B16EDDC_OFFSET_addr                            0x0004
    #define   LSb32EDDC_OFFSET_addr                               0
    #define   LSb16EDDC_OFFSET_addr                               0
    #define       bEDDC_OFFSET_addr                            8
    #define   MSK32EDDC_OFFSET_addr                               0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_DATA_SIZE                              0x0008

    #define     BA_EDDC_DATA_SIZE_len                          0x0008
    #define     B16EDDC_DATA_SIZE_len                          0x0008
    #define   LSb32EDDC_DATA_SIZE_len                             0
    #define   LSb16EDDC_DATA_SIZE_len                             0
    #define       bEDDC_DATA_SIZE_len                          16
    #define   MSK32EDDC_DATA_SIZE_len                             0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_START_TRIG                             0x000C

    #define     BA_EDDC_START_TRIG_trig_on                     0x000C
    #define     B16EDDC_START_TRIG_trig_on                     0x000C
    #define   LSb32EDDC_START_TRIG_trig_on                        0
    #define   LSb16EDDC_START_TRIG_trig_on                        0
    #define       bEDDC_START_TRIG_trig_on                     1
    #define   MSK32EDDC_START_TRIG_trig_on                        0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_SEG_CFG                                0x0010

    #define     BA_EDDC_SEG_CFG_seg_ptr_addr                   0x0010
    #define     B16EDDC_SEG_CFG_seg_ptr_addr                   0x0010
    #define   LSb32EDDC_SEG_CFG_seg_ptr_addr                      0
    #define   LSb16EDDC_SEG_CFG_seg_ptr_addr                      0
    #define       bEDDC_SEG_CFG_seg_ptr_addr                   8
    #define   MSK32EDDC_SEG_CFG_seg_ptr_addr                      0x000000FF

    #define     BA_EDDC_SEG_CFG_seg_ptr_value                  0x0011
    #define     B16EDDC_SEG_CFG_seg_ptr_value                  0x0010
    #define   LSb32EDDC_SEG_CFG_seg_ptr_value                     8
    #define   LSb16EDDC_SEG_CFG_seg_ptr_value                     8
    #define       bEDDC_SEG_CFG_seg_ptr_value                  8
    #define   MSK32EDDC_SEG_CFG_seg_ptr_value                     0x0000FF00
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_START_STOP_SETUP                       0x0014

    #define     BA_EDDC_START_STOP_SETUP_strat_ts              0x0014
    #define     B16EDDC_START_STOP_SETUP_strat_ts              0x0014
    #define   LSb32EDDC_START_STOP_SETUP_strat_ts                 0
    #define   LSb16EDDC_START_STOP_SETUP_strat_ts                 0
    #define       bEDDC_START_STOP_SETUP_strat_ts              16
    #define   MSK32EDDC_START_STOP_SETUP_strat_ts                 0x0000FFFF

    #define     BA_EDDC_START_STOP_SETUP_stop_ts               0x0016
    #define     B16EDDC_START_STOP_SETUP_stop_ts               0x0016
    #define   LSb32EDDC_START_STOP_SETUP_stop_ts                  16
    #define   LSb16EDDC_START_STOP_SETUP_stop_ts                  0
    #define       bEDDC_START_STOP_SETUP_stop_ts               16
    #define   MSK32EDDC_START_STOP_SETUP_stop_ts                  0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_DATA_SETUP                             0x0018

    #define     BA_EDDC_DATA_SETUP_data_ts                     0x0018
    #define     B16EDDC_DATA_SETUP_data_ts                     0x0018
    #define   LSb32EDDC_DATA_SETUP_data_ts                        0
    #define   LSb16EDDC_DATA_SETUP_data_ts                        0
    #define       bEDDC_DATA_SETUP_data_ts                     16
    #define   MSK32EDDC_DATA_SETUP_data_ts                        0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_CLK_PERIOD                             0x001C

    #define     BA_EDDC_CLK_PERIOD_ck_low                      0x001C
    #define     B16EDDC_CLK_PERIOD_ck_low                      0x001C
    #define   LSb32EDDC_CLK_PERIOD_ck_low                         0
    #define   LSb16EDDC_CLK_PERIOD_ck_low                         0
    #define       bEDDC_CLK_PERIOD_ck_low                      16
    #define   MSK32EDDC_CLK_PERIOD_ck_low                         0x0000FFFF

    #define     BA_EDDC_CLK_PERIOD_ck_high                     0x001E
    #define     B16EDDC_CLK_PERIOD_ck_high                     0x001E
    #define   LSb32EDDC_CLK_PERIOD_ck_high                        16
    #define   LSb16EDDC_CLK_PERIOD_ck_high                        0
    #define       bEDDC_CLK_PERIOD_ck_high                     16
    #define   MSK32EDDC_CLK_PERIOD_ck_high                        0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_FIFO_PTRS                              0x0020

    #define     BA_EDDC_FIFO_PTRS_wfifo_wptr                   0x0020
    #define     B16EDDC_FIFO_PTRS_wfifo_wptr                   0x0020
    #define   LSb32EDDC_FIFO_PTRS_wfifo_wptr                      0
    #define   LSb16EDDC_FIFO_PTRS_wfifo_wptr                      0
    #define       bEDDC_FIFO_PTRS_wfifo_wptr                   8
    #define   MSK32EDDC_FIFO_PTRS_wfifo_wptr                      0x000000FF

    #define     BA_EDDC_FIFO_PTRS_wfifo_rptr                   0x0021
    #define     B16EDDC_FIFO_PTRS_wfifo_rptr                   0x0020
    #define   LSb32EDDC_FIFO_PTRS_wfifo_rptr                      8
    #define   LSb16EDDC_FIFO_PTRS_wfifo_rptr                      8
    #define       bEDDC_FIFO_PTRS_wfifo_rptr                   8
    #define   MSK32EDDC_FIFO_PTRS_wfifo_rptr                      0x0000FF00

    #define     BA_EDDC_FIFO_PTRS_rfifo_wptr                   0x0022
    #define     B16EDDC_FIFO_PTRS_rfifo_wptr                   0x0022
    #define   LSb32EDDC_FIFO_PTRS_rfifo_wptr                      16
    #define   LSb16EDDC_FIFO_PTRS_rfifo_wptr                      0
    #define       bEDDC_FIFO_PTRS_rfifo_wptr                   8
    #define   MSK32EDDC_FIFO_PTRS_rfifo_wptr                      0x00FF0000

    #define     BA_EDDC_FIFO_PTRS_rfifo_rptr                   0x0023
    #define     B16EDDC_FIFO_PTRS_rfifo_rptr                   0x0022
    #define   LSb32EDDC_FIFO_PTRS_rfifo_rptr                      24
    #define   LSb16EDDC_FIFO_PTRS_rfifo_rptr                      8
    #define       bEDDC_FIFO_PTRS_rfifo_rptr                   8
    #define   MSK32EDDC_FIFO_PTRS_rfifo_rptr                      0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_FIFO_CTRL                              0x0024

    #define     BA_EDDC_FIFO_CTRL_wfifo_soft_rst               0x0024
    #define     B16EDDC_FIFO_CTRL_wfifo_soft_rst               0x0024
    #define   LSb32EDDC_FIFO_CTRL_wfifo_soft_rst                  0
    #define   LSb16EDDC_FIFO_CTRL_wfifo_soft_rst                  0
    #define       bEDDC_FIFO_CTRL_wfifo_soft_rst               1
    #define   MSK32EDDC_FIFO_CTRL_wfifo_soft_rst                  0x00000001

    #define     BA_EDDC_FIFO_CTRL_misc_cfg                     0x0024
    #define     B16EDDC_FIFO_CTRL_misc_cfg                     0x0024
    #define   LSb32EDDC_FIFO_CTRL_misc_cfg                        1
    #define   LSb16EDDC_FIFO_CTRL_misc_cfg                        1
    #define       bEDDC_FIFO_CTRL_misc_cfg                     4
    #define   MSK32EDDC_FIFO_CTRL_misc_cfg                        0x0000001E

    #define     BA_EDDC_FIFO_CTRL_rfifo_soft_rst               0x0024
    #define     B16EDDC_FIFO_CTRL_rfifo_soft_rst               0x0024
    #define   LSb32EDDC_FIFO_CTRL_rfifo_soft_rst                  5
    #define   LSb16EDDC_FIFO_CTRL_rfifo_soft_rst                  5
    #define       bEDDC_FIFO_CTRL_rfifo_soft_rst               1
    #define   MSK32EDDC_FIFO_CTRL_rfifo_soft_rst                  0x00000020
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_FIFO_STS                               0x0028

    #define     BA_EDDC_FIFO_STS_wfifo_status                  0x0028
    #define     B16EDDC_FIFO_STS_wfifo_status                  0x0028
    #define   LSb32EDDC_FIFO_STS_wfifo_status                     0
    #define   LSb16EDDC_FIFO_STS_wfifo_status                     0
    #define       bEDDC_FIFO_STS_wfifo_status                  4
    #define   MSK32EDDC_FIFO_STS_wfifo_status                     0x0000000F

    #define     BA_EDDC_FIFO_STS_rfifo_status                  0x0028
    #define     B16EDDC_FIFO_STS_rfifo_status                  0x0028
    #define   LSb32EDDC_FIFO_STS_rfifo_status                     4
    #define   LSb16EDDC_FIFO_STS_rfifo_status                     4
    #define       bEDDC_FIFO_STS_rfifo_status                  4
    #define   MSK32EDDC_FIFO_STS_rfifo_status                     0x000000F0
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_FIFO_THRES                             0x002C

    #define     BA_EDDC_FIFO_THRES_wfifo_thres                 0x002C
    #define     B16EDDC_FIFO_THRES_wfifo_thres                 0x002C
    #define   LSb32EDDC_FIFO_THRES_wfifo_thres                    0
    #define   LSb16EDDC_FIFO_THRES_wfifo_thres                    0
    #define       bEDDC_FIFO_THRES_wfifo_thres                 16
    #define   MSK32EDDC_FIFO_THRES_wfifo_thres                    0x0000FFFF

    #define     BA_EDDC_FIFO_THRES_rfifo_thres                 0x002E
    #define     B16EDDC_FIFO_THRES_rfifo_thres                 0x002E
    #define   LSb32EDDC_FIFO_THRES_rfifo_thres                    16
    #define   LSb16EDDC_FIFO_THRES_rfifo_thres                    0
    #define       bEDDC_FIFO_THRES_rfifo_thres                 16
    #define   MSK32EDDC_FIFO_THRES_rfifo_thres                    0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_INTR_CTRL                              0x0030

    #define     BA_EDDC_INTR_CTRL_wfifo_ae_intr_en             0x0030
    #define     B16EDDC_INTR_CTRL_wfifo_ae_intr_en             0x0030
    #define   LSb32EDDC_INTR_CTRL_wfifo_ae_intr_en                0
    #define   LSb16EDDC_INTR_CTRL_wfifo_ae_intr_en                0
    #define       bEDDC_INTR_CTRL_wfifo_ae_intr_en             1
    #define   MSK32EDDC_INTR_CTRL_wfifo_ae_intr_en                0x00000001

    #define     BA_EDDC_INTR_CTRL_wfifo_e_intr_en              0x0030
    #define     B16EDDC_INTR_CTRL_wfifo_e_intr_en              0x0030
    #define   LSb32EDDC_INTR_CTRL_wfifo_e_intr_en                 1
    #define   LSb16EDDC_INTR_CTRL_wfifo_e_intr_en                 1
    #define       bEDDC_INTR_CTRL_wfifo_e_intr_en              1
    #define   MSK32EDDC_INTR_CTRL_wfifo_e_intr_en                 0x00000002

    #define     BA_EDDC_INTR_CTRL_rfifo_af_intr_en             0x0030
    #define     B16EDDC_INTR_CTRL_rfifo_af_intr_en             0x0030
    #define   LSb32EDDC_INTR_CTRL_rfifo_af_intr_en                2
    #define   LSb16EDDC_INTR_CTRL_rfifo_af_intr_en                2
    #define       bEDDC_INTR_CTRL_rfifo_af_intr_en             1
    #define   MSK32EDDC_INTR_CTRL_rfifo_af_intr_en                0x00000004

    #define     BA_EDDC_INTR_CTRL_rfifo_f_intr_en              0x0030
    #define     B16EDDC_INTR_CTRL_rfifo_f_intr_en              0x0030
    #define   LSb32EDDC_INTR_CTRL_rfifo_f_intr_en                 3
    #define   LSb16EDDC_INTR_CTRL_rfifo_f_intr_en                 3
    #define       bEDDC_INTR_CTRL_rfifo_f_intr_en              1
    #define   MSK32EDDC_INTR_CTRL_rfifo_f_intr_en                 0x00000008

    #define     BA_EDDC_INTR_CTRL_master_done_intr_en          0x0030
    #define     B16EDDC_INTR_CTRL_master_done_intr_en          0x0030
    #define   LSb32EDDC_INTR_CTRL_master_done_intr_en             4
    #define   LSb16EDDC_INTR_CTRL_master_done_intr_en             4
    #define       bEDDC_INTR_CTRL_master_done_intr_en          1
    #define   MSK32EDDC_INTR_CTRL_master_done_intr_en             0x00000010

    #define     BA_EDDC_INTR_CTRL_timeout_intr_en              0x0030
    #define     B16EDDC_INTR_CTRL_timeout_intr_en              0x0030
    #define   LSb32EDDC_INTR_CTRL_timeout_intr_en                 5
    #define   LSb16EDDC_INTR_CTRL_timeout_intr_en                 5
    #define       bEDDC_INTR_CTRL_timeout_intr_en              1
    #define   MSK32EDDC_INTR_CTRL_timeout_intr_en                 0x00000020

    #define     BA_EDDC_INTR_CTRL_nack_intr_en                 0x0030
    #define     B16EDDC_INTR_CTRL_nack_intr_en                 0x0030
    #define   LSb32EDDC_INTR_CTRL_nack_intr_en                    6
    #define   LSb16EDDC_INTR_CTRL_nack_intr_en                    6
    #define       bEDDC_INTR_CTRL_nack_intr_en                 1
    #define   MSK32EDDC_INTR_CTRL_nack_intr_en                    0x00000040

    #define     BA_EDDC_INTR_CTRL_slave_read_req_intr_en       0x0030
    #define     B16EDDC_INTR_CTRL_slave_read_req_intr_en       0x0030
    #define   LSb32EDDC_INTR_CTRL_slave_read_req_intr_en          7
    #define   LSb16EDDC_INTR_CTRL_slave_read_req_intr_en          7
    #define       bEDDC_INTR_CTRL_slave_read_req_intr_en       1
    #define   MSK32EDDC_INTR_CTRL_slave_read_req_intr_en          0x00000080

    #define     BA_EDDC_INTR_CTRL_arbit_lost_intr_en           0x0031
    #define     B16EDDC_INTR_CTRL_arbit_lost_intr_en           0x0030
    #define   LSb32EDDC_INTR_CTRL_arbit_lost_intr_en              8
    #define   LSb16EDDC_INTR_CTRL_arbit_lost_intr_en              8
    #define       bEDDC_INTR_CTRL_arbit_lost_intr_en           1
    #define   MSK32EDDC_INTR_CTRL_arbit_lost_intr_en              0x00000100

    #define     BA_EDDC_INTR_CTRL_wfifo_ae_intr_clr            0x0031
    #define     B16EDDC_INTR_CTRL_wfifo_ae_intr_clr            0x0030
    #define   LSb32EDDC_INTR_CTRL_wfifo_ae_intr_clr               9
    #define   LSb16EDDC_INTR_CTRL_wfifo_ae_intr_clr               9
    #define       bEDDC_INTR_CTRL_wfifo_ae_intr_clr            1
    #define   MSK32EDDC_INTR_CTRL_wfifo_ae_intr_clr               0x00000200

    #define     BA_EDDC_INTR_CTRL_wfifo_e_intr_clr             0x0031
    #define     B16EDDC_INTR_CTRL_wfifo_e_intr_clr             0x0030
    #define   LSb32EDDC_INTR_CTRL_wfifo_e_intr_clr                10
    #define   LSb16EDDC_INTR_CTRL_wfifo_e_intr_clr                10
    #define       bEDDC_INTR_CTRL_wfifo_e_intr_clr             1
    #define   MSK32EDDC_INTR_CTRL_wfifo_e_intr_clr                0x00000400

    #define     BA_EDDC_INTR_CTRL_rfifo_af_intr_clr            0x0031
    #define     B16EDDC_INTR_CTRL_rfifo_af_intr_clr            0x0030
    #define   LSb32EDDC_INTR_CTRL_rfifo_af_intr_clr               11
    #define   LSb16EDDC_INTR_CTRL_rfifo_af_intr_clr               11
    #define       bEDDC_INTR_CTRL_rfifo_af_intr_clr            1
    #define   MSK32EDDC_INTR_CTRL_rfifo_af_intr_clr               0x00000800

    #define     BA_EDDC_INTR_CTRL_rfifo_f_intr_clr             0x0031
    #define     B16EDDC_INTR_CTRL_rfifo_f_intr_clr             0x0030
    #define   LSb32EDDC_INTR_CTRL_rfifo_f_intr_clr                12
    #define   LSb16EDDC_INTR_CTRL_rfifo_f_intr_clr                12
    #define       bEDDC_INTR_CTRL_rfifo_f_intr_clr             1
    #define   MSK32EDDC_INTR_CTRL_rfifo_f_intr_clr                0x00001000

    #define     BA_EDDC_INTR_CTRL_master_done_intr_clr         0x0031
    #define     B16EDDC_INTR_CTRL_master_done_intr_clr         0x0030
    #define   LSb32EDDC_INTR_CTRL_master_done_intr_clr            13
    #define   LSb16EDDC_INTR_CTRL_master_done_intr_clr            13
    #define       bEDDC_INTR_CTRL_master_done_intr_clr         1
    #define   MSK32EDDC_INTR_CTRL_master_done_intr_clr            0x00002000

    #define     BA_EDDC_INTR_CTRL_timeout_intr_clr             0x0031
    #define     B16EDDC_INTR_CTRL_timeout_intr_clr             0x0030
    #define   LSb32EDDC_INTR_CTRL_timeout_intr_clr                14
    #define   LSb16EDDC_INTR_CTRL_timeout_intr_clr                14
    #define       bEDDC_INTR_CTRL_timeout_intr_clr             1
    #define   MSK32EDDC_INTR_CTRL_timeout_intr_clr                0x00004000

    #define     BA_EDDC_INTR_CTRL_nack_intr_clr                0x0031
    #define     B16EDDC_INTR_CTRL_nack_intr_clr                0x0030
    #define   LSb32EDDC_INTR_CTRL_nack_intr_clr                   15
    #define   LSb16EDDC_INTR_CTRL_nack_intr_clr                   15
    #define       bEDDC_INTR_CTRL_nack_intr_clr                1
    #define   MSK32EDDC_INTR_CTRL_nack_intr_clr                   0x00008000

    #define     BA_EDDC_INTR_CTRL_slave_read_req_intr_clr      0x0032
    #define     B16EDDC_INTR_CTRL_slave_read_req_intr_clr      0x0032
    #define   LSb32EDDC_INTR_CTRL_slave_read_req_intr_clr         16
    #define   LSb16EDDC_INTR_CTRL_slave_read_req_intr_clr         0
    #define       bEDDC_INTR_CTRL_slave_read_req_intr_clr      1
    #define   MSK32EDDC_INTR_CTRL_slave_read_req_intr_clr         0x00010000

    #define     BA_EDDC_INTR_CTRL_arbit_lost_intr_clr          0x0032
    #define     B16EDDC_INTR_CTRL_arbit_lost_intr_clr          0x0032
    #define   LSb32EDDC_INTR_CTRL_arbit_lost_intr_clr             17
    #define   LSb16EDDC_INTR_CTRL_arbit_lost_intr_clr             1
    #define       bEDDC_INTR_CTRL_arbit_lost_intr_clr          1
    #define   MSK32EDDC_INTR_CTRL_arbit_lost_intr_clr             0x00020000
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_INTR_STS                               0x0034

    #define     BA_EDDC_INTR_STS_wfifo_ae_intr_sts_r           0x0034
    #define     B16EDDC_INTR_STS_wfifo_ae_intr_sts_r           0x0034
    #define   LSb32EDDC_INTR_STS_wfifo_ae_intr_sts_r              0
    #define   LSb16EDDC_INTR_STS_wfifo_ae_intr_sts_r              0
    #define       bEDDC_INTR_STS_wfifo_ae_intr_sts_r           1
    #define   MSK32EDDC_INTR_STS_wfifo_ae_intr_sts_r              0x00000001

    #define     BA_EDDC_INTR_STS_wfifo_e_intr_sts_r            0x0034
    #define     B16EDDC_INTR_STS_wfifo_e_intr_sts_r            0x0034
    #define   LSb32EDDC_INTR_STS_wfifo_e_intr_sts_r               1
    #define   LSb16EDDC_INTR_STS_wfifo_e_intr_sts_r               1
    #define       bEDDC_INTR_STS_wfifo_e_intr_sts_r            1
    #define   MSK32EDDC_INTR_STS_wfifo_e_intr_sts_r               0x00000002

    #define     BA_EDDC_INTR_STS_rfifo_af_intr_sts_r           0x0034
    #define     B16EDDC_INTR_STS_rfifo_af_intr_sts_r           0x0034
    #define   LSb32EDDC_INTR_STS_rfifo_af_intr_sts_r              2
    #define   LSb16EDDC_INTR_STS_rfifo_af_intr_sts_r              2
    #define       bEDDC_INTR_STS_rfifo_af_intr_sts_r           1
    #define   MSK32EDDC_INTR_STS_rfifo_af_intr_sts_r              0x00000004

    #define     BA_EDDC_INTR_STS_rfifo_f_intr_sts_r            0x0034
    #define     B16EDDC_INTR_STS_rfifo_f_intr_sts_r            0x0034
    #define   LSb32EDDC_INTR_STS_rfifo_f_intr_sts_r               3
    #define   LSb16EDDC_INTR_STS_rfifo_f_intr_sts_r               3
    #define       bEDDC_INTR_STS_rfifo_f_intr_sts_r            1
    #define   MSK32EDDC_INTR_STS_rfifo_f_intr_sts_r               0x00000008

    #define     BA_EDDC_INTR_STS_wfifo_ae_intr_sts             0x0034
    #define     B16EDDC_INTR_STS_wfifo_ae_intr_sts             0x0034
    #define   LSb32EDDC_INTR_STS_wfifo_ae_intr_sts                4
    #define   LSb16EDDC_INTR_STS_wfifo_ae_intr_sts                4
    #define       bEDDC_INTR_STS_wfifo_ae_intr_sts             1
    #define   MSK32EDDC_INTR_STS_wfifo_ae_intr_sts                0x00000010

    #define     BA_EDDC_INTR_STS_wfifo_e_intr_sts              0x0034
    #define     B16EDDC_INTR_STS_wfifo_e_intr_sts              0x0034
    #define   LSb32EDDC_INTR_STS_wfifo_e_intr_sts                 5
    #define   LSb16EDDC_INTR_STS_wfifo_e_intr_sts                 5
    #define       bEDDC_INTR_STS_wfifo_e_intr_sts              1
    #define   MSK32EDDC_INTR_STS_wfifo_e_intr_sts                 0x00000020

    #define     BA_EDDC_INTR_STS_rfifo_af_intr_sts             0x0034
    #define     B16EDDC_INTR_STS_rfifo_af_intr_sts             0x0034
    #define   LSb32EDDC_INTR_STS_rfifo_af_intr_sts                6
    #define   LSb16EDDC_INTR_STS_rfifo_af_intr_sts                6
    #define       bEDDC_INTR_STS_rfifo_af_intr_sts             1
    #define   MSK32EDDC_INTR_STS_rfifo_af_intr_sts                0x00000040

    #define     BA_EDDC_INTR_STS_rfifo_f_intr_sts              0x0034
    #define     B16EDDC_INTR_STS_rfifo_f_intr_sts              0x0034
    #define   LSb32EDDC_INTR_STS_rfifo_f_intr_sts                 7
    #define   LSb16EDDC_INTR_STS_rfifo_f_intr_sts                 7
    #define       bEDDC_INTR_STS_rfifo_f_intr_sts              1
    #define   MSK32EDDC_INTR_STS_rfifo_f_intr_sts                 0x00000080

    #define     BA_EDDC_INTR_STS_master_done_intr_sts          0x0035
    #define     B16EDDC_INTR_STS_master_done_intr_sts          0x0034
    #define   LSb32EDDC_INTR_STS_master_done_intr_sts             8
    #define   LSb16EDDC_INTR_STS_master_done_intr_sts             8
    #define       bEDDC_INTR_STS_master_done_intr_sts          1
    #define   MSK32EDDC_INTR_STS_master_done_intr_sts             0x00000100

    #define     BA_EDDC_INTR_STS_timeout_intr_sts              0x0035
    #define     B16EDDC_INTR_STS_timeout_intr_sts              0x0034
    #define   LSb32EDDC_INTR_STS_timeout_intr_sts                 9
    #define   LSb16EDDC_INTR_STS_timeout_intr_sts                 9
    #define       bEDDC_INTR_STS_timeout_intr_sts              1
    #define   MSK32EDDC_INTR_STS_timeout_intr_sts                 0x00000200

    #define     BA_EDDC_INTR_STS_nack_intr_sts                 0x0035
    #define     B16EDDC_INTR_STS_nack_intr_sts                 0x0034
    #define   LSb32EDDC_INTR_STS_nack_intr_sts                    10
    #define   LSb16EDDC_INTR_STS_nack_intr_sts                    10
    #define       bEDDC_INTR_STS_nack_intr_sts                 1
    #define   MSK32EDDC_INTR_STS_nack_intr_sts                    0x00000400

    #define     BA_EDDC_INTR_STS_slave_read_req_intr_sts       0x0035
    #define     B16EDDC_INTR_STS_slave_read_req_intr_sts       0x0034
    #define   LSb32EDDC_INTR_STS_slave_read_req_intr_sts          11
    #define   LSb16EDDC_INTR_STS_slave_read_req_intr_sts          11
    #define       bEDDC_INTR_STS_slave_read_req_intr_sts       1
    #define   MSK32EDDC_INTR_STS_slave_read_req_intr_sts          0x00000800

    #define     BA_EDDC_INTR_STS_arbit_lost_intr_sts           0x0035
    #define     B16EDDC_INTR_STS_arbit_lost_intr_sts           0x0034
    #define   LSb32EDDC_INTR_STS_arbit_lost_intr_sts              12
    #define   LSb16EDDC_INTR_STS_arbit_lost_intr_sts              12
    #define       bEDDC_INTR_STS_arbit_lost_intr_sts           1
    #define   MSK32EDDC_INTR_STS_arbit_lost_intr_sts              0x00001000
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_WFIFO_ADDR                             0x0038

    #define     BA_EDDC_WFIFO_ADDR_wr_rd_data                  0x0038
    #define     B16EDDC_WFIFO_ADDR_wr_rd_data                  0x0038
    #define   LSb32EDDC_WFIFO_ADDR_wr_rd_data                     0
    #define   LSb16EDDC_WFIFO_ADDR_wr_rd_data                     0
    #define       bEDDC_WFIFO_ADDR_wr_rd_data                  8
    #define   MSK32EDDC_WFIFO_ADDR_wr_rd_data                     0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_RFIFO_ADDR                             0x003C

    #define     BA_EDDC_RFIFO_ADDR_wr_rd_data                  0x003C
    #define     B16EDDC_RFIFO_ADDR_wr_rd_data                  0x003C
    #define   LSb32EDDC_RFIFO_ADDR_wr_rd_data                     0
    #define   LSb16EDDC_RFIFO_ADDR_wr_rd_data                     0
    #define       bEDDC_RFIFO_ADDR_wr_rd_data                  8
    #define   MSK32EDDC_RFIFO_ADDR_wr_rd_data                     0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_SCLLOW_TIMEOUT                         0x0040

    #define     BA_EDDC_SCLLOW_TIMEOUT_timeout                 0x0040
    #define     B16EDDC_SCLLOW_TIMEOUT_timeout                 0x0040
    #define   LSb32EDDC_SCLLOW_TIMEOUT_timeout                    0
    #define   LSb16EDDC_SCLLOW_TIMEOUT_timeout                    0
    #define       bEDDC_SCLLOW_TIMEOUT_timeout                 24
    #define   MSK32EDDC_SCLLOW_TIMEOUT_timeout                    0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_STS                                    0x0044

    #define     BA_EDDC_STS_bus_busy_status                    0x0044
    #define     B16EDDC_STS_bus_busy_status                    0x0044
    #define   LSb32EDDC_STS_bus_busy_status                       0
    #define   LSb16EDDC_STS_bus_busy_status                       0
    #define       bEDDC_STS_bus_busy_status                    1
    #define   MSK32EDDC_STS_bus_busy_status                       0x00000001

    #define     BA_EDDC_STS_debug                              0x0044
    #define     B16EDDC_STS_debug                              0x0044
    #define   LSb32EDDC_STS_debug                                 1
    #define   LSb16EDDC_STS_debug                                 1
    #define       bEDDC_STS_debug                              13
    #define   MSK32EDDC_STS_debug                                 0x00003FFE
    ///////////////////////////////////////////////////////////
    #define     RA_EDDC_MEM_CTRL                               0x0048

    #define     BA_EDDC_MEM_CTRL_RF_1P_write_fifo_cen_select   0x0048
    #define     B16EDDC_MEM_CTRL_RF_1P_write_fifo_cen_select   0x0048
    #define   LSb32EDDC_MEM_CTRL_RF_1P_write_fifo_cen_select      0
    #define   LSb16EDDC_MEM_CTRL_RF_1P_write_fifo_cen_select      0
    #define       bEDDC_MEM_CTRL_RF_1P_write_fifo_cen_select   1
    #define   MSK32EDDC_MEM_CTRL_RF_1P_write_fifo_cen_select      0x00000001

    #define     BA_EDDC_MEM_CTRL_RF_1P_read_fifo_cen_select    0x0048
    #define     B16EDDC_MEM_CTRL_RF_1P_read_fifo_cen_select    0x0048
    #define   LSb32EDDC_MEM_CTRL_RF_1P_read_fifo_cen_select       1
    #define   LSb16EDDC_MEM_CTRL_RF_1P_read_fifo_cen_select       1
    #define       bEDDC_MEM_CTRL_RF_1P_read_fifo_cen_select    1
    #define   MSK32EDDC_MEM_CTRL_RF_1P_read_fifo_cen_select       0x00000002

    #define     BA_EDDC_MEM_CTRL_RF_1P_write_fifo_cen          0x0048
    #define     B16EDDC_MEM_CTRL_RF_1P_write_fifo_cen          0x0048
    #define   LSb32EDDC_MEM_CTRL_RF_1P_write_fifo_cen             2
    #define   LSb16EDDC_MEM_CTRL_RF_1P_write_fifo_cen             2
    #define       bEDDC_MEM_CTRL_RF_1P_write_fifo_cen          1
    #define   MSK32EDDC_MEM_CTRL_RF_1P_write_fifo_cen             0x00000004

    #define     BA_EDDC_MEM_CTRL_RF_1P_read_fifo_cen           0x0048
    #define     B16EDDC_MEM_CTRL_RF_1P_read_fifo_cen           0x0048
    #define   LSb32EDDC_MEM_CTRL_RF_1P_read_fifo_cen              3
    #define   LSb16EDDC_MEM_CTRL_RF_1P_read_fifo_cen              3
    #define       bEDDC_MEM_CTRL_RF_1P_read_fifo_cen           1
    #define   MSK32EDDC_MEM_CTRL_RF_1P_read_fifo_cen              0x00000008
    ///////////////////////////////////////////////////////////

    typedef struct SIE_EDDC {
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_CFG_enable(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32EDDC_CFG_enable(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16EDDC_CFG_enable(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16EDDC_CFG_enable(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define   GET32EDDC_CFG_return_2_idle(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32EDDC_CFG_return_2_idle(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16EDDC_CFG_return_2_idle(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16EDDC_CFG_return_2_idle(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32EDDC_CFG_access_type(r32)                   _BFGET_(r32, 2, 2)
    #define   SET32EDDC_CFG_access_type(r32,v)                 _BFSET_(r32, 2, 2,v)
    #define   GET16EDDC_CFG_access_type(r16)                   _BFGET_(r16, 2, 2)
    #define   SET16EDDC_CFG_access_type(r16,v)                 _BFSET_(r16, 2, 2,v)

    #define   GET32EDDC_CFG_xfer_mode(r32)                     _BFGET_(r32, 4, 3)
    #define   SET32EDDC_CFG_xfer_mode(r32,v)                   _BFSET_(r32, 4, 3,v)
    #define   GET16EDDC_CFG_xfer_mode(r16)                     _BFGET_(r16, 4, 3)
    #define   SET16EDDC_CFG_xfer_mode(r16,v)                   _BFSET_(r16, 4, 3,v)

    #define   GET32EDDC_CFG_eddc_mode(r32)                     _BFGET_(r32, 5, 5)
    #define   SET32EDDC_CFG_eddc_mode(r32,v)                   _BFSET_(r32, 5, 5,v)
    #define   GET16EDDC_CFG_eddc_mode(r16)                     _BFGET_(r16, 5, 5)
    #define   SET16EDDC_CFG_eddc_mode(r16,v)                   _BFSET_(r16, 5, 5,v)

    #define   GET32EDDC_CFG_salve_addr(r32)                    _BFGET_(r32,12, 6)
    #define   SET32EDDC_CFG_salve_addr(r32,v)                  _BFSET_(r32,12, 6,v)
    #define   GET16EDDC_CFG_salve_addr(r16)                    _BFGET_(r16,12, 6)
    #define   SET16EDDC_CFG_salve_addr(r16,v)                  _BFSET_(r16,12, 6,v)

    #define   GET32EDDC_CFG_hs_en(r32)                         _BFGET_(r32,13,13)
    #define   SET32EDDC_CFG_hs_en(r32,v)                       _BFSET_(r32,13,13,v)
    #define   GET16EDDC_CFG_hs_en(r16)                         _BFGET_(r16,13,13)
    #define   SET16EDDC_CFG_hs_en(r16,v)                       _BFSET_(r16,13,13,v)

    #define   GET32EDDC_CFG_master_code(r32)                   _BFGET_(r32,21,14)
    #define   SET32EDDC_CFG_master_code(r32,v)                 _BFSET_(r32,21,14,v)

    #define   GET32EDDC_CFG_timeout_en(r32)                    _BFGET_(r32,22,22)
    #define   SET32EDDC_CFG_timeout_en(r32,v)                  _BFSET_(r32,22,22,v)
    #define   GET16EDDC_CFG_timeout_en(r16)                    _BFGET_(r16, 6, 6)
    #define   SET16EDDC_CFG_timeout_en(r16,v)                  _BFSET_(r16, 6, 6,v)

    #define   GET32EDDC_CFG_slave_read_req_en(r32)             _BFGET_(r32,23,23)
    #define   SET32EDDC_CFG_slave_read_req_en(r32,v)           _BFSET_(r32,23,23,v)
    #define   GET16EDDC_CFG_slave_read_req_en(r16)             _BFGET_(r16, 7, 7)
    #define   SET16EDDC_CFG_slave_read_req_en(r16,v)           _BFSET_(r16, 7, 7,v)

    #define   GET32EDDC_CFG_rStart_exp_en(r32)                 _BFGET_(r32,24,24)
    #define   SET32EDDC_CFG_rStart_exp_en(r32,v)               _BFSET_(r32,24,24,v)
    #define   GET16EDDC_CFG_rStart_exp_en(r16)                 _BFGET_(r16, 8, 8)
    #define   SET16EDDC_CFG_rStart_exp_en(r16,v)               _BFSET_(r16, 8, 8,v)

    #define     w32EDDC_CFG                                    {\
            UNSG32 uCFG_enable                                 :  1;\
            UNSG32 uCFG_return_2_idle                          :  1;\
            UNSG32 uCFG_access_type                            :  1;\
            UNSG32 uCFG_xfer_mode                              :  2;\
            UNSG32 uCFG_eddc_mode                              :  1;\
            UNSG32 uCFG_salve_addr                             :  7;\
            UNSG32 uCFG_hs_en                                  :  1;\
            UNSG32 uCFG_master_code                            :  8;\
            UNSG32 uCFG_timeout_en                             :  1;\
            UNSG32 uCFG_slave_read_req_en                      :  1;\
            UNSG32 uCFG_rStart_exp_en                          :  1;\
            UNSG32 RSVDx0_b25                                  :  7;\
          }
    union { UNSG32 u32EDDC_CFG;
            struct w32EDDC_CFG;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_OFFSET_addr(r32)                       _BFGET_(r32, 7, 0)
    #define   SET32EDDC_OFFSET_addr(r32,v)                     _BFSET_(r32, 7, 0,v)
    #define   GET16EDDC_OFFSET_addr(r16)                       _BFGET_(r16, 7, 0)
    #define   SET16EDDC_OFFSET_addr(r16,v)                     _BFSET_(r16, 7, 0,v)

    #define     w32EDDC_OFFSET                                 {\
            UNSG32 uOFFSET_addr                                :  8;\
            UNSG32 RSVDx4_b8                                   : 24;\
          }
    union { UNSG32 u32EDDC_OFFSET;
            struct w32EDDC_OFFSET;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_DATA_SIZE_len(r32)                     _BFGET_(r32,15, 0)
    #define   SET32EDDC_DATA_SIZE_len(r32,v)                   _BFSET_(r32,15, 0,v)
    #define   GET16EDDC_DATA_SIZE_len(r16)                     _BFGET_(r16,15, 0)
    #define   SET16EDDC_DATA_SIZE_len(r16,v)                   _BFSET_(r16,15, 0,v)

    #define     w32EDDC_DATA_SIZE                              {\
            UNSG32 uDATA_SIZE_len                              : 16;\
            UNSG32 RSVDx8_b16                                  : 16;\
          }
    union { UNSG32 u32EDDC_DATA_SIZE;
            struct w32EDDC_DATA_SIZE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_START_TRIG_trig_on(r32)                _BFGET_(r32, 0, 0)
    #define   SET32EDDC_START_TRIG_trig_on(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16EDDC_START_TRIG_trig_on(r16)                _BFGET_(r16, 0, 0)
    #define   SET16EDDC_START_TRIG_trig_on(r16,v)              _BFSET_(r16, 0, 0,v)

    #define     w32EDDC_START_TRIG                             {\
            UNSG32 uSTART_TRIG_trig_on                         :  1;\
            UNSG32 RSVDxC_b1                                   : 31;\
          }
    union { UNSG32 u32EDDC_START_TRIG;
            struct w32EDDC_START_TRIG;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_SEG_CFG_seg_ptr_addr(r32)              _BFGET_(r32, 7, 0)
    #define   SET32EDDC_SEG_CFG_seg_ptr_addr(r32,v)            _BFSET_(r32, 7, 0,v)
    #define   GET16EDDC_SEG_CFG_seg_ptr_addr(r16)              _BFGET_(r16, 7, 0)
    #define   SET16EDDC_SEG_CFG_seg_ptr_addr(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32EDDC_SEG_CFG_seg_ptr_value(r32)             _BFGET_(r32,15, 8)
    #define   SET32EDDC_SEG_CFG_seg_ptr_value(r32,v)           _BFSET_(r32,15, 8,v)
    #define   GET16EDDC_SEG_CFG_seg_ptr_value(r16)             _BFGET_(r16,15, 8)
    #define   SET16EDDC_SEG_CFG_seg_ptr_value(r16,v)           _BFSET_(r16,15, 8,v)

    #define     w32EDDC_SEG_CFG                                {\
            UNSG32 uSEG_CFG_seg_ptr_addr                       :  8;\
            UNSG32 uSEG_CFG_seg_ptr_value                      :  8;\
            UNSG32 RSVDx10_b16                                 : 16;\
          }
    union { UNSG32 u32EDDC_SEG_CFG;
            struct w32EDDC_SEG_CFG;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_START_STOP_SETUP_strat_ts(r32)         _BFGET_(r32,15, 0)
    #define   SET32EDDC_START_STOP_SETUP_strat_ts(r32,v)       _BFSET_(r32,15, 0,v)
    #define   GET16EDDC_START_STOP_SETUP_strat_ts(r16)         _BFGET_(r16,15, 0)
    #define   SET16EDDC_START_STOP_SETUP_strat_ts(r16,v)       _BFSET_(r16,15, 0,v)

    #define   GET32EDDC_START_STOP_SETUP_stop_ts(r32)          _BFGET_(r32,31,16)
    #define   SET32EDDC_START_STOP_SETUP_stop_ts(r32,v)        _BFSET_(r32,31,16,v)
    #define   GET16EDDC_START_STOP_SETUP_stop_ts(r16)          _BFGET_(r16,15, 0)
    #define   SET16EDDC_START_STOP_SETUP_stop_ts(r16,v)        _BFSET_(r16,15, 0,v)

    #define     w32EDDC_START_STOP_SETUP                       {\
            UNSG32 uSTART_STOP_SETUP_strat_ts                  : 16;\
            UNSG32 uSTART_STOP_SETUP_stop_ts                   : 16;\
          }
    union { UNSG32 u32EDDC_START_STOP_SETUP;
            struct w32EDDC_START_STOP_SETUP;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_DATA_SETUP_data_ts(r32)                _BFGET_(r32,15, 0)
    #define   SET32EDDC_DATA_SETUP_data_ts(r32,v)              _BFSET_(r32,15, 0,v)
    #define   GET16EDDC_DATA_SETUP_data_ts(r16)                _BFGET_(r16,15, 0)
    #define   SET16EDDC_DATA_SETUP_data_ts(r16,v)              _BFSET_(r16,15, 0,v)

    #define     w32EDDC_DATA_SETUP                             {\
            UNSG32 uDATA_SETUP_data_ts                         : 16;\
            UNSG32 RSVDx18_b16                                 : 16;\
          }
    union { UNSG32 u32EDDC_DATA_SETUP;
            struct w32EDDC_DATA_SETUP;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_CLK_PERIOD_ck_low(r32)                 _BFGET_(r32,15, 0)
    #define   SET32EDDC_CLK_PERIOD_ck_low(r32,v)               _BFSET_(r32,15, 0,v)
    #define   GET16EDDC_CLK_PERIOD_ck_low(r16)                 _BFGET_(r16,15, 0)
    #define   SET16EDDC_CLK_PERIOD_ck_low(r16,v)               _BFSET_(r16,15, 0,v)

    #define   GET32EDDC_CLK_PERIOD_ck_high(r32)                _BFGET_(r32,31,16)
    #define   SET32EDDC_CLK_PERIOD_ck_high(r32,v)              _BFSET_(r32,31,16,v)
    #define   GET16EDDC_CLK_PERIOD_ck_high(r16)                _BFGET_(r16,15, 0)
    #define   SET16EDDC_CLK_PERIOD_ck_high(r16,v)              _BFSET_(r16,15, 0,v)

    #define     w32EDDC_CLK_PERIOD                             {\
            UNSG32 uCLK_PERIOD_ck_low                          : 16;\
            UNSG32 uCLK_PERIOD_ck_high                         : 16;\
          }
    union { UNSG32 u32EDDC_CLK_PERIOD;
            struct w32EDDC_CLK_PERIOD;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_FIFO_PTRS_wfifo_wptr(r32)              _BFGET_(r32, 7, 0)
    #define   SET32EDDC_FIFO_PTRS_wfifo_wptr(r32,v)            _BFSET_(r32, 7, 0,v)
    #define   GET16EDDC_FIFO_PTRS_wfifo_wptr(r16)              _BFGET_(r16, 7, 0)
    #define   SET16EDDC_FIFO_PTRS_wfifo_wptr(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32EDDC_FIFO_PTRS_wfifo_rptr(r32)              _BFGET_(r32,15, 8)
    #define   SET32EDDC_FIFO_PTRS_wfifo_rptr(r32,v)            _BFSET_(r32,15, 8,v)
    #define   GET16EDDC_FIFO_PTRS_wfifo_rptr(r16)              _BFGET_(r16,15, 8)
    #define   SET16EDDC_FIFO_PTRS_wfifo_rptr(r16,v)            _BFSET_(r16,15, 8,v)

    #define   GET32EDDC_FIFO_PTRS_rfifo_wptr(r32)              _BFGET_(r32,23,16)
    #define   SET32EDDC_FIFO_PTRS_rfifo_wptr(r32,v)            _BFSET_(r32,23,16,v)
    #define   GET16EDDC_FIFO_PTRS_rfifo_wptr(r16)              _BFGET_(r16, 7, 0)
    #define   SET16EDDC_FIFO_PTRS_rfifo_wptr(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32EDDC_FIFO_PTRS_rfifo_rptr(r32)              _BFGET_(r32,31,24)
    #define   SET32EDDC_FIFO_PTRS_rfifo_rptr(r32,v)            _BFSET_(r32,31,24,v)
    #define   GET16EDDC_FIFO_PTRS_rfifo_rptr(r16)              _BFGET_(r16,15, 8)
    #define   SET16EDDC_FIFO_PTRS_rfifo_rptr(r16,v)            _BFSET_(r16,15, 8,v)

    #define     w32EDDC_FIFO_PTRS                              {\
            UNSG32 uFIFO_PTRS_wfifo_wptr                       :  8;\
            UNSG32 uFIFO_PTRS_wfifo_rptr                       :  8;\
            UNSG32 uFIFO_PTRS_rfifo_wptr                       :  8;\
            UNSG32 uFIFO_PTRS_rfifo_rptr                       :  8;\
          }
    union { UNSG32 u32EDDC_FIFO_PTRS;
            struct w32EDDC_FIFO_PTRS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_FIFO_CTRL_wfifo_soft_rst(r32)          _BFGET_(r32, 0, 0)
    #define   SET32EDDC_FIFO_CTRL_wfifo_soft_rst(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16EDDC_FIFO_CTRL_wfifo_soft_rst(r16)          _BFGET_(r16, 0, 0)
    #define   SET16EDDC_FIFO_CTRL_wfifo_soft_rst(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32EDDC_FIFO_CTRL_misc_cfg(r32)                _BFGET_(r32, 4, 1)
    #define   SET32EDDC_FIFO_CTRL_misc_cfg(r32,v)              _BFSET_(r32, 4, 1,v)
    #define   GET16EDDC_FIFO_CTRL_misc_cfg(r16)                _BFGET_(r16, 4, 1)
    #define   SET16EDDC_FIFO_CTRL_misc_cfg(r16,v)              _BFSET_(r16, 4, 1,v)

    #define   GET32EDDC_FIFO_CTRL_rfifo_soft_rst(r32)          _BFGET_(r32, 5, 5)
    #define   SET32EDDC_FIFO_CTRL_rfifo_soft_rst(r32,v)        _BFSET_(r32, 5, 5,v)
    #define   GET16EDDC_FIFO_CTRL_rfifo_soft_rst(r16)          _BFGET_(r16, 5, 5)
    #define   SET16EDDC_FIFO_CTRL_rfifo_soft_rst(r16,v)        _BFSET_(r16, 5, 5,v)

    #define     w32EDDC_FIFO_CTRL                              {\
            UNSG32 uFIFO_CTRL_wfifo_soft_rst                   :  1;\
            UNSG32 uFIFO_CTRL_misc_cfg                         :  4;\
            UNSG32 uFIFO_CTRL_rfifo_soft_rst                   :  1;\
            UNSG32 RSVDx24_b6                                  : 26;\
          }
    union { UNSG32 u32EDDC_FIFO_CTRL;
            struct w32EDDC_FIFO_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_FIFO_STS_wfifo_status(r32)             _BFGET_(r32, 3, 0)
    #define   SET32EDDC_FIFO_STS_wfifo_status(r32,v)           _BFSET_(r32, 3, 0,v)
    #define   GET16EDDC_FIFO_STS_wfifo_status(r16)             _BFGET_(r16, 3, 0)
    #define   SET16EDDC_FIFO_STS_wfifo_status(r16,v)           _BFSET_(r16, 3, 0,v)

    #define   GET32EDDC_FIFO_STS_rfifo_status(r32)             _BFGET_(r32, 7, 4)
    #define   SET32EDDC_FIFO_STS_rfifo_status(r32,v)           _BFSET_(r32, 7, 4,v)
    #define   GET16EDDC_FIFO_STS_rfifo_status(r16)             _BFGET_(r16, 7, 4)
    #define   SET16EDDC_FIFO_STS_rfifo_status(r16,v)           _BFSET_(r16, 7, 4,v)

    #define     w32EDDC_FIFO_STS                               {\
            UNSG32 uFIFO_STS_wfifo_status                      :  4;\
            UNSG32 uFIFO_STS_rfifo_status                      :  4;\
            UNSG32 RSVDx28_b8                                  : 24;\
          }
    union { UNSG32 u32EDDC_FIFO_STS;
            struct w32EDDC_FIFO_STS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_FIFO_THRES_wfifo_thres(r32)            _BFGET_(r32,15, 0)
    #define   SET32EDDC_FIFO_THRES_wfifo_thres(r32,v)          _BFSET_(r32,15, 0,v)
    #define   GET16EDDC_FIFO_THRES_wfifo_thres(r16)            _BFGET_(r16,15, 0)
    #define   SET16EDDC_FIFO_THRES_wfifo_thres(r16,v)          _BFSET_(r16,15, 0,v)

    #define   GET32EDDC_FIFO_THRES_rfifo_thres(r32)            _BFGET_(r32,31,16)
    #define   SET32EDDC_FIFO_THRES_rfifo_thres(r32,v)          _BFSET_(r32,31,16,v)
    #define   GET16EDDC_FIFO_THRES_rfifo_thres(r16)            _BFGET_(r16,15, 0)
    #define   SET16EDDC_FIFO_THRES_rfifo_thres(r16,v)          _BFSET_(r16,15, 0,v)

    #define     w32EDDC_FIFO_THRES                             {\
            UNSG32 uFIFO_THRES_wfifo_thres                     : 16;\
            UNSG32 uFIFO_THRES_rfifo_thres                     : 16;\
          }
    union { UNSG32 u32EDDC_FIFO_THRES;
            struct w32EDDC_FIFO_THRES;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_INTR_CTRL_wfifo_ae_intr_en(r32)        _BFGET_(r32, 0, 0)
    #define   SET32EDDC_INTR_CTRL_wfifo_ae_intr_en(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16EDDC_INTR_CTRL_wfifo_ae_intr_en(r16)        _BFGET_(r16, 0, 0)
    #define   SET16EDDC_INTR_CTRL_wfifo_ae_intr_en(r16,v)      _BFSET_(r16, 0, 0,v)

    #define   GET32EDDC_INTR_CTRL_wfifo_e_intr_en(r32)         _BFGET_(r32, 1, 1)
    #define   SET32EDDC_INTR_CTRL_wfifo_e_intr_en(r32,v)       _BFSET_(r32, 1, 1,v)
    #define   GET16EDDC_INTR_CTRL_wfifo_e_intr_en(r16)         _BFGET_(r16, 1, 1)
    #define   SET16EDDC_INTR_CTRL_wfifo_e_intr_en(r16,v)       _BFSET_(r16, 1, 1,v)

    #define   GET32EDDC_INTR_CTRL_rfifo_af_intr_en(r32)        _BFGET_(r32, 2, 2)
    #define   SET32EDDC_INTR_CTRL_rfifo_af_intr_en(r32,v)      _BFSET_(r32, 2, 2,v)
    #define   GET16EDDC_INTR_CTRL_rfifo_af_intr_en(r16)        _BFGET_(r16, 2, 2)
    #define   SET16EDDC_INTR_CTRL_rfifo_af_intr_en(r16,v)      _BFSET_(r16, 2, 2,v)

    #define   GET32EDDC_INTR_CTRL_rfifo_f_intr_en(r32)         _BFGET_(r32, 3, 3)
    #define   SET32EDDC_INTR_CTRL_rfifo_f_intr_en(r32,v)       _BFSET_(r32, 3, 3,v)
    #define   GET16EDDC_INTR_CTRL_rfifo_f_intr_en(r16)         _BFGET_(r16, 3, 3)
    #define   SET16EDDC_INTR_CTRL_rfifo_f_intr_en(r16,v)       _BFSET_(r16, 3, 3,v)

    #define   GET32EDDC_INTR_CTRL_master_done_intr_en(r32)     _BFGET_(r32, 4, 4)
    #define   SET32EDDC_INTR_CTRL_master_done_intr_en(r32,v)   _BFSET_(r32, 4, 4,v)
    #define   GET16EDDC_INTR_CTRL_master_done_intr_en(r16)     _BFGET_(r16, 4, 4)
    #define   SET16EDDC_INTR_CTRL_master_done_intr_en(r16,v)   _BFSET_(r16, 4, 4,v)

    #define   GET32EDDC_INTR_CTRL_timeout_intr_en(r32)         _BFGET_(r32, 5, 5)
    #define   SET32EDDC_INTR_CTRL_timeout_intr_en(r32,v)       _BFSET_(r32, 5, 5,v)
    #define   GET16EDDC_INTR_CTRL_timeout_intr_en(r16)         _BFGET_(r16, 5, 5)
    #define   SET16EDDC_INTR_CTRL_timeout_intr_en(r16,v)       _BFSET_(r16, 5, 5,v)

    #define   GET32EDDC_INTR_CTRL_nack_intr_en(r32)            _BFGET_(r32, 6, 6)
    #define   SET32EDDC_INTR_CTRL_nack_intr_en(r32,v)          _BFSET_(r32, 6, 6,v)
    #define   GET16EDDC_INTR_CTRL_nack_intr_en(r16)            _BFGET_(r16, 6, 6)
    #define   SET16EDDC_INTR_CTRL_nack_intr_en(r16,v)          _BFSET_(r16, 6, 6,v)

    #define   GET32EDDC_INTR_CTRL_slave_read_req_intr_en(r32)  _BFGET_(r32, 7, 7)
    #define   SET32EDDC_INTR_CTRL_slave_read_req_intr_en(r32,v) _BFSET_(r32, 7, 7,v)
    #define   GET16EDDC_INTR_CTRL_slave_read_req_intr_en(r16)  _BFGET_(r16, 7, 7)
    #define   SET16EDDC_INTR_CTRL_slave_read_req_intr_en(r16,v) _BFSET_(r16, 7, 7,v)

    #define   GET32EDDC_INTR_CTRL_arbit_lost_intr_en(r32)      _BFGET_(r32, 8, 8)
    #define   SET32EDDC_INTR_CTRL_arbit_lost_intr_en(r32,v)    _BFSET_(r32, 8, 8,v)
    #define   GET16EDDC_INTR_CTRL_arbit_lost_intr_en(r16)      _BFGET_(r16, 8, 8)
    #define   SET16EDDC_INTR_CTRL_arbit_lost_intr_en(r16,v)    _BFSET_(r16, 8, 8,v)

    #define   GET32EDDC_INTR_CTRL_wfifo_ae_intr_clr(r32)       _BFGET_(r32, 9, 9)
    #define   SET32EDDC_INTR_CTRL_wfifo_ae_intr_clr(r32,v)     _BFSET_(r32, 9, 9,v)
    #define   GET16EDDC_INTR_CTRL_wfifo_ae_intr_clr(r16)       _BFGET_(r16, 9, 9)
    #define   SET16EDDC_INTR_CTRL_wfifo_ae_intr_clr(r16,v)     _BFSET_(r16, 9, 9,v)

    #define   GET32EDDC_INTR_CTRL_wfifo_e_intr_clr(r32)        _BFGET_(r32,10,10)
    #define   SET32EDDC_INTR_CTRL_wfifo_e_intr_clr(r32,v)      _BFSET_(r32,10,10,v)
    #define   GET16EDDC_INTR_CTRL_wfifo_e_intr_clr(r16)        _BFGET_(r16,10,10)
    #define   SET16EDDC_INTR_CTRL_wfifo_e_intr_clr(r16,v)      _BFSET_(r16,10,10,v)

    #define   GET32EDDC_INTR_CTRL_rfifo_af_intr_clr(r32)       _BFGET_(r32,11,11)
    #define   SET32EDDC_INTR_CTRL_rfifo_af_intr_clr(r32,v)     _BFSET_(r32,11,11,v)
    #define   GET16EDDC_INTR_CTRL_rfifo_af_intr_clr(r16)       _BFGET_(r16,11,11)
    #define   SET16EDDC_INTR_CTRL_rfifo_af_intr_clr(r16,v)     _BFSET_(r16,11,11,v)

    #define   GET32EDDC_INTR_CTRL_rfifo_f_intr_clr(r32)        _BFGET_(r32,12,12)
    #define   SET32EDDC_INTR_CTRL_rfifo_f_intr_clr(r32,v)      _BFSET_(r32,12,12,v)
    #define   GET16EDDC_INTR_CTRL_rfifo_f_intr_clr(r16)        _BFGET_(r16,12,12)
    #define   SET16EDDC_INTR_CTRL_rfifo_f_intr_clr(r16,v)      _BFSET_(r16,12,12,v)

    #define   GET32EDDC_INTR_CTRL_master_done_intr_clr(r32)    _BFGET_(r32,13,13)
    #define   SET32EDDC_INTR_CTRL_master_done_intr_clr(r32,v)  _BFSET_(r32,13,13,v)
    #define   GET16EDDC_INTR_CTRL_master_done_intr_clr(r16)    _BFGET_(r16,13,13)
    #define   SET16EDDC_INTR_CTRL_master_done_intr_clr(r16,v)  _BFSET_(r16,13,13,v)

    #define   GET32EDDC_INTR_CTRL_timeout_intr_clr(r32)        _BFGET_(r32,14,14)
    #define   SET32EDDC_INTR_CTRL_timeout_intr_clr(r32,v)      _BFSET_(r32,14,14,v)
    #define   GET16EDDC_INTR_CTRL_timeout_intr_clr(r16)        _BFGET_(r16,14,14)
    #define   SET16EDDC_INTR_CTRL_timeout_intr_clr(r16,v)      _BFSET_(r16,14,14,v)

    #define   GET32EDDC_INTR_CTRL_nack_intr_clr(r32)           _BFGET_(r32,15,15)
    #define   SET32EDDC_INTR_CTRL_nack_intr_clr(r32,v)         _BFSET_(r32,15,15,v)
    #define   GET16EDDC_INTR_CTRL_nack_intr_clr(r16)           _BFGET_(r16,15,15)
    #define   SET16EDDC_INTR_CTRL_nack_intr_clr(r16,v)         _BFSET_(r16,15,15,v)

    #define   GET32EDDC_INTR_CTRL_slave_read_req_intr_clr(r32) _BFGET_(r32,16,16)
    #define   SET32EDDC_INTR_CTRL_slave_read_req_intr_clr(r32,v) _BFSET_(r32,16,16,v)
    #define   GET16EDDC_INTR_CTRL_slave_read_req_intr_clr(r16) _BFGET_(r16, 0, 0)
    #define   SET16EDDC_INTR_CTRL_slave_read_req_intr_clr(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32EDDC_INTR_CTRL_arbit_lost_intr_clr(r32)     _BFGET_(r32,17,17)
    #define   SET32EDDC_INTR_CTRL_arbit_lost_intr_clr(r32,v)   _BFSET_(r32,17,17,v)
    #define   GET16EDDC_INTR_CTRL_arbit_lost_intr_clr(r16)     _BFGET_(r16, 1, 1)
    #define   SET16EDDC_INTR_CTRL_arbit_lost_intr_clr(r16,v)   _BFSET_(r16, 1, 1,v)

    #define     w32EDDC_INTR_CTRL                              {\
            UNSG32 uINTR_CTRL_wfifo_ae_intr_en                 :  1;\
            UNSG32 uINTR_CTRL_wfifo_e_intr_en                  :  1;\
            UNSG32 uINTR_CTRL_rfifo_af_intr_en                 :  1;\
            UNSG32 uINTR_CTRL_rfifo_f_intr_en                  :  1;\
            UNSG32 uINTR_CTRL_master_done_intr_en              :  1;\
            UNSG32 uINTR_CTRL_timeout_intr_en                  :  1;\
            UNSG32 uINTR_CTRL_nack_intr_en                     :  1;\
            UNSG32 uINTR_CTRL_slave_read_req_intr_en           :  1;\
            UNSG32 uINTR_CTRL_arbit_lost_intr_en               :  1;\
            UNSG32 uINTR_CTRL_wfifo_ae_intr_clr                :  1;\
            UNSG32 uINTR_CTRL_wfifo_e_intr_clr                 :  1;\
            UNSG32 uINTR_CTRL_rfifo_af_intr_clr                :  1;\
            UNSG32 uINTR_CTRL_rfifo_f_intr_clr                 :  1;\
            UNSG32 uINTR_CTRL_master_done_intr_clr             :  1;\
            UNSG32 uINTR_CTRL_timeout_intr_clr                 :  1;\
            UNSG32 uINTR_CTRL_nack_intr_clr                    :  1;\
            UNSG32 uINTR_CTRL_slave_read_req_intr_clr          :  1;\
            UNSG32 uINTR_CTRL_arbit_lost_intr_clr              :  1;\
            UNSG32 RSVDx30_b18                                 : 14;\
          }
    union { UNSG32 u32EDDC_INTR_CTRL;
            struct w32EDDC_INTR_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_INTR_STS_wfifo_ae_intr_sts_r(r32)      _BFGET_(r32, 0, 0)
    #define   SET32EDDC_INTR_STS_wfifo_ae_intr_sts_r(r32,v)    _BFSET_(r32, 0, 0,v)
    #define   GET16EDDC_INTR_STS_wfifo_ae_intr_sts_r(r16)      _BFGET_(r16, 0, 0)
    #define   SET16EDDC_INTR_STS_wfifo_ae_intr_sts_r(r16,v)    _BFSET_(r16, 0, 0,v)

    #define   GET32EDDC_INTR_STS_wfifo_e_intr_sts_r(r32)       _BFGET_(r32, 1, 1)
    #define   SET32EDDC_INTR_STS_wfifo_e_intr_sts_r(r32,v)     _BFSET_(r32, 1, 1,v)
    #define   GET16EDDC_INTR_STS_wfifo_e_intr_sts_r(r16)       _BFGET_(r16, 1, 1)
    #define   SET16EDDC_INTR_STS_wfifo_e_intr_sts_r(r16,v)     _BFSET_(r16, 1, 1,v)

    #define   GET32EDDC_INTR_STS_rfifo_af_intr_sts_r(r32)      _BFGET_(r32, 2, 2)
    #define   SET32EDDC_INTR_STS_rfifo_af_intr_sts_r(r32,v)    _BFSET_(r32, 2, 2,v)
    #define   GET16EDDC_INTR_STS_rfifo_af_intr_sts_r(r16)      _BFGET_(r16, 2, 2)
    #define   SET16EDDC_INTR_STS_rfifo_af_intr_sts_r(r16,v)    _BFSET_(r16, 2, 2,v)

    #define   GET32EDDC_INTR_STS_rfifo_f_intr_sts_r(r32)       _BFGET_(r32, 3, 3)
    #define   SET32EDDC_INTR_STS_rfifo_f_intr_sts_r(r32,v)     _BFSET_(r32, 3, 3,v)
    #define   GET16EDDC_INTR_STS_rfifo_f_intr_sts_r(r16)       _BFGET_(r16, 3, 3)
    #define   SET16EDDC_INTR_STS_rfifo_f_intr_sts_r(r16,v)     _BFSET_(r16, 3, 3,v)

    #define   GET32EDDC_INTR_STS_wfifo_ae_intr_sts(r32)        _BFGET_(r32, 4, 4)
    #define   SET32EDDC_INTR_STS_wfifo_ae_intr_sts(r32,v)      _BFSET_(r32, 4, 4,v)
    #define   GET16EDDC_INTR_STS_wfifo_ae_intr_sts(r16)        _BFGET_(r16, 4, 4)
    #define   SET16EDDC_INTR_STS_wfifo_ae_intr_sts(r16,v)      _BFSET_(r16, 4, 4,v)

    #define   GET32EDDC_INTR_STS_wfifo_e_intr_sts(r32)         _BFGET_(r32, 5, 5)
    #define   SET32EDDC_INTR_STS_wfifo_e_intr_sts(r32,v)       _BFSET_(r32, 5, 5,v)
    #define   GET16EDDC_INTR_STS_wfifo_e_intr_sts(r16)         _BFGET_(r16, 5, 5)
    #define   SET16EDDC_INTR_STS_wfifo_e_intr_sts(r16,v)       _BFSET_(r16, 5, 5,v)

    #define   GET32EDDC_INTR_STS_rfifo_af_intr_sts(r32)        _BFGET_(r32, 6, 6)
    #define   SET32EDDC_INTR_STS_rfifo_af_intr_sts(r32,v)      _BFSET_(r32, 6, 6,v)
    #define   GET16EDDC_INTR_STS_rfifo_af_intr_sts(r16)        _BFGET_(r16, 6, 6)
    #define   SET16EDDC_INTR_STS_rfifo_af_intr_sts(r16,v)      _BFSET_(r16, 6, 6,v)

    #define   GET32EDDC_INTR_STS_rfifo_f_intr_sts(r32)         _BFGET_(r32, 7, 7)
    #define   SET32EDDC_INTR_STS_rfifo_f_intr_sts(r32,v)       _BFSET_(r32, 7, 7,v)
    #define   GET16EDDC_INTR_STS_rfifo_f_intr_sts(r16)         _BFGET_(r16, 7, 7)
    #define   SET16EDDC_INTR_STS_rfifo_f_intr_sts(r16,v)       _BFSET_(r16, 7, 7,v)

    #define   GET32EDDC_INTR_STS_master_done_intr_sts(r32)     _BFGET_(r32, 8, 8)
    #define   SET32EDDC_INTR_STS_master_done_intr_sts(r32,v)   _BFSET_(r32, 8, 8,v)
    #define   GET16EDDC_INTR_STS_master_done_intr_sts(r16)     _BFGET_(r16, 8, 8)
    #define   SET16EDDC_INTR_STS_master_done_intr_sts(r16,v)   _BFSET_(r16, 8, 8,v)

    #define   GET32EDDC_INTR_STS_timeout_intr_sts(r32)         _BFGET_(r32, 9, 9)
    #define   SET32EDDC_INTR_STS_timeout_intr_sts(r32,v)       _BFSET_(r32, 9, 9,v)
    #define   GET16EDDC_INTR_STS_timeout_intr_sts(r16)         _BFGET_(r16, 9, 9)
    #define   SET16EDDC_INTR_STS_timeout_intr_sts(r16,v)       _BFSET_(r16, 9, 9,v)

    #define   GET32EDDC_INTR_STS_nack_intr_sts(r32)            _BFGET_(r32,10,10)
    #define   SET32EDDC_INTR_STS_nack_intr_sts(r32,v)          _BFSET_(r32,10,10,v)
    #define   GET16EDDC_INTR_STS_nack_intr_sts(r16)            _BFGET_(r16,10,10)
    #define   SET16EDDC_INTR_STS_nack_intr_sts(r16,v)          _BFSET_(r16,10,10,v)

    #define   GET32EDDC_INTR_STS_slave_read_req_intr_sts(r32)  _BFGET_(r32,11,11)
    #define   SET32EDDC_INTR_STS_slave_read_req_intr_sts(r32,v) _BFSET_(r32,11,11,v)
    #define   GET16EDDC_INTR_STS_slave_read_req_intr_sts(r16)  _BFGET_(r16,11,11)
    #define   SET16EDDC_INTR_STS_slave_read_req_intr_sts(r16,v) _BFSET_(r16,11,11,v)

    #define   GET32EDDC_INTR_STS_arbit_lost_intr_sts(r32)      _BFGET_(r32,12,12)
    #define   SET32EDDC_INTR_STS_arbit_lost_intr_sts(r32,v)    _BFSET_(r32,12,12,v)
    #define   GET16EDDC_INTR_STS_arbit_lost_intr_sts(r16)      _BFGET_(r16,12,12)
    #define   SET16EDDC_INTR_STS_arbit_lost_intr_sts(r16,v)    _BFSET_(r16,12,12,v)

    #define     w32EDDC_INTR_STS                               {\
            UNSG32 uINTR_STS_wfifo_ae_intr_sts_r               :  1;\
            UNSG32 uINTR_STS_wfifo_e_intr_sts_r                :  1;\
            UNSG32 uINTR_STS_rfifo_af_intr_sts_r               :  1;\
            UNSG32 uINTR_STS_rfifo_f_intr_sts_r                :  1;\
            UNSG32 uINTR_STS_wfifo_ae_intr_sts                 :  1;\
            UNSG32 uINTR_STS_wfifo_e_intr_sts                  :  1;\
            UNSG32 uINTR_STS_rfifo_af_intr_sts                 :  1;\
            UNSG32 uINTR_STS_rfifo_f_intr_sts                  :  1;\
            UNSG32 uINTR_STS_master_done_intr_sts              :  1;\
            UNSG32 uINTR_STS_timeout_intr_sts                  :  1;\
            UNSG32 uINTR_STS_nack_intr_sts                     :  1;\
            UNSG32 uINTR_STS_slave_read_req_intr_sts           :  1;\
            UNSG32 uINTR_STS_arbit_lost_intr_sts               :  1;\
            UNSG32 RSVDx34_b13                                 : 19;\
          }
    union { UNSG32 u32EDDC_INTR_STS;
            struct w32EDDC_INTR_STS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_WFIFO_ADDR_wr_rd_data(r32)             _BFGET_(r32, 7, 0)
    #define   SET32EDDC_WFIFO_ADDR_wr_rd_data(r32,v)           _BFSET_(r32, 7, 0,v)
    #define   GET16EDDC_WFIFO_ADDR_wr_rd_data(r16)             _BFGET_(r16, 7, 0)
    #define   SET16EDDC_WFIFO_ADDR_wr_rd_data(r16,v)           _BFSET_(r16, 7, 0,v)

    #define     w32EDDC_WFIFO_ADDR                             {\
            UNSG32 uWFIFO_ADDR_wr_rd_data                      :  8;\
            UNSG32 RSVDx38_b8                                  : 24;\
          }
    union { UNSG32 u32EDDC_WFIFO_ADDR;
            struct w32EDDC_WFIFO_ADDR;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_RFIFO_ADDR_wr_rd_data(r32)             _BFGET_(r32, 7, 0)
    #define   SET32EDDC_RFIFO_ADDR_wr_rd_data(r32,v)           _BFSET_(r32, 7, 0,v)
    #define   GET16EDDC_RFIFO_ADDR_wr_rd_data(r16)             _BFGET_(r16, 7, 0)
    #define   SET16EDDC_RFIFO_ADDR_wr_rd_data(r16,v)           _BFSET_(r16, 7, 0,v)

    #define     w32EDDC_RFIFO_ADDR                             {\
            UNSG32 uRFIFO_ADDR_wr_rd_data                      :  8;\
            UNSG32 RSVDx3C_b8                                  : 24;\
          }
    union { UNSG32 u32EDDC_RFIFO_ADDR;
            struct w32EDDC_RFIFO_ADDR;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_SCLLOW_TIMEOUT_timeout(r32)            _BFGET_(r32,23, 0)
    #define   SET32EDDC_SCLLOW_TIMEOUT_timeout(r32,v)          _BFSET_(r32,23, 0,v)

    #define     w32EDDC_SCLLOW_TIMEOUT                         {\
            UNSG32 uSCLLOW_TIMEOUT_timeout                     : 24;\
            UNSG32 RSVDx40_b24                                 :  8;\
          }
    union { UNSG32 u32EDDC_SCLLOW_TIMEOUT;
            struct w32EDDC_SCLLOW_TIMEOUT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_STS_bus_busy_status(r32)               _BFGET_(r32, 0, 0)
    #define   SET32EDDC_STS_bus_busy_status(r32,v)             _BFSET_(r32, 0, 0,v)
    #define   GET16EDDC_STS_bus_busy_status(r16)               _BFGET_(r16, 0, 0)
    #define   SET16EDDC_STS_bus_busy_status(r16,v)             _BFSET_(r16, 0, 0,v)

    #define   GET32EDDC_STS_debug(r32)                         _BFGET_(r32,13, 1)
    #define   SET32EDDC_STS_debug(r32,v)                       _BFSET_(r32,13, 1,v)
    #define   GET16EDDC_STS_debug(r16)                         _BFGET_(r16,13, 1)
    #define   SET16EDDC_STS_debug(r16,v)                       _BFSET_(r16,13, 1,v)

    #define     w32EDDC_STS                                    {\
            UNSG32 uSTS_bus_busy_status                        :  1;\
            UNSG32 uSTS_debug                                  : 13;\
            UNSG32 RSVDx44_b14                                 : 18;\
          }
    union { UNSG32 u32EDDC_STS;
            struct w32EDDC_STS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDDC_MEM_CTRL_RF_1P_write_fifo_cen_select(r32) _BFGET_(r32, 0, 0)
    #define   SET32EDDC_MEM_CTRL_RF_1P_write_fifo_cen_select(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16EDDC_MEM_CTRL_RF_1P_write_fifo_cen_select(r16) _BFGET_(r16, 0, 0)
    #define   SET16EDDC_MEM_CTRL_RF_1P_write_fifo_cen_select(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32EDDC_MEM_CTRL_RF_1P_read_fifo_cen_select(r32) _BFGET_(r32, 1, 1)
    #define   SET32EDDC_MEM_CTRL_RF_1P_read_fifo_cen_select(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16EDDC_MEM_CTRL_RF_1P_read_fifo_cen_select(r16) _BFGET_(r16, 1, 1)
    #define   SET16EDDC_MEM_CTRL_RF_1P_read_fifo_cen_select(r16,v) _BFSET_(r16, 1, 1,v)

    #define   GET32EDDC_MEM_CTRL_RF_1P_write_fifo_cen(r32)     _BFGET_(r32, 2, 2)
    #define   SET32EDDC_MEM_CTRL_RF_1P_write_fifo_cen(r32,v)   _BFSET_(r32, 2, 2,v)
    #define   GET16EDDC_MEM_CTRL_RF_1P_write_fifo_cen(r16)     _BFGET_(r16, 2, 2)
    #define   SET16EDDC_MEM_CTRL_RF_1P_write_fifo_cen(r16,v)   _BFSET_(r16, 2, 2,v)

    #define   GET32EDDC_MEM_CTRL_RF_1P_read_fifo_cen(r32)      _BFGET_(r32, 3, 3)
    #define   SET32EDDC_MEM_CTRL_RF_1P_read_fifo_cen(r32,v)    _BFSET_(r32, 3, 3,v)
    #define   GET16EDDC_MEM_CTRL_RF_1P_read_fifo_cen(r16)      _BFGET_(r16, 3, 3)
    #define   SET16EDDC_MEM_CTRL_RF_1P_read_fifo_cen(r16,v)    _BFSET_(r16, 3, 3,v)

    #define     w32EDDC_MEM_CTRL                               {\
            UNSG32 uMEM_CTRL_RF_1P_write_fifo_cen_select       :  1;\
            UNSG32 uMEM_CTRL_RF_1P_read_fifo_cen_select        :  1;\
            UNSG32 uMEM_CTRL_RF_1P_write_fifo_cen              :  1;\
            UNSG32 uMEM_CTRL_RF_1P_read_fifo_cen               :  1;\
            UNSG32 RSVDx48_b4                                  : 28;\
          }
    union { UNSG32 u32EDDC_MEM_CTRL;
            struct w32EDDC_MEM_CTRL;
          };
    ///////////////////////////////////////////////////////////
    } SIE_EDDC;

    typedef union  T32EDDC_CFG
          { UNSG32 u32;
            struct w32EDDC_CFG;
                 } T32EDDC_CFG;
    typedef union  T32EDDC_OFFSET
          { UNSG32 u32;
            struct w32EDDC_OFFSET;
                 } T32EDDC_OFFSET;
    typedef union  T32EDDC_DATA_SIZE
          { UNSG32 u32;
            struct w32EDDC_DATA_SIZE;
                 } T32EDDC_DATA_SIZE;
    typedef union  T32EDDC_START_TRIG
          { UNSG32 u32;
            struct w32EDDC_START_TRIG;
                 } T32EDDC_START_TRIG;
    typedef union  T32EDDC_SEG_CFG
          { UNSG32 u32;
            struct w32EDDC_SEG_CFG;
                 } T32EDDC_SEG_CFG;
    typedef union  T32EDDC_START_STOP_SETUP
          { UNSG32 u32;
            struct w32EDDC_START_STOP_SETUP;
                 } T32EDDC_START_STOP_SETUP;
    typedef union  T32EDDC_DATA_SETUP
          { UNSG32 u32;
            struct w32EDDC_DATA_SETUP;
                 } T32EDDC_DATA_SETUP;
    typedef union  T32EDDC_CLK_PERIOD
          { UNSG32 u32;
            struct w32EDDC_CLK_PERIOD;
                 } T32EDDC_CLK_PERIOD;
    typedef union  T32EDDC_FIFO_PTRS
          { UNSG32 u32;
            struct w32EDDC_FIFO_PTRS;
                 } T32EDDC_FIFO_PTRS;
    typedef union  T32EDDC_FIFO_CTRL
          { UNSG32 u32;
            struct w32EDDC_FIFO_CTRL;
                 } T32EDDC_FIFO_CTRL;
    typedef union  T32EDDC_FIFO_STS
          { UNSG32 u32;
            struct w32EDDC_FIFO_STS;
                 } T32EDDC_FIFO_STS;
    typedef union  T32EDDC_FIFO_THRES
          { UNSG32 u32;
            struct w32EDDC_FIFO_THRES;
                 } T32EDDC_FIFO_THRES;
    typedef union  T32EDDC_INTR_CTRL
          { UNSG32 u32;
            struct w32EDDC_INTR_CTRL;
                 } T32EDDC_INTR_CTRL;
    typedef union  T32EDDC_INTR_STS
          { UNSG32 u32;
            struct w32EDDC_INTR_STS;
                 } T32EDDC_INTR_STS;
    typedef union  T32EDDC_WFIFO_ADDR
          { UNSG32 u32;
            struct w32EDDC_WFIFO_ADDR;
                 } T32EDDC_WFIFO_ADDR;
    typedef union  T32EDDC_RFIFO_ADDR
          { UNSG32 u32;
            struct w32EDDC_RFIFO_ADDR;
                 } T32EDDC_RFIFO_ADDR;
    typedef union  T32EDDC_SCLLOW_TIMEOUT
          { UNSG32 u32;
            struct w32EDDC_SCLLOW_TIMEOUT;
                 } T32EDDC_SCLLOW_TIMEOUT;
    typedef union  T32EDDC_STS
          { UNSG32 u32;
            struct w32EDDC_STS;
                 } T32EDDC_STS;
    typedef union  T32EDDC_MEM_CTRL
          { UNSG32 u32;
            struct w32EDDC_MEM_CTRL;
                 } T32EDDC_MEM_CTRL;
    ///////////////////////////////////////////////////////////

    typedef union  TEDDC_CFG
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_CFG;
                   };
                 } TEDDC_CFG;
    typedef union  TEDDC_OFFSET
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_OFFSET;
                   };
                 } TEDDC_OFFSET;
    typedef union  TEDDC_DATA_SIZE
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_DATA_SIZE;
                   };
                 } TEDDC_DATA_SIZE;
    typedef union  TEDDC_START_TRIG
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_START_TRIG;
                   };
                 } TEDDC_START_TRIG;
    typedef union  TEDDC_SEG_CFG
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_SEG_CFG;
                   };
                 } TEDDC_SEG_CFG;
    typedef union  TEDDC_START_STOP_SETUP
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_START_STOP_SETUP;
                   };
                 } TEDDC_START_STOP_SETUP;
    typedef union  TEDDC_DATA_SETUP
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_DATA_SETUP;
                   };
                 } TEDDC_DATA_SETUP;
    typedef union  TEDDC_CLK_PERIOD
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_CLK_PERIOD;
                   };
                 } TEDDC_CLK_PERIOD;
    typedef union  TEDDC_FIFO_PTRS
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_FIFO_PTRS;
                   };
                 } TEDDC_FIFO_PTRS;
    typedef union  TEDDC_FIFO_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_FIFO_CTRL;
                   };
                 } TEDDC_FIFO_CTRL;
    typedef union  TEDDC_FIFO_STS
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_FIFO_STS;
                   };
                 } TEDDC_FIFO_STS;
    typedef union  TEDDC_FIFO_THRES
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_FIFO_THRES;
                   };
                 } TEDDC_FIFO_THRES;
    typedef union  TEDDC_INTR_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_INTR_CTRL;
                   };
                 } TEDDC_INTR_CTRL;
    typedef union  TEDDC_INTR_STS
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_INTR_STS;
                   };
                 } TEDDC_INTR_STS;
    typedef union  TEDDC_WFIFO_ADDR
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_WFIFO_ADDR;
                   };
                 } TEDDC_WFIFO_ADDR;
    typedef union  TEDDC_RFIFO_ADDR
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_RFIFO_ADDR;
                   };
                 } TEDDC_RFIFO_ADDR;
    typedef union  TEDDC_SCLLOW_TIMEOUT
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_SCLLOW_TIMEOUT;
                   };
                 } TEDDC_SCLLOW_TIMEOUT;
    typedef union  TEDDC_STS
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_STS;
                   };
                 } TEDDC_STS;
    typedef union  TEDDC_MEM_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32EDDC_MEM_CTRL;
                   };
                 } TEDDC_MEM_CTRL;

    ///////////////////////////////////////////////////////////
     SIGN32 EDDC_drvrd(SIE_EDDC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 EDDC_drvwr(SIE_EDDC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void EDDC_reset(SIE_EDDC *p);
     SIGN32 EDDC_cmp  (SIE_EDDC *p, SIE_EDDC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define EDDC_check(p,pie,pfx,hLOG) EDDC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define EDDC_print(p,    pfx,hLOG) EDDC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: EDDC
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: eddc.h
////////////////////////////////////////////////////////////

