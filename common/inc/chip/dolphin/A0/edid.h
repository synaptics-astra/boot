//////
/// don't edit! auto-generated by docc: edid.h
////////////////////////////////////////////////////////////
#ifndef edid_h
#define edid_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE BYTE                                     (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 edid_byte            (P)
///               %unsigned 8  val                       
///                                    ###
///                                    * One byte of EDID SRAM
///                                    * End of Color EDID_BYTE definition.
///                                    ###
///               %%        24         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       8b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_BYTE
#define h_BYTE (){}

    #define     RA_BYTE_edid_byte                              0x0000

    #define     BA_BYTE_edid_byte_val                          0x0000
    #define     B16BYTE_edid_byte_val                          0x0000
    #define   LSb32BYTE_edid_byte_val                             0
    #define   LSb16BYTE_edid_byte_val                             0
    #define       bBYTE_edid_byte_val                          8
    #define   MSK32BYTE_edid_byte_val                             0x000000FF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_BYTE {
    ///////////////////////////////////////////////////////////
    #define   GET32BYTE_edid_byte_val(r32)                     _BFGET_(r32, 7, 0)
    #define   SET32BYTE_edid_byte_val(r32,v)                   _BFSET_(r32, 7, 0,v)
    #define   GET16BYTE_edid_byte_val(r16)                     _BFGET_(r16, 7, 0)
    #define   SET16BYTE_edid_byte_val(r16,v)                   _BFSET_(r16, 7, 0,v)

    #define     w32BYTE_edid_byte                              {\
            UNSG32 uedid_byte_val                              :  8;\
            UNSG32 RSVDx0_b8                                   : 24;\
          }
    union { UNSG32 u32BYTE_edid_byte;
            struct w32BYTE_edid_byte;
          };
    ///////////////////////////////////////////////////////////
    } SIE_BYTE;

    typedef union  T32BYTE_edid_byte
          { UNSG32 u32;
            struct w32BYTE_edid_byte;
                 } T32BYTE_edid_byte;
    ///////////////////////////////////////////////////////////

    typedef union  TBYTE_edid_byte
          { UNSG32 u32[1];
            struct {
            struct w32BYTE_edid_byte;
                   };
                 } TBYTE_edid_byte;

    ///////////////////////////////////////////////////////////
     SIGN32 BYTE_drvrd(SIE_BYTE *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 BYTE_drvwr(SIE_BYTE *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void BYTE_reset(SIE_BYTE *p);
     SIGN32 BYTE_cmp  (SIE_BYTE *p, SIE_BYTE *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define BYTE_check(p,pie,pfx,hLOG) BYTE_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define BYTE_print(p,    pfx,hLOG) BYTE_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: BYTE
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE EDID_SRAM                                (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 sram                 
///               $BYTE                sram              MEM     [256]
///                                    ###
///                                    * 256x8 SRAM for EDID
///                                    * End of Color EDID_SRAM definition.
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    1024B, bits:      32b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_EDID_SRAM
#define h_EDID_SRAM (){}

    #define     RA_EDID_SRAM_sram                              0x0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_EDID_SRAM {
    ///////////////////////////////////////////////////////////
              SIE_BYTE                                         ie_sram[256];
    ///////////////////////////////////////////////////////////
    } SIE_EDID_SRAM;

    ///////////////////////////////////////////////////////////
     SIGN32 EDID_SRAM_drvrd(SIE_EDID_SRAM *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 EDID_SRAM_drvwr(SIE_EDID_SRAM *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void EDID_SRAM_reset(SIE_EDID_SRAM *p);
     SIGN32 EDID_SRAM_cmp  (SIE_EDID_SRAM *p, SIE_EDID_SRAM *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define EDID_SRAM_check(p,pie,pfx,hLOG) EDID_SRAM_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define EDID_SRAM_print(p,    pfx,hLOG) EDID_SRAM_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: EDID_SRAM
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE EDID                    biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 sram                 
///               $EDID_SRAM           sram              MEM          
///                                    ###
///                                    * EDID SRAM
///                                    ###
///     @ 0x00400 I2C_CTRL             (P)
///               ###
///               * EDID I2C control register
///               ###
///               %unsigned 1  en                        0x0
///                                    ###
///                                    * 0: EDID I2C slave disabled.
///                                    * 1: EDID I2C slave enabled.
///                                    ###
///               %unsigned 7  slv_addr                  0x50
///                                    ###
///                                    * This is the slave address of EDID I2C slave on a DDC bus. This slave address is excluding read_write bit and its value should be 0x50 (0xA0 for write and 0xA1 for read when read_write bit is included) always. Programming different values is given for debugging purpose.
///                                    * biuHDRX.v
///                                    ###
///               %unsigned 1  cpu_wr_done               0x0
///                                    ###
///                                    * HDMI-RX has 256 bytes of EDID memory (one segment), in EDDC mode there are maximum 127 segments. To facilitate these 127 segments, an interrupt is raised whenever 0xA0 slave address is received. For this interrupt CPU should read the segment pointer value and copy 256 bytes of this EDID segment from its internal storage to EDID memory and set this bit.
///                                    * 0: CPU not yet wrote EDID memory.
///                                    * 1: CPU wrote EDID memory.
///                                    ###
///               %unsigned 1  cpu_wr_done_ac_dis        0x0
///                                    ###
///                                    * 0: cpu_wr_done auto clear enabled.
///                                    * 1: cpu_wr_done auto clear disabled.
///                                    * In non EDDC mode, there will be only one segment of EDID, so S/W doesnot require interrupts to change segments. Once EDID is properly written into EDID memory set cpu_wr_done bit and this bit.
///                                    ###
///               %unsigned 1  mem_cen_sel               0x0
///                                    ###
///                                    * 0:H/W generated dynamic CEn is selected for EDID SRAM.
///                                    * 1:S/W static CEn (EDID_I2C_CTRL.mem_cen) is selected for EDID SRAM.
///                                    ###
///               %unsigned 1  mem_cen                   0x0
///                                    ###
///                                    * 0: EDID SRAM is enabled.
///                                    * 1:EDID SRAM is disabled.
///                                    * This bit is connected to EDID SRAM CEn (Active low Chip Enable) input if EDID_I2C-CTRL.mem_cen_sel bit is “1”.
///                                    ###
///               %%        20         # Stuffing bits...
///     @ 0x00404 I2C_ST               (R-)
///               ###
///               * EDID segment pointer register
///               ###
///               %unsigned 8  seg_ptr                   
///                                    ###
///                                    * EDDC EDID segment pointer value, transmitted by host (HDMI transmitter).
///                                    ###
///               %unsigned 1  cpu_wr_done_st            
///                                    ###
///                                    * This bit is set when EDID_I2C_CTRL_cpu_wr_done bit is set. This bit will be auto cleared when next read transaction is started unless cpu_wr_done_ac_dis bit is set.
///                                    ###
///               %%        23         # Stuffing bits...
///     @ 0x00408                      (W-)
///     #         # Stuffing bytes...
///               %% 8128
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    2048B, bits:      53b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_EDID
#define h_EDID (){}

    #define     RA_EDID_sram                                   0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_EDID_I2C_CTRL                               0x0400

    #define     BA_EDID_I2C_CTRL_en                            0x0400
    #define     B16EDID_I2C_CTRL_en                            0x0400
    #define   LSb32EDID_I2C_CTRL_en                               0
    #define   LSb16EDID_I2C_CTRL_en                               0
    #define       bEDID_I2C_CTRL_en                            1
    #define   MSK32EDID_I2C_CTRL_en                               0x00000001

    #define     BA_EDID_I2C_CTRL_slv_addr                      0x0400
    #define     B16EDID_I2C_CTRL_slv_addr                      0x0400
    #define   LSb32EDID_I2C_CTRL_slv_addr                         1
    #define   LSb16EDID_I2C_CTRL_slv_addr                         1
    #define       bEDID_I2C_CTRL_slv_addr                      7
    #define   MSK32EDID_I2C_CTRL_slv_addr                         0x000000FE

    #define     BA_EDID_I2C_CTRL_cpu_wr_done                   0x0401
    #define     B16EDID_I2C_CTRL_cpu_wr_done                   0x0400
    #define   LSb32EDID_I2C_CTRL_cpu_wr_done                      8
    #define   LSb16EDID_I2C_CTRL_cpu_wr_done                      8
    #define       bEDID_I2C_CTRL_cpu_wr_done                   1
    #define   MSK32EDID_I2C_CTRL_cpu_wr_done                      0x00000100

    #define     BA_EDID_I2C_CTRL_cpu_wr_done_ac_dis            0x0401
    #define     B16EDID_I2C_CTRL_cpu_wr_done_ac_dis            0x0400
    #define   LSb32EDID_I2C_CTRL_cpu_wr_done_ac_dis               9
    #define   LSb16EDID_I2C_CTRL_cpu_wr_done_ac_dis               9
    #define       bEDID_I2C_CTRL_cpu_wr_done_ac_dis            1
    #define   MSK32EDID_I2C_CTRL_cpu_wr_done_ac_dis               0x00000200

    #define     BA_EDID_I2C_CTRL_mem_cen_sel                   0x0401
    #define     B16EDID_I2C_CTRL_mem_cen_sel                   0x0400
    #define   LSb32EDID_I2C_CTRL_mem_cen_sel                      10
    #define   LSb16EDID_I2C_CTRL_mem_cen_sel                      10
    #define       bEDID_I2C_CTRL_mem_cen_sel                   1
    #define   MSK32EDID_I2C_CTRL_mem_cen_sel                      0x00000400

    #define     BA_EDID_I2C_CTRL_mem_cen                       0x0401
    #define     B16EDID_I2C_CTRL_mem_cen                       0x0400
    #define   LSb32EDID_I2C_CTRL_mem_cen                          11
    #define   LSb16EDID_I2C_CTRL_mem_cen                          11
    #define       bEDID_I2C_CTRL_mem_cen                       1
    #define   MSK32EDID_I2C_CTRL_mem_cen                          0x00000800
    ///////////////////////////////////////////////////////////
    #define     RA_EDID_I2C_ST                                 0x0404

    #define     BA_EDID_I2C_ST_seg_ptr                         0x0404
    #define     B16EDID_I2C_ST_seg_ptr                         0x0404
    #define   LSb32EDID_I2C_ST_seg_ptr                            0
    #define   LSb16EDID_I2C_ST_seg_ptr                            0
    #define       bEDID_I2C_ST_seg_ptr                         8
    #define   MSK32EDID_I2C_ST_seg_ptr                            0x000000FF

    #define     BA_EDID_I2C_ST_cpu_wr_done_st                  0x0405
    #define     B16EDID_I2C_ST_cpu_wr_done_st                  0x0404
    #define   LSb32EDID_I2C_ST_cpu_wr_done_st                     8
    #define   LSb16EDID_I2C_ST_cpu_wr_done_st                     8
    #define       bEDID_I2C_ST_cpu_wr_done_st                  1
    #define   MSK32EDID_I2C_ST_cpu_wr_done_st                     0x00000100
    ///////////////////////////////////////////////////////////

    typedef struct SIE_EDID {
    ///////////////////////////////////////////////////////////
              SIE_EDID_SRAM                                    ie_sram;
    ///////////////////////////////////////////////////////////
    #define   GET32EDID_I2C_CTRL_en(r32)                       _BFGET_(r32, 0, 0)
    #define   SET32EDID_I2C_CTRL_en(r32,v)                     _BFSET_(r32, 0, 0,v)
    #define   GET16EDID_I2C_CTRL_en(r16)                       _BFGET_(r16, 0, 0)
    #define   SET16EDID_I2C_CTRL_en(r16,v)                     _BFSET_(r16, 0, 0,v)

    #define   GET32EDID_I2C_CTRL_slv_addr(r32)                 _BFGET_(r32, 7, 1)
    #define   SET32EDID_I2C_CTRL_slv_addr(r32,v)               _BFSET_(r32, 7, 1,v)
    #define   GET16EDID_I2C_CTRL_slv_addr(r16)                 _BFGET_(r16, 7, 1)
    #define   SET16EDID_I2C_CTRL_slv_addr(r16,v)               _BFSET_(r16, 7, 1,v)

    #define   GET32EDID_I2C_CTRL_cpu_wr_done(r32)              _BFGET_(r32, 8, 8)
    #define   SET32EDID_I2C_CTRL_cpu_wr_done(r32,v)            _BFSET_(r32, 8, 8,v)
    #define   GET16EDID_I2C_CTRL_cpu_wr_done(r16)              _BFGET_(r16, 8, 8)
    #define   SET16EDID_I2C_CTRL_cpu_wr_done(r16,v)            _BFSET_(r16, 8, 8,v)

    #define   GET32EDID_I2C_CTRL_cpu_wr_done_ac_dis(r32)       _BFGET_(r32, 9, 9)
    #define   SET32EDID_I2C_CTRL_cpu_wr_done_ac_dis(r32,v)     _BFSET_(r32, 9, 9,v)
    #define   GET16EDID_I2C_CTRL_cpu_wr_done_ac_dis(r16)       _BFGET_(r16, 9, 9)
    #define   SET16EDID_I2C_CTRL_cpu_wr_done_ac_dis(r16,v)     _BFSET_(r16, 9, 9,v)

    #define   GET32EDID_I2C_CTRL_mem_cen_sel(r32)              _BFGET_(r32,10,10)
    #define   SET32EDID_I2C_CTRL_mem_cen_sel(r32,v)            _BFSET_(r32,10,10,v)
    #define   GET16EDID_I2C_CTRL_mem_cen_sel(r16)              _BFGET_(r16,10,10)
    #define   SET16EDID_I2C_CTRL_mem_cen_sel(r16,v)            _BFSET_(r16,10,10,v)

    #define   GET32EDID_I2C_CTRL_mem_cen(r32)                  _BFGET_(r32,11,11)
    #define   SET32EDID_I2C_CTRL_mem_cen(r32,v)                _BFSET_(r32,11,11,v)
    #define   GET16EDID_I2C_CTRL_mem_cen(r16)                  _BFGET_(r16,11,11)
    #define   SET16EDID_I2C_CTRL_mem_cen(r16,v)                _BFSET_(r16,11,11,v)

    #define     w32EDID_I2C_CTRL                               {\
            UNSG32 uI2C_CTRL_en                                :  1;\
            UNSG32 uI2C_CTRL_slv_addr                          :  7;\
            UNSG32 uI2C_CTRL_cpu_wr_done                       :  1;\
            UNSG32 uI2C_CTRL_cpu_wr_done_ac_dis                :  1;\
            UNSG32 uI2C_CTRL_mem_cen_sel                       :  1;\
            UNSG32 uI2C_CTRL_mem_cen                           :  1;\
            UNSG32 RSVDx400_b12                                : 20;\
          }
    union { UNSG32 u32EDID_I2C_CTRL;
            struct w32EDID_I2C_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EDID_I2C_ST_seg_ptr(r32)                    _BFGET_(r32, 7, 0)
    #define   SET32EDID_I2C_ST_seg_ptr(r32,v)                  _BFSET_(r32, 7, 0,v)
    #define   GET16EDID_I2C_ST_seg_ptr(r16)                    _BFGET_(r16, 7, 0)
    #define   SET16EDID_I2C_ST_seg_ptr(r16,v)                  _BFSET_(r16, 7, 0,v)

    #define   GET32EDID_I2C_ST_cpu_wr_done_st(r32)             _BFGET_(r32, 8, 8)
    #define   SET32EDID_I2C_ST_cpu_wr_done_st(r32,v)           _BFSET_(r32, 8, 8,v)
    #define   GET16EDID_I2C_ST_cpu_wr_done_st(r16)             _BFGET_(r16, 8, 8)
    #define   SET16EDID_I2C_ST_cpu_wr_done_st(r16,v)           _BFSET_(r16, 8, 8,v)

    #define     w32EDID_I2C_ST                                 {\
            UNSG32 uI2C_ST_seg_ptr                             :  8;\
            UNSG32 uI2C_ST_cpu_wr_done_st                      :  1;\
            UNSG32 RSVDx404_b9                                 : 23;\
          }
    union { UNSG32 u32EDID_I2C_ST;
            struct w32EDID_I2C_ST;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx408                                    [1016];
    ///////////////////////////////////////////////////////////
    } SIE_EDID;

    typedef union  T32EDID_I2C_CTRL
          { UNSG32 u32;
            struct w32EDID_I2C_CTRL;
                 } T32EDID_I2C_CTRL;
    typedef union  T32EDID_I2C_ST
          { UNSG32 u32;
            struct w32EDID_I2C_ST;
                 } T32EDID_I2C_ST;
    ///////////////////////////////////////////////////////////

    typedef union  TEDID_I2C_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32EDID_I2C_CTRL;
                   };
                 } TEDID_I2C_CTRL;
    typedef union  TEDID_I2C_ST
          { UNSG32 u32[1];
            struct {
            struct w32EDID_I2C_ST;
                   };
                 } TEDID_I2C_ST;

    ///////////////////////////////////////////////////////////
     SIGN32 EDID_drvrd(SIE_EDID *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 EDID_drvwr(SIE_EDID *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void EDID_reset(SIE_EDID *p);
     SIGN32 EDID_cmp  (SIE_EDID *p, SIE_EDID *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define EDID_check(p,pie,pfx,hLOG) EDID_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define EDID_print(p,    pfx,hLOG) EDID_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: EDID
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: edid.h
////////////////////////////////////////////////////////////

