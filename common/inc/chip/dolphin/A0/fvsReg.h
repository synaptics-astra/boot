//////
/// don't edit! auto-generated by docc: fvsReg.h
////////////////////////////////////////////////////////////
#ifndef fvsReg_h
#define fvsReg_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE fvsReg                                   (4,4)
///     ###
///     * Define the fvs Regbase
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 reserved             (P)
///               %unsigned 1  reserved                  0x0
///                                    ###
///                                    * Not used
///                                    ###
///               %%        31         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       1b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_fvsReg
#define h_fvsReg (){}

    #define     RA_fvsReg_reserved                             0x0000

    #define     BA_fvsReg_reserved_reserved                    0x0000
    #define     B16fvsReg_reserved_reserved                    0x0000
    #define   LSb32fvsReg_reserved_reserved                       0
    #define   LSb16fvsReg_reserved_reserved                       0
    #define       bfvsReg_reserved_reserved                    1
    #define   MSK32fvsReg_reserved_reserved                       0x00000001
    ///////////////////////////////////////////////////////////

    typedef struct SIE_fvsReg {
    ///////////////////////////////////////////////////////////
    #define   GET32fvsReg_reserved_reserved(r32)               _BFGET_(r32, 0, 0)
    #define   SET32fvsReg_reserved_reserved(r32,v)             _BFSET_(r32, 0, 0,v)
    #define   GET16fvsReg_reserved_reserved(r16)               _BFGET_(r16, 0, 0)
    #define   SET16fvsReg_reserved_reserved(r16,v)             _BFSET_(r16, 0, 0,v)

    #define     w32fvsReg_reserved                             {\
            UNSG32 ureserved_reserved                          :  1;\
            UNSG32 RSVDx0_b1                                   : 31;\
          }
    union { UNSG32 u32fvsReg_reserved;
            struct w32fvsReg_reserved;
          };
    ///////////////////////////////////////////////////////////
    } SIE_fvsReg;

    typedef union  T32fvsReg_reserved
          { UNSG32 u32;
            struct w32fvsReg_reserved;
                 } T32fvsReg_reserved;
    ///////////////////////////////////////////////////////////

    typedef union  TfvsReg_reserved
          { UNSG32 u32[1];
            struct {
            struct w32fvsReg_reserved;
                   };
                 } TfvsReg_reserved;

    ///////////////////////////////////////////////////////////
     SIGN32 fvsReg_drvrd(SIE_fvsReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 fvsReg_drvwr(SIE_fvsReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void fvsReg_reset(SIE_fvsReg *p);
     SIGN32 fvsReg_cmp  (SIE_fvsReg *p, SIE_fvsReg *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define fvsReg_check(p,pie,pfx,hLOG) fvsReg_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define fvsReg_print(p,    pfx,hLOG) fvsReg_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: fvsReg
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: fvsReg.h
////////////////////////////////////////////////////////////

