//////
/// don't edit! auto-generated by docc: mtr.h
////////////////////////////////////////////////////////////
#ifndef mtr_h
#define mtr_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE E_MTR                   biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///               %unsigned 5  mode                      
///                                    : 8b_v4_y                   0x0
///                                    : 8b_v4_uv                  0x1
///                                    : 8b_v4_uyvy                0x2
///                                    : 8b_v4_argb                0x3
///                                    : 8b_v1_y                   0x4
///                                    : 8b_v1_uv                  0x5
///                                    : 8b_v1_uyvy                0x6
///                                    : 8b_v1_argb                0x7
///                                    : p10b_v4_y                 0x8
///                                    : p10b_v4_uv                0x9
///                                    : p10b_v4_uyvy              0xA
///                                    : p10b_v4_argb              0xB
///                                    : d10b_v1_y                 0xC
///                                    : d10b_v1_uv                0xD
///                                    : p10b_v1_uyvy              0xE
///                                    : p10b_v1_argb              0xF
///                                    : r10b_v1_raw              0x10
///                                    : r12b_v1_raw              0x11
///                                    : r16b_v1_raw              0x12
///                                    : r20b_v1_raw              0x13
///                                    : 8b_v8_y                  0x14
///                                    : 8b_v8_uv                 0x15
///                                    : 8b_v1_rgb                0x16
///                                    : 10b_v8_y                 0x17
///                                    : 10b_v8_uv                0x18
///                                    : 10b_v6_y                 0x19
///                                    : 10b_v6_uv                0x1A
///                                                 ###
///                                                 * Yellow highlighted: Supported by current hardware
///                                                 * No highlight: Not supported by default configuration. Can be enabled by adding a hardware macro.
///                                                 * Gray highlighted: support in the future or no need.
///                                                 ###
///               %unsigned 2  meta                      
///                                    ###
///                                    * Compression ratio.
///                                    * 0: no compression
///                                    * 1: 4:1 compression
///                                    * 2: 4:2 compression
///                                    * 3: 4:3 compression
///                                    ###
///               %%        25         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       7b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_E_MTR
#define h_E_MTR (){}

    #define     BA_E_MTR_mode                                  0x0000
    #define     B16E_MTR_mode                                  0x0000
    #define   LSb32E_MTR_mode                                     0
    #define   LSb16E_MTR_mode                                     0
    #define       bE_MTR_mode                                  5
    #define   MSK32E_MTR_mode                                     0x0000001F
    #define        E_MTR_mode_8b_v4_y                                       0x0
    #define        E_MTR_mode_8b_v4_uv                                      0x1
    #define        E_MTR_mode_8b_v4_uyvy                                    0x2
    #define        E_MTR_mode_8b_v4_argb                                    0x3
    #define        E_MTR_mode_8b_v1_y                                       0x4
    #define        E_MTR_mode_8b_v1_uv                                      0x5
    #define        E_MTR_mode_8b_v1_uyvy                                    0x6
    #define        E_MTR_mode_8b_v1_argb                                    0x7
    #define        E_MTR_mode_p10b_v4_y                                     0x8
    #define        E_MTR_mode_p10b_v4_uv                                    0x9
    #define        E_MTR_mode_p10b_v4_uyvy                                  0xA
    #define        E_MTR_mode_p10b_v4_argb                                  0xB
    #define        E_MTR_mode_d10b_v1_y                                     0xC
    #define        E_MTR_mode_d10b_v1_uv                                    0xD
    #define        E_MTR_mode_p10b_v1_uyvy                                  0xE
    #define        E_MTR_mode_p10b_v1_argb                                  0xF
    #define        E_MTR_mode_r10b_v1_raw                                   0x10
    #define        E_MTR_mode_r12b_v1_raw                                   0x11
    #define        E_MTR_mode_r16b_v1_raw                                   0x12
    #define        E_MTR_mode_r20b_v1_raw                                   0x13
    #define        E_MTR_mode_8b_v8_y                                       0x14
    #define        E_MTR_mode_8b_v8_uv                                      0x15
    #define        E_MTR_mode_8b_v1_rgb                                     0x16
    #define        E_MTR_mode_10b_v8_y                                      0x17
    #define        E_MTR_mode_10b_v8_uv                                     0x18
    #define        E_MTR_mode_10b_v6_y                                      0x19
    #define        E_MTR_mode_10b_v6_uv                                     0x1A

    #define     BA_E_MTR_meta                                  0x0000
    #define     B16E_MTR_meta                                  0x0000
    #define   LSb32E_MTR_meta                                     5
    #define   LSb16E_MTR_meta                                     5
    #define       bE_MTR_meta                                  2
    #define   MSK32E_MTR_meta                                     0x00000060
    ///////////////////////////////////////////////////////////

    typedef struct SIE_E_MTR {
    ///////////////////////////////////////////////////////////
    #define   GET32E_MTR_mode(r32)                             _BFGET_(r32, 4, 0)
    #define   SET32E_MTR_mode(r32,v)                           _BFSET_(r32, 4, 0,v)
    #define   GET16E_MTR_mode(r16)                             _BFGET_(r16, 4, 0)
    #define   SET16E_MTR_mode(r16,v)                           _BFSET_(r16, 4, 0,v)

    #define   GET32E_MTR_meta(r32)                             _BFGET_(r32, 6, 5)
    #define   SET32E_MTR_meta(r32,v)                           _BFSET_(r32, 6, 5,v)
    #define   GET16E_MTR_meta(r16)                             _BFGET_(r16, 6, 5)
    #define   SET16E_MTR_meta(r16,v)                           _BFSET_(r16, 6, 5,v)

            UNSG32 u_mode                                      :  5;
            UNSG32 u_meta                                      :  2;
            UNSG32 RSVDx0_b7                                   : 25;
    ///////////////////////////////////////////////////////////
    } SIE_E_MTR;

    ///////////////////////////////////////////////////////////
     SIGN32 E_MTR_drvrd(SIE_E_MTR *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 E_MTR_drvwr(SIE_E_MTR *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void E_MTR_reset(SIE_E_MTR *p);
     SIGN32 E_MTR_cmp  (SIE_E_MTR *p, SIE_E_MTR *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define E_MTR_check(p,pie,pfx,hLOG) E_MTR_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define E_MTR_print(p,    pfx,hLOG) E_MTR_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: E_MTR
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MTR_user                biu              (4,4)
///     ###
///     * AXI ARUser bit field definition, it's the external interface for AXI user data.
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 dat                  (P)
///               %unsigned 1  uv                        
///               %unsigned 4  bid                       
///                                    ###
///                                    * The “uv” and “bid” bit-field together are used as thread ID for MTR-R hardware
///                                    ###
///               %unsigned 1  enable                    
///                                    ###
///                                    * 1: enable MTR
///                                    * 0: bypass MTR
///                                    ###
///               %unsigned 2  meta                      
///                                    ###
///                                    * Meta data for this command
///                                    * End of MTR_user
///                                    ###
///               %%        24         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       8b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MTR_user
#define h_MTR_user (){}

    #define     RA_MTR_user_dat                                0x0000

    #define     BA_MTR_user_dat_uv                             0x0000
    #define     B16MTR_user_dat_uv                             0x0000
    #define   LSb32MTR_user_dat_uv                                0
    #define   LSb16MTR_user_dat_uv                                0
    #define       bMTR_user_dat_uv                             1
    #define   MSK32MTR_user_dat_uv                                0x00000001

    #define     BA_MTR_user_dat_bid                            0x0000
    #define     B16MTR_user_dat_bid                            0x0000
    #define   LSb32MTR_user_dat_bid                               1
    #define   LSb16MTR_user_dat_bid                               1
    #define       bMTR_user_dat_bid                            4
    #define   MSK32MTR_user_dat_bid                               0x0000001E

    #define     BA_MTR_user_dat_enable                         0x0000
    #define     B16MTR_user_dat_enable                         0x0000
    #define   LSb32MTR_user_dat_enable                            5
    #define   LSb16MTR_user_dat_enable                            5
    #define       bMTR_user_dat_enable                         1
    #define   MSK32MTR_user_dat_enable                            0x00000020

    #define     BA_MTR_user_dat_meta                           0x0000
    #define     B16MTR_user_dat_meta                           0x0000
    #define   LSb32MTR_user_dat_meta                              6
    #define   LSb16MTR_user_dat_meta                              6
    #define       bMTR_user_dat_meta                           2
    #define   MSK32MTR_user_dat_meta                              0x000000C0
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MTR_user {
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_user_dat_uv(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32MTR_user_dat_uv(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16MTR_user_dat_uv(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16MTR_user_dat_uv(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define   GET32MTR_user_dat_bid(r32)                       _BFGET_(r32, 4, 1)
    #define   SET32MTR_user_dat_bid(r32,v)                     _BFSET_(r32, 4, 1,v)
    #define   GET16MTR_user_dat_bid(r16)                       _BFGET_(r16, 4, 1)
    #define   SET16MTR_user_dat_bid(r16,v)                     _BFSET_(r16, 4, 1,v)

    #define   GET32MTR_user_dat_enable(r32)                    _BFGET_(r32, 5, 5)
    #define   SET32MTR_user_dat_enable(r32,v)                  _BFSET_(r32, 5, 5,v)
    #define   GET16MTR_user_dat_enable(r16)                    _BFGET_(r16, 5, 5)
    #define   SET16MTR_user_dat_enable(r16,v)                  _BFSET_(r16, 5, 5,v)

    #define   GET32MTR_user_dat_meta(r32)                      _BFGET_(r32, 7, 6)
    #define   SET32MTR_user_dat_meta(r32,v)                    _BFSET_(r32, 7, 6,v)
    #define   GET16MTR_user_dat_meta(r16)                      _BFGET_(r16, 7, 6)
    #define   SET16MTR_user_dat_meta(r16,v)                    _BFSET_(r16, 7, 6,v)

    #define     w32MTR_user_dat                                {\
            UNSG32 udat_uv                                     :  1;\
            UNSG32 udat_bid                                    :  4;\
            UNSG32 udat_enable                                 :  1;\
            UNSG32 udat_meta                                   :  2;\
            UNSG32 RSVDx0_b8                                   : 24;\
          }
    union { UNSG32 u32MTR_user_dat;
            struct w32MTR_user_dat;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MTR_user;

    typedef union  T32MTR_user_dat
          { UNSG32 u32;
            struct w32MTR_user_dat;
                 } T32MTR_user_dat;
    ///////////////////////////////////////////////////////////

    typedef union  TMTR_user_dat
          { UNSG32 u32[1];
            struct {
            struct w32MTR_user_dat;
                   };
                 } TMTR_user_dat;

    ///////////////////////////////////////////////////////////
     SIGN32 MTR_user_drvrd(SIE_MTR_user *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MTR_user_drvwr(SIE_MTR_user *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MTR_user_reset(SIE_MTR_user *p);
     SIGN32 MTR_user_cmp  (SIE_MTR_user *p, SIE_MTR_user *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MTR_user_check(p,pie,pfx,hLOG) MTR_user_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MTR_user_print(p,    pfx,hLOG) MTR_user_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MTR_user
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MTR_tid                 biu              (4,4)
///     ###
///     * MTR thread id format defintion, it's the macros used internally by hardware
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 dat                  (P)
///               %unsigned 1  uv                        
///               %unsigned 4  bid                       
///                                    ###
///                                    * The “uv” and “bid” bit-field together are used as thread ID for MTR-R hardware
///                                    ###
///               %unsigned 1  wt                        
///                                    ###
///                                    * Write thread
///                                    * End of MTR_tid
///                                    ###
///               %%        26         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       6b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MTR_tid
#define h_MTR_tid (){}

    #define     RA_MTR_tid_dat                                 0x0000

    #define     BA_MTR_tid_dat_uv                              0x0000
    #define     B16MTR_tid_dat_uv                              0x0000
    #define   LSb32MTR_tid_dat_uv                                 0
    #define   LSb16MTR_tid_dat_uv                                 0
    #define       bMTR_tid_dat_uv                              1
    #define   MSK32MTR_tid_dat_uv                                 0x00000001

    #define     BA_MTR_tid_dat_bid                             0x0000
    #define     B16MTR_tid_dat_bid                             0x0000
    #define   LSb32MTR_tid_dat_bid                                1
    #define   LSb16MTR_tid_dat_bid                                1
    #define       bMTR_tid_dat_bid                             4
    #define   MSK32MTR_tid_dat_bid                                0x0000001E

    #define     BA_MTR_tid_dat_wt                              0x0000
    #define     B16MTR_tid_dat_wt                              0x0000
    #define   LSb32MTR_tid_dat_wt                                 5
    #define   LSb16MTR_tid_dat_wt                                 5
    #define       bMTR_tid_dat_wt                              1
    #define   MSK32MTR_tid_dat_wt                                 0x00000020
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MTR_tid {
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_tid_dat_uv(r32)                         _BFGET_(r32, 0, 0)
    #define   SET32MTR_tid_dat_uv(r32,v)                       _BFSET_(r32, 0, 0,v)
    #define   GET16MTR_tid_dat_uv(r16)                         _BFGET_(r16, 0, 0)
    #define   SET16MTR_tid_dat_uv(r16,v)                       _BFSET_(r16, 0, 0,v)

    #define   GET32MTR_tid_dat_bid(r32)                        _BFGET_(r32, 4, 1)
    #define   SET32MTR_tid_dat_bid(r32,v)                      _BFSET_(r32, 4, 1,v)
    #define   GET16MTR_tid_dat_bid(r16)                        _BFGET_(r16, 4, 1)
    #define   SET16MTR_tid_dat_bid(r16,v)                      _BFSET_(r16, 4, 1,v)

    #define   GET32MTR_tid_dat_wt(r32)                         _BFGET_(r32, 5, 5)
    #define   SET32MTR_tid_dat_wt(r32,v)                       _BFSET_(r32, 5, 5,v)
    #define   GET16MTR_tid_dat_wt(r16)                         _BFGET_(r16, 5, 5)
    #define   SET16MTR_tid_dat_wt(r16,v)                       _BFSET_(r16, 5, 5,v)

    #define     w32MTR_tid_dat                                 {\
            UNSG32 udat_uv                                     :  1;\
            UNSG32 udat_bid                                    :  4;\
            UNSG32 udat_wt                                     :  1;\
            UNSG32 RSVDx0_b6                                   : 26;\
          }
    union { UNSG32 u32MTR_tid_dat;
            struct w32MTR_tid_dat;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MTR_tid;

    typedef union  T32MTR_tid_dat
          { UNSG32 u32;
            struct w32MTR_tid_dat;
                 } T32MTR_tid_dat;
    ///////////////////////////////////////////////////////////

    typedef union  TMTR_tid_dat
          { UNSG32 u32[1];
            struct {
            struct w32MTR_tid_dat;
                   };
                 } TMTR_tid_dat;

    ///////////////////////////////////////////////////////////
     SIGN32 MTR_tid_drvrd(SIE_MTR_tid *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MTR_tid_drvwr(SIE_MTR_tid *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MTR_tid_reset(SIE_MTR_tid *p);
     SIGN32 MTR_tid_cmp  (SIE_MTR_tid *p, SIE_MTR_tid *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MTR_tid_check(p,pie,pfx,hLOG) MTR_tid_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MTR_tid_print(p,    pfx,hLOG) MTR_tid_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MTR_tid
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MTR_roi                 biu              (4,4)
///     ###
///     * ROI region definition, it's the macros used internally by hardware
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 roix                 (P)
///               %unsigned 12 xs                        0x0
///                                    ###
///                                    * Start coordinate of buffer in x direction in the unit of 64x4 (8-bit) or 48x4 (10-bit) for tile mode or 64B for raster-scanned mode, or in the unit of 32x8 (8-bit) for V8H32 tile mode.
///                                    * The unit is 64B for all formats.
///                                    ###
///               %unsigned 12 xm                        0x10
///                                    ###
///                                    * End coordinate of buffer in x direction in the unit of 64x4 (8-bit) or 48x4 (10-bit) for tile mode or 64B for raster-scanned mode, or in the unit of 32x8 (8-bit) for V8H32 tile mode.
///                                    * Note that xm should reflect the actual physical stride of the physical buffer.
///                                    * The unit is 64B for all formats.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00004 roiy                 (P)
///               %unsigned 14 ys                        0x0
///                                    ###
///                                    * Start coordinate of buffer in y direction in the unit of 4x4 for tile mode, or 1x1 for raster-scanned mode, or in the unit of 8x8 for V8H32 tile mode.
///                                    * The unit is 1 Compression Unit.
///                                    ###
///               %unsigned 14 ym                        0x200
///                                    ###
///                                    * End coordinate of buffer in y direction in the unit of 4x4 for tile mode, or 1x1 for raster-scanned mode, or in the unit of 8x8 for V8H32 tile mode.
///                                    * The unit is 1 Compression Unit.
///                                    * End of MTR_roi
///                                    ###
///               %%        4          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:      52b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MTR_roi
#define h_MTR_roi (){}

    #define     RA_MTR_roi_roix                                0x0000

    #define     BA_MTR_roi_roix_xs                             0x0000
    #define     B16MTR_roi_roix_xs                             0x0000
    #define   LSb32MTR_roi_roix_xs                                0
    #define   LSb16MTR_roi_roix_xs                                0
    #define       bMTR_roi_roix_xs                             12
    #define   MSK32MTR_roi_roix_xs                                0x00000FFF

    #define     BA_MTR_roi_roix_xm                             0x0001
    #define     B16MTR_roi_roix_xm                             0x0000
    #define   LSb32MTR_roi_roix_xm                                12
    #define   LSb16MTR_roi_roix_xm                                12
    #define       bMTR_roi_roix_xm                             12
    #define   MSK32MTR_roi_roix_xm                                0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_roi_roiy                                0x0004

    #define     BA_MTR_roi_roiy_ys                             0x0004
    #define     B16MTR_roi_roiy_ys                             0x0004
    #define   LSb32MTR_roi_roiy_ys                                0
    #define   LSb16MTR_roi_roiy_ys                                0
    #define       bMTR_roi_roiy_ys                             14
    #define   MSK32MTR_roi_roiy_ys                                0x00003FFF

    #define     BA_MTR_roi_roiy_ym                             0x0005
    #define     B16MTR_roi_roiy_ym                             0x0004
    #define   LSb32MTR_roi_roiy_ym                                14
    #define   LSb16MTR_roi_roiy_ym                                14
    #define       bMTR_roi_roiy_ym                             14
    #define   MSK32MTR_roi_roiy_ym                                0x0FFFC000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MTR_roi {
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_roi_roix_xs(r32)                        _BFGET_(r32,11, 0)
    #define   SET32MTR_roi_roix_xs(r32,v)                      _BFSET_(r32,11, 0,v)
    #define   GET16MTR_roi_roix_xs(r16)                        _BFGET_(r16,11, 0)
    #define   SET16MTR_roi_roix_xs(r16,v)                      _BFSET_(r16,11, 0,v)

    #define   GET32MTR_roi_roix_xm(r32)                        _BFGET_(r32,23,12)
    #define   SET32MTR_roi_roix_xm(r32,v)                      _BFSET_(r32,23,12,v)

    #define     w32MTR_roi_roix                                {\
            UNSG32 uroix_xs                                    : 12;\
            UNSG32 uroix_xm                                    : 12;\
            UNSG32 RSVDx0_b24                                  :  8;\
          }
    union { UNSG32 u32MTR_roi_roix;
            struct w32MTR_roi_roix;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_roi_roiy_ys(r32)                        _BFGET_(r32,13, 0)
    #define   SET32MTR_roi_roiy_ys(r32,v)                      _BFSET_(r32,13, 0,v)
    #define   GET16MTR_roi_roiy_ys(r16)                        _BFGET_(r16,13, 0)
    #define   SET16MTR_roi_roiy_ys(r16,v)                      _BFSET_(r16,13, 0,v)

    #define   GET32MTR_roi_roiy_ym(r32)                        _BFGET_(r32,27,14)
    #define   SET32MTR_roi_roiy_ym(r32,v)                      _BFSET_(r32,27,14,v)

    #define     w32MTR_roi_roiy                                {\
            UNSG32 uroiy_ys                                    : 14;\
            UNSG32 uroiy_ym                                    : 14;\
            UNSG32 RSVDx4_b28                                  :  4;\
          }
    union { UNSG32 u32MTR_roi_roiy;
            struct w32MTR_roi_roiy;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MTR_roi;

    typedef union  T32MTR_roi_roix
          { UNSG32 u32;
            struct w32MTR_roi_roix;
                 } T32MTR_roi_roix;
    typedef union  T32MTR_roi_roiy
          { UNSG32 u32;
            struct w32MTR_roi_roiy;
                 } T32MTR_roi_roiy;
    ///////////////////////////////////////////////////////////

    typedef union  TMTR_roi_roix
          { UNSG32 u32[1];
            struct {
            struct w32MTR_roi_roix;
                   };
                 } TMTR_roi_roix;
    typedef union  TMTR_roi_roiy
          { UNSG32 u32[1];
            struct {
            struct w32MTR_roi_roiy;
                   };
                 } TMTR_roi_roiy;

    ///////////////////////////////////////////////////////////
     SIGN32 MTR_roi_drvrd(SIE_MTR_roi *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MTR_roi_drvwr(SIE_MTR_roi *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MTR_roi_reset(SIE_MTR_roi *p);
     SIGN32 MTR_roi_cmp  (SIE_MTR_roi *p, SIE_MTR_roi *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MTR_roi_check(p,pie,pfx,hLOG) MTR_roi_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MTR_roi_print(p,    pfx,hLOG) MTR_roi_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MTR_roi
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MTR_header0             biu              (4,4)
///     ###
///     * MTR frame buffer header for old chips, NOT used anymore
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 meta                 (P)
///               %unsigned 4  stride                    
///                                    : 64B                       0x0
///                                    : 128B                      0x1
///                                    : 256B                      0x2
///                                    : 512B                      0x3
///                                    : 1024B                     0x4
///                                    : 2048B                     0x5
///                                    : 4096B                     0x6
///                                    : 8192B                     0x7
///                                    : 16384B                    0x8
///                                                 ###
///                                                 * Meta data stride. For luma, picture width (in bytes) should be less than or equal to 2^(10+meta.stride).
///                                                 ###
///               %unsigned 2  format                    0x0
///                                    ###
///                                    * 0: luma-V16H16, chroma-V8H32
///                                    * 1: luma-V(V8H126)2, chroma-V(V4H32)2
///                                    * 2: luma-V(V4H16)4, chroma-V(V2H32)4
///                                    ###
///               %unsigned 5  width                     
///                                    ###
///                                    * Number of meta data columns that are valid in the meta data buffer. Unit: meta packet.
///                                    ###
///               %unsigned 10 height                    
///                                    ###
///                                    * Number of meta data rows that are valid in the meta data buffer. Unit: meta packet.
///                                    ###
///               %unsigned 1  qos_en                    
///                                    ###
///                                    * Enable meta data command qos value overwrite or not.
///                                    ###
///               %unsigned 4  qos                       
///                                    ###
///                                    * QoS value for meta command if qos_en is 1. If qos_en is 0, use the qos value from pixel loading command.
///                                    ###
///               %unsigned 1  prefetch_disable          
///                                    ###
///                                    * Set to 1 to disable meta data prefetch
///                                    ###
///               %%        5          # Stuffing bits...
///     @ 0x00004 buffer               (P)
///               %signed   8  frm_ofst                  
///                                    ###
///                                    * Address offset of compressed pixels, in 4KB units, signed.
///                                    ###
///               %unsigned 5  format                    
///                                    ###
///                                    * E_MTR.mode
///                                    ###
///               %unsigned 1  force_uncmpr              
///                                    ###
///                                    * 1: All the pixel data in frame buffer are uncompressed. Note that the meta buffer content may be invalid. Decompression engine should read from the meta buffer.
///                                    * 0: normal mode.
///                                    ###
///               %unsigned 1  addr_shuffle_en           0x0
///                                    ###
///                                    * Enable (1) address shuffle or not (0).
///                                    * Please check MTR_header.addr_shuffle and MTR_header.addr_shuffle_1
///                                    ###
///               %unsigned 1  flow_ctrl                 
///                                    ###
///                                    * 1: Enable input command/data flow control. Send out pixel command only if input buffer has sufficient space.
///                                    * 0: No flow control.
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00008 frame                (P)
///               %unsigned 32 stride                    
///                                    ###
///                                    * Frame buffer real stride in bytes.
///                                    ###
///     @ 0x0000C offset               (P)
///               %unsigned 11 x                         0x0
///               %unsigned 14 y                         0x0
///                                    ###
///                                    * Additional offset setting, in compression data unit (64x4 or 48x4).
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x00010 addr_shuffle         (P)
///               %unsigned 5  bit_06                    0x6
///               %unsigned 5  bit_07                    0x7
///               %unsigned 5  bit_08                    0x8
///               %unsigned 5  bit_09                    0x9
///               %unsigned 5  bit_10                    0xA
///               %unsigned 5  bit_11                    0xB
///               %%        2          # Stuffing bits...
///     @ 0x00014 addr_shuffle_1       (P)
///               %unsigned 5  bit_12                    0xC
///               %unsigned 5  bit_13                    0xD
///               %unsigned 5  bit_14                    0xE
///               %unsigned 5  bit_15                    0xF
///                                    ###
///                                    * src_n = bit_<n>
///                                    * dst_n = addr_shuffle*.bit_n
///                                    * When MTR accessing frame buffer, shuffle address bit src_n and dst_n.
///                                    * a*Addr[dst_n] = a*Addr[src_n];
///                                    * a*Addr[src_n] = a*Addr[dst_n];
///                                    * End of MTR_header
///                                    ###
///               %%        12         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      24B, bits:     150b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MTR_header0
#define h_MTR_header0 (){}

    #define     RA_MTR_header0_meta                            0x0000

    #define     BA_MTR_header0_meta_stride                     0x0000
    #define     B16MTR_header0_meta_stride                     0x0000
    #define   LSb32MTR_header0_meta_stride                        0
    #define   LSb16MTR_header0_meta_stride                        0
    #define       bMTR_header0_meta_stride                     4
    #define   MSK32MTR_header0_meta_stride                        0x0000000F
    #define        MTR_header0_meta_stride_64B                              0x0
    #define        MTR_header0_meta_stride_128B                             0x1
    #define        MTR_header0_meta_stride_256B                             0x2
    #define        MTR_header0_meta_stride_512B                             0x3
    #define        MTR_header0_meta_stride_1024B                            0x4
    #define        MTR_header0_meta_stride_2048B                            0x5
    #define        MTR_header0_meta_stride_4096B                            0x6
    #define        MTR_header0_meta_stride_8192B                            0x7
    #define        MTR_header0_meta_stride_16384B                           0x8

    #define     BA_MTR_header0_meta_format                     0x0000
    #define     B16MTR_header0_meta_format                     0x0000
    #define   LSb32MTR_header0_meta_format                        4
    #define   LSb16MTR_header0_meta_format                        4
    #define       bMTR_header0_meta_format                     2
    #define   MSK32MTR_header0_meta_format                        0x00000030

    #define     BA_MTR_header0_meta_width                      0x0000
    #define     B16MTR_header0_meta_width                      0x0000
    #define   LSb32MTR_header0_meta_width                         6
    #define   LSb16MTR_header0_meta_width                         6
    #define       bMTR_header0_meta_width                      5
    #define   MSK32MTR_header0_meta_width                         0x000007C0

    #define     BA_MTR_header0_meta_height                     0x0001
    #define     B16MTR_header0_meta_height                     0x0000
    #define   LSb32MTR_header0_meta_height                        11
    #define   LSb16MTR_header0_meta_height                        11
    #define       bMTR_header0_meta_height                     10
    #define   MSK32MTR_header0_meta_height                        0x001FF800

    #define     BA_MTR_header0_meta_qos_en                     0x0002
    #define     B16MTR_header0_meta_qos_en                     0x0002
    #define   LSb32MTR_header0_meta_qos_en                        21
    #define   LSb16MTR_header0_meta_qos_en                        5
    #define       bMTR_header0_meta_qos_en                     1
    #define   MSK32MTR_header0_meta_qos_en                        0x00200000

    #define     BA_MTR_header0_meta_qos                        0x0002
    #define     B16MTR_header0_meta_qos                        0x0002
    #define   LSb32MTR_header0_meta_qos                           22
    #define   LSb16MTR_header0_meta_qos                           6
    #define       bMTR_header0_meta_qos                        4
    #define   MSK32MTR_header0_meta_qos                           0x03C00000

    #define     BA_MTR_header0_meta_prefetch_disable           0x0003
    #define     B16MTR_header0_meta_prefetch_disable           0x0002
    #define   LSb32MTR_header0_meta_prefetch_disable              26
    #define   LSb16MTR_header0_meta_prefetch_disable              10
    #define       bMTR_header0_meta_prefetch_disable           1
    #define   MSK32MTR_header0_meta_prefetch_disable              0x04000000
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_header0_buffer                          0x0004

    #define     BA_MTR_header0_buffer_frm_ofst                 0x0004
    #define     B16MTR_header0_buffer_frm_ofst                 0x0004
    #define   LSb32MTR_header0_buffer_frm_ofst                    0
    #define   LSb16MTR_header0_buffer_frm_ofst                    0
    #define       bMTR_header0_buffer_frm_ofst                 8
    #define   MSK32MTR_header0_buffer_frm_ofst                    0x000000FF

    #define     BA_MTR_header0_buffer_format                   0x0005
    #define     B16MTR_header0_buffer_format                   0x0004
    #define   LSb32MTR_header0_buffer_format                      8
    #define   LSb16MTR_header0_buffer_format                      8
    #define       bMTR_header0_buffer_format                   5
    #define   MSK32MTR_header0_buffer_format                      0x00001F00

    #define     BA_MTR_header0_buffer_force_uncmpr             0x0005
    #define     B16MTR_header0_buffer_force_uncmpr             0x0004
    #define   LSb32MTR_header0_buffer_force_uncmpr                13
    #define   LSb16MTR_header0_buffer_force_uncmpr                13
    #define       bMTR_header0_buffer_force_uncmpr             1
    #define   MSK32MTR_header0_buffer_force_uncmpr                0x00002000

    #define     BA_MTR_header0_buffer_addr_shuffle_en          0x0005
    #define     B16MTR_header0_buffer_addr_shuffle_en          0x0004
    #define   LSb32MTR_header0_buffer_addr_shuffle_en             14
    #define   LSb16MTR_header0_buffer_addr_shuffle_en             14
    #define       bMTR_header0_buffer_addr_shuffle_en          1
    #define   MSK32MTR_header0_buffer_addr_shuffle_en             0x00004000

    #define     BA_MTR_header0_buffer_flow_ctrl                0x0005
    #define     B16MTR_header0_buffer_flow_ctrl                0x0004
    #define   LSb32MTR_header0_buffer_flow_ctrl                   15
    #define   LSb16MTR_header0_buffer_flow_ctrl                   15
    #define       bMTR_header0_buffer_flow_ctrl                1
    #define   MSK32MTR_header0_buffer_flow_ctrl                   0x00008000
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_header0_frame                           0x0008

    #define     BA_MTR_header0_frame_stride                    0x0008
    #define     B16MTR_header0_frame_stride                    0x0008
    #define   LSb32MTR_header0_frame_stride                       0
    #define   LSb16MTR_header0_frame_stride                       0
    #define       bMTR_header0_frame_stride                    32
    #define   MSK32MTR_header0_frame_stride                       0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_header0_offset                          0x000C

    #define     BA_MTR_header0_offset_x                        0x000C
    #define     B16MTR_header0_offset_x                        0x000C
    #define   LSb32MTR_header0_offset_x                           0
    #define   LSb16MTR_header0_offset_x                           0
    #define       bMTR_header0_offset_x                        11
    #define   MSK32MTR_header0_offset_x                           0x000007FF

    #define     BA_MTR_header0_offset_y                        0x000D
    #define     B16MTR_header0_offset_y                        0x000C
    #define   LSb32MTR_header0_offset_y                           11
    #define   LSb16MTR_header0_offset_y                           11
    #define       bMTR_header0_offset_y                        14
    #define   MSK32MTR_header0_offset_y                           0x01FFF800
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_header0_addr_shuffle                    0x0010

    #define     BA_MTR_header0_addr_shuffle_bit_06             0x0010
    #define     B16MTR_header0_addr_shuffle_bit_06             0x0010
    #define   LSb32MTR_header0_addr_shuffle_bit_06                0
    #define   LSb16MTR_header0_addr_shuffle_bit_06                0
    #define       bMTR_header0_addr_shuffle_bit_06             5
    #define   MSK32MTR_header0_addr_shuffle_bit_06                0x0000001F

    #define     BA_MTR_header0_addr_shuffle_bit_07             0x0010
    #define     B16MTR_header0_addr_shuffle_bit_07             0x0010
    #define   LSb32MTR_header0_addr_shuffle_bit_07                5
    #define   LSb16MTR_header0_addr_shuffle_bit_07                5
    #define       bMTR_header0_addr_shuffle_bit_07             5
    #define   MSK32MTR_header0_addr_shuffle_bit_07                0x000003E0

    #define     BA_MTR_header0_addr_shuffle_bit_08             0x0011
    #define     B16MTR_header0_addr_shuffle_bit_08             0x0010
    #define   LSb32MTR_header0_addr_shuffle_bit_08                10
    #define   LSb16MTR_header0_addr_shuffle_bit_08                10
    #define       bMTR_header0_addr_shuffle_bit_08             5
    #define   MSK32MTR_header0_addr_shuffle_bit_08                0x00007C00

    #define     BA_MTR_header0_addr_shuffle_bit_09             0x0011
    #define     B16MTR_header0_addr_shuffle_bit_09             0x0010
    #define   LSb32MTR_header0_addr_shuffle_bit_09                15
    #define   LSb16MTR_header0_addr_shuffle_bit_09                15
    #define       bMTR_header0_addr_shuffle_bit_09             5
    #define   MSK32MTR_header0_addr_shuffle_bit_09                0x000F8000

    #define     BA_MTR_header0_addr_shuffle_bit_10             0x0012
    #define     B16MTR_header0_addr_shuffle_bit_10             0x0012
    #define   LSb32MTR_header0_addr_shuffle_bit_10                20
    #define   LSb16MTR_header0_addr_shuffle_bit_10                4
    #define       bMTR_header0_addr_shuffle_bit_10             5
    #define   MSK32MTR_header0_addr_shuffle_bit_10                0x01F00000

    #define     BA_MTR_header0_addr_shuffle_bit_11             0x0013
    #define     B16MTR_header0_addr_shuffle_bit_11             0x0012
    #define   LSb32MTR_header0_addr_shuffle_bit_11                25
    #define   LSb16MTR_header0_addr_shuffle_bit_11                9
    #define       bMTR_header0_addr_shuffle_bit_11             5
    #define   MSK32MTR_header0_addr_shuffle_bit_11                0x3E000000
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_header0_addr_shuffle_1                  0x0014

    #define     BA_MTR_header0_addr_shuffle_1_bit_12           0x0014
    #define     B16MTR_header0_addr_shuffle_1_bit_12           0x0014
    #define   LSb32MTR_header0_addr_shuffle_1_bit_12              0
    #define   LSb16MTR_header0_addr_shuffle_1_bit_12              0
    #define       bMTR_header0_addr_shuffle_1_bit_12           5
    #define   MSK32MTR_header0_addr_shuffle_1_bit_12              0x0000001F

    #define     BA_MTR_header0_addr_shuffle_1_bit_13           0x0014
    #define     B16MTR_header0_addr_shuffle_1_bit_13           0x0014
    #define   LSb32MTR_header0_addr_shuffle_1_bit_13              5
    #define   LSb16MTR_header0_addr_shuffle_1_bit_13              5
    #define       bMTR_header0_addr_shuffle_1_bit_13           5
    #define   MSK32MTR_header0_addr_shuffle_1_bit_13              0x000003E0

    #define     BA_MTR_header0_addr_shuffle_1_bit_14           0x0015
    #define     B16MTR_header0_addr_shuffle_1_bit_14           0x0014
    #define   LSb32MTR_header0_addr_shuffle_1_bit_14              10
    #define   LSb16MTR_header0_addr_shuffle_1_bit_14              10
    #define       bMTR_header0_addr_shuffle_1_bit_14           5
    #define   MSK32MTR_header0_addr_shuffle_1_bit_14              0x00007C00

    #define     BA_MTR_header0_addr_shuffle_1_bit_15           0x0015
    #define     B16MTR_header0_addr_shuffle_1_bit_15           0x0014
    #define   LSb32MTR_header0_addr_shuffle_1_bit_15              15
    #define   LSb16MTR_header0_addr_shuffle_1_bit_15              15
    #define       bMTR_header0_addr_shuffle_1_bit_15           5
    #define   MSK32MTR_header0_addr_shuffle_1_bit_15              0x000F8000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MTR_header0 {
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_header0_meta_stride(r32)                _BFGET_(r32, 3, 0)
    #define   SET32MTR_header0_meta_stride(r32,v)              _BFSET_(r32, 3, 0,v)
    #define   GET16MTR_header0_meta_stride(r16)                _BFGET_(r16, 3, 0)
    #define   SET16MTR_header0_meta_stride(r16,v)              _BFSET_(r16, 3, 0,v)

    #define   GET32MTR_header0_meta_format(r32)                _BFGET_(r32, 5, 4)
    #define   SET32MTR_header0_meta_format(r32,v)              _BFSET_(r32, 5, 4,v)
    #define   GET16MTR_header0_meta_format(r16)                _BFGET_(r16, 5, 4)
    #define   SET16MTR_header0_meta_format(r16,v)              _BFSET_(r16, 5, 4,v)

    #define   GET32MTR_header0_meta_width(r32)                 _BFGET_(r32,10, 6)
    #define   SET32MTR_header0_meta_width(r32,v)               _BFSET_(r32,10, 6,v)
    #define   GET16MTR_header0_meta_width(r16)                 _BFGET_(r16,10, 6)
    #define   SET16MTR_header0_meta_width(r16,v)               _BFSET_(r16,10, 6,v)

    #define   GET32MTR_header0_meta_height(r32)                _BFGET_(r32,20,11)
    #define   SET32MTR_header0_meta_height(r32,v)              _BFSET_(r32,20,11,v)

    #define   GET32MTR_header0_meta_qos_en(r32)                _BFGET_(r32,21,21)
    #define   SET32MTR_header0_meta_qos_en(r32,v)              _BFSET_(r32,21,21,v)
    #define   GET16MTR_header0_meta_qos_en(r16)                _BFGET_(r16, 5, 5)
    #define   SET16MTR_header0_meta_qos_en(r16,v)              _BFSET_(r16, 5, 5,v)

    #define   GET32MTR_header0_meta_qos(r32)                   _BFGET_(r32,25,22)
    #define   SET32MTR_header0_meta_qos(r32,v)                 _BFSET_(r32,25,22,v)
    #define   GET16MTR_header0_meta_qos(r16)                   _BFGET_(r16, 9, 6)
    #define   SET16MTR_header0_meta_qos(r16,v)                 _BFSET_(r16, 9, 6,v)

    #define   GET32MTR_header0_meta_prefetch_disable(r32)      _BFGET_(r32,26,26)
    #define   SET32MTR_header0_meta_prefetch_disable(r32,v)    _BFSET_(r32,26,26,v)
    #define   GET16MTR_header0_meta_prefetch_disable(r16)      _BFGET_(r16,10,10)
    #define   SET16MTR_header0_meta_prefetch_disable(r16,v)    _BFSET_(r16,10,10,v)

    #define     w32MTR_header0_meta                            {\
            UNSG32 umeta_stride                                :  4;\
            UNSG32 umeta_format                                :  2;\
            UNSG32 umeta_width                                 :  5;\
            UNSG32 umeta_height                                : 10;\
            UNSG32 umeta_qos_en                                :  1;\
            UNSG32 umeta_qos                                   :  4;\
            UNSG32 umeta_prefetch_disable                      :  1;\
            UNSG32 RSVDx0_b27                                  :  5;\
          }
    union { UNSG32 u32MTR_header0_meta;
            struct w32MTR_header0_meta;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_header0_buffer_frm_ofst(r32)            _BFGET_(r32, 7, 0)
    #define   SET32MTR_header0_buffer_frm_ofst(r32,v)          _BFSET_(r32, 7, 0,v)
    #define   GET16MTR_header0_buffer_frm_ofst(r16)            _BFGET_(r16, 7, 0)
    #define   SET16MTR_header0_buffer_frm_ofst(r16,v)          _BFSET_(r16, 7, 0,v)

    #define   GET32MTR_header0_buffer_format(r32)              _BFGET_(r32,12, 8)
    #define   SET32MTR_header0_buffer_format(r32,v)            _BFSET_(r32,12, 8,v)
    #define   GET16MTR_header0_buffer_format(r16)              _BFGET_(r16,12, 8)
    #define   SET16MTR_header0_buffer_format(r16,v)            _BFSET_(r16,12, 8,v)

    #define   GET32MTR_header0_buffer_force_uncmpr(r32)        _BFGET_(r32,13,13)
    #define   SET32MTR_header0_buffer_force_uncmpr(r32,v)      _BFSET_(r32,13,13,v)
    #define   GET16MTR_header0_buffer_force_uncmpr(r16)        _BFGET_(r16,13,13)
    #define   SET16MTR_header0_buffer_force_uncmpr(r16,v)      _BFSET_(r16,13,13,v)

    #define   GET32MTR_header0_buffer_addr_shuffle_en(r32)     _BFGET_(r32,14,14)
    #define   SET32MTR_header0_buffer_addr_shuffle_en(r32,v)   _BFSET_(r32,14,14,v)
    #define   GET16MTR_header0_buffer_addr_shuffle_en(r16)     _BFGET_(r16,14,14)
    #define   SET16MTR_header0_buffer_addr_shuffle_en(r16,v)   _BFSET_(r16,14,14,v)

    #define   GET32MTR_header0_buffer_flow_ctrl(r32)           _BFGET_(r32,15,15)
    #define   SET32MTR_header0_buffer_flow_ctrl(r32,v)         _BFSET_(r32,15,15,v)
    #define   GET16MTR_header0_buffer_flow_ctrl(r16)           _BFGET_(r16,15,15)
    #define   SET16MTR_header0_buffer_flow_ctrl(r16,v)         _BFSET_(r16,15,15,v)

    #define     w32MTR_header0_buffer                          {\
            UNSG32 sbuffer_frm_ofst                            :  8;\
            UNSG32 ubuffer_format                              :  5;\
            UNSG32 ubuffer_force_uncmpr                        :  1;\
            UNSG32 ubuffer_addr_shuffle_en                     :  1;\
            UNSG32 ubuffer_flow_ctrl                           :  1;\
            UNSG32 RSVDx4_b16                                  : 16;\
          }
    union { UNSG32 u32MTR_header0_buffer;
            struct w32MTR_header0_buffer;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_header0_frame_stride(r32)               _BFGET_(r32,31, 0)
    #define   SET32MTR_header0_frame_stride(r32,v)             _BFSET_(r32,31, 0,v)

    #define     w32MTR_header0_frame                           {\
            UNSG32 uframe_stride                               : 32;\
          }
    union { UNSG32 u32MTR_header0_frame;
            struct w32MTR_header0_frame;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_header0_offset_x(r32)                   _BFGET_(r32,10, 0)
    #define   SET32MTR_header0_offset_x(r32,v)                 _BFSET_(r32,10, 0,v)
    #define   GET16MTR_header0_offset_x(r16)                   _BFGET_(r16,10, 0)
    #define   SET16MTR_header0_offset_x(r16,v)                 _BFSET_(r16,10, 0,v)

    #define   GET32MTR_header0_offset_y(r32)                   _BFGET_(r32,24,11)
    #define   SET32MTR_header0_offset_y(r32,v)                 _BFSET_(r32,24,11,v)

    #define     w32MTR_header0_offset                          {\
            UNSG32 uoffset_x                                   : 11;\
            UNSG32 uoffset_y                                   : 14;\
            UNSG32 RSVDxC_b25                                  :  7;\
          }
    union { UNSG32 u32MTR_header0_offset;
            struct w32MTR_header0_offset;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_header0_addr_shuffle_bit_06(r32)        _BFGET_(r32, 4, 0)
    #define   SET32MTR_header0_addr_shuffle_bit_06(r32,v)      _BFSET_(r32, 4, 0,v)
    #define   GET16MTR_header0_addr_shuffle_bit_06(r16)        _BFGET_(r16, 4, 0)
    #define   SET16MTR_header0_addr_shuffle_bit_06(r16,v)      _BFSET_(r16, 4, 0,v)

    #define   GET32MTR_header0_addr_shuffle_bit_07(r32)        _BFGET_(r32, 9, 5)
    #define   SET32MTR_header0_addr_shuffle_bit_07(r32,v)      _BFSET_(r32, 9, 5,v)
    #define   GET16MTR_header0_addr_shuffle_bit_07(r16)        _BFGET_(r16, 9, 5)
    #define   SET16MTR_header0_addr_shuffle_bit_07(r16,v)      _BFSET_(r16, 9, 5,v)

    #define   GET32MTR_header0_addr_shuffle_bit_08(r32)        _BFGET_(r32,14,10)
    #define   SET32MTR_header0_addr_shuffle_bit_08(r32,v)      _BFSET_(r32,14,10,v)
    #define   GET16MTR_header0_addr_shuffle_bit_08(r16)        _BFGET_(r16,14,10)
    #define   SET16MTR_header0_addr_shuffle_bit_08(r16,v)      _BFSET_(r16,14,10,v)

    #define   GET32MTR_header0_addr_shuffle_bit_09(r32)        _BFGET_(r32,19,15)
    #define   SET32MTR_header0_addr_shuffle_bit_09(r32,v)      _BFSET_(r32,19,15,v)

    #define   GET32MTR_header0_addr_shuffle_bit_10(r32)        _BFGET_(r32,24,20)
    #define   SET32MTR_header0_addr_shuffle_bit_10(r32,v)      _BFSET_(r32,24,20,v)
    #define   GET16MTR_header0_addr_shuffle_bit_10(r16)        _BFGET_(r16, 8, 4)
    #define   SET16MTR_header0_addr_shuffle_bit_10(r16,v)      _BFSET_(r16, 8, 4,v)

    #define   GET32MTR_header0_addr_shuffle_bit_11(r32)        _BFGET_(r32,29,25)
    #define   SET32MTR_header0_addr_shuffle_bit_11(r32,v)      _BFSET_(r32,29,25,v)
    #define   GET16MTR_header0_addr_shuffle_bit_11(r16)        _BFGET_(r16,13, 9)
    #define   SET16MTR_header0_addr_shuffle_bit_11(r16,v)      _BFSET_(r16,13, 9,v)

    #define     w32MTR_header0_addr_shuffle                    {\
            UNSG32 uaddr_shuffle_bit_06                        :  5;\
            UNSG32 uaddr_shuffle_bit_07                        :  5;\
            UNSG32 uaddr_shuffle_bit_08                        :  5;\
            UNSG32 uaddr_shuffle_bit_09                        :  5;\
            UNSG32 uaddr_shuffle_bit_10                        :  5;\
            UNSG32 uaddr_shuffle_bit_11                        :  5;\
            UNSG32 RSVDx10_b30                                 :  2;\
          }
    union { UNSG32 u32MTR_header0_addr_shuffle;
            struct w32MTR_header0_addr_shuffle;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_header0_addr_shuffle_1_bit_12(r32)      _BFGET_(r32, 4, 0)
    #define   SET32MTR_header0_addr_shuffle_1_bit_12(r32,v)    _BFSET_(r32, 4, 0,v)
    #define   GET16MTR_header0_addr_shuffle_1_bit_12(r16)      _BFGET_(r16, 4, 0)
    #define   SET16MTR_header0_addr_shuffle_1_bit_12(r16,v)    _BFSET_(r16, 4, 0,v)

    #define   GET32MTR_header0_addr_shuffle_1_bit_13(r32)      _BFGET_(r32, 9, 5)
    #define   SET32MTR_header0_addr_shuffle_1_bit_13(r32,v)    _BFSET_(r32, 9, 5,v)
    #define   GET16MTR_header0_addr_shuffle_1_bit_13(r16)      _BFGET_(r16, 9, 5)
    #define   SET16MTR_header0_addr_shuffle_1_bit_13(r16,v)    _BFSET_(r16, 9, 5,v)

    #define   GET32MTR_header0_addr_shuffle_1_bit_14(r32)      _BFGET_(r32,14,10)
    #define   SET32MTR_header0_addr_shuffle_1_bit_14(r32,v)    _BFSET_(r32,14,10,v)
    #define   GET16MTR_header0_addr_shuffle_1_bit_14(r16)      _BFGET_(r16,14,10)
    #define   SET16MTR_header0_addr_shuffle_1_bit_14(r16,v)    _BFSET_(r16,14,10,v)

    #define   GET32MTR_header0_addr_shuffle_1_bit_15(r32)      _BFGET_(r32,19,15)
    #define   SET32MTR_header0_addr_shuffle_1_bit_15(r32,v)    _BFSET_(r32,19,15,v)

    #define     w32MTR_header0_addr_shuffle_1                  {\
            UNSG32 uaddr_shuffle_1_bit_12                      :  5;\
            UNSG32 uaddr_shuffle_1_bit_13                      :  5;\
            UNSG32 uaddr_shuffle_1_bit_14                      :  5;\
            UNSG32 uaddr_shuffle_1_bit_15                      :  5;\
            UNSG32 RSVDx14_b20                                 : 12;\
          }
    union { UNSG32 u32MTR_header0_addr_shuffle_1;
            struct w32MTR_header0_addr_shuffle_1;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MTR_header0;

    typedef union  T32MTR_header0_meta
          { UNSG32 u32;
            struct w32MTR_header0_meta;
                 } T32MTR_header0_meta;
    typedef union  T32MTR_header0_buffer
          { UNSG32 u32;
            struct w32MTR_header0_buffer;
                 } T32MTR_header0_buffer;
    typedef union  T32MTR_header0_frame
          { UNSG32 u32;
            struct w32MTR_header0_frame;
                 } T32MTR_header0_frame;
    typedef union  T32MTR_header0_offset
          { UNSG32 u32;
            struct w32MTR_header0_offset;
                 } T32MTR_header0_offset;
    typedef union  T32MTR_header0_addr_shuffle
          { UNSG32 u32;
            struct w32MTR_header0_addr_shuffle;
                 } T32MTR_header0_addr_shuffle;
    typedef union  T32MTR_header0_addr_shuffle_1
          { UNSG32 u32;
            struct w32MTR_header0_addr_shuffle_1;
                 } T32MTR_header0_addr_shuffle_1;
    ///////////////////////////////////////////////////////////

    typedef union  TMTR_header0_meta
          { UNSG32 u32[1];
            struct {
            struct w32MTR_header0_meta;
                   };
                 } TMTR_header0_meta;
    typedef union  TMTR_header0_buffer
          { UNSG32 u32[1];
            struct {
            struct w32MTR_header0_buffer;
                   };
                 } TMTR_header0_buffer;
    typedef union  TMTR_header0_frame
          { UNSG32 u32[1];
            struct {
            struct w32MTR_header0_frame;
                   };
                 } TMTR_header0_frame;
    typedef union  TMTR_header0_offset
          { UNSG32 u32[1];
            struct {
            struct w32MTR_header0_offset;
                   };
                 } TMTR_header0_offset;
    typedef union  TMTR_header0_addr_shuffle
          { UNSG32 u32[1];
            struct {
            struct w32MTR_header0_addr_shuffle;
                   };
                 } TMTR_header0_addr_shuffle;
    typedef union  TMTR_header0_addr_shuffle_1
          { UNSG32 u32[1];
            struct {
            struct w32MTR_header0_addr_shuffle_1;
                   };
                 } TMTR_header0_addr_shuffle_1;

    ///////////////////////////////////////////////////////////
     SIGN32 MTR_header0_drvrd(SIE_MTR_header0 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MTR_header0_drvwr(SIE_MTR_header0 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MTR_header0_reset(SIE_MTR_header0 *p);
     SIGN32 MTR_header0_cmp  (SIE_MTR_header0 *p, SIE_MTR_header0 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MTR_header0_check(p,pie,pfx,hLOG) MTR_header0_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MTR_header0_print(p,    pfx,hLOG) MTR_header0_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MTR_header0
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MTR_header              biu              (4,4)
///     ###
///     * MTR frame buffer header
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 meta                 (P)
///               %unsigned 4  stride                    
///                                    : 64B                       0x0
///                                    : 128B                      0x1
///                                    : 256B                      0x2
///                                    : 512B                      0x3
///                                    : 1024B                     0x4
///                                    : 2048B                     0x5
///                                    : 4096B                     0x6
///                                    : 8192B                     0x7
///                                    : 16384B                    0x8
///                                                 ###
///                                                 * Meta data stride. For luma, picture width (in bytes) should be less than or equal to 2^(10+meta.stride).
///                                                 ###
///               %unsigned 4  format                    0x0
///                                    : V16H16V1                  0x0
///                                    : V8H16V2                   0x1
///                                    : V4H16V4                   0x2
///                                    : V8H32V1                   0x4
///                                    : V4H32V2                   0x5
///                                    : V2H32V4                   0x6
///                                    : V1H32V2                   0x8
///                                    : V1H16V4                   0x9
///                                    : V1H8V8                    0xA
///                                    : V1H4V16                   0xB
///                                    : V1H64V1                   0xC
///                                                 ###
///                                                 * First 3 (format0~2) meta format is tile-based format for luma, meta packet size is 64x1024.
///                                                 * Format4~6 is tile-based format for chroma, meta packet size is 32x2048.
///                                                 * The last four meta format is for raster-scan based format.
///                                                 ###
///               %unsigned 1  prefetch_disable          
///                                    ###
///                                    * Set to 1 to disable meta data prefetch
///                                    ###
///               %unsigned 1  flow_ctrl                 
///                                    ###
///                                    * 1: Disable DMA command output when MTRR engine input buffer is going to be full.
///                                    * 0: No flow control, still sends out DMA commands even when input buffer is full.
///                                    ###
///               %unsigned 1  qos_en                    
///                                    ###
///                                    * Enable meta data command qos value overwrite or not.
///                                    ###
///               %unsigned 4  qos                       
///                                    ###
///                                    * QoS value for meta command if qos_en is 1. If qos_en is 0, use the qos value from pixel loading command.
///                                    ###
///               %unsigned 5  cbase                     0x0
///                                    ###
///                                    * Meta cache TAG base address for this thread in 64B
///                                    ###
///               %unsigned 3  cways                     0x7
///                                    ###
///                                    * Meta cache WAYs (Actual value shoud be 'ways'+1) for this thread in 64B. Note that each thread used the full-associative cache, thread ID is composed by {bid[3:0], uv[0]}.
///                                    ###
///               %unsigned 1  ctype                     0x0
///                                    : 64B                       0x0
///                                    : 32B                       0x1
///                                                 ###
///                                                 * Type of cache:
///                                                 * 0: cache line size is 64B
///                                                 * 1: cache line size is 32B, the real cache ways will be doubled based on “cways” configurations.
///                                                 * Cache line size selections, right now only VxG version MMU support 32B cache line; AVIO/ISP usage should be only configured as 0
///                                                 ###
///               %unsigned 1  last_mosaicy              0x0
///                                    ###
///                                    * If this frame is the last mosaic frame in y direction.
///                                    * If this thread is NON-mosaic frames or MTR is bypassed, last_mosaicy will be always set to 1.
///                                    ###
///               %unsigned 2  mosaic_xnum               0x0
///                                    ###
///                                    * (mosaic_xnum+1): Number of mosaic frames in x direction.
///                                    ###
///               %unsigned 1  weave                     0x0
///                                    ###
///                                    * 1: Weaved meta buffer – interleaved by meta packet's height.
///                                    * 0: Progressive.
///                                    ###
///               %unsigned 1  byte                      0x0
///                                    ###
///                                    * 0: 1 meta data occupies 2-bits in dram.
///                                    * 1: 1 meta data occupies 1-byte in dram.
///                                    * Note that for byte=1, we only support ARGB mode for now.
///                                    ###
///               %unsigned 1  hflip                     0x0
///                                    ###
///                                    * Flip in horizontal direction
///                                    ###
///               %unsigned 1  vflip                     0x0
///                                    ###
///                                    * Flip in vertical direction
///                                    ###
///               %%        1          # Stuffing bits...
///     @ 0x00004 buffer               (P)
///               %unsigned 5  format                    
///                                    ###
///                                    * E_MTR.mode
///                                    ###
///               %unsigned 1  force_uncmpr              
///                                    ###
///                                    * 1: All the pixel data in frame buffer are uncompressed. Note that the meta buffer content may be invalid. Decompression engine should read from the meta buffer.
///                                    * 0: normal mode.
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x00008 pos                  (P)
///               %unsigned 8  startx                    
///                                    ###
///                                    * Start coordinate of buffer in x direction in the unit of meta packet for this tile. Major used for OVP mode. Unit: meta packet (upto 256K)
///                                    ###
///               %unsigned 8  endx                      
///                                    ###
///                                    * End coordinate of buffer in x direction in the unit of meta packet for this tile. Unit: meta packet (upto 256K)
///                                    ###
///               %unsigned 16 height                    
///                                    ###
///                                    * End of MTR_header
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      12B, bits:      69b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MTR_header
#define h_MTR_header (){}

    #define     RA_MTR_header_meta                             0x0000

    #define     BA_MTR_header_meta_stride                      0x0000
    #define     B16MTR_header_meta_stride                      0x0000
    #define   LSb32MTR_header_meta_stride                         0
    #define   LSb16MTR_header_meta_stride                         0
    #define       bMTR_header_meta_stride                      4
    #define   MSK32MTR_header_meta_stride                         0x0000000F
    #define        MTR_header_meta_stride_64B                               0x0
    #define        MTR_header_meta_stride_128B                              0x1
    #define        MTR_header_meta_stride_256B                              0x2
    #define        MTR_header_meta_stride_512B                              0x3
    #define        MTR_header_meta_stride_1024B                             0x4
    #define        MTR_header_meta_stride_2048B                             0x5
    #define        MTR_header_meta_stride_4096B                             0x6
    #define        MTR_header_meta_stride_8192B                             0x7
    #define        MTR_header_meta_stride_16384B                            0x8

    #define     BA_MTR_header_meta_format                      0x0000
    #define     B16MTR_header_meta_format                      0x0000
    #define   LSb32MTR_header_meta_format                         4
    #define   LSb16MTR_header_meta_format                         4
    #define       bMTR_header_meta_format                      4
    #define   MSK32MTR_header_meta_format                         0x000000F0
    #define        MTR_header_meta_format_V16H16V1                          0x0
    #define        MTR_header_meta_format_V8H16V2                           0x1
    #define        MTR_header_meta_format_V4H16V4                           0x2
    #define        MTR_header_meta_format_V8H32V1                           0x4
    #define        MTR_header_meta_format_V4H32V2                           0x5
    #define        MTR_header_meta_format_V2H32V4                           0x6
    #define        MTR_header_meta_format_V1H32V2                           0x8
    #define        MTR_header_meta_format_V1H16V4                           0x9
    #define        MTR_header_meta_format_V1H8V8                            0xA
    #define        MTR_header_meta_format_V1H4V16                           0xB
    #define        MTR_header_meta_format_V1H64V1                           0xC

    #define     BA_MTR_header_meta_prefetch_disable            0x0001
    #define     B16MTR_header_meta_prefetch_disable            0x0000
    #define   LSb32MTR_header_meta_prefetch_disable               8
    #define   LSb16MTR_header_meta_prefetch_disable               8
    #define       bMTR_header_meta_prefetch_disable            1
    #define   MSK32MTR_header_meta_prefetch_disable               0x00000100

    #define     BA_MTR_header_meta_flow_ctrl                   0x0001
    #define     B16MTR_header_meta_flow_ctrl                   0x0000
    #define   LSb32MTR_header_meta_flow_ctrl                      9
    #define   LSb16MTR_header_meta_flow_ctrl                      9
    #define       bMTR_header_meta_flow_ctrl                   1
    #define   MSK32MTR_header_meta_flow_ctrl                      0x00000200

    #define     BA_MTR_header_meta_qos_en                      0x0001
    #define     B16MTR_header_meta_qos_en                      0x0000
    #define   LSb32MTR_header_meta_qos_en                         10
    #define   LSb16MTR_header_meta_qos_en                         10
    #define       bMTR_header_meta_qos_en                      1
    #define   MSK32MTR_header_meta_qos_en                         0x00000400

    #define     BA_MTR_header_meta_qos                         0x0001
    #define     B16MTR_header_meta_qos                         0x0000
    #define   LSb32MTR_header_meta_qos                            11
    #define   LSb16MTR_header_meta_qos                            11
    #define       bMTR_header_meta_qos                         4
    #define   MSK32MTR_header_meta_qos                            0x00007800

    #define     BA_MTR_header_meta_cbase                       0x0001
    #define     B16MTR_header_meta_cbase                       0x0000
    #define   LSb32MTR_header_meta_cbase                          15
    #define   LSb16MTR_header_meta_cbase                          15
    #define       bMTR_header_meta_cbase                       5
    #define   MSK32MTR_header_meta_cbase                          0x000F8000

    #define     BA_MTR_header_meta_cways                       0x0002
    #define     B16MTR_header_meta_cways                       0x0002
    #define   LSb32MTR_header_meta_cways                          20
    #define   LSb16MTR_header_meta_cways                          4
    #define       bMTR_header_meta_cways                       3
    #define   MSK32MTR_header_meta_cways                          0x00700000

    #define     BA_MTR_header_meta_ctype                       0x0002
    #define     B16MTR_header_meta_ctype                       0x0002
    #define   LSb32MTR_header_meta_ctype                          23
    #define   LSb16MTR_header_meta_ctype                          7
    #define       bMTR_header_meta_ctype                       1
    #define   MSK32MTR_header_meta_ctype                          0x00800000
    #define        MTR_header_meta_ctype_64B                                0x0
    #define        MTR_header_meta_ctype_32B                                0x1

    #define     BA_MTR_header_meta_last_mosaicy                0x0003
    #define     B16MTR_header_meta_last_mosaicy                0x0002
    #define   LSb32MTR_header_meta_last_mosaicy                   24
    #define   LSb16MTR_header_meta_last_mosaicy                   8
    #define       bMTR_header_meta_last_mosaicy                1
    #define   MSK32MTR_header_meta_last_mosaicy                   0x01000000

    #define     BA_MTR_header_meta_mosaic_xnum                 0x0003
    #define     B16MTR_header_meta_mosaic_xnum                 0x0002
    #define   LSb32MTR_header_meta_mosaic_xnum                    25
    #define   LSb16MTR_header_meta_mosaic_xnum                    9
    #define       bMTR_header_meta_mosaic_xnum                 2
    #define   MSK32MTR_header_meta_mosaic_xnum                    0x06000000

    #define     BA_MTR_header_meta_weave                       0x0003
    #define     B16MTR_header_meta_weave                       0x0002
    #define   LSb32MTR_header_meta_weave                          27
    #define   LSb16MTR_header_meta_weave                          11
    #define       bMTR_header_meta_weave                       1
    #define   MSK32MTR_header_meta_weave                          0x08000000

    #define     BA_MTR_header_meta_byte                        0x0003
    #define     B16MTR_header_meta_byte                        0x0002
    #define   LSb32MTR_header_meta_byte                           28
    #define   LSb16MTR_header_meta_byte                           12
    #define       bMTR_header_meta_byte                        1
    #define   MSK32MTR_header_meta_byte                           0x10000000

    #define     BA_MTR_header_meta_hflip                       0x0003
    #define     B16MTR_header_meta_hflip                       0x0002
    #define   LSb32MTR_header_meta_hflip                          29
    #define   LSb16MTR_header_meta_hflip                          13
    #define       bMTR_header_meta_hflip                       1
    #define   MSK32MTR_header_meta_hflip                          0x20000000

    #define     BA_MTR_header_meta_vflip                       0x0003
    #define     B16MTR_header_meta_vflip                       0x0002
    #define   LSb32MTR_header_meta_vflip                          30
    #define   LSb16MTR_header_meta_vflip                          14
    #define       bMTR_header_meta_vflip                       1
    #define   MSK32MTR_header_meta_vflip                          0x40000000
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_header_buffer                           0x0004

    #define     BA_MTR_header_buffer_format                    0x0004
    #define     B16MTR_header_buffer_format                    0x0004
    #define   LSb32MTR_header_buffer_format                       0
    #define   LSb16MTR_header_buffer_format                       0
    #define       bMTR_header_buffer_format                    5
    #define   MSK32MTR_header_buffer_format                       0x0000001F

    #define     BA_MTR_header_buffer_force_uncmpr              0x0004
    #define     B16MTR_header_buffer_force_uncmpr              0x0004
    #define   LSb32MTR_header_buffer_force_uncmpr                 5
    #define   LSb16MTR_header_buffer_force_uncmpr                 5
    #define       bMTR_header_buffer_force_uncmpr              1
    #define   MSK32MTR_header_buffer_force_uncmpr                 0x00000020
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_header_pos                              0x0008

    #define     BA_MTR_header_pos_startx                       0x0008
    #define     B16MTR_header_pos_startx                       0x0008
    #define   LSb32MTR_header_pos_startx                          0
    #define   LSb16MTR_header_pos_startx                          0
    #define       bMTR_header_pos_startx                       8
    #define   MSK32MTR_header_pos_startx                          0x000000FF

    #define     BA_MTR_header_pos_endx                         0x0009
    #define     B16MTR_header_pos_endx                         0x0008
    #define   LSb32MTR_header_pos_endx                            8
    #define   LSb16MTR_header_pos_endx                            8
    #define       bMTR_header_pos_endx                         8
    #define   MSK32MTR_header_pos_endx                            0x0000FF00

    #define     BA_MTR_header_pos_height                       0x000A
    #define     B16MTR_header_pos_height                       0x000A
    #define   LSb32MTR_header_pos_height                          16
    #define   LSb16MTR_header_pos_height                          0
    #define       bMTR_header_pos_height                       16
    #define   MSK32MTR_header_pos_height                          0xFFFF0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MTR_header {
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_header_meta_stride(r32)                 _BFGET_(r32, 3, 0)
    #define   SET32MTR_header_meta_stride(r32,v)               _BFSET_(r32, 3, 0,v)
    #define   GET16MTR_header_meta_stride(r16)                 _BFGET_(r16, 3, 0)
    #define   SET16MTR_header_meta_stride(r16,v)               _BFSET_(r16, 3, 0,v)

    #define   GET32MTR_header_meta_format(r32)                 _BFGET_(r32, 7, 4)
    #define   SET32MTR_header_meta_format(r32,v)               _BFSET_(r32, 7, 4,v)
    #define   GET16MTR_header_meta_format(r16)                 _BFGET_(r16, 7, 4)
    #define   SET16MTR_header_meta_format(r16,v)               _BFSET_(r16, 7, 4,v)

    #define   GET32MTR_header_meta_prefetch_disable(r32)       _BFGET_(r32, 8, 8)
    #define   SET32MTR_header_meta_prefetch_disable(r32,v)     _BFSET_(r32, 8, 8,v)
    #define   GET16MTR_header_meta_prefetch_disable(r16)       _BFGET_(r16, 8, 8)
    #define   SET16MTR_header_meta_prefetch_disable(r16,v)     _BFSET_(r16, 8, 8,v)

    #define   GET32MTR_header_meta_flow_ctrl(r32)              _BFGET_(r32, 9, 9)
    #define   SET32MTR_header_meta_flow_ctrl(r32,v)            _BFSET_(r32, 9, 9,v)
    #define   GET16MTR_header_meta_flow_ctrl(r16)              _BFGET_(r16, 9, 9)
    #define   SET16MTR_header_meta_flow_ctrl(r16,v)            _BFSET_(r16, 9, 9,v)

    #define   GET32MTR_header_meta_qos_en(r32)                 _BFGET_(r32,10,10)
    #define   SET32MTR_header_meta_qos_en(r32,v)               _BFSET_(r32,10,10,v)
    #define   GET16MTR_header_meta_qos_en(r16)                 _BFGET_(r16,10,10)
    #define   SET16MTR_header_meta_qos_en(r16,v)               _BFSET_(r16,10,10,v)

    #define   GET32MTR_header_meta_qos(r32)                    _BFGET_(r32,14,11)
    #define   SET32MTR_header_meta_qos(r32,v)                  _BFSET_(r32,14,11,v)
    #define   GET16MTR_header_meta_qos(r16)                    _BFGET_(r16,14,11)
    #define   SET16MTR_header_meta_qos(r16,v)                  _BFSET_(r16,14,11,v)

    #define   GET32MTR_header_meta_cbase(r32)                  _BFGET_(r32,19,15)
    #define   SET32MTR_header_meta_cbase(r32,v)                _BFSET_(r32,19,15,v)

    #define   GET32MTR_header_meta_cways(r32)                  _BFGET_(r32,22,20)
    #define   SET32MTR_header_meta_cways(r32,v)                _BFSET_(r32,22,20,v)
    #define   GET16MTR_header_meta_cways(r16)                  _BFGET_(r16, 6, 4)
    #define   SET16MTR_header_meta_cways(r16,v)                _BFSET_(r16, 6, 4,v)

    #define   GET32MTR_header_meta_ctype(r32)                  _BFGET_(r32,23,23)
    #define   SET32MTR_header_meta_ctype(r32,v)                _BFSET_(r32,23,23,v)
    #define   GET16MTR_header_meta_ctype(r16)                  _BFGET_(r16, 7, 7)
    #define   SET16MTR_header_meta_ctype(r16,v)                _BFSET_(r16, 7, 7,v)

    #define   GET32MTR_header_meta_last_mosaicy(r32)           _BFGET_(r32,24,24)
    #define   SET32MTR_header_meta_last_mosaicy(r32,v)         _BFSET_(r32,24,24,v)
    #define   GET16MTR_header_meta_last_mosaicy(r16)           _BFGET_(r16, 8, 8)
    #define   SET16MTR_header_meta_last_mosaicy(r16,v)         _BFSET_(r16, 8, 8,v)

    #define   GET32MTR_header_meta_mosaic_xnum(r32)            _BFGET_(r32,26,25)
    #define   SET32MTR_header_meta_mosaic_xnum(r32,v)          _BFSET_(r32,26,25,v)
    #define   GET16MTR_header_meta_mosaic_xnum(r16)            _BFGET_(r16,10, 9)
    #define   SET16MTR_header_meta_mosaic_xnum(r16,v)          _BFSET_(r16,10, 9,v)

    #define   GET32MTR_header_meta_weave(r32)                  _BFGET_(r32,27,27)
    #define   SET32MTR_header_meta_weave(r32,v)                _BFSET_(r32,27,27,v)
    #define   GET16MTR_header_meta_weave(r16)                  _BFGET_(r16,11,11)
    #define   SET16MTR_header_meta_weave(r16,v)                _BFSET_(r16,11,11,v)

    #define   GET32MTR_header_meta_byte(r32)                   _BFGET_(r32,28,28)
    #define   SET32MTR_header_meta_byte(r32,v)                 _BFSET_(r32,28,28,v)
    #define   GET16MTR_header_meta_byte(r16)                   _BFGET_(r16,12,12)
    #define   SET16MTR_header_meta_byte(r16,v)                 _BFSET_(r16,12,12,v)

    #define   GET32MTR_header_meta_hflip(r32)                  _BFGET_(r32,29,29)
    #define   SET32MTR_header_meta_hflip(r32,v)                _BFSET_(r32,29,29,v)
    #define   GET16MTR_header_meta_hflip(r16)                  _BFGET_(r16,13,13)
    #define   SET16MTR_header_meta_hflip(r16,v)                _BFSET_(r16,13,13,v)

    #define   GET32MTR_header_meta_vflip(r32)                  _BFGET_(r32,30,30)
    #define   SET32MTR_header_meta_vflip(r32,v)                _BFSET_(r32,30,30,v)
    #define   GET16MTR_header_meta_vflip(r16)                  _BFGET_(r16,14,14)
    #define   SET16MTR_header_meta_vflip(r16,v)                _BFSET_(r16,14,14,v)

    #define     w32MTR_header_meta                             {\
            UNSG32 umeta_stride                                :  4;\
            UNSG32 umeta_format                                :  4;\
            UNSG32 umeta_prefetch_disable                      :  1;\
            UNSG32 umeta_flow_ctrl                             :  1;\
            UNSG32 umeta_qos_en                                :  1;\
            UNSG32 umeta_qos                                   :  4;\
            UNSG32 umeta_cbase                                 :  5;\
            UNSG32 umeta_cways                                 :  3;\
            UNSG32 umeta_ctype                                 :  1;\
            UNSG32 umeta_last_mosaicy                          :  1;\
            UNSG32 umeta_mosaic_xnum                           :  2;\
            UNSG32 umeta_weave                                 :  1;\
            UNSG32 umeta_byte                                  :  1;\
            UNSG32 umeta_hflip                                 :  1;\
            UNSG32 umeta_vflip                                 :  1;\
            UNSG32 RSVDx0_b31                                  :  1;\
          }
    union { UNSG32 u32MTR_header_meta;
            struct w32MTR_header_meta;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_header_buffer_format(r32)               _BFGET_(r32, 4, 0)
    #define   SET32MTR_header_buffer_format(r32,v)             _BFSET_(r32, 4, 0,v)
    #define   GET16MTR_header_buffer_format(r16)               _BFGET_(r16, 4, 0)
    #define   SET16MTR_header_buffer_format(r16,v)             _BFSET_(r16, 4, 0,v)

    #define   GET32MTR_header_buffer_force_uncmpr(r32)         _BFGET_(r32, 5, 5)
    #define   SET32MTR_header_buffer_force_uncmpr(r32,v)       _BFSET_(r32, 5, 5,v)
    #define   GET16MTR_header_buffer_force_uncmpr(r16)         _BFGET_(r16, 5, 5)
    #define   SET16MTR_header_buffer_force_uncmpr(r16,v)       _BFSET_(r16, 5, 5,v)

    #define     w32MTR_header_buffer                           {\
            UNSG32 ubuffer_format                              :  5;\
            UNSG32 ubuffer_force_uncmpr                        :  1;\
            UNSG32 RSVDx4_b6                                   : 26;\
          }
    union { UNSG32 u32MTR_header_buffer;
            struct w32MTR_header_buffer;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_header_pos_startx(r32)                  _BFGET_(r32, 7, 0)
    #define   SET32MTR_header_pos_startx(r32,v)                _BFSET_(r32, 7, 0,v)
    #define   GET16MTR_header_pos_startx(r16)                  _BFGET_(r16, 7, 0)
    #define   SET16MTR_header_pos_startx(r16,v)                _BFSET_(r16, 7, 0,v)

    #define   GET32MTR_header_pos_endx(r32)                    _BFGET_(r32,15, 8)
    #define   SET32MTR_header_pos_endx(r32,v)                  _BFSET_(r32,15, 8,v)
    #define   GET16MTR_header_pos_endx(r16)                    _BFGET_(r16,15, 8)
    #define   SET16MTR_header_pos_endx(r16,v)                  _BFSET_(r16,15, 8,v)

    #define   GET32MTR_header_pos_height(r32)                  _BFGET_(r32,31,16)
    #define   SET32MTR_header_pos_height(r32,v)                _BFSET_(r32,31,16,v)
    #define   GET16MTR_header_pos_height(r16)                  _BFGET_(r16,15, 0)
    #define   SET16MTR_header_pos_height(r16,v)                _BFSET_(r16,15, 0,v)

    #define     w32MTR_header_pos                              {\
            UNSG32 upos_startx                                 :  8;\
            UNSG32 upos_endx                                   :  8;\
            UNSG32 upos_height                                 : 16;\
          }
    union { UNSG32 u32MTR_header_pos;
            struct w32MTR_header_pos;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MTR_header;

    typedef union  T32MTR_header_meta
          { UNSG32 u32;
            struct w32MTR_header_meta;
                 } T32MTR_header_meta;
    typedef union  T32MTR_header_buffer
          { UNSG32 u32;
            struct w32MTR_header_buffer;
                 } T32MTR_header_buffer;
    typedef union  T32MTR_header_pos
          { UNSG32 u32;
            struct w32MTR_header_pos;
                 } T32MTR_header_pos;
    ///////////////////////////////////////////////////////////

    typedef union  TMTR_header_meta
          { UNSG32 u32[1];
            struct {
            struct w32MTR_header_meta;
                   };
                 } TMTR_header_meta;
    typedef union  TMTR_header_buffer
          { UNSG32 u32[1];
            struct {
            struct w32MTR_header_buffer;
                   };
                 } TMTR_header_buffer;
    typedef union  TMTR_header_pos
          { UNSG32 u32[1];
            struct {
            struct w32MTR_header_pos;
                   };
                 } TMTR_header_pos;

    ///////////////////////////////////////////////////////////
     SIGN32 MTR_header_drvrd(SIE_MTR_header *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MTR_header_drvwr(SIE_MTR_header *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MTR_header_reset(SIE_MTR_header *p);
     SIGN32 MTR_header_cmp  (SIE_MTR_header *p, SIE_MTR_header *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MTR_header_check(p,pie,pfx,hLOG) MTR_header_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MTR_header_print(p,    pfx,hLOG) MTR_header_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MTR_header
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MTR_meta_tag            biu              (4,4)
///     ###
///     * MTR read agent meta data cache tag, used for VxG hardware
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///               %unsigned 7  x                         0x0
///                                    ###
///                                    * Increase 1-bit on tag-x for 32B cache line size
///                                    ###
///               %unsigned 10 y                         0x0
///               %unsigned 1  uv                        0x0
///                                    ###
///                                    * Luma (0) or Chroma (1)
///                                    ###
///               %unsigned 4  bid                       0x0
///                                    ###
///                                    * buffer ID
///                                    ###
///               %unsigned 1  valid                     0x0
///                                    ###
///                                    * valid (1) or invalid.
///                                    ###
///               %unsigned 1  pending                   0x0
///                                    ###
///                                    * 1: Read command issued, waiting for data coming back
///                                    ###
///               %unsigned 1  ts                        0x0
///                                    ###
///                                    * See $MTR_user, NOT used
///                                    * End of MTR_meta_tag
///                                    ###
///               %%        7          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      25b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MTR_meta_tag
#define h_MTR_meta_tag (){}

    #define     BA_MTR_meta_tag_x                              0x0000
    #define     B16MTR_meta_tag_x                              0x0000
    #define   LSb32MTR_meta_tag_x                                 0
    #define   LSb16MTR_meta_tag_x                                 0
    #define       bMTR_meta_tag_x                              7
    #define   MSK32MTR_meta_tag_x                                 0x0000007F

    #define     BA_MTR_meta_tag_y                              0x0000
    #define     B16MTR_meta_tag_y                              0x0000
    #define   LSb32MTR_meta_tag_y                                 7
    #define   LSb16MTR_meta_tag_y                                 7
    #define       bMTR_meta_tag_y                              10
    #define   MSK32MTR_meta_tag_y                                 0x0001FF80

    #define     BA_MTR_meta_tag_uv                             0x0002
    #define     B16MTR_meta_tag_uv                             0x0002
    #define   LSb32MTR_meta_tag_uv                                17
    #define   LSb16MTR_meta_tag_uv                                1
    #define       bMTR_meta_tag_uv                             1
    #define   MSK32MTR_meta_tag_uv                                0x00020000

    #define     BA_MTR_meta_tag_bid                            0x0002
    #define     B16MTR_meta_tag_bid                            0x0002
    #define   LSb32MTR_meta_tag_bid                               18
    #define   LSb16MTR_meta_tag_bid                               2
    #define       bMTR_meta_tag_bid                            4
    #define   MSK32MTR_meta_tag_bid                               0x003C0000

    #define     BA_MTR_meta_tag_valid                          0x0002
    #define     B16MTR_meta_tag_valid                          0x0002
    #define   LSb32MTR_meta_tag_valid                             22
    #define   LSb16MTR_meta_tag_valid                             6
    #define       bMTR_meta_tag_valid                          1
    #define   MSK32MTR_meta_tag_valid                             0x00400000

    #define     BA_MTR_meta_tag_pending                        0x0002
    #define     B16MTR_meta_tag_pending                        0x0002
    #define   LSb32MTR_meta_tag_pending                           23
    #define   LSb16MTR_meta_tag_pending                           7
    #define       bMTR_meta_tag_pending                        1
    #define   MSK32MTR_meta_tag_pending                           0x00800000

    #define     BA_MTR_meta_tag_ts                             0x0003
    #define     B16MTR_meta_tag_ts                             0x0002
    #define   LSb32MTR_meta_tag_ts                                24
    #define   LSb16MTR_meta_tag_ts                                8
    #define       bMTR_meta_tag_ts                             1
    #define   MSK32MTR_meta_tag_ts                                0x01000000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MTR_meta_tag {
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_meta_tag_x(r32)                         _BFGET_(r32, 6, 0)
    #define   SET32MTR_meta_tag_x(r32,v)                       _BFSET_(r32, 6, 0,v)
    #define   GET16MTR_meta_tag_x(r16)                         _BFGET_(r16, 6, 0)
    #define   SET16MTR_meta_tag_x(r16,v)                       _BFSET_(r16, 6, 0,v)

    #define   GET32MTR_meta_tag_y(r32)                         _BFGET_(r32,16, 7)
    #define   SET32MTR_meta_tag_y(r32,v)                       _BFSET_(r32,16, 7,v)

    #define   GET32MTR_meta_tag_uv(r32)                        _BFGET_(r32,17,17)
    #define   SET32MTR_meta_tag_uv(r32,v)                      _BFSET_(r32,17,17,v)
    #define   GET16MTR_meta_tag_uv(r16)                        _BFGET_(r16, 1, 1)
    #define   SET16MTR_meta_tag_uv(r16,v)                      _BFSET_(r16, 1, 1,v)

    #define   GET32MTR_meta_tag_bid(r32)                       _BFGET_(r32,21,18)
    #define   SET32MTR_meta_tag_bid(r32,v)                     _BFSET_(r32,21,18,v)
    #define   GET16MTR_meta_tag_bid(r16)                       _BFGET_(r16, 5, 2)
    #define   SET16MTR_meta_tag_bid(r16,v)                     _BFSET_(r16, 5, 2,v)

    #define   GET32MTR_meta_tag_valid(r32)                     _BFGET_(r32,22,22)
    #define   SET32MTR_meta_tag_valid(r32,v)                   _BFSET_(r32,22,22,v)
    #define   GET16MTR_meta_tag_valid(r16)                     _BFGET_(r16, 6, 6)
    #define   SET16MTR_meta_tag_valid(r16,v)                   _BFSET_(r16, 6, 6,v)

    #define   GET32MTR_meta_tag_pending(r32)                   _BFGET_(r32,23,23)
    #define   SET32MTR_meta_tag_pending(r32,v)                 _BFSET_(r32,23,23,v)
    #define   GET16MTR_meta_tag_pending(r16)                   _BFGET_(r16, 7, 7)
    #define   SET16MTR_meta_tag_pending(r16,v)                 _BFSET_(r16, 7, 7,v)

    #define   GET32MTR_meta_tag_ts(r32)                        _BFGET_(r32,24,24)
    #define   SET32MTR_meta_tag_ts(r32,v)                      _BFSET_(r32,24,24,v)
    #define   GET16MTR_meta_tag_ts(r16)                        _BFGET_(r16, 8, 8)
    #define   SET16MTR_meta_tag_ts(r16,v)                      _BFSET_(r16, 8, 8,v)

            UNSG32 u_x                                         :  7;
            UNSG32 u_y                                         : 10;
            UNSG32 u_uv                                        :  1;
            UNSG32 u_bid                                       :  4;
            UNSG32 u_valid                                     :  1;
            UNSG32 u_pending                                   :  1;
            UNSG32 u_ts                                        :  1;
            UNSG32 RSVDx0_b25                                  :  7;
    ///////////////////////////////////////////////////////////
    } SIE_MTR_meta_tag;

    ///////////////////////////////////////////////////////////
     SIGN32 MTR_meta_tag_drvrd(SIE_MTR_meta_tag *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MTR_meta_tag_drvwr(SIE_MTR_meta_tag *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MTR_meta_tag_reset(SIE_MTR_meta_tag *p);
     SIGN32 MTR_meta_tag_cmp  (SIE_MTR_meta_tag *p, SIE_MTR_meta_tag *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MTR_meta_tag_check(p,pie,pfx,hLOG) MTR_meta_tag_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MTR_meta_tag_print(p,    pfx,hLOG) MTR_meta_tag_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MTR_meta_tag
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MTR_meta_tagx           biu              (4,4)
///     ###
///     * MTR read agent meta data cache tag, used for AVIO
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///               %unsigned 4  x                         0x0
///                                    ###
///                                    * Increase 1-bit on tag-x for 32B cache line size
///                                    ###
///               %unsigned 13 y                         0x0
///                                    ###
///                                    * Reduce y to 13-bit, since only ½ , ¼ and 1/8 mode are supported at moment
///                                    ###
///               %unsigned 1  uv                        0x0
///                                    ###
///                                    * Luma (0) or Chroma (1)
///                                    ###
///               %unsigned 4  bid                       0x0
///                                    ###
///                                    * buffer ID
///                                    ###
///               %unsigned 1  valid                     0x0
///                                    ###
///                                    * valid (1) or invalid.
///                                    ###
///               %unsigned 1  pending                   0x0
///                                    ###
///                                    * 1: Read command issued, waiting for data coming back
///                                    ###
///               %unsigned 1  ts                        0x0
///                                    ###
///                                    * See $MTR_user, NOT used
///                                    * End of MTR_meta_tag
///                                    ###
///               %%        7          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      25b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MTR_meta_tagx
#define h_MTR_meta_tagx (){}

    #define     BA_MTR_meta_tagx_x                             0x0000
    #define     B16MTR_meta_tagx_x                             0x0000
    #define   LSb32MTR_meta_tagx_x                                0
    #define   LSb16MTR_meta_tagx_x                                0
    #define       bMTR_meta_tagx_x                             4
    #define   MSK32MTR_meta_tagx_x                                0x0000000F

    #define     BA_MTR_meta_tagx_y                             0x0000
    #define     B16MTR_meta_tagx_y                             0x0000
    #define   LSb32MTR_meta_tagx_y                                4
    #define   LSb16MTR_meta_tagx_y                                4
    #define       bMTR_meta_tagx_y                             13
    #define   MSK32MTR_meta_tagx_y                                0x0001FFF0

    #define     BA_MTR_meta_tagx_uv                            0x0002
    #define     B16MTR_meta_tagx_uv                            0x0002
    #define   LSb32MTR_meta_tagx_uv                               17
    #define   LSb16MTR_meta_tagx_uv                               1
    #define       bMTR_meta_tagx_uv                            1
    #define   MSK32MTR_meta_tagx_uv                               0x00020000

    #define     BA_MTR_meta_tagx_bid                           0x0002
    #define     B16MTR_meta_tagx_bid                           0x0002
    #define   LSb32MTR_meta_tagx_bid                              18
    #define   LSb16MTR_meta_tagx_bid                              2
    #define       bMTR_meta_tagx_bid                           4
    #define   MSK32MTR_meta_tagx_bid                              0x003C0000

    #define     BA_MTR_meta_tagx_valid                         0x0002
    #define     B16MTR_meta_tagx_valid                         0x0002
    #define   LSb32MTR_meta_tagx_valid                            22
    #define   LSb16MTR_meta_tagx_valid                            6
    #define       bMTR_meta_tagx_valid                         1
    #define   MSK32MTR_meta_tagx_valid                            0x00400000

    #define     BA_MTR_meta_tagx_pending                       0x0002
    #define     B16MTR_meta_tagx_pending                       0x0002
    #define   LSb32MTR_meta_tagx_pending                          23
    #define   LSb16MTR_meta_tagx_pending                          7
    #define       bMTR_meta_tagx_pending                       1
    #define   MSK32MTR_meta_tagx_pending                          0x00800000

    #define     BA_MTR_meta_tagx_ts                            0x0003
    #define     B16MTR_meta_tagx_ts                            0x0002
    #define   LSb32MTR_meta_tagx_ts                               24
    #define   LSb16MTR_meta_tagx_ts                               8
    #define       bMTR_meta_tagx_ts                            1
    #define   MSK32MTR_meta_tagx_ts                               0x01000000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MTR_meta_tagx {
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_meta_tagx_x(r32)                        _BFGET_(r32, 3, 0)
    #define   SET32MTR_meta_tagx_x(r32,v)                      _BFSET_(r32, 3, 0,v)
    #define   GET16MTR_meta_tagx_x(r16)                        _BFGET_(r16, 3, 0)
    #define   SET16MTR_meta_tagx_x(r16,v)                      _BFSET_(r16, 3, 0,v)

    #define   GET32MTR_meta_tagx_y(r32)                        _BFGET_(r32,16, 4)
    #define   SET32MTR_meta_tagx_y(r32,v)                      _BFSET_(r32,16, 4,v)

    #define   GET32MTR_meta_tagx_uv(r32)                       _BFGET_(r32,17,17)
    #define   SET32MTR_meta_tagx_uv(r32,v)                     _BFSET_(r32,17,17,v)
    #define   GET16MTR_meta_tagx_uv(r16)                       _BFGET_(r16, 1, 1)
    #define   SET16MTR_meta_tagx_uv(r16,v)                     _BFSET_(r16, 1, 1,v)

    #define   GET32MTR_meta_tagx_bid(r32)                      _BFGET_(r32,21,18)
    #define   SET32MTR_meta_tagx_bid(r32,v)                    _BFSET_(r32,21,18,v)
    #define   GET16MTR_meta_tagx_bid(r16)                      _BFGET_(r16, 5, 2)
    #define   SET16MTR_meta_tagx_bid(r16,v)                    _BFSET_(r16, 5, 2,v)

    #define   GET32MTR_meta_tagx_valid(r32)                    _BFGET_(r32,22,22)
    #define   SET32MTR_meta_tagx_valid(r32,v)                  _BFSET_(r32,22,22,v)
    #define   GET16MTR_meta_tagx_valid(r16)                    _BFGET_(r16, 6, 6)
    #define   SET16MTR_meta_tagx_valid(r16,v)                  _BFSET_(r16, 6, 6,v)

    #define   GET32MTR_meta_tagx_pending(r32)                  _BFGET_(r32,23,23)
    #define   SET32MTR_meta_tagx_pending(r32,v)                _BFSET_(r32,23,23,v)
    #define   GET16MTR_meta_tagx_pending(r16)                  _BFGET_(r16, 7, 7)
    #define   SET16MTR_meta_tagx_pending(r16,v)                _BFSET_(r16, 7, 7,v)

    #define   GET32MTR_meta_tagx_ts(r32)                       _BFGET_(r32,24,24)
    #define   SET32MTR_meta_tagx_ts(r32,v)                     _BFSET_(r32,24,24,v)
    #define   GET16MTR_meta_tagx_ts(r16)                       _BFGET_(r16, 8, 8)
    #define   SET16MTR_meta_tagx_ts(r16,v)                     _BFSET_(r16, 8, 8,v)

            UNSG32 u_x                                         :  4;
            UNSG32 u_y                                         : 13;
            UNSG32 u_uv                                        :  1;
            UNSG32 u_bid                                       :  4;
            UNSG32 u_valid                                     :  1;
            UNSG32 u_pending                                   :  1;
            UNSG32 u_ts                                        :  1;
            UNSG32 RSVDx0_b25                                  :  7;
    ///////////////////////////////////////////////////////////
    } SIE_MTR_meta_tagx;

    ///////////////////////////////////////////////////////////
     SIGN32 MTR_meta_tagx_drvrd(SIE_MTR_meta_tagx *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MTR_meta_tagx_drvwr(SIE_MTR_meta_tagx *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MTR_meta_tagx_reset(SIE_MTR_meta_tagx *p);
     SIGN32 MTR_meta_tagx_cmp  (SIE_MTR_meta_tagx *p, SIE_MTR_meta_tagx *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MTR_meta_tagx_check(p,pie,pfx,hLOG) MTR_meta_tagx_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MTR_meta_tagx_print(p,    pfx,hLOG) MTR_meta_tagx_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MTR_meta_tagx
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MTR_meta_addr           biu              (4,4)
///     ###
///     * MTR read agent meta data read address
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 MTR_header           (P)
///     # 0x00000 MTR_header           
///               $MTR_header          MTR_header        REG          
///     @ 0x0000C user                 (P)
///               %unsigned 24 dat                       0x0
///               %%        8          # Stuffing bits...
///     @ 0x00010 pos                  (P)
///               %unsigned 18 x                         0x0
///               %unsigned 14 y                         0x0
///     @ 0x00014 base                 (P)
///               %unsigned 32 addr                      0x0
///     @ 0x00018 mosaic               (P)
///               %unsigned 32 addr                      0x0
///     @ 0x0001C id                   (P)
///               %unsigned 1  ts                        
///                                    ###
///                                    * NOT used
///                                    ###
///               %unsigned 1  uv                        0x0
///                                    ###
///                                    * Luma (0) or Chroma (1)
///                                    ###
///               %unsigned 4  bid                       0x0
///                                    ###
///                                    * buffer ID
///                                    * End of MTR_meta_addr
///                                    ###
///               %%        26         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      32B, bits:     195b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MTR_meta_addr
#define h_MTR_meta_addr (){}

    #define     RA_MTR_meta_addr_MTR_header                    0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_meta_addr_user                          0x000C

    #define     BA_MTR_meta_addr_user_dat                      0x000C
    #define     B16MTR_meta_addr_user_dat                      0x000C
    #define   LSb32MTR_meta_addr_user_dat                         0
    #define   LSb16MTR_meta_addr_user_dat                         0
    #define       bMTR_meta_addr_user_dat                      24
    #define   MSK32MTR_meta_addr_user_dat                         0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_meta_addr_pos                           0x0010

    #define     BA_MTR_meta_addr_pos_x                         0x0010
    #define     B16MTR_meta_addr_pos_x                         0x0010
    #define   LSb32MTR_meta_addr_pos_x                            0
    #define   LSb16MTR_meta_addr_pos_x                            0
    #define       bMTR_meta_addr_pos_x                         18
    #define   MSK32MTR_meta_addr_pos_x                            0x0003FFFF

    #define     BA_MTR_meta_addr_pos_y                         0x0012
    #define     B16MTR_meta_addr_pos_y                         0x0012
    #define   LSb32MTR_meta_addr_pos_y                            18
    #define   LSb16MTR_meta_addr_pos_y                            2
    #define       bMTR_meta_addr_pos_y                         14
    #define   MSK32MTR_meta_addr_pos_y                            0xFFFC0000
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_meta_addr_base                          0x0014

    #define     BA_MTR_meta_addr_base_addr                     0x0014
    #define     B16MTR_meta_addr_base_addr                     0x0014
    #define   LSb32MTR_meta_addr_base_addr                        0
    #define   LSb16MTR_meta_addr_base_addr                        0
    #define       bMTR_meta_addr_base_addr                     32
    #define   MSK32MTR_meta_addr_base_addr                        0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_meta_addr_mosaic                        0x0018

    #define     BA_MTR_meta_addr_mosaic_addr                   0x0018
    #define     B16MTR_meta_addr_mosaic_addr                   0x0018
    #define   LSb32MTR_meta_addr_mosaic_addr                      0
    #define   LSb16MTR_meta_addr_mosaic_addr                      0
    #define       bMTR_meta_addr_mosaic_addr                   32
    #define   MSK32MTR_meta_addr_mosaic_addr                      0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_meta_addr_id                            0x001C

    #define     BA_MTR_meta_addr_id_ts                         0x001C
    #define     B16MTR_meta_addr_id_ts                         0x001C
    #define   LSb32MTR_meta_addr_id_ts                            0
    #define   LSb16MTR_meta_addr_id_ts                            0
    #define       bMTR_meta_addr_id_ts                         1
    #define   MSK32MTR_meta_addr_id_ts                            0x00000001

    #define     BA_MTR_meta_addr_id_uv                         0x001C
    #define     B16MTR_meta_addr_id_uv                         0x001C
    #define   LSb32MTR_meta_addr_id_uv                            1
    #define   LSb16MTR_meta_addr_id_uv                            1
    #define       bMTR_meta_addr_id_uv                         1
    #define   MSK32MTR_meta_addr_id_uv                            0x00000002

    #define     BA_MTR_meta_addr_id_bid                        0x001C
    #define     B16MTR_meta_addr_id_bid                        0x001C
    #define   LSb32MTR_meta_addr_id_bid                           2
    #define   LSb16MTR_meta_addr_id_bid                           2
    #define       bMTR_meta_addr_id_bid                        4
    #define   MSK32MTR_meta_addr_id_bid                           0x0000003C
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MTR_meta_addr {
    ///////////////////////////////////////////////////////////
              SIE_MTR_header                                   ie_MTR_header;
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_meta_addr_user_dat(r32)                 _BFGET_(r32,23, 0)
    #define   SET32MTR_meta_addr_user_dat(r32,v)               _BFSET_(r32,23, 0,v)

    #define     w32MTR_meta_addr_user                          {\
            UNSG32 uuser_dat                                   : 24;\
            UNSG32 RSVDxC_b24                                  :  8;\
          }
    union { UNSG32 u32MTR_meta_addr_user;
            struct w32MTR_meta_addr_user;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_meta_addr_pos_x(r32)                    _BFGET_(r32,17, 0)
    #define   SET32MTR_meta_addr_pos_x(r32,v)                  _BFSET_(r32,17, 0,v)

    #define   GET32MTR_meta_addr_pos_y(r32)                    _BFGET_(r32,31,18)
    #define   SET32MTR_meta_addr_pos_y(r32,v)                  _BFSET_(r32,31,18,v)
    #define   GET16MTR_meta_addr_pos_y(r16)                    _BFGET_(r16,15, 2)
    #define   SET16MTR_meta_addr_pos_y(r16,v)                  _BFSET_(r16,15, 2,v)

    #define     w32MTR_meta_addr_pos                           {\
            UNSG32 upos_x                                      : 18;\
            UNSG32 upos_y                                      : 14;\
          }
    union { UNSG32 u32MTR_meta_addr_pos;
            struct w32MTR_meta_addr_pos;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_meta_addr_base_addr(r32)                _BFGET_(r32,31, 0)
    #define   SET32MTR_meta_addr_base_addr(r32,v)              _BFSET_(r32,31, 0,v)

    #define     w32MTR_meta_addr_base                          {\
            UNSG32 ubase_addr                                  : 32;\
          }
    union { UNSG32 u32MTR_meta_addr_base;
            struct w32MTR_meta_addr_base;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_meta_addr_mosaic_addr(r32)              _BFGET_(r32,31, 0)
    #define   SET32MTR_meta_addr_mosaic_addr(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32MTR_meta_addr_mosaic                        {\
            UNSG32 umosaic_addr                                : 32;\
          }
    union { UNSG32 u32MTR_meta_addr_mosaic;
            struct w32MTR_meta_addr_mosaic;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_meta_addr_id_ts(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32MTR_meta_addr_id_ts(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16MTR_meta_addr_id_ts(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16MTR_meta_addr_id_ts(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32MTR_meta_addr_id_uv(r32)                    _BFGET_(r32, 1, 1)
    #define   SET32MTR_meta_addr_id_uv(r32,v)                  _BFSET_(r32, 1, 1,v)
    #define   GET16MTR_meta_addr_id_uv(r16)                    _BFGET_(r16, 1, 1)
    #define   SET16MTR_meta_addr_id_uv(r16,v)                  _BFSET_(r16, 1, 1,v)

    #define   GET32MTR_meta_addr_id_bid(r32)                   _BFGET_(r32, 5, 2)
    #define   SET32MTR_meta_addr_id_bid(r32,v)                 _BFSET_(r32, 5, 2,v)
    #define   GET16MTR_meta_addr_id_bid(r16)                   _BFGET_(r16, 5, 2)
    #define   SET16MTR_meta_addr_id_bid(r16,v)                 _BFSET_(r16, 5, 2,v)

    #define     w32MTR_meta_addr_id                            {\
            UNSG32 uid_ts                                      :  1;\
            UNSG32 uid_uv                                      :  1;\
            UNSG32 uid_bid                                     :  4;\
            UNSG32 RSVDx1C_b6                                  : 26;\
          }
    union { UNSG32 u32MTR_meta_addr_id;
            struct w32MTR_meta_addr_id;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MTR_meta_addr;

    typedef union  T32MTR_meta_addr_user
          { UNSG32 u32;
            struct w32MTR_meta_addr_user;
                 } T32MTR_meta_addr_user;
    typedef union  T32MTR_meta_addr_pos
          { UNSG32 u32;
            struct w32MTR_meta_addr_pos;
                 } T32MTR_meta_addr_pos;
    typedef union  T32MTR_meta_addr_base
          { UNSG32 u32;
            struct w32MTR_meta_addr_base;
                 } T32MTR_meta_addr_base;
    typedef union  T32MTR_meta_addr_mosaic
          { UNSG32 u32;
            struct w32MTR_meta_addr_mosaic;
                 } T32MTR_meta_addr_mosaic;
    typedef union  T32MTR_meta_addr_id
          { UNSG32 u32;
            struct w32MTR_meta_addr_id;
                 } T32MTR_meta_addr_id;
    ///////////////////////////////////////////////////////////

    typedef union  TMTR_meta_addr_user
          { UNSG32 u32[1];
            struct {
            struct w32MTR_meta_addr_user;
                   };
                 } TMTR_meta_addr_user;
    typedef union  TMTR_meta_addr_pos
          { UNSG32 u32[1];
            struct {
            struct w32MTR_meta_addr_pos;
                   };
                 } TMTR_meta_addr_pos;
    typedef union  TMTR_meta_addr_base
          { UNSG32 u32[1];
            struct {
            struct w32MTR_meta_addr_base;
                   };
                 } TMTR_meta_addr_base;
    typedef union  TMTR_meta_addr_mosaic
          { UNSG32 u32[1];
            struct {
            struct w32MTR_meta_addr_mosaic;
                   };
                 } TMTR_meta_addr_mosaic;
    typedef union  TMTR_meta_addr_id
          { UNSG32 u32[1];
            struct {
            struct w32MTR_meta_addr_id;
                   };
                 } TMTR_meta_addr_id;

    ///////////////////////////////////////////////////////////
     SIGN32 MTR_meta_addr_drvrd(SIE_MTR_meta_addr *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MTR_meta_addr_drvwr(SIE_MTR_meta_addr *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MTR_meta_addr_reset(SIE_MTR_meta_addr *p);
     SIGN32 MTR_meta_addr_cmp  (SIE_MTR_meta_addr *p, SIE_MTR_meta_addr *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MTR_meta_addr_check(p,pie,pfx,hLOG) MTR_meta_addr_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MTR_meta_addr_print(p,    pfx,hLOG) MTR_meta_addr_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MTR_meta_addr
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MTRR_frame              biu              (4,4)
///     ###
///     * MTR read agent frame buffer descriptor include frame buffer base and stride
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 stride               (P)
///               %unsigned 26 val                       0x0
///                                    ###
///                                    * Stride for frame buffer, in 64Byte unit.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00004 base                 (P)
///               %unsigned 22 val                       0x0
///                                    ###
///                                    * Base address for frame buffer, in the unit of 1KB.
///                                    * End of MTRR_frame
///                                    ###
///               %%        10         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:      48b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MTRR_frame
#define h_MTRR_frame (){}

    #define     RA_MTRR_frame_stride                           0x0000

    #define     BA_MTRR_frame_stride_val                       0x0000
    #define     B16MTRR_frame_stride_val                       0x0000
    #define   LSb32MTRR_frame_stride_val                          0
    #define   LSb16MTRR_frame_stride_val                          0
    #define       bMTRR_frame_stride_val                       26
    #define   MSK32MTRR_frame_stride_val                          0x03FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MTRR_frame_base                             0x0004

    #define     BA_MTRR_frame_base_val                         0x0004
    #define     B16MTRR_frame_base_val                         0x0004
    #define   LSb32MTRR_frame_base_val                            0
    #define   LSb16MTRR_frame_base_val                            0
    #define       bMTRR_frame_base_val                         22
    #define   MSK32MTRR_frame_base_val                            0x003FFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MTRR_frame {
    ///////////////////////////////////////////////////////////
    #define   GET32MTRR_frame_stride_val(r32)                  _BFGET_(r32,25, 0)
    #define   SET32MTRR_frame_stride_val(r32,v)                _BFSET_(r32,25, 0,v)

    #define     w32MTRR_frame_stride                           {\
            UNSG32 ustride_val                                 : 26;\
            UNSG32 RSVDx0_b26                                  :  6;\
          }
    union { UNSG32 u32MTRR_frame_stride;
            struct w32MTRR_frame_stride;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTRR_frame_base_val(r32)                    _BFGET_(r32,21, 0)
    #define   SET32MTRR_frame_base_val(r32,v)                  _BFSET_(r32,21, 0,v)

    #define     w32MTRR_frame_base                             {\
            UNSG32 ubase_val                                   : 22;\
            UNSG32 RSVDx4_b22                                  : 10;\
          }
    union { UNSG32 u32MTRR_frame_base;
            struct w32MTRR_frame_base;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MTRR_frame;

    typedef union  T32MTRR_frame_stride
          { UNSG32 u32;
            struct w32MTRR_frame_stride;
                 } T32MTRR_frame_stride;
    typedef union  T32MTRR_frame_base
          { UNSG32 u32;
            struct w32MTRR_frame_base;
                 } T32MTRR_frame_base;
    ///////////////////////////////////////////////////////////

    typedef union  TMTRR_frame_stride
          { UNSG32 u32[1];
            struct {
            struct w32MTRR_frame_stride;
                   };
                 } TMTRR_frame_stride;
    typedef union  TMTRR_frame_base
          { UNSG32 u32[1];
            struct {
            struct w32MTRR_frame_base;
                   };
                 } TMTRR_frame_base;

    ///////////////////////////////////////////////////////////
     SIGN32 MTRR_frame_drvrd(SIE_MTRR_frame *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MTRR_frame_drvwr(SIE_MTRR_frame *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MTRR_frame_reset(SIE_MTRR_frame *p);
     SIGN32 MTRR_frame_cmp  (SIE_MTRR_frame *p, SIE_MTRR_frame *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MTRR_frame_check(p,pie,pfx,hLOG) MTRR_frame_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MTRR_frame_print(p,    pfx,hLOG) MTRR_frame_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MTRR_frame
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MTR_R_HDR               biu              (4,4)
///     ###
///     * MTR read agent frame buffer descriptor
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 meta                 (P)
///               %unsigned 22 base                      0x0
///                                    ###
///                                    * Base address, should be aligned to 4KB, i.e. base[1:0] should be 0. Unit: 1KB, it's the , meta data base
///                                    ###
///               %unsigned 1  ts                        0x0
///                                    ###
///                                    * NOT used
///                                    ###
///               %unsigned 1  valid                     0x0
///                                    ###
///                                    * valid (1) or invalid (0).
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00004 header               (P)
///     # 0x00004 MTR_header           
///               $MTR_header          MTR_header        REG          
///     @ 0x00010 mosaic               (P)
///               %unsigned 22 base                      0x0
///                                    ###
///                                    * End of MTR_R_HDR
///                                    ###
///               %%        10         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      20B, bits:     115b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MTR_R_HDR
#define h_MTR_R_HDR (){}

    #define     RA_MTR_R_HDR_meta                              0x0000

    #define     BA_MTR_R_HDR_meta_base                         0x0000
    #define     B16MTR_R_HDR_meta_base                         0x0000
    #define   LSb32MTR_R_HDR_meta_base                            0
    #define   LSb16MTR_R_HDR_meta_base                            0
    #define       bMTR_R_HDR_meta_base                         22
    #define   MSK32MTR_R_HDR_meta_base                            0x003FFFFF

    #define     BA_MTR_R_HDR_meta_ts                           0x0002
    #define     B16MTR_R_HDR_meta_ts                           0x0002
    #define   LSb32MTR_R_HDR_meta_ts                              22
    #define   LSb16MTR_R_HDR_meta_ts                              6
    #define       bMTR_R_HDR_meta_ts                           1
    #define   MSK32MTR_R_HDR_meta_ts                              0x00400000

    #define     BA_MTR_R_HDR_meta_valid                        0x0002
    #define     B16MTR_R_HDR_meta_valid                        0x0002
    #define   LSb32MTR_R_HDR_meta_valid                           23
    #define   LSb16MTR_R_HDR_meta_valid                           7
    #define       bMTR_R_HDR_meta_valid                        1
    #define   MSK32MTR_R_HDR_meta_valid                           0x00800000
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_R_HDR_header                            0x0004
    #define     RA_MTR_R_HDR_MTR_header                        0x0004
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_R_HDR_mosaic                            0x0010

    #define     BA_MTR_R_HDR_mosaic_base                       0x0010
    #define     B16MTR_R_HDR_mosaic_base                       0x0010
    #define   LSb32MTR_R_HDR_mosaic_base                          0
    #define   LSb16MTR_R_HDR_mosaic_base                          0
    #define       bMTR_R_HDR_mosaic_base                       22
    #define   MSK32MTR_R_HDR_mosaic_base                          0x003FFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MTR_R_HDR {
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_R_HDR_meta_base(r32)                    _BFGET_(r32,21, 0)
    #define   SET32MTR_R_HDR_meta_base(r32,v)                  _BFSET_(r32,21, 0,v)

    #define   GET32MTR_R_HDR_meta_ts(r32)                      _BFGET_(r32,22,22)
    #define   SET32MTR_R_HDR_meta_ts(r32,v)                    _BFSET_(r32,22,22,v)
    #define   GET16MTR_R_HDR_meta_ts(r16)                      _BFGET_(r16, 6, 6)
    #define   SET16MTR_R_HDR_meta_ts(r16,v)                    _BFSET_(r16, 6, 6,v)

    #define   GET32MTR_R_HDR_meta_valid(r32)                   _BFGET_(r32,23,23)
    #define   SET32MTR_R_HDR_meta_valid(r32,v)                 _BFSET_(r32,23,23,v)
    #define   GET16MTR_R_HDR_meta_valid(r16)                   _BFGET_(r16, 7, 7)
    #define   SET16MTR_R_HDR_meta_valid(r16,v)                 _BFSET_(r16, 7, 7,v)

    #define     w32MTR_R_HDR_meta                              {\
            UNSG32 umeta_base                                  : 22;\
            UNSG32 umeta_ts                                    :  1;\
            UNSG32 umeta_valid                                 :  1;\
            UNSG32 RSVDx0_b24                                  :  8;\
          }
    union { UNSG32 u32MTR_R_HDR_meta;
            struct w32MTR_R_HDR_meta;
          };
    ///////////////////////////////////////////////////////////
              SIE_MTR_header                                   ie_MTR_header;
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_R_HDR_mosaic_base(r32)                  _BFGET_(r32,21, 0)
    #define   SET32MTR_R_HDR_mosaic_base(r32,v)                _BFSET_(r32,21, 0,v)

    #define     w32MTR_R_HDR_mosaic                            {\
            UNSG32 umosaic_base                                : 22;\
            UNSG32 RSVDx10_b22                                 : 10;\
          }
    union { UNSG32 u32MTR_R_HDR_mosaic;
            struct w32MTR_R_HDR_mosaic;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MTR_R_HDR;

    typedef union  T32MTR_R_HDR_meta
          { UNSG32 u32;
            struct w32MTR_R_HDR_meta;
                 } T32MTR_R_HDR_meta;
    typedef union  T32MTR_R_HDR_mosaic
          { UNSG32 u32;
            struct w32MTR_R_HDR_mosaic;
                 } T32MTR_R_HDR_mosaic;
    ///////////////////////////////////////////////////////////

    typedef union  TMTR_R_HDR_meta
          { UNSG32 u32[1];
            struct {
            struct w32MTR_R_HDR_meta;
                   };
                 } TMTR_R_HDR_meta;
    typedef union  TMTR_R_HDR_mosaic
          { UNSG32 u32[1];
            struct {
            struct w32MTR_R_HDR_mosaic;
                   };
                 } TMTR_R_HDR_mosaic;

    ///////////////////////////////////////////////////////////
     SIGN32 MTR_R_HDR_drvrd(SIE_MTR_R_HDR *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MTR_R_HDR_drvwr(SIE_MTR_R_HDR *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MTR_R_HDR_reset(SIE_MTR_R_HDR *p);
     SIGN32 MTR_R_HDR_cmp  (SIE_MTR_R_HDR *p, SIE_MTR_R_HDR *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MTR_R_HDR_check(p,pie,pfx,hLOG) MTR_R_HDR_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MTR_R_HDR_print(p,    pfx,hLOG) MTR_R_HDR_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MTR_R_HDR
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE META_TAG                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 word                 
///               $MTR_meta_tag        word              REG      [64]
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     256B, bits:    1600b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_META_TAG
#define h_META_TAG (){}

    #define     RA_META_TAG_word                               0x0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_META_TAG {
    ///////////////////////////////////////////////////////////
              SIE_MTR_meta_tag                                 ie_word[64];
    ///////////////////////////////////////////////////////////
    } SIE_META_TAG;

    ///////////////////////////////////////////////////////////
     SIGN32 META_TAG_drvrd(SIE_META_TAG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 META_TAG_drvwr(SIE_META_TAG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void META_TAG_reset(SIE_META_TAG *p);
     SIGN32 META_TAG_cmp  (SIE_META_TAG *p, SIE_META_TAG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define META_TAG_check(p,pie,pfx,hLOG) META_TAG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define META_TAG_print(p,    pfx,hLOG) META_TAG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: META_TAG
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MTRR_CFG                biu              (4,4)
///     ###
///     * MTR frame buffer header for MTR-R.
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 cfg                  (P)
///               %unsigned 4  stride                    0x0
///                                    : 64B                       0x0
///                                    : 128B                      0x1
///                                    : 256B                      0x2
///                                    : 512B                      0x3
///                                    : 1024B                     0x4
///                                    : 2048B                     0x5
///                                    : 4096B                     0x6
///                                    : 8192B                     0x7
///                                    : 16384B                    0x8
///                                                 ###
///                                                 * Meta data stride. For luma, picture width (in bytes) should be less than or equal to 2^(10+meta.stride).
///                                                 ###
///               %unsigned 4  format                    0x0
///                                    : V16H16V1                  0x0
///                                    : V8H16V2                   0x1
///                                    : V4H16V4                   0x2
///                                    : V8H32V1                   0x4
///                                    : V4H32V2                   0x5
///                                    : V2H32V4                   0x6
///                                    : V1H32V2                   0x8
///                                    : V1H16V4                   0x9
///                                    : V1H8V8                    0xA
///                                    : V1H4V16                   0xB
///                                    : V1H64V1                   0xC
///                                                 ###
///                                                 * First 3 (format0~2) meta format is tile-based format for luma, meta packet size is 64x1024.
///                                                 * Format4~6 is tile-based format for chroma, meta packet size is 32x2048.
///                                                 * The last four meta format is for raster-scan based format.
///                                                 ###
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * Set 1 to enable MTR-R de-compression engine for this thread.
///                                    ###
///               %unsigned 5  mode                      0x0
///                                    ###
///                                    * E_MTR.mode
///                                    ###
///               %unsigned 1  prefetch_disable          0x0
///                                    ###
///                                    * Set to 1 to disable meta data prefetch
///                                    * Note that mosaic frames will enable prefetch un-conditionally.
///                                    ###
///               %unsigned 5  cbase                     0x0
///                                    ###
///                                    * Meta cache TAG base address for this thread in 64B
///                                    ###
///               %unsigned 3  cways                     0x7
///                                    ###
///                                    * Meta cache WAYs (Actual value shoud be 'ways'+1) for this thread in 64B. Note that each thread used the full-associative cache, thread ID is composed by {bid[3:0], uv[0]}.
///                                    ###
///               %unsigned 1  auto_tag_clr              0x0
///                                    ###
///                                    * Hardware will automatically clear meta cache tag for this thread when kick off
///                                    ###
///               %unsigned 2  mosaic_xnum               0x0
///                                    ###
///                                    * (mosaic_xnum+1): Number of mosaic pictures in one direction (Maximum 4) in y direction
///                                    ###
///               %unsigned 2  mosaic_ynum               0x0
///                                    ###
///                                    * (mosaic_ynum+1): Number of mosaic pictures in one direction (Maximum 4) in y direction
///                                    ###
///               %unsigned 1  weave                     0x0
///                                    ###
///                                    * 1: Weaved meta buffer – interleaved by meta packet's height.
///                                    * 0: Progressive.
///                                    ###
///               %unsigned 1  ctype                     0x0
///                                    ###
///                                    * Original defined as “byte” which is useless for now:
///                                    * 0: 1 meta data occupies 2-bits in dram.
///                                    * 1: 1 meta data occupies 1-byte in dram.
///                                    * Note that for byte=1, we only support ARGB mode for now.
///                                    * Please refer to the “ctype” definition in $MTR_header.
///                                    * Default is 0: cache line is 64B.
///                                    * Right now, only VxG version support 32B cache line, AVIO/ISP version should be only configured as 64B cache line.
///                                    ###
///               %unsigned 1  hflip                     0x0
///                                    ###
///                                    * Flip in horizontal direction
///                                    ###
///               %unsigned 1  vflip                     0x0
///                                    ###
///                                    * Flip in vertical direction
///                                    ###
///     @ 0x00004 base                 (P)
///               %unsigned 20 addr                      0x0
///                                    ###
///                                    * Meta buffer base address in the unit of 4KB.
///                                    * End of MTRR_CFGs
///                                    ###
///               %%        12         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:      52b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MTRR_CFG
#define h_MTRR_CFG (){}

    #define     RA_MTRR_CFG_cfg                                0x0000

    #define     BA_MTRR_CFG_cfg_stride                         0x0000
    #define     B16MTRR_CFG_cfg_stride                         0x0000
    #define   LSb32MTRR_CFG_cfg_stride                            0
    #define   LSb16MTRR_CFG_cfg_stride                            0
    #define       bMTRR_CFG_cfg_stride                         4
    #define   MSK32MTRR_CFG_cfg_stride                            0x0000000F
    #define        MTRR_CFG_cfg_stride_64B                                  0x0
    #define        MTRR_CFG_cfg_stride_128B                                 0x1
    #define        MTRR_CFG_cfg_stride_256B                                 0x2
    #define        MTRR_CFG_cfg_stride_512B                                 0x3
    #define        MTRR_CFG_cfg_stride_1024B                                0x4
    #define        MTRR_CFG_cfg_stride_2048B                                0x5
    #define        MTRR_CFG_cfg_stride_4096B                                0x6
    #define        MTRR_CFG_cfg_stride_8192B                                0x7
    #define        MTRR_CFG_cfg_stride_16384B                               0x8

    #define     BA_MTRR_CFG_cfg_format                         0x0000
    #define     B16MTRR_CFG_cfg_format                         0x0000
    #define   LSb32MTRR_CFG_cfg_format                            4
    #define   LSb16MTRR_CFG_cfg_format                            4
    #define       bMTRR_CFG_cfg_format                         4
    #define   MSK32MTRR_CFG_cfg_format                            0x000000F0
    #define        MTRR_CFG_cfg_format_V16H16V1                             0x0
    #define        MTRR_CFG_cfg_format_V8H16V2                              0x1
    #define        MTRR_CFG_cfg_format_V4H16V4                              0x2
    #define        MTRR_CFG_cfg_format_V8H32V1                              0x4
    #define        MTRR_CFG_cfg_format_V4H32V2                              0x5
    #define        MTRR_CFG_cfg_format_V2H32V4                              0x6
    #define        MTRR_CFG_cfg_format_V1H32V2                              0x8
    #define        MTRR_CFG_cfg_format_V1H16V4                              0x9
    #define        MTRR_CFG_cfg_format_V1H8V8                               0xA
    #define        MTRR_CFG_cfg_format_V1H4V16                              0xB
    #define        MTRR_CFG_cfg_format_V1H64V1                              0xC

    #define     BA_MTRR_CFG_cfg_enable                         0x0001
    #define     B16MTRR_CFG_cfg_enable                         0x0000
    #define   LSb32MTRR_CFG_cfg_enable                            8
    #define   LSb16MTRR_CFG_cfg_enable                            8
    #define       bMTRR_CFG_cfg_enable                         1
    #define   MSK32MTRR_CFG_cfg_enable                            0x00000100

    #define     BA_MTRR_CFG_cfg_mode                           0x0001
    #define     B16MTRR_CFG_cfg_mode                           0x0000
    #define   LSb32MTRR_CFG_cfg_mode                              9
    #define   LSb16MTRR_CFG_cfg_mode                              9
    #define       bMTRR_CFG_cfg_mode                           5
    #define   MSK32MTRR_CFG_cfg_mode                              0x00003E00

    #define     BA_MTRR_CFG_cfg_prefetch_disable               0x0001
    #define     B16MTRR_CFG_cfg_prefetch_disable               0x0000
    #define   LSb32MTRR_CFG_cfg_prefetch_disable                  14
    #define   LSb16MTRR_CFG_cfg_prefetch_disable                  14
    #define       bMTRR_CFG_cfg_prefetch_disable               1
    #define   MSK32MTRR_CFG_cfg_prefetch_disable                  0x00004000

    #define     BA_MTRR_CFG_cfg_cbase                          0x0001
    #define     B16MTRR_CFG_cfg_cbase                          0x0000
    #define   LSb32MTRR_CFG_cfg_cbase                             15
    #define   LSb16MTRR_CFG_cfg_cbase                             15
    #define       bMTRR_CFG_cfg_cbase                          5
    #define   MSK32MTRR_CFG_cfg_cbase                             0x000F8000

    #define     BA_MTRR_CFG_cfg_cways                          0x0002
    #define     B16MTRR_CFG_cfg_cways                          0x0002
    #define   LSb32MTRR_CFG_cfg_cways                             20
    #define   LSb16MTRR_CFG_cfg_cways                             4
    #define       bMTRR_CFG_cfg_cways                          3
    #define   MSK32MTRR_CFG_cfg_cways                             0x00700000

    #define     BA_MTRR_CFG_cfg_auto_tag_clr                   0x0002
    #define     B16MTRR_CFG_cfg_auto_tag_clr                   0x0002
    #define   LSb32MTRR_CFG_cfg_auto_tag_clr                      23
    #define   LSb16MTRR_CFG_cfg_auto_tag_clr                      7
    #define       bMTRR_CFG_cfg_auto_tag_clr                   1
    #define   MSK32MTRR_CFG_cfg_auto_tag_clr                      0x00800000

    #define     BA_MTRR_CFG_cfg_mosaic_xnum                    0x0003
    #define     B16MTRR_CFG_cfg_mosaic_xnum                    0x0002
    #define   LSb32MTRR_CFG_cfg_mosaic_xnum                       24
    #define   LSb16MTRR_CFG_cfg_mosaic_xnum                       8
    #define       bMTRR_CFG_cfg_mosaic_xnum                    2
    #define   MSK32MTRR_CFG_cfg_mosaic_xnum                       0x03000000

    #define     BA_MTRR_CFG_cfg_mosaic_ynum                    0x0003
    #define     B16MTRR_CFG_cfg_mosaic_ynum                    0x0002
    #define   LSb32MTRR_CFG_cfg_mosaic_ynum                       26
    #define   LSb16MTRR_CFG_cfg_mosaic_ynum                       10
    #define       bMTRR_CFG_cfg_mosaic_ynum                    2
    #define   MSK32MTRR_CFG_cfg_mosaic_ynum                       0x0C000000

    #define     BA_MTRR_CFG_cfg_weave                          0x0003
    #define     B16MTRR_CFG_cfg_weave                          0x0002
    #define   LSb32MTRR_CFG_cfg_weave                             28
    #define   LSb16MTRR_CFG_cfg_weave                             12
    #define       bMTRR_CFG_cfg_weave                          1
    #define   MSK32MTRR_CFG_cfg_weave                             0x10000000

    #define     BA_MTRR_CFG_cfg_ctype                          0x0003
    #define     B16MTRR_CFG_cfg_ctype                          0x0002
    #define   LSb32MTRR_CFG_cfg_ctype                             29
    #define   LSb16MTRR_CFG_cfg_ctype                             13
    #define       bMTRR_CFG_cfg_ctype                          1
    #define   MSK32MTRR_CFG_cfg_ctype                             0x20000000

    #define     BA_MTRR_CFG_cfg_hflip                          0x0003
    #define     B16MTRR_CFG_cfg_hflip                          0x0002
    #define   LSb32MTRR_CFG_cfg_hflip                             30
    #define   LSb16MTRR_CFG_cfg_hflip                             14
    #define       bMTRR_CFG_cfg_hflip                          1
    #define   MSK32MTRR_CFG_cfg_hflip                             0x40000000

    #define     BA_MTRR_CFG_cfg_vflip                          0x0003
    #define     B16MTRR_CFG_cfg_vflip                          0x0002
    #define   LSb32MTRR_CFG_cfg_vflip                             31
    #define   LSb16MTRR_CFG_cfg_vflip                             15
    #define       bMTRR_CFG_cfg_vflip                          1
    #define   MSK32MTRR_CFG_cfg_vflip                             0x80000000
    ///////////////////////////////////////////////////////////
    #define     RA_MTRR_CFG_base                               0x0004

    #define     BA_MTRR_CFG_base_addr                          0x0004
    #define     B16MTRR_CFG_base_addr                          0x0004
    #define   LSb32MTRR_CFG_base_addr                             0
    #define   LSb16MTRR_CFG_base_addr                             0
    #define       bMTRR_CFG_base_addr                          20
    #define   MSK32MTRR_CFG_base_addr                             0x000FFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MTRR_CFG {
    ///////////////////////////////////////////////////////////
    #define   GET32MTRR_CFG_cfg_stride(r32)                    _BFGET_(r32, 3, 0)
    #define   SET32MTRR_CFG_cfg_stride(r32,v)                  _BFSET_(r32, 3, 0,v)
    #define   GET16MTRR_CFG_cfg_stride(r16)                    _BFGET_(r16, 3, 0)
    #define   SET16MTRR_CFG_cfg_stride(r16,v)                  _BFSET_(r16, 3, 0,v)

    #define   GET32MTRR_CFG_cfg_format(r32)                    _BFGET_(r32, 7, 4)
    #define   SET32MTRR_CFG_cfg_format(r32,v)                  _BFSET_(r32, 7, 4,v)
    #define   GET16MTRR_CFG_cfg_format(r16)                    _BFGET_(r16, 7, 4)
    #define   SET16MTRR_CFG_cfg_format(r16,v)                  _BFSET_(r16, 7, 4,v)

    #define   GET32MTRR_CFG_cfg_enable(r32)                    _BFGET_(r32, 8, 8)
    #define   SET32MTRR_CFG_cfg_enable(r32,v)                  _BFSET_(r32, 8, 8,v)
    #define   GET16MTRR_CFG_cfg_enable(r16)                    _BFGET_(r16, 8, 8)
    #define   SET16MTRR_CFG_cfg_enable(r16,v)                  _BFSET_(r16, 8, 8,v)

    #define   GET32MTRR_CFG_cfg_mode(r32)                      _BFGET_(r32,13, 9)
    #define   SET32MTRR_CFG_cfg_mode(r32,v)                    _BFSET_(r32,13, 9,v)
    #define   GET16MTRR_CFG_cfg_mode(r16)                      _BFGET_(r16,13, 9)
    #define   SET16MTRR_CFG_cfg_mode(r16,v)                    _BFSET_(r16,13, 9,v)

    #define   GET32MTRR_CFG_cfg_prefetch_disable(r32)          _BFGET_(r32,14,14)
    #define   SET32MTRR_CFG_cfg_prefetch_disable(r32,v)        _BFSET_(r32,14,14,v)
    #define   GET16MTRR_CFG_cfg_prefetch_disable(r16)          _BFGET_(r16,14,14)
    #define   SET16MTRR_CFG_cfg_prefetch_disable(r16,v)        _BFSET_(r16,14,14,v)

    #define   GET32MTRR_CFG_cfg_cbase(r32)                     _BFGET_(r32,19,15)
    #define   SET32MTRR_CFG_cfg_cbase(r32,v)                   _BFSET_(r32,19,15,v)

    #define   GET32MTRR_CFG_cfg_cways(r32)                     _BFGET_(r32,22,20)
    #define   SET32MTRR_CFG_cfg_cways(r32,v)                   _BFSET_(r32,22,20,v)
    #define   GET16MTRR_CFG_cfg_cways(r16)                     _BFGET_(r16, 6, 4)
    #define   SET16MTRR_CFG_cfg_cways(r16,v)                   _BFSET_(r16, 6, 4,v)

    #define   GET32MTRR_CFG_cfg_auto_tag_clr(r32)              _BFGET_(r32,23,23)
    #define   SET32MTRR_CFG_cfg_auto_tag_clr(r32,v)            _BFSET_(r32,23,23,v)
    #define   GET16MTRR_CFG_cfg_auto_tag_clr(r16)              _BFGET_(r16, 7, 7)
    #define   SET16MTRR_CFG_cfg_auto_tag_clr(r16,v)            _BFSET_(r16, 7, 7,v)

    #define   GET32MTRR_CFG_cfg_mosaic_xnum(r32)               _BFGET_(r32,25,24)
    #define   SET32MTRR_CFG_cfg_mosaic_xnum(r32,v)             _BFSET_(r32,25,24,v)
    #define   GET16MTRR_CFG_cfg_mosaic_xnum(r16)               _BFGET_(r16, 9, 8)
    #define   SET16MTRR_CFG_cfg_mosaic_xnum(r16,v)             _BFSET_(r16, 9, 8,v)

    #define   GET32MTRR_CFG_cfg_mosaic_ynum(r32)               _BFGET_(r32,27,26)
    #define   SET32MTRR_CFG_cfg_mosaic_ynum(r32,v)             _BFSET_(r32,27,26,v)
    #define   GET16MTRR_CFG_cfg_mosaic_ynum(r16)               _BFGET_(r16,11,10)
    #define   SET16MTRR_CFG_cfg_mosaic_ynum(r16,v)             _BFSET_(r16,11,10,v)

    #define   GET32MTRR_CFG_cfg_weave(r32)                     _BFGET_(r32,28,28)
    #define   SET32MTRR_CFG_cfg_weave(r32,v)                   _BFSET_(r32,28,28,v)
    #define   GET16MTRR_CFG_cfg_weave(r16)                     _BFGET_(r16,12,12)
    #define   SET16MTRR_CFG_cfg_weave(r16,v)                   _BFSET_(r16,12,12,v)

    #define   GET32MTRR_CFG_cfg_ctype(r32)                     _BFGET_(r32,29,29)
    #define   SET32MTRR_CFG_cfg_ctype(r32,v)                   _BFSET_(r32,29,29,v)
    #define   GET16MTRR_CFG_cfg_ctype(r16)                     _BFGET_(r16,13,13)
    #define   SET16MTRR_CFG_cfg_ctype(r16,v)                   _BFSET_(r16,13,13,v)

    #define   GET32MTRR_CFG_cfg_hflip(r32)                     _BFGET_(r32,30,30)
    #define   SET32MTRR_CFG_cfg_hflip(r32,v)                   _BFSET_(r32,30,30,v)
    #define   GET16MTRR_CFG_cfg_hflip(r16)                     _BFGET_(r16,14,14)
    #define   SET16MTRR_CFG_cfg_hflip(r16,v)                   _BFSET_(r16,14,14,v)

    #define   GET32MTRR_CFG_cfg_vflip(r32)                     _BFGET_(r32,31,31)
    #define   SET32MTRR_CFG_cfg_vflip(r32,v)                   _BFSET_(r32,31,31,v)
    #define   GET16MTRR_CFG_cfg_vflip(r16)                     _BFGET_(r16,15,15)
    #define   SET16MTRR_CFG_cfg_vflip(r16,v)                   _BFSET_(r16,15,15,v)

    #define     w32MTRR_CFG_cfg                                {\
            UNSG32 ucfg_stride                                 :  4;\
            UNSG32 ucfg_format                                 :  4;\
            UNSG32 ucfg_enable                                 :  1;\
            UNSG32 ucfg_mode                                   :  5;\
            UNSG32 ucfg_prefetch_disable                       :  1;\
            UNSG32 ucfg_cbase                                  :  5;\
            UNSG32 ucfg_cways                                  :  3;\
            UNSG32 ucfg_auto_tag_clr                           :  1;\
            UNSG32 ucfg_mosaic_xnum                            :  2;\
            UNSG32 ucfg_mosaic_ynum                            :  2;\
            UNSG32 ucfg_weave                                  :  1;\
            UNSG32 ucfg_ctype                                  :  1;\
            UNSG32 ucfg_hflip                                  :  1;\
            UNSG32 ucfg_vflip                                  :  1;\
          }
    union { UNSG32 u32MTRR_CFG_cfg;
            struct w32MTRR_CFG_cfg;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTRR_CFG_base_addr(r32)                     _BFGET_(r32,19, 0)
    #define   SET32MTRR_CFG_base_addr(r32,v)                   _BFSET_(r32,19, 0,v)

    #define     w32MTRR_CFG_base                               {\
            UNSG32 ubase_addr                                  : 20;\
            UNSG32 RSVDx4_b20                                  : 12;\
          }
    union { UNSG32 u32MTRR_CFG_base;
            struct w32MTRR_CFG_base;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MTRR_CFG;

    typedef union  T32MTRR_CFG_cfg
          { UNSG32 u32;
            struct w32MTRR_CFG_cfg;
                 } T32MTRR_CFG_cfg;
    typedef union  T32MTRR_CFG_base
          { UNSG32 u32;
            struct w32MTRR_CFG_base;
                 } T32MTRR_CFG_base;
    ///////////////////////////////////////////////////////////

    typedef union  TMTRR_CFG_cfg
          { UNSG32 u32[1];
            struct {
            struct w32MTRR_CFG_cfg;
                   };
                 } TMTRR_CFG_cfg;
    typedef union  TMTRR_CFG_base
          { UNSG32 u32[1];
            struct {
            struct w32MTRR_CFG_base;
                   };
                 } TMTRR_CFG_base;

    ///////////////////////////////////////////////////////////
     SIGN32 MTRR_CFG_drvrd(SIE_MTRR_CFG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MTRR_CFG_drvwr(SIE_MTRR_CFG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MTRR_CFG_reset(SIE_MTRR_CFG *p);
     SIGN32 MTRR_CFG_cmp  (SIE_MTRR_CFG *p, SIE_MTRR_CFG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MTRR_CFG_check(p,pie,pfx,hLOG) MTRR_CFG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MTRR_CFG_print(p,    pfx,hLOG) MTRR_CFG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MTRR_CFG
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MTRW_CFG                biu              (4,4)
///     ###
///     * MTR frame buffer header for MTR-W.
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 cfg                  (P)
///               %unsigned 4  stride                    0x0
///                                    : 64B                       0x0
///                                    : 128B                      0x1
///                                    : 256B                      0x2
///                                    : 512B                      0x3
///                                    : 1024B                     0x4
///                                    : 2048B                     0x5
///                                    : 4096B                     0x6
///                                    : 8192B                     0x7
///                                    : 16384B                    0x8
///                                                 ###
///                                                 * Meta data stride. For luma, picture width (in bytes) should be less than or equal to 2^(10+meta.stride).
///                                                 ###
///               %unsigned 4  format                    0x0
///                                    : V16H16V1                  0x0
///                                    : V8H16V2                   0x1
///                                    : V4H16V4                   0x2
///                                    : V8H32V1                   0x4
///                                    : V4H32V2                   0x5
///                                    : V2H32V4                   0x6
///                                    : V1H32V2                   0x8
///                                    : V1H16V4                   0x9
///                                    : V1H8V8                    0xA
///                                    : V1H4V16                   0xB
///                                    : V1H64V1                   0xC
///                                                 ###
///                                                 * First 3 (format0~2) meta format is tile-based format for luma, meta packet size is 64x1024.
///                                                 * Format4~6 is tile-based format for chroma, meta packet size is 32x2048.
///                                                 * The last four meta format is for raster-scan based format.
///                                                 ###
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * Set 1 to enable MTR-W compression engine for this thread.
///                                    ###
///               %unsigned 5  mode                      0x0
///                                    ###
///                                    * E_MTR.mode
///                                    ###
///               %unsigned 1  force_uncmpr              0x0
///                                    ###
///                                    * 1: All the pixel data are force uncompressed when output by MTR-W. Note that meta data should be forced to 0. This bit-field is only reserved for debug purpose when MTR-W is enabled.
///                                    * 0: normal mode.
///                                    ###
///               %unsigned 1  weave                     0x0
///                                    ###
///                                    * 1: Weaved meta buffer – interleaved by meta packet's height.
///                                    * 0: Progressive.
///                                    ###
///               %unsigned 1  rsvd_0                    0x0
///                                    ###
///                                    * Originally defined as “byte” which is useless for now:
///                                    * 0: 1 meta data occupies 2-bits in dram.
///                                    * 1: 1 meta data occupies 1-byte in dram.
///                                    * Note that for byte=1, we only support ARGB mode for now.
///                                    ###
///               %unsigned 1  hflip                     0x0
///                                    ###
///                                    * Flip in horizontal direction
///                                    ###
///               %unsigned 1  vflip                     0x0
///                                    ###
///                                    * Flip in vertical direction
///                                    ###
///               %%        13         # Stuffing bits...
///     @ 0x00004 base                 (P)
///               %unsigned 20 addr                      0x0
///                                    ###
///                                    * Meta buffer base address, in the unit of 4KB.
///                                    * End of MTRW_CFGs
///                                    ###
///               %%        12         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:      39b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MTRW_CFG
#define h_MTRW_CFG (){}

    #define     RA_MTRW_CFG_cfg                                0x0000

    #define     BA_MTRW_CFG_cfg_stride                         0x0000
    #define     B16MTRW_CFG_cfg_stride                         0x0000
    #define   LSb32MTRW_CFG_cfg_stride                            0
    #define   LSb16MTRW_CFG_cfg_stride                            0
    #define       bMTRW_CFG_cfg_stride                         4
    #define   MSK32MTRW_CFG_cfg_stride                            0x0000000F
    #define        MTRW_CFG_cfg_stride_64B                                  0x0
    #define        MTRW_CFG_cfg_stride_128B                                 0x1
    #define        MTRW_CFG_cfg_stride_256B                                 0x2
    #define        MTRW_CFG_cfg_stride_512B                                 0x3
    #define        MTRW_CFG_cfg_stride_1024B                                0x4
    #define        MTRW_CFG_cfg_stride_2048B                                0x5
    #define        MTRW_CFG_cfg_stride_4096B                                0x6
    #define        MTRW_CFG_cfg_stride_8192B                                0x7
    #define        MTRW_CFG_cfg_stride_16384B                               0x8

    #define     BA_MTRW_CFG_cfg_format                         0x0000
    #define     B16MTRW_CFG_cfg_format                         0x0000
    #define   LSb32MTRW_CFG_cfg_format                            4
    #define   LSb16MTRW_CFG_cfg_format                            4
    #define       bMTRW_CFG_cfg_format                         4
    #define   MSK32MTRW_CFG_cfg_format                            0x000000F0
    #define        MTRW_CFG_cfg_format_V16H16V1                             0x0
    #define        MTRW_CFG_cfg_format_V8H16V2                              0x1
    #define        MTRW_CFG_cfg_format_V4H16V4                              0x2
    #define        MTRW_CFG_cfg_format_V8H32V1                              0x4
    #define        MTRW_CFG_cfg_format_V4H32V2                              0x5
    #define        MTRW_CFG_cfg_format_V2H32V4                              0x6
    #define        MTRW_CFG_cfg_format_V1H32V2                              0x8
    #define        MTRW_CFG_cfg_format_V1H16V4                              0x9
    #define        MTRW_CFG_cfg_format_V1H8V8                               0xA
    #define        MTRW_CFG_cfg_format_V1H4V16                              0xB
    #define        MTRW_CFG_cfg_format_V1H64V1                              0xC

    #define     BA_MTRW_CFG_cfg_enable                         0x0001
    #define     B16MTRW_CFG_cfg_enable                         0x0000
    #define   LSb32MTRW_CFG_cfg_enable                            8
    #define   LSb16MTRW_CFG_cfg_enable                            8
    #define       bMTRW_CFG_cfg_enable                         1
    #define   MSK32MTRW_CFG_cfg_enable                            0x00000100

    #define     BA_MTRW_CFG_cfg_mode                           0x0001
    #define     B16MTRW_CFG_cfg_mode                           0x0000
    #define   LSb32MTRW_CFG_cfg_mode                              9
    #define   LSb16MTRW_CFG_cfg_mode                              9
    #define       bMTRW_CFG_cfg_mode                           5
    #define   MSK32MTRW_CFG_cfg_mode                              0x00003E00

    #define     BA_MTRW_CFG_cfg_force_uncmpr                   0x0001
    #define     B16MTRW_CFG_cfg_force_uncmpr                   0x0000
    #define   LSb32MTRW_CFG_cfg_force_uncmpr                      14
    #define   LSb16MTRW_CFG_cfg_force_uncmpr                      14
    #define       bMTRW_CFG_cfg_force_uncmpr                   1
    #define   MSK32MTRW_CFG_cfg_force_uncmpr                      0x00004000

    #define     BA_MTRW_CFG_cfg_weave                          0x0001
    #define     B16MTRW_CFG_cfg_weave                          0x0000
    #define   LSb32MTRW_CFG_cfg_weave                             15
    #define   LSb16MTRW_CFG_cfg_weave                             15
    #define       bMTRW_CFG_cfg_weave                          1
    #define   MSK32MTRW_CFG_cfg_weave                             0x00008000

    #define     BA_MTRW_CFG_cfg_rsvd_0                         0x0002
    #define     B16MTRW_CFG_cfg_rsvd_0                         0x0002
    #define   LSb32MTRW_CFG_cfg_rsvd_0                            16
    #define   LSb16MTRW_CFG_cfg_rsvd_0                            0
    #define       bMTRW_CFG_cfg_rsvd_0                         1
    #define   MSK32MTRW_CFG_cfg_rsvd_0                            0x00010000

    #define     BA_MTRW_CFG_cfg_hflip                          0x0002
    #define     B16MTRW_CFG_cfg_hflip                          0x0002
    #define   LSb32MTRW_CFG_cfg_hflip                             17
    #define   LSb16MTRW_CFG_cfg_hflip                             1
    #define       bMTRW_CFG_cfg_hflip                          1
    #define   MSK32MTRW_CFG_cfg_hflip                             0x00020000

    #define     BA_MTRW_CFG_cfg_vflip                          0x0002
    #define     B16MTRW_CFG_cfg_vflip                          0x0002
    #define   LSb32MTRW_CFG_cfg_vflip                             18
    #define   LSb16MTRW_CFG_cfg_vflip                             2
    #define       bMTRW_CFG_cfg_vflip                          1
    #define   MSK32MTRW_CFG_cfg_vflip                             0x00040000
    ///////////////////////////////////////////////////////////
    #define     RA_MTRW_CFG_base                               0x0004

    #define     BA_MTRW_CFG_base_addr                          0x0004
    #define     B16MTRW_CFG_base_addr                          0x0004
    #define   LSb32MTRW_CFG_base_addr                             0
    #define   LSb16MTRW_CFG_base_addr                             0
    #define       bMTRW_CFG_base_addr                          20
    #define   MSK32MTRW_CFG_base_addr                             0x000FFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MTRW_CFG {
    ///////////////////////////////////////////////////////////
    #define   GET32MTRW_CFG_cfg_stride(r32)                    _BFGET_(r32, 3, 0)
    #define   SET32MTRW_CFG_cfg_stride(r32,v)                  _BFSET_(r32, 3, 0,v)
    #define   GET16MTRW_CFG_cfg_stride(r16)                    _BFGET_(r16, 3, 0)
    #define   SET16MTRW_CFG_cfg_stride(r16,v)                  _BFSET_(r16, 3, 0,v)

    #define   GET32MTRW_CFG_cfg_format(r32)                    _BFGET_(r32, 7, 4)
    #define   SET32MTRW_CFG_cfg_format(r32,v)                  _BFSET_(r32, 7, 4,v)
    #define   GET16MTRW_CFG_cfg_format(r16)                    _BFGET_(r16, 7, 4)
    #define   SET16MTRW_CFG_cfg_format(r16,v)                  _BFSET_(r16, 7, 4,v)

    #define   GET32MTRW_CFG_cfg_enable(r32)                    _BFGET_(r32, 8, 8)
    #define   SET32MTRW_CFG_cfg_enable(r32,v)                  _BFSET_(r32, 8, 8,v)
    #define   GET16MTRW_CFG_cfg_enable(r16)                    _BFGET_(r16, 8, 8)
    #define   SET16MTRW_CFG_cfg_enable(r16,v)                  _BFSET_(r16, 8, 8,v)

    #define   GET32MTRW_CFG_cfg_mode(r32)                      _BFGET_(r32,13, 9)
    #define   SET32MTRW_CFG_cfg_mode(r32,v)                    _BFSET_(r32,13, 9,v)
    #define   GET16MTRW_CFG_cfg_mode(r16)                      _BFGET_(r16,13, 9)
    #define   SET16MTRW_CFG_cfg_mode(r16,v)                    _BFSET_(r16,13, 9,v)

    #define   GET32MTRW_CFG_cfg_force_uncmpr(r32)              _BFGET_(r32,14,14)
    #define   SET32MTRW_CFG_cfg_force_uncmpr(r32,v)            _BFSET_(r32,14,14,v)
    #define   GET16MTRW_CFG_cfg_force_uncmpr(r16)              _BFGET_(r16,14,14)
    #define   SET16MTRW_CFG_cfg_force_uncmpr(r16,v)            _BFSET_(r16,14,14,v)

    #define   GET32MTRW_CFG_cfg_weave(r32)                     _BFGET_(r32,15,15)
    #define   SET32MTRW_CFG_cfg_weave(r32,v)                   _BFSET_(r32,15,15,v)
    #define   GET16MTRW_CFG_cfg_weave(r16)                     _BFGET_(r16,15,15)
    #define   SET16MTRW_CFG_cfg_weave(r16,v)                   _BFSET_(r16,15,15,v)

    #define   GET32MTRW_CFG_cfg_rsvd_0(r32)                    _BFGET_(r32,16,16)
    #define   SET32MTRW_CFG_cfg_rsvd_0(r32,v)                  _BFSET_(r32,16,16,v)
    #define   GET16MTRW_CFG_cfg_rsvd_0(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16MTRW_CFG_cfg_rsvd_0(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32MTRW_CFG_cfg_hflip(r32)                     _BFGET_(r32,17,17)
    #define   SET32MTRW_CFG_cfg_hflip(r32,v)                   _BFSET_(r32,17,17,v)
    #define   GET16MTRW_CFG_cfg_hflip(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16MTRW_CFG_cfg_hflip(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define   GET32MTRW_CFG_cfg_vflip(r32)                     _BFGET_(r32,18,18)
    #define   SET32MTRW_CFG_cfg_vflip(r32,v)                   _BFSET_(r32,18,18,v)
    #define   GET16MTRW_CFG_cfg_vflip(r16)                     _BFGET_(r16, 2, 2)
    #define   SET16MTRW_CFG_cfg_vflip(r16,v)                   _BFSET_(r16, 2, 2,v)

    #define     w32MTRW_CFG_cfg                                {\
            UNSG32 ucfg_stride                                 :  4;\
            UNSG32 ucfg_format                                 :  4;\
            UNSG32 ucfg_enable                                 :  1;\
            UNSG32 ucfg_mode                                   :  5;\
            UNSG32 ucfg_force_uncmpr                           :  1;\
            UNSG32 ucfg_weave                                  :  1;\
            UNSG32 ucfg_rsvd_0                                 :  1;\
            UNSG32 ucfg_hflip                                  :  1;\
            UNSG32 ucfg_vflip                                  :  1;\
            UNSG32 RSVDx0_b19                                  : 13;\
          }
    union { UNSG32 u32MTRW_CFG_cfg;
            struct w32MTRW_CFG_cfg;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTRW_CFG_base_addr(r32)                     _BFGET_(r32,19, 0)
    #define   SET32MTRW_CFG_base_addr(r32,v)                   _BFSET_(r32,19, 0,v)

    #define     w32MTRW_CFG_base                               {\
            UNSG32 ubase_addr                                  : 20;\
            UNSG32 RSVDx4_b20                                  : 12;\
          }
    union { UNSG32 u32MTRW_CFG_base;
            struct w32MTRW_CFG_base;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MTRW_CFG;

    typedef union  T32MTRW_CFG_cfg
          { UNSG32 u32;
            struct w32MTRW_CFG_cfg;
                 } T32MTRW_CFG_cfg;
    typedef union  T32MTRW_CFG_base
          { UNSG32 u32;
            struct w32MTRW_CFG_base;
                 } T32MTRW_CFG_base;
    ///////////////////////////////////////////////////////////

    typedef union  TMTRW_CFG_cfg
          { UNSG32 u32[1];
            struct {
            struct w32MTRW_CFG_cfg;
                   };
                 } TMTRW_CFG_cfg;
    typedef union  TMTRW_CFG_base
          { UNSG32 u32[1];
            struct {
            struct w32MTRW_CFG_base;
                   };
                 } TMTRW_CFG_base;

    ///////////////////////////////////////////////////////////
     SIGN32 MTRW_CFG_drvrd(SIE_MTRW_CFG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MTRW_CFG_drvwr(SIE_MTRW_CFG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MTRW_CFG_reset(SIE_MTRW_CFG *p);
     SIGN32 MTRW_CFG_cmp  (SIE_MTRW_CFG *p, SIE_MTRW_CFG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MTRW_CFG_check(p,pie,pfx,hLOG) MTRW_CFG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MTRW_CFG_print(p,    pfx,hLOG) MTRW_CFG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MTRW_CFG
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MMU_vm_tag              biu              (4,4)
///     ###
///     * Cache tag for MMU virtual address to physical address mapping
///     * Cache line is 64Byte, page table entry is 4Byte, each cache line have 16 page entries.
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///               %unsigned 13 idx                       0x0
///                                    ###
///                                    * Page index to look-up the page table, the maximum size of frame buffer is up to 256MB:
///                                    * When page_sz=4kb,   idx=vir_adr[27:12]/16;
///                                    * When page_sz=64kb, idx=vir_adr[27:16]/16;
///                                    * When page_sz=1MB, idx=vir_adr[27:20]/16;
///                                    * When page_sz=2MB, idx=vir_adr[27:21]/16;
///                                    * Increase 1-bit to support 32B cache line, when cache line =32B, the idx should be generated as below:
///                                    * When page_sz=4kb,   idx=vir_adr[27:12]/8;
///                                    * When page_sz=64kb, idx=vir_adr[27:16]/8;
///                                    * When page_sz=1MB, idx=vir_adr[27:20]/8;
///                                    * When page_sz=2MB, idx=vir_adr[27:21]/8;
///                                    ###
///               %unsigned 1  uv                        0x0
///                                    ###
///                                    * Y buffer or UV buffer
///                                    ###
///               %unsigned 4  bid                       0x0
///                                    ###
///                                    * Buffer ID
///                                    ###
///               %unsigned 1  wt                        0x0
///                                    ###
///                                    * Write thread. Mainly used to share buffer ID between read thread and write thread.
///                                    * 5bit for thread ID is enough, and one extra bit will be used as bypass mode to bypass MMU from top-level.
///                                    ###
///               %unsigned 1  valid                     0x0
///                                    ###
///                                    * valid (1) or invalid.
///                                    ###
///               %unsigned 1  pending                   0x0
///                                    ###
///                                    * 1: Read command issued, waiting for data coming back
///                                    * End of MMU_vm_tag
///                                    ###
///               %%        11         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      21b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MMU_vm_tag
#define h_MMU_vm_tag (){}

    #define     BA_MMU_vm_tag_idx                              0x0000
    #define     B16MMU_vm_tag_idx                              0x0000
    #define   LSb32MMU_vm_tag_idx                                 0
    #define   LSb16MMU_vm_tag_idx                                 0
    #define       bMMU_vm_tag_idx                              13
    #define   MSK32MMU_vm_tag_idx                                 0x00001FFF

    #define     BA_MMU_vm_tag_uv                               0x0001
    #define     B16MMU_vm_tag_uv                               0x0000
    #define   LSb32MMU_vm_tag_uv                                  13
    #define   LSb16MMU_vm_tag_uv                                  13
    #define       bMMU_vm_tag_uv                               1
    #define   MSK32MMU_vm_tag_uv                                  0x00002000

    #define     BA_MMU_vm_tag_bid                              0x0001
    #define     B16MMU_vm_tag_bid                              0x0000
    #define   LSb32MMU_vm_tag_bid                                 14
    #define   LSb16MMU_vm_tag_bid                                 14
    #define       bMMU_vm_tag_bid                              4
    #define   MSK32MMU_vm_tag_bid                                 0x0003C000

    #define     BA_MMU_vm_tag_wt                               0x0002
    #define     B16MMU_vm_tag_wt                               0x0002
    #define   LSb32MMU_vm_tag_wt                                  18
    #define   LSb16MMU_vm_tag_wt                                  2
    #define       bMMU_vm_tag_wt                               1
    #define   MSK32MMU_vm_tag_wt                                  0x00040000

    #define     BA_MMU_vm_tag_valid                            0x0002
    #define     B16MMU_vm_tag_valid                            0x0002
    #define   LSb32MMU_vm_tag_valid                               19
    #define   LSb16MMU_vm_tag_valid                               3
    #define       bMMU_vm_tag_valid                            1
    #define   MSK32MMU_vm_tag_valid                               0x00080000

    #define     BA_MMU_vm_tag_pending                          0x0002
    #define     B16MMU_vm_tag_pending                          0x0002
    #define   LSb32MMU_vm_tag_pending                             20
    #define   LSb16MMU_vm_tag_pending                             4
    #define       bMMU_vm_tag_pending                          1
    #define   MSK32MMU_vm_tag_pending                             0x00100000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MMU_vm_tag {
    ///////////////////////////////////////////////////////////
    #define   GET32MMU_vm_tag_idx(r32)                         _BFGET_(r32,12, 0)
    #define   SET32MMU_vm_tag_idx(r32,v)                       _BFSET_(r32,12, 0,v)
    #define   GET16MMU_vm_tag_idx(r16)                         _BFGET_(r16,12, 0)
    #define   SET16MMU_vm_tag_idx(r16,v)                       _BFSET_(r16,12, 0,v)

    #define   GET32MMU_vm_tag_uv(r32)                          _BFGET_(r32,13,13)
    #define   SET32MMU_vm_tag_uv(r32,v)                        _BFSET_(r32,13,13,v)
    #define   GET16MMU_vm_tag_uv(r16)                          _BFGET_(r16,13,13)
    #define   SET16MMU_vm_tag_uv(r16,v)                        _BFSET_(r16,13,13,v)

    #define   GET32MMU_vm_tag_bid(r32)                         _BFGET_(r32,17,14)
    #define   SET32MMU_vm_tag_bid(r32,v)                       _BFSET_(r32,17,14,v)

    #define   GET32MMU_vm_tag_wt(r32)                          _BFGET_(r32,18,18)
    #define   SET32MMU_vm_tag_wt(r32,v)                        _BFSET_(r32,18,18,v)
    #define   GET16MMU_vm_tag_wt(r16)                          _BFGET_(r16, 2, 2)
    #define   SET16MMU_vm_tag_wt(r16,v)                        _BFSET_(r16, 2, 2,v)

    #define   GET32MMU_vm_tag_valid(r32)                       _BFGET_(r32,19,19)
    #define   SET32MMU_vm_tag_valid(r32,v)                     _BFSET_(r32,19,19,v)
    #define   GET16MMU_vm_tag_valid(r16)                       _BFGET_(r16, 3, 3)
    #define   SET16MMU_vm_tag_valid(r16,v)                     _BFSET_(r16, 3, 3,v)

    #define   GET32MMU_vm_tag_pending(r32)                     _BFGET_(r32,20,20)
    #define   SET32MMU_vm_tag_pending(r32,v)                   _BFSET_(r32,20,20,v)
    #define   GET16MMU_vm_tag_pending(r16)                     _BFGET_(r16, 4, 4)
    #define   SET16MMU_vm_tag_pending(r16,v)                   _BFSET_(r16, 4, 4,v)

            UNSG32 u_idx                                       : 13;
            UNSG32 u_uv                                        :  1;
            UNSG32 u_bid                                       :  4;
            UNSG32 u_wt                                        :  1;
            UNSG32 u_valid                                     :  1;
            UNSG32 u_pending                                   :  1;
            UNSG32 RSVDx0_b21                                  : 11;
    ///////////////////////////////////////////////////////////
    } SIE_MMU_vm_tag;

    ///////////////////////////////////////////////////////////
     SIGN32 MMU_vm_tag_drvrd(SIE_MMU_vm_tag *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MMU_vm_tag_drvwr(SIE_MMU_vm_tag *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MMU_vm_tag_reset(SIE_MMU_vm_tag *p);
     SIGN32 MMU_vm_tag_cmp  (SIE_MMU_vm_tag *p, SIE_MMU_vm_tag *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MMU_vm_tag_check(p,pie,pfx,hLOG) MMU_vm_tag_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MMU_vm_tag_print(p,    pfx,hLOG) MMU_vm_tag_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MMU_vm_tag
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MMU_TAG                                  (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 word                 
///               $MMU_vm_tag          word              REG      [64]
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     256B, bits:    1344b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MMU_TAG
#define h_MMU_TAG (){}

    #define     RA_MMU_TAG_word                                0x0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MMU_TAG {
    ///////////////////////////////////////////////////////////
              SIE_MMU_vm_tag                                   ie_word[64];
    ///////////////////////////////////////////////////////////
    } SIE_MMU_TAG;

    ///////////////////////////////////////////////////////////
     SIGN32 MMU_TAG_drvrd(SIE_MMU_TAG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MMU_TAG_drvwr(SIE_MMU_TAG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MMU_TAG_reset(SIE_MMU_TAG *p);
     SIGN32 MMU_TAG_cmp  (SIE_MMU_TAG *p, SIE_MMU_TAG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MMU_TAG_check(p,pie,pfx,hLOG) MMU_TAG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MMU_TAG_print(p,    pfx,hLOG) MMU_TAG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MMU_TAG
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MMU_CFG                 biu              (4,4)
///     ###
///     * MMU CFG for one thread
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 pbm                  (P)
///               ###
///               * Settings for page mapping and bank mapping stage.
///               ###
///               %unsigned 3  shy_bw                    0x0
///               %unsigned 1  shy_pos                   0x0
///                                    ###
///                                    * The lower shy_bw bits of 'ya' will be inserted into bit (shy_pos+2) of 'xa', the remaining bits of xa ([AX-1:shy_pos+2]) will be automatically left shift by (shy_bw+2) bits.
///                                    * Page height (shy_bw) for tile mode: 4, 8, 16, 32, 64, 128
///                                    * Page width (shy_pos) for tile mode: 64, 128
///                                    ###
///               %unsigned 22 stride_64B                0x0
///                                    ###
///                                    * Actual stride of the buffer. After page mapping, the remapped linear address should be converted to actual relative address using the actual stride, which should be derived by (stride_64B<<6)
///                                    ###
///               %unsigned 1  tileMode                  0x1
///                                    ###
///                                    * 0: Raster-scanned format
///                                    * 1: Data format in one burst is 64x4 or 48x4 tile mode. Or Data format in one burst is 32x8 or 24x8 or 32x6 tile mode.
///                                    ###
///               %unsigned 1  pm_enable                 0x0
///                                    ###
///                                    * Set 0 to bypass page mapping stage and linear address to virtual address conversion
///                                    ###
///               %unsigned 1  shuffle_en                0x0
///                                    ###
///                                    * Set 1 to enable address shuffle for bit[7:6] of input linear address.
///                                    ###
///               %unsigned 1  bm_enable                 0x0
///                                    ###
///                                    * Set 1 to enable bank mapping
///                                    ###
///               %unsigned 1  weave                     0x0
///                                    ###
///                                    * 1: output picture is one of the interleaced fields
///                                    * 0: normal frame
///                                    ###
///               %%        1          # Stuffing bits...
///     @ 0x00004 vm                   (P)
///               ###
///               * Settings for virtual address to physical address mapping, the actual 'MMU' operation.
///               ###
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * Set 0 to bypass the virtual address to physical address mapping.
///                                    ###
///               %unsigned 1  prefecth_disable          0x0
///                                    ###
///                                    * Set 1 to disable pre-fetch of page table entries in advance for real-time case, such as VPP use case
///                                    ###
///               %unsigned 3  mode                      0x0
///                                    : normal                    0x0
///                                    : section                   0x1
///                                    : ovp                       0x2
///                                    : pfu                       0x3
///                                    : auto                      0x4
///                                                 ###
///                                                 * Prefetch mode, please refer to section 2.5.2
///                                                 ###
///               %unsigned 1  mTyp                      0x0
///                                    ###
///                                    * Sub-mode selections for Section mode and PFU mode, please refer to section 2.5.2
///                                    ###
///               %unsigned 3  delta                     0x0
///                                    ###
///                                    * For normal mode, it indicates the prefetch distance is (delta+1) * section width. (Maximum value: 1)
///                                    * For section mode, it indicates the prefetch distance is (delta+1) * section size. (Maximum value: 3)
///                                    * For OVP mode, it indicates (delta+1) sections in the first row of tile need to be prefetched after harware kicked off.
///                                    * For pfu mode, it a 3 bit value range from -4 to 4, which represent the ratio between ctbSz and page height. i.e., delta=log2(ctbSz/page height). When mTyp=0, the value ranges from [-4, 2]; when mTyp=1, the value ranges from [1, 4].
///                                    ###
///               %unsigned 20 base                      0x0
///                                    ###
///                                    * Base address in 4KB, the actual base is (base.val<<12).
///                                    * When VM is disabled, it's the base address of frame buffer.
///                                    * When VM is enabled, it's the base address of page table.
///                                    ###
///               %unsigned 1  auto_tag_clr              0x0
///                                    ###
///                                    * Hardware will automatically clear page table cache tag for this thread when kick off
///                                    ###
///               %%        2          # Stuffing bits...
///     @ 0x00008 cdesc                (P)
///               ###
///               * Page table cache descriptor and bank mapping control for current thread.
///               ###
///               %unsigned 6  base                      0x0
///                                    ###
///                                    * TAG base address for this thread in 64B
///                                    ###
///               %unsigned 3  ways                      0x7
///                                    ###
///                                    * WAYs (Actual value shoud be 'ways'+1) for this thread in 64B. Note that each thread used the full-associative cache, thread ID is composed by {wt[0], bid[3:0], uv[0]}.
///                                    ###
///               %unsigned 1  rpTyp                     0x0
///                                    : lru                       0x0
///                                    : fifo                      0x1
///                                                 ###
///                                                 * Cache replace strategy
///                                                 * 0: LRU
///                                                 * 1: FIFO (used for VPP/PFU/OVP which have fixed order to scan pixels)
///                                                 ###
///               %unsigned 1  type                      0x0
///                                    : 64B                       0x0
///                                    : 32B                       0x1
///                                                 ###
///                                                 * Cache line size selections, right now only VxG version MMU support 32B cache line; AVIO/ISP usage should be only configured as 0
///                                                 * End of MMU_CFG
///                                                 ###
///               %%        21         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      12B, bits:      72b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MMU_CFG
#define h_MMU_CFG (){}

    #define     RA_MMU_CFG_pbm                                 0x0000

    #define     BA_MMU_CFG_pbm_shy_bw                          0x0000
    #define     B16MMU_CFG_pbm_shy_bw                          0x0000
    #define   LSb32MMU_CFG_pbm_shy_bw                             0
    #define   LSb16MMU_CFG_pbm_shy_bw                             0
    #define       bMMU_CFG_pbm_shy_bw                          3
    #define   MSK32MMU_CFG_pbm_shy_bw                             0x00000007

    #define     BA_MMU_CFG_pbm_shy_pos                         0x0000
    #define     B16MMU_CFG_pbm_shy_pos                         0x0000
    #define   LSb32MMU_CFG_pbm_shy_pos                            3
    #define   LSb16MMU_CFG_pbm_shy_pos                            3
    #define       bMMU_CFG_pbm_shy_pos                         1
    #define   MSK32MMU_CFG_pbm_shy_pos                            0x00000008

    #define     BA_MMU_CFG_pbm_stride_64B                      0x0000
    #define     B16MMU_CFG_pbm_stride_64B                      0x0000
    #define   LSb32MMU_CFG_pbm_stride_64B                         4
    #define   LSb16MMU_CFG_pbm_stride_64B                         4
    #define       bMMU_CFG_pbm_stride_64B                      22
    #define   MSK32MMU_CFG_pbm_stride_64B                         0x03FFFFF0

    #define     BA_MMU_CFG_pbm_tileMode                        0x0003
    #define     B16MMU_CFG_pbm_tileMode                        0x0002
    #define   LSb32MMU_CFG_pbm_tileMode                           26
    #define   LSb16MMU_CFG_pbm_tileMode                           10
    #define       bMMU_CFG_pbm_tileMode                        1
    #define   MSK32MMU_CFG_pbm_tileMode                           0x04000000

    #define     BA_MMU_CFG_pbm_pm_enable                       0x0003
    #define     B16MMU_CFG_pbm_pm_enable                       0x0002
    #define   LSb32MMU_CFG_pbm_pm_enable                          27
    #define   LSb16MMU_CFG_pbm_pm_enable                          11
    #define       bMMU_CFG_pbm_pm_enable                       1
    #define   MSK32MMU_CFG_pbm_pm_enable                          0x08000000

    #define     BA_MMU_CFG_pbm_shuffle_en                      0x0003
    #define     B16MMU_CFG_pbm_shuffle_en                      0x0002
    #define   LSb32MMU_CFG_pbm_shuffle_en                         28
    #define   LSb16MMU_CFG_pbm_shuffle_en                         12
    #define       bMMU_CFG_pbm_shuffle_en                      1
    #define   MSK32MMU_CFG_pbm_shuffle_en                         0x10000000

    #define     BA_MMU_CFG_pbm_bm_enable                       0x0003
    #define     B16MMU_CFG_pbm_bm_enable                       0x0002
    #define   LSb32MMU_CFG_pbm_bm_enable                          29
    #define   LSb16MMU_CFG_pbm_bm_enable                          13
    #define       bMMU_CFG_pbm_bm_enable                       1
    #define   MSK32MMU_CFG_pbm_bm_enable                          0x20000000

    #define     BA_MMU_CFG_pbm_weave                           0x0003
    #define     B16MMU_CFG_pbm_weave                           0x0002
    #define   LSb32MMU_CFG_pbm_weave                              30
    #define   LSb16MMU_CFG_pbm_weave                              14
    #define       bMMU_CFG_pbm_weave                           1
    #define   MSK32MMU_CFG_pbm_weave                              0x40000000
    ///////////////////////////////////////////////////////////
    #define     RA_MMU_CFG_vm                                  0x0004

    #define     BA_MMU_CFG_vm_enable                           0x0004
    #define     B16MMU_CFG_vm_enable                           0x0004
    #define   LSb32MMU_CFG_vm_enable                              0
    #define   LSb16MMU_CFG_vm_enable                              0
    #define       bMMU_CFG_vm_enable                           1
    #define   MSK32MMU_CFG_vm_enable                              0x00000001

    #define     BA_MMU_CFG_vm_prefecth_disable                 0x0004
    #define     B16MMU_CFG_vm_prefecth_disable                 0x0004
    #define   LSb32MMU_CFG_vm_prefecth_disable                    1
    #define   LSb16MMU_CFG_vm_prefecth_disable                    1
    #define       bMMU_CFG_vm_prefecth_disable                 1
    #define   MSK32MMU_CFG_vm_prefecth_disable                    0x00000002

    #define     BA_MMU_CFG_vm_mode                             0x0004
    #define     B16MMU_CFG_vm_mode                             0x0004
    #define   LSb32MMU_CFG_vm_mode                                2
    #define   LSb16MMU_CFG_vm_mode                                2
    #define       bMMU_CFG_vm_mode                             3
    #define   MSK32MMU_CFG_vm_mode                                0x0000001C
    #define        MMU_CFG_vm_mode_normal                                   0x0
    #define        MMU_CFG_vm_mode_section                                  0x1
    #define        MMU_CFG_vm_mode_ovp                                      0x2
    #define        MMU_CFG_vm_mode_pfu                                      0x3
    #define        MMU_CFG_vm_mode_auto                                     0x4

    #define     BA_MMU_CFG_vm_mTyp                             0x0004
    #define     B16MMU_CFG_vm_mTyp                             0x0004
    #define   LSb32MMU_CFG_vm_mTyp                                5
    #define   LSb16MMU_CFG_vm_mTyp                                5
    #define       bMMU_CFG_vm_mTyp                             1
    #define   MSK32MMU_CFG_vm_mTyp                                0x00000020

    #define     BA_MMU_CFG_vm_delta                            0x0004
    #define     B16MMU_CFG_vm_delta                            0x0004
    #define   LSb32MMU_CFG_vm_delta                               6
    #define   LSb16MMU_CFG_vm_delta                               6
    #define       bMMU_CFG_vm_delta                            3
    #define   MSK32MMU_CFG_vm_delta                               0x000001C0

    #define     BA_MMU_CFG_vm_base                             0x0005
    #define     B16MMU_CFG_vm_base                             0x0004
    #define   LSb32MMU_CFG_vm_base                                9
    #define   LSb16MMU_CFG_vm_base                                9
    #define       bMMU_CFG_vm_base                             20
    #define   MSK32MMU_CFG_vm_base                                0x1FFFFE00

    #define     BA_MMU_CFG_vm_auto_tag_clr                     0x0007
    #define     B16MMU_CFG_vm_auto_tag_clr                     0x0006
    #define   LSb32MMU_CFG_vm_auto_tag_clr                        29
    #define   LSb16MMU_CFG_vm_auto_tag_clr                        13
    #define       bMMU_CFG_vm_auto_tag_clr                     1
    #define   MSK32MMU_CFG_vm_auto_tag_clr                        0x20000000
    ///////////////////////////////////////////////////////////
    #define     RA_MMU_CFG_cdesc                               0x0008

    #define     BA_MMU_CFG_cdesc_base                          0x0008
    #define     B16MMU_CFG_cdesc_base                          0x0008
    #define   LSb32MMU_CFG_cdesc_base                             0
    #define   LSb16MMU_CFG_cdesc_base                             0
    #define       bMMU_CFG_cdesc_base                          6
    #define   MSK32MMU_CFG_cdesc_base                             0x0000003F

    #define     BA_MMU_CFG_cdesc_ways                          0x0008
    #define     B16MMU_CFG_cdesc_ways                          0x0008
    #define   LSb32MMU_CFG_cdesc_ways                             6
    #define   LSb16MMU_CFG_cdesc_ways                             6
    #define       bMMU_CFG_cdesc_ways                          3
    #define   MSK32MMU_CFG_cdesc_ways                             0x000001C0

    #define     BA_MMU_CFG_cdesc_rpTyp                         0x0009
    #define     B16MMU_CFG_cdesc_rpTyp                         0x0008
    #define   LSb32MMU_CFG_cdesc_rpTyp                            9
    #define   LSb16MMU_CFG_cdesc_rpTyp                            9
    #define       bMMU_CFG_cdesc_rpTyp                         1
    #define   MSK32MMU_CFG_cdesc_rpTyp                            0x00000200
    #define        MMU_CFG_cdesc_rpTyp_lru                                  0x0
    #define        MMU_CFG_cdesc_rpTyp_fifo                                 0x1

    #define     BA_MMU_CFG_cdesc_type                          0x0009
    #define     B16MMU_CFG_cdesc_type                          0x0008
    #define   LSb32MMU_CFG_cdesc_type                             10
    #define   LSb16MMU_CFG_cdesc_type                             10
    #define       bMMU_CFG_cdesc_type                          1
    #define   MSK32MMU_CFG_cdesc_type                             0x00000400
    #define        MMU_CFG_cdesc_type_64B                                   0x0
    #define        MMU_CFG_cdesc_type_32B                                   0x1
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MMU_CFG {
    ///////////////////////////////////////////////////////////
    #define   GET32MMU_CFG_pbm_shy_bw(r32)                     _BFGET_(r32, 2, 0)
    #define   SET32MMU_CFG_pbm_shy_bw(r32,v)                   _BFSET_(r32, 2, 0,v)
    #define   GET16MMU_CFG_pbm_shy_bw(r16)                     _BFGET_(r16, 2, 0)
    #define   SET16MMU_CFG_pbm_shy_bw(r16,v)                   _BFSET_(r16, 2, 0,v)

    #define   GET32MMU_CFG_pbm_shy_pos(r32)                    _BFGET_(r32, 3, 3)
    #define   SET32MMU_CFG_pbm_shy_pos(r32,v)                  _BFSET_(r32, 3, 3,v)
    #define   GET16MMU_CFG_pbm_shy_pos(r16)                    _BFGET_(r16, 3, 3)
    #define   SET16MMU_CFG_pbm_shy_pos(r16,v)                  _BFSET_(r16, 3, 3,v)

    #define   GET32MMU_CFG_pbm_stride_64B(r32)                 _BFGET_(r32,25, 4)
    #define   SET32MMU_CFG_pbm_stride_64B(r32,v)               _BFSET_(r32,25, 4,v)

    #define   GET32MMU_CFG_pbm_tileMode(r32)                   _BFGET_(r32,26,26)
    #define   SET32MMU_CFG_pbm_tileMode(r32,v)                 _BFSET_(r32,26,26,v)
    #define   GET16MMU_CFG_pbm_tileMode(r16)                   _BFGET_(r16,10,10)
    #define   SET16MMU_CFG_pbm_tileMode(r16,v)                 _BFSET_(r16,10,10,v)

    #define   GET32MMU_CFG_pbm_pm_enable(r32)                  _BFGET_(r32,27,27)
    #define   SET32MMU_CFG_pbm_pm_enable(r32,v)                _BFSET_(r32,27,27,v)
    #define   GET16MMU_CFG_pbm_pm_enable(r16)                  _BFGET_(r16,11,11)
    #define   SET16MMU_CFG_pbm_pm_enable(r16,v)                _BFSET_(r16,11,11,v)

    #define   GET32MMU_CFG_pbm_shuffle_en(r32)                 _BFGET_(r32,28,28)
    #define   SET32MMU_CFG_pbm_shuffle_en(r32,v)               _BFSET_(r32,28,28,v)
    #define   GET16MMU_CFG_pbm_shuffle_en(r16)                 _BFGET_(r16,12,12)
    #define   SET16MMU_CFG_pbm_shuffle_en(r16,v)               _BFSET_(r16,12,12,v)

    #define   GET32MMU_CFG_pbm_bm_enable(r32)                  _BFGET_(r32,29,29)
    #define   SET32MMU_CFG_pbm_bm_enable(r32,v)                _BFSET_(r32,29,29,v)
    #define   GET16MMU_CFG_pbm_bm_enable(r16)                  _BFGET_(r16,13,13)
    #define   SET16MMU_CFG_pbm_bm_enable(r16,v)                _BFSET_(r16,13,13,v)

    #define   GET32MMU_CFG_pbm_weave(r32)                      _BFGET_(r32,30,30)
    #define   SET32MMU_CFG_pbm_weave(r32,v)                    _BFSET_(r32,30,30,v)
    #define   GET16MMU_CFG_pbm_weave(r16)                      _BFGET_(r16,14,14)
    #define   SET16MMU_CFG_pbm_weave(r16,v)                    _BFSET_(r16,14,14,v)

    #define     w32MMU_CFG_pbm                                 {\
            UNSG32 upbm_shy_bw                                 :  3;\
            UNSG32 upbm_shy_pos                                :  1;\
            UNSG32 upbm_stride_64B                             : 22;\
            UNSG32 upbm_tileMode                               :  1;\
            UNSG32 upbm_pm_enable                              :  1;\
            UNSG32 upbm_shuffle_en                             :  1;\
            UNSG32 upbm_bm_enable                              :  1;\
            UNSG32 upbm_weave                                  :  1;\
            UNSG32 RSVDx0_b31                                  :  1;\
          }
    union { UNSG32 u32MMU_CFG_pbm;
            struct w32MMU_CFG_pbm;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MMU_CFG_vm_enable(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32MMU_CFG_vm_enable(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16MMU_CFG_vm_enable(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16MMU_CFG_vm_enable(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define   GET32MMU_CFG_vm_prefecth_disable(r32)            _BFGET_(r32, 1, 1)
    #define   SET32MMU_CFG_vm_prefecth_disable(r32,v)          _BFSET_(r32, 1, 1,v)
    #define   GET16MMU_CFG_vm_prefecth_disable(r16)            _BFGET_(r16, 1, 1)
    #define   SET16MMU_CFG_vm_prefecth_disable(r16,v)          _BFSET_(r16, 1, 1,v)

    #define   GET32MMU_CFG_vm_mode(r32)                        _BFGET_(r32, 4, 2)
    #define   SET32MMU_CFG_vm_mode(r32,v)                      _BFSET_(r32, 4, 2,v)
    #define   GET16MMU_CFG_vm_mode(r16)                        _BFGET_(r16, 4, 2)
    #define   SET16MMU_CFG_vm_mode(r16,v)                      _BFSET_(r16, 4, 2,v)

    #define   GET32MMU_CFG_vm_mTyp(r32)                        _BFGET_(r32, 5, 5)
    #define   SET32MMU_CFG_vm_mTyp(r32,v)                      _BFSET_(r32, 5, 5,v)
    #define   GET16MMU_CFG_vm_mTyp(r16)                        _BFGET_(r16, 5, 5)
    #define   SET16MMU_CFG_vm_mTyp(r16,v)                      _BFSET_(r16, 5, 5,v)

    #define   GET32MMU_CFG_vm_delta(r32)                       _BFGET_(r32, 8, 6)
    #define   SET32MMU_CFG_vm_delta(r32,v)                     _BFSET_(r32, 8, 6,v)
    #define   GET16MMU_CFG_vm_delta(r16)                       _BFGET_(r16, 8, 6)
    #define   SET16MMU_CFG_vm_delta(r16,v)                     _BFSET_(r16, 8, 6,v)

    #define   GET32MMU_CFG_vm_base(r32)                        _BFGET_(r32,28, 9)
    #define   SET32MMU_CFG_vm_base(r32,v)                      _BFSET_(r32,28, 9,v)

    #define   GET32MMU_CFG_vm_auto_tag_clr(r32)                _BFGET_(r32,29,29)
    #define   SET32MMU_CFG_vm_auto_tag_clr(r32,v)              _BFSET_(r32,29,29,v)
    #define   GET16MMU_CFG_vm_auto_tag_clr(r16)                _BFGET_(r16,13,13)
    #define   SET16MMU_CFG_vm_auto_tag_clr(r16,v)              _BFSET_(r16,13,13,v)

    #define     w32MMU_CFG_vm                                  {\
            UNSG32 uvm_enable                                  :  1;\
            UNSG32 uvm_prefecth_disable                        :  1;\
            UNSG32 uvm_mode                                    :  3;\
            UNSG32 uvm_mTyp                                    :  1;\
            UNSG32 uvm_delta                                   :  3;\
            UNSG32 uvm_base                                    : 20;\
            UNSG32 uvm_auto_tag_clr                            :  1;\
            UNSG32 RSVDx4_b30                                  :  2;\
          }
    union { UNSG32 u32MMU_CFG_vm;
            struct w32MMU_CFG_vm;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MMU_CFG_cdesc_base(r32)                     _BFGET_(r32, 5, 0)
    #define   SET32MMU_CFG_cdesc_base(r32,v)                   _BFSET_(r32, 5, 0,v)
    #define   GET16MMU_CFG_cdesc_base(r16)                     _BFGET_(r16, 5, 0)
    #define   SET16MMU_CFG_cdesc_base(r16,v)                   _BFSET_(r16, 5, 0,v)

    #define   GET32MMU_CFG_cdesc_ways(r32)                     _BFGET_(r32, 8, 6)
    #define   SET32MMU_CFG_cdesc_ways(r32,v)                   _BFSET_(r32, 8, 6,v)
    #define   GET16MMU_CFG_cdesc_ways(r16)                     _BFGET_(r16, 8, 6)
    #define   SET16MMU_CFG_cdesc_ways(r16,v)                   _BFSET_(r16, 8, 6,v)

    #define   GET32MMU_CFG_cdesc_rpTyp(r32)                    _BFGET_(r32, 9, 9)
    #define   SET32MMU_CFG_cdesc_rpTyp(r32,v)                  _BFSET_(r32, 9, 9,v)
    #define   GET16MMU_CFG_cdesc_rpTyp(r16)                    _BFGET_(r16, 9, 9)
    #define   SET16MMU_CFG_cdesc_rpTyp(r16,v)                  _BFSET_(r16, 9, 9,v)

    #define   GET32MMU_CFG_cdesc_type(r32)                     _BFGET_(r32,10,10)
    #define   SET32MMU_CFG_cdesc_type(r32,v)                   _BFSET_(r32,10,10,v)
    #define   GET16MMU_CFG_cdesc_type(r16)                     _BFGET_(r16,10,10)
    #define   SET16MMU_CFG_cdesc_type(r16,v)                   _BFSET_(r16,10,10,v)

    #define     w32MMU_CFG_cdesc                               {\
            UNSG32 ucdesc_base                                 :  6;\
            UNSG32 ucdesc_ways                                 :  3;\
            UNSG32 ucdesc_rpTyp                                :  1;\
            UNSG32 ucdesc_type                                 :  1;\
            UNSG32 RSVDx8_b11                                  : 21;\
          }
    union { UNSG32 u32MMU_CFG_cdesc;
            struct w32MMU_CFG_cdesc;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MMU_CFG;

    typedef union  T32MMU_CFG_pbm
          { UNSG32 u32;
            struct w32MMU_CFG_pbm;
                 } T32MMU_CFG_pbm;
    typedef union  T32MMU_CFG_vm
          { UNSG32 u32;
            struct w32MMU_CFG_vm;
                 } T32MMU_CFG_vm;
    typedef union  T32MMU_CFG_cdesc
          { UNSG32 u32;
            struct w32MMU_CFG_cdesc;
                 } T32MMU_CFG_cdesc;
    ///////////////////////////////////////////////////////////

    typedef union  TMMU_CFG_pbm
          { UNSG32 u32[1];
            struct {
            struct w32MMU_CFG_pbm;
                   };
                 } TMMU_CFG_pbm;
    typedef union  TMMU_CFG_vm
          { UNSG32 u32[1];
            struct {
            struct w32MMU_CFG_vm;
                   };
                 } TMMU_CFG_vm;
    typedef union  TMMU_CFG_cdesc
          { UNSG32 u32[1];
            struct {
            struct w32MMU_CFG_cdesc;
                   };
                 } TMMU_CFG_cdesc;

    ///////////////////////////////////////////////////////////
     SIGN32 MMU_CFG_drvrd(SIE_MMU_CFG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MMU_CFG_drvwr(SIE_MMU_CFG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MMU_CFG_reset(SIE_MMU_CFG *p);
     SIGN32 MMU_CFG_cmp  (SIE_MMU_CFG *p, SIE_MMU_CFG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MMU_CFG_check(p,pie,pfx,hLOG) MMU_CFG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MMU_CFG_print(p,    pfx,hLOG) MMU_CFG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MMU_CFG
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE IDMAP                                    (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///               %unsigned 3  idx00                     0x0
///               %unsigned 3  idx01                     0x0
///               %unsigned 3  idx02                     0x0
///               %unsigned 3  idx03                     0x0
///               %unsigned 3  idx04                     0x0
///               %unsigned 3  idx05                     0x0
///               %unsigned 3  idx06                     0x0
///               %unsigned 3  idx07                     0x0
///               %%        8          # Stuffing bits...
///     @ 0x00004                      (P)
///               %unsigned 3  idx08                     0x1
///               %unsigned 3  idx09                     0x1
///               %unsigned 3  idx10                     0x1
///               %unsigned 3  idx11                     0x1
///               %unsigned 3  idx12                     0x1
///               %unsigned 3  idx13                     0x1
///               %unsigned 3  idx14                     0x1
///               %unsigned 3  idx15                     0x1
///               %%        8          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:      48b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_IDMAP
#define h_IDMAP (){}

    #define     BA_IDMAP_idx00                                 0x0000
    #define     B16IDMAP_idx00                                 0x0000
    #define   LSb32IDMAP_idx00                                    0
    #define   LSb16IDMAP_idx00                                    0
    #define       bIDMAP_idx00                                 3
    #define   MSK32IDMAP_idx00                                    0x00000007

    #define     BA_IDMAP_idx01                                 0x0000
    #define     B16IDMAP_idx01                                 0x0000
    #define   LSb32IDMAP_idx01                                    3
    #define   LSb16IDMAP_idx01                                    3
    #define       bIDMAP_idx01                                 3
    #define   MSK32IDMAP_idx01                                    0x00000038

    #define     BA_IDMAP_idx02                                 0x0000
    #define     B16IDMAP_idx02                                 0x0000
    #define   LSb32IDMAP_idx02                                    6
    #define   LSb16IDMAP_idx02                                    6
    #define       bIDMAP_idx02                                 3
    #define   MSK32IDMAP_idx02                                    0x000001C0

    #define     BA_IDMAP_idx03                                 0x0001
    #define     B16IDMAP_idx03                                 0x0000
    #define   LSb32IDMAP_idx03                                    9
    #define   LSb16IDMAP_idx03                                    9
    #define       bIDMAP_idx03                                 3
    #define   MSK32IDMAP_idx03                                    0x00000E00

    #define     BA_IDMAP_idx04                                 0x0001
    #define     B16IDMAP_idx04                                 0x0000
    #define   LSb32IDMAP_idx04                                    12
    #define   LSb16IDMAP_idx04                                    12
    #define       bIDMAP_idx04                                 3
    #define   MSK32IDMAP_idx04                                    0x00007000

    #define     BA_IDMAP_idx05                                 0x0001
    #define     B16IDMAP_idx05                                 0x0000
    #define   LSb32IDMAP_idx05                                    15
    #define   LSb16IDMAP_idx05                                    15
    #define       bIDMAP_idx05                                 3
    #define   MSK32IDMAP_idx05                                    0x00038000

    #define     BA_IDMAP_idx06                                 0x0002
    #define     B16IDMAP_idx06                                 0x0002
    #define   LSb32IDMAP_idx06                                    18
    #define   LSb16IDMAP_idx06                                    2
    #define       bIDMAP_idx06                                 3
    #define   MSK32IDMAP_idx06                                    0x001C0000

    #define     BA_IDMAP_idx07                                 0x0002
    #define     B16IDMAP_idx07                                 0x0002
    #define   LSb32IDMAP_idx07                                    21
    #define   LSb16IDMAP_idx07                                    5
    #define       bIDMAP_idx07                                 3
    #define   MSK32IDMAP_idx07                                    0x00E00000
    ///////////////////////////////////////////////////////////

    #define     BA_IDMAP_idx08                                 0x0004
    #define     B16IDMAP_idx08                                 0x0004
    #define   LSb32IDMAP_idx08                                    0
    #define   LSb16IDMAP_idx08                                    0
    #define       bIDMAP_idx08                                 3
    #define   MSK32IDMAP_idx08                                    0x00000007

    #define     BA_IDMAP_idx09                                 0x0004
    #define     B16IDMAP_idx09                                 0x0004
    #define   LSb32IDMAP_idx09                                    3
    #define   LSb16IDMAP_idx09                                    3
    #define       bIDMAP_idx09                                 3
    #define   MSK32IDMAP_idx09                                    0x00000038

    #define     BA_IDMAP_idx10                                 0x0004
    #define     B16IDMAP_idx10                                 0x0004
    #define   LSb32IDMAP_idx10                                    6
    #define   LSb16IDMAP_idx10                                    6
    #define       bIDMAP_idx10                                 3
    #define   MSK32IDMAP_idx10                                    0x000001C0

    #define     BA_IDMAP_idx11                                 0x0005
    #define     B16IDMAP_idx11                                 0x0004
    #define   LSb32IDMAP_idx11                                    9
    #define   LSb16IDMAP_idx11                                    9
    #define       bIDMAP_idx11                                 3
    #define   MSK32IDMAP_idx11                                    0x00000E00

    #define     BA_IDMAP_idx12                                 0x0005
    #define     B16IDMAP_idx12                                 0x0004
    #define   LSb32IDMAP_idx12                                    12
    #define   LSb16IDMAP_idx12                                    12
    #define       bIDMAP_idx12                                 3
    #define   MSK32IDMAP_idx12                                    0x00007000

    #define     BA_IDMAP_idx13                                 0x0005
    #define     B16IDMAP_idx13                                 0x0004
    #define   LSb32IDMAP_idx13                                    15
    #define   LSb16IDMAP_idx13                                    15
    #define       bIDMAP_idx13                                 3
    #define   MSK32IDMAP_idx13                                    0x00038000

    #define     BA_IDMAP_idx14                                 0x0006
    #define     B16IDMAP_idx14                                 0x0006
    #define   LSb32IDMAP_idx14                                    18
    #define   LSb16IDMAP_idx14                                    2
    #define       bIDMAP_idx14                                 3
    #define   MSK32IDMAP_idx14                                    0x001C0000

    #define     BA_IDMAP_idx15                                 0x0006
    #define     B16IDMAP_idx15                                 0x0006
    #define   LSb32IDMAP_idx15                                    21
    #define   LSb16IDMAP_idx15                                    5
    #define       bIDMAP_idx15                                 3
    #define   MSK32IDMAP_idx15                                    0x00E00000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_IDMAP {
    ///////////////////////////////////////////////////////////
    #define   GET32IDMAP_idx00(r32)                            _BFGET_(r32, 2, 0)
    #define   SET32IDMAP_idx00(r32,v)                          _BFSET_(r32, 2, 0,v)
    #define   GET16IDMAP_idx00(r16)                            _BFGET_(r16, 2, 0)
    #define   SET16IDMAP_idx00(r16,v)                          _BFSET_(r16, 2, 0,v)

    #define   GET32IDMAP_idx01(r32)                            _BFGET_(r32, 5, 3)
    #define   SET32IDMAP_idx01(r32,v)                          _BFSET_(r32, 5, 3,v)
    #define   GET16IDMAP_idx01(r16)                            _BFGET_(r16, 5, 3)
    #define   SET16IDMAP_idx01(r16,v)                          _BFSET_(r16, 5, 3,v)

    #define   GET32IDMAP_idx02(r32)                            _BFGET_(r32, 8, 6)
    #define   SET32IDMAP_idx02(r32,v)                          _BFSET_(r32, 8, 6,v)
    #define   GET16IDMAP_idx02(r16)                            _BFGET_(r16, 8, 6)
    #define   SET16IDMAP_idx02(r16,v)                          _BFSET_(r16, 8, 6,v)

    #define   GET32IDMAP_idx03(r32)                            _BFGET_(r32,11, 9)
    #define   SET32IDMAP_idx03(r32,v)                          _BFSET_(r32,11, 9,v)
    #define   GET16IDMAP_idx03(r16)                            _BFGET_(r16,11, 9)
    #define   SET16IDMAP_idx03(r16,v)                          _BFSET_(r16,11, 9,v)

    #define   GET32IDMAP_idx04(r32)                            _BFGET_(r32,14,12)
    #define   SET32IDMAP_idx04(r32,v)                          _BFSET_(r32,14,12,v)
    #define   GET16IDMAP_idx04(r16)                            _BFGET_(r16,14,12)
    #define   SET16IDMAP_idx04(r16,v)                          _BFSET_(r16,14,12,v)

    #define   GET32IDMAP_idx05(r32)                            _BFGET_(r32,17,15)
    #define   SET32IDMAP_idx05(r32,v)                          _BFSET_(r32,17,15,v)

    #define   GET32IDMAP_idx06(r32)                            _BFGET_(r32,20,18)
    #define   SET32IDMAP_idx06(r32,v)                          _BFSET_(r32,20,18,v)
    #define   GET16IDMAP_idx06(r16)                            _BFGET_(r16, 4, 2)
    #define   SET16IDMAP_idx06(r16,v)                          _BFSET_(r16, 4, 2,v)

    #define   GET32IDMAP_idx07(r32)                            _BFGET_(r32,23,21)
    #define   SET32IDMAP_idx07(r32,v)                          _BFSET_(r32,23,21,v)
    #define   GET16IDMAP_idx07(r16)                            _BFGET_(r16, 7, 5)
    #define   SET16IDMAP_idx07(r16,v)                          _BFSET_(r16, 7, 5,v)

            UNSG32 u_idx00                                     :  3;
            UNSG32 u_idx01                                     :  3;
            UNSG32 u_idx02                                     :  3;
            UNSG32 u_idx03                                     :  3;
            UNSG32 u_idx04                                     :  3;
            UNSG32 u_idx05                                     :  3;
            UNSG32 u_idx06                                     :  3;
            UNSG32 u_idx07                                     :  3;
            UNSG32 RSVDx0_b24                                  :  8;
    ///////////////////////////////////////////////////////////
    #define   GET32IDMAP_idx08(r32)                            _BFGET_(r32, 2, 0)
    #define   SET32IDMAP_idx08(r32,v)                          _BFSET_(r32, 2, 0,v)
    #define   GET16IDMAP_idx08(r16)                            _BFGET_(r16, 2, 0)
    #define   SET16IDMAP_idx08(r16,v)                          _BFSET_(r16, 2, 0,v)

    #define   GET32IDMAP_idx09(r32)                            _BFGET_(r32, 5, 3)
    #define   SET32IDMAP_idx09(r32,v)                          _BFSET_(r32, 5, 3,v)
    #define   GET16IDMAP_idx09(r16)                            _BFGET_(r16, 5, 3)
    #define   SET16IDMAP_idx09(r16,v)                          _BFSET_(r16, 5, 3,v)

    #define   GET32IDMAP_idx10(r32)                            _BFGET_(r32, 8, 6)
    #define   SET32IDMAP_idx10(r32,v)                          _BFSET_(r32, 8, 6,v)
    #define   GET16IDMAP_idx10(r16)                            _BFGET_(r16, 8, 6)
    #define   SET16IDMAP_idx10(r16,v)                          _BFSET_(r16, 8, 6,v)

    #define   GET32IDMAP_idx11(r32)                            _BFGET_(r32,11, 9)
    #define   SET32IDMAP_idx11(r32,v)                          _BFSET_(r32,11, 9,v)
    #define   GET16IDMAP_idx11(r16)                            _BFGET_(r16,11, 9)
    #define   SET16IDMAP_idx11(r16,v)                          _BFSET_(r16,11, 9,v)

    #define   GET32IDMAP_idx12(r32)                            _BFGET_(r32,14,12)
    #define   SET32IDMAP_idx12(r32,v)                          _BFSET_(r32,14,12,v)
    #define   GET16IDMAP_idx12(r16)                            _BFGET_(r16,14,12)
    #define   SET16IDMAP_idx12(r16,v)                          _BFSET_(r16,14,12,v)

    #define   GET32IDMAP_idx13(r32)                            _BFGET_(r32,17,15)
    #define   SET32IDMAP_idx13(r32,v)                          _BFSET_(r32,17,15,v)

    #define   GET32IDMAP_idx14(r32)                            _BFGET_(r32,20,18)
    #define   SET32IDMAP_idx14(r32,v)                          _BFSET_(r32,20,18,v)
    #define   GET16IDMAP_idx14(r16)                            _BFGET_(r16, 4, 2)
    #define   SET16IDMAP_idx14(r16,v)                          _BFSET_(r16, 4, 2,v)

    #define   GET32IDMAP_idx15(r32)                            _BFGET_(r32,23,21)
    #define   SET32IDMAP_idx15(r32,v)                          _BFSET_(r32,23,21,v)
    #define   GET16IDMAP_idx15(r16)                            _BFGET_(r16, 7, 5)
    #define   SET16IDMAP_idx15(r16,v)                          _BFSET_(r16, 7, 5,v)

            UNSG32 u_idx08                                     :  3;
            UNSG32 u_idx09                                     :  3;
            UNSG32 u_idx10                                     :  3;
            UNSG32 u_idx11                                     :  3;
            UNSG32 u_idx12                                     :  3;
            UNSG32 u_idx13                                     :  3;
            UNSG32 u_idx14                                     :  3;
            UNSG32 u_idx15                                     :  3;
            UNSG32 RSVDx4_b24                                  :  8;
    ///////////////////////////////////////////////////////////
    } SIE_IDMAP;

    ///////////////////////////////////////////////////////////
     SIGN32 IDMAP_drvrd(SIE_IDMAP *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 IDMAP_drvwr(SIE_IDMAP *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void IDMAP_reset(SIE_IDMAP *p);
     SIGN32 IDMAP_cmp  (SIE_IDMAP *p, SIE_IDMAP *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define IDMAP_check(p,pie,pfx,hLOG) IDMAP_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define IDMAP_print(p,    pfx,hLOG) IDMAP_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: IDMAP
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE VxGMETA_OFST            biu              (4,4)
///     ###
///     * META descriptor for VxG use, in which luma and chroma are always combined
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 offset               (P)
///               %unsigned 16 luma                      0x0
///                                    ###
///                                    * offset for meta luma reference buffer in 4KB unit.
///                                    ###
///               %unsigned 16 chroma                    0x0
///                                    ###
///                                    * offset for meta chroma reference buffer in 4KB unit
///                                    * End of VxGMETA_OFST
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      32b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_VxGMETA_OFST
#define h_VxGMETA_OFST (){}

    #define     RA_VxGMETA_OFST_offset                         0x0000

    #define     BA_VxGMETA_OFST_offset_luma                    0x0000
    #define     B16VxGMETA_OFST_offset_luma                    0x0000
    #define   LSb32VxGMETA_OFST_offset_luma                       0
    #define   LSb16VxGMETA_OFST_offset_luma                       0
    #define       bVxGMETA_OFST_offset_luma                    16
    #define   MSK32VxGMETA_OFST_offset_luma                       0x0000FFFF

    #define     BA_VxGMETA_OFST_offset_chroma                  0x0002
    #define     B16VxGMETA_OFST_offset_chroma                  0x0002
    #define   LSb32VxGMETA_OFST_offset_chroma                     16
    #define   LSb16VxGMETA_OFST_offset_chroma                     0
    #define       bVxGMETA_OFST_offset_chroma                  16
    #define   MSK32VxGMETA_OFST_offset_chroma                     0xFFFF0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_VxGMETA_OFST {
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMETA_OFST_offset_luma(r32)               _BFGET_(r32,15, 0)
    #define   SET32VxGMETA_OFST_offset_luma(r32,v)             _BFSET_(r32,15, 0,v)
    #define   GET16VxGMETA_OFST_offset_luma(r16)               _BFGET_(r16,15, 0)
    #define   SET16VxGMETA_OFST_offset_luma(r16,v)             _BFSET_(r16,15, 0,v)

    #define   GET32VxGMETA_OFST_offset_chroma(r32)             _BFGET_(r32,31,16)
    #define   SET32VxGMETA_OFST_offset_chroma(r32,v)           _BFSET_(r32,31,16,v)
    #define   GET16VxGMETA_OFST_offset_chroma(r16)             _BFGET_(r16,15, 0)
    #define   SET16VxGMETA_OFST_offset_chroma(r16,v)           _BFSET_(r16,15, 0,v)

    #define     w32VxGMETA_OFST_offset                         {\
            UNSG32 uoffset_luma                                : 16;\
            UNSG32 uoffset_chroma                              : 16;\
          }
    union { UNSG32 u32VxGMETA_OFST_offset;
            struct w32VxGMETA_OFST_offset;
          };
    ///////////////////////////////////////////////////////////
    } SIE_VxGMETA_OFST;

    typedef union  T32VxGMETA_OFST_offset
          { UNSG32 u32;
            struct w32VxGMETA_OFST_offset;
                 } T32VxGMETA_OFST_offset;
    ///////////////////////////////////////////////////////////

    typedef union  TVxGMETA_OFST_offset
          { UNSG32 u32[1];
            struct {
            struct w32VxGMETA_OFST_offset;
                   };
                 } TVxGMETA_OFST_offset;

    ///////////////////////////////////////////////////////////
     SIGN32 VxGMETA_OFST_drvrd(SIE_VxGMETA_OFST *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 VxGMETA_OFST_drvwr(SIE_VxGMETA_OFST *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void VxGMETA_OFST_reset(SIE_VxGMETA_OFST *p);
     SIGN32 VxGMETA_OFST_cmp  (SIE_VxGMETA_OFST *p, SIE_VxGMETA_OFST *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define VxGMETA_OFST_check(p,pie,pfx,hLOG) VxGMETA_OFST_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define VxGMETA_OFST_print(p,    pfx,hLOG) VxGMETA_OFST_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: VxGMETA_OFST
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE VxGMETA_FMT             biu              (4,4)
///     ###
///     * Meta format for MTR-R in VxG.
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 cfg                  (P)
///               %unsigned 4  stride                    0x0
///                                    : 64B                       0x0
///                                    : 128B                      0x1
///                                    : 256B                      0x2
///                                    : 512B                      0x3
///                                    : 1024B                     0x4
///                                    : 2048B                     0x5
///                                    : 4096B                     0x6
///                                    : 8192B                     0x7
///                                    : 16384B                    0x8
///                                                 ###
///                                                 * Meta data stride. For luma, picture width (in bytes) should be less than or equal to 2^(10+meta.stride).
///                                                 ###
///               %unsigned 2  format                    0x0
///                                    ###
///                                    * First 3 (format0~2) meta format is tile-based format for luma, meta packet size is 64x1024.
///                                    * Format4~6 is tile-based format for chroma, meta packet size is 32x2048.
///                                    * The last four meta format is for raster-scan based format.
///                                    ###
///               %unsigned 5  mode                      0x0
///                                    ###
///                                    * E_MTR.mode
///                                    ###
///               %unsigned 1  weave                     0x0
///                                    ###
///                                    * 1: Weaved meta buffer – interleaved by meta packet's height.
///                                    * 0: Progressive.
///                                    * Below fields are for ROI (Region of interest) settings for current thread that is processing.
///                                    ###
///               %%        20         # Stuffing bits...
///     @ 0x00004 roix                 (P)
///               %unsigned 12 xs                        0x0
///                                    ###
///                                    * Start coordinate of buffer in x direction in the unit of 64x4 (8-bit) or 48x4 (10-bit) for tile mode or 64B for raster-scanned mode, or in the unit of 32x8 (8-bit) for V8H32 tile mode.
///                                    * The unit is 64B for all formats.
///                                    ###
///               %unsigned 12 xm                        0x10
///                                    ###
///                                    * End coordinate of buffer in x direction in the unit of 64x4 (8-bit) or 48x4 (10-bit) for tile mode or 64B for raster-scanned mode, or in the unit of 32x8 (8-bit) for V8H32 tile mode.
///                                    * Note that xm should reflect the actual physical stride of the physical buffer.
///                                    * The unit is 64B for all formats.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00008 roiy                 (P)
///               %unsigned 14 ys                        0x0
///                                    ###
///                                    * Start coordinate of buffer in y direction in the unit of 4x4 for tile mode, or 1x1 for raster-scanned mode, or in the unit of 8x8 for V8H32 tile mode.
///                                    * The unit is 1 Compression Unit.
///                                    ###
///               %unsigned 14 ym                        0x200
///                                    ###
///                                    * End coordinate of buffer in y direction in the unit of 4x4 for tile mode, or 1x1 for raster-scanned mode, or in the unit of 8x8 for V8H32 tile mode.
///                                    * The unit is 1 Compression Unit.
///                                    * End of VxGMETA_FMT
///                                    ###
///               %%        4          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      12B, bits:      64b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_VxGMETA_FMT
#define h_VxGMETA_FMT (){}

    #define     RA_VxGMETA_FMT_cfg                             0x0000

    #define     BA_VxGMETA_FMT_cfg_stride                      0x0000
    #define     B16VxGMETA_FMT_cfg_stride                      0x0000
    #define   LSb32VxGMETA_FMT_cfg_stride                         0
    #define   LSb16VxGMETA_FMT_cfg_stride                         0
    #define       bVxGMETA_FMT_cfg_stride                      4
    #define   MSK32VxGMETA_FMT_cfg_stride                         0x0000000F
    #define        VxGMETA_FMT_cfg_stride_64B                               0x0
    #define        VxGMETA_FMT_cfg_stride_128B                              0x1
    #define        VxGMETA_FMT_cfg_stride_256B                              0x2
    #define        VxGMETA_FMT_cfg_stride_512B                              0x3
    #define        VxGMETA_FMT_cfg_stride_1024B                             0x4
    #define        VxGMETA_FMT_cfg_stride_2048B                             0x5
    #define        VxGMETA_FMT_cfg_stride_4096B                             0x6
    #define        VxGMETA_FMT_cfg_stride_8192B                             0x7
    #define        VxGMETA_FMT_cfg_stride_16384B                            0x8

    #define     BA_VxGMETA_FMT_cfg_format                      0x0000
    #define     B16VxGMETA_FMT_cfg_format                      0x0000
    #define   LSb32VxGMETA_FMT_cfg_format                         4
    #define   LSb16VxGMETA_FMT_cfg_format                         4
    #define       bVxGMETA_FMT_cfg_format                      2
    #define   MSK32VxGMETA_FMT_cfg_format                         0x00000030

    #define     BA_VxGMETA_FMT_cfg_mode                        0x0000
    #define     B16VxGMETA_FMT_cfg_mode                        0x0000
    #define   LSb32VxGMETA_FMT_cfg_mode                           6
    #define   LSb16VxGMETA_FMT_cfg_mode                           6
    #define       bVxGMETA_FMT_cfg_mode                        5
    #define   MSK32VxGMETA_FMT_cfg_mode                           0x000007C0

    #define     BA_VxGMETA_FMT_cfg_weave                       0x0001
    #define     B16VxGMETA_FMT_cfg_weave                       0x0000
    #define   LSb32VxGMETA_FMT_cfg_weave                          11
    #define   LSb16VxGMETA_FMT_cfg_weave                          11
    #define       bVxGMETA_FMT_cfg_weave                       1
    #define   MSK32VxGMETA_FMT_cfg_weave                          0x00000800
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMETA_FMT_roix                            0x0004

    #define     BA_VxGMETA_FMT_roix_xs                         0x0004
    #define     B16VxGMETA_FMT_roix_xs                         0x0004
    #define   LSb32VxGMETA_FMT_roix_xs                            0
    #define   LSb16VxGMETA_FMT_roix_xs                            0
    #define       bVxGMETA_FMT_roix_xs                         12
    #define   MSK32VxGMETA_FMT_roix_xs                            0x00000FFF

    #define     BA_VxGMETA_FMT_roix_xm                         0x0005
    #define     B16VxGMETA_FMT_roix_xm                         0x0004
    #define   LSb32VxGMETA_FMT_roix_xm                            12
    #define   LSb16VxGMETA_FMT_roix_xm                            12
    #define       bVxGMETA_FMT_roix_xm                         12
    #define   MSK32VxGMETA_FMT_roix_xm                            0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMETA_FMT_roiy                            0x0008

    #define     BA_VxGMETA_FMT_roiy_ys                         0x0008
    #define     B16VxGMETA_FMT_roiy_ys                         0x0008
    #define   LSb32VxGMETA_FMT_roiy_ys                            0
    #define   LSb16VxGMETA_FMT_roiy_ys                            0
    #define       bVxGMETA_FMT_roiy_ys                         14
    #define   MSK32VxGMETA_FMT_roiy_ys                            0x00003FFF

    #define     BA_VxGMETA_FMT_roiy_ym                         0x0009
    #define     B16VxGMETA_FMT_roiy_ym                         0x0008
    #define   LSb32VxGMETA_FMT_roiy_ym                            14
    #define   LSb16VxGMETA_FMT_roiy_ym                            14
    #define       bVxGMETA_FMT_roiy_ym                         14
    #define   MSK32VxGMETA_FMT_roiy_ym                            0x0FFFC000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_VxGMETA_FMT {
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMETA_FMT_cfg_stride(r32)                 _BFGET_(r32, 3, 0)
    #define   SET32VxGMETA_FMT_cfg_stride(r32,v)               _BFSET_(r32, 3, 0,v)
    #define   GET16VxGMETA_FMT_cfg_stride(r16)                 _BFGET_(r16, 3, 0)
    #define   SET16VxGMETA_FMT_cfg_stride(r16,v)               _BFSET_(r16, 3, 0,v)

    #define   GET32VxGMETA_FMT_cfg_format(r32)                 _BFGET_(r32, 5, 4)
    #define   SET32VxGMETA_FMT_cfg_format(r32,v)               _BFSET_(r32, 5, 4,v)
    #define   GET16VxGMETA_FMT_cfg_format(r16)                 _BFGET_(r16, 5, 4)
    #define   SET16VxGMETA_FMT_cfg_format(r16,v)               _BFSET_(r16, 5, 4,v)

    #define   GET32VxGMETA_FMT_cfg_mode(r32)                   _BFGET_(r32,10, 6)
    #define   SET32VxGMETA_FMT_cfg_mode(r32,v)                 _BFSET_(r32,10, 6,v)
    #define   GET16VxGMETA_FMT_cfg_mode(r16)                   _BFGET_(r16,10, 6)
    #define   SET16VxGMETA_FMT_cfg_mode(r16,v)                 _BFSET_(r16,10, 6,v)

    #define   GET32VxGMETA_FMT_cfg_weave(r32)                  _BFGET_(r32,11,11)
    #define   SET32VxGMETA_FMT_cfg_weave(r32,v)                _BFSET_(r32,11,11,v)
    #define   GET16VxGMETA_FMT_cfg_weave(r16)                  _BFGET_(r16,11,11)
    #define   SET16VxGMETA_FMT_cfg_weave(r16,v)                _BFSET_(r16,11,11,v)

    #define     w32VxGMETA_FMT_cfg                             {\
            UNSG32 ucfg_stride                                 :  4;\
            UNSG32 ucfg_format                                 :  2;\
            UNSG32 ucfg_mode                                   :  5;\
            UNSG32 ucfg_weave                                  :  1;\
            UNSG32 RSVDx0_b12                                  : 20;\
          }
    union { UNSG32 u32VxGMETA_FMT_cfg;
            struct w32VxGMETA_FMT_cfg;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMETA_FMT_roix_xs(r32)                    _BFGET_(r32,11, 0)
    #define   SET32VxGMETA_FMT_roix_xs(r32,v)                  _BFSET_(r32,11, 0,v)
    #define   GET16VxGMETA_FMT_roix_xs(r16)                    _BFGET_(r16,11, 0)
    #define   SET16VxGMETA_FMT_roix_xs(r16,v)                  _BFSET_(r16,11, 0,v)

    #define   GET32VxGMETA_FMT_roix_xm(r32)                    _BFGET_(r32,23,12)
    #define   SET32VxGMETA_FMT_roix_xm(r32,v)                  _BFSET_(r32,23,12,v)

    #define     w32VxGMETA_FMT_roix                            {\
            UNSG32 uroix_xs                                    : 12;\
            UNSG32 uroix_xm                                    : 12;\
            UNSG32 RSVDx4_b24                                  :  8;\
          }
    union { UNSG32 u32VxGMETA_FMT_roix;
            struct w32VxGMETA_FMT_roix;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMETA_FMT_roiy_ys(r32)                    _BFGET_(r32,13, 0)
    #define   SET32VxGMETA_FMT_roiy_ys(r32,v)                  _BFSET_(r32,13, 0,v)
    #define   GET16VxGMETA_FMT_roiy_ys(r16)                    _BFGET_(r16,13, 0)
    #define   SET16VxGMETA_FMT_roiy_ys(r16,v)                  _BFSET_(r16,13, 0,v)

    #define   GET32VxGMETA_FMT_roiy_ym(r32)                    _BFGET_(r32,27,14)
    #define   SET32VxGMETA_FMT_roiy_ym(r32,v)                  _BFSET_(r32,27,14,v)

    #define     w32VxGMETA_FMT_roiy                            {\
            UNSG32 uroiy_ys                                    : 14;\
            UNSG32 uroiy_ym                                    : 14;\
            UNSG32 RSVDx8_b28                                  :  4;\
          }
    union { UNSG32 u32VxGMETA_FMT_roiy;
            struct w32VxGMETA_FMT_roiy;
          };
    ///////////////////////////////////////////////////////////
    } SIE_VxGMETA_FMT;

    typedef union  T32VxGMETA_FMT_cfg
          { UNSG32 u32;
            struct w32VxGMETA_FMT_cfg;
                 } T32VxGMETA_FMT_cfg;
    typedef union  T32VxGMETA_FMT_roix
          { UNSG32 u32;
            struct w32VxGMETA_FMT_roix;
                 } T32VxGMETA_FMT_roix;
    typedef union  T32VxGMETA_FMT_roiy
          { UNSG32 u32;
            struct w32VxGMETA_FMT_roiy;
                 } T32VxGMETA_FMT_roiy;
    ///////////////////////////////////////////////////////////

    typedef union  TVxGMETA_FMT_cfg
          { UNSG32 u32[1];
            struct {
            struct w32VxGMETA_FMT_cfg;
                   };
                 } TVxGMETA_FMT_cfg;
    typedef union  TVxGMETA_FMT_roix
          { UNSG32 u32[1];
            struct {
            struct w32VxGMETA_FMT_roix;
                   };
                 } TVxGMETA_FMT_roix;
    typedef union  TVxGMETA_FMT_roiy
          { UNSG32 u32[1];
            struct {
            struct w32VxGMETA_FMT_roiy;
                   };
                 } TVxGMETA_FMT_roiy;

    ///////////////////////////////////////////////////////////
     SIGN32 VxGMETA_FMT_drvrd(SIE_VxGMETA_FMT *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 VxGMETA_FMT_drvwr(SIE_VxGMETA_FMT *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void VxGMETA_FMT_reset(SIE_VxGMETA_FMT *p);
     SIGN32 VxGMETA_FMT_cmp  (SIE_VxGMETA_FMT *p, SIE_VxGMETA_FMT *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define VxGMETA_FMT_check(p,pie,pfx,hLOG) VxGMETA_FMT_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define VxGMETA_FMT_print(p,    pfx,hLOG) VxGMETA_FMT_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: VxGMETA_FMT
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE VxGMETA                 biu              (4,4)
///     ###
///     * MTR frame buffer header for MTR-R in VxG.
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 base                 (P)
///               %unsigned 20 addr                      0x0
///                                    ###
///                                    * Meta buffer base address, in 4KB unit.
///                                    ###
///               %%        12         # Stuffing bits...
///     @ 0x00004 offset               (P)
///     # 0x00004 offset               
///               $VxGMETA_OFST        offset            REG      [16]
///                                    ###
///                                    * Meta buffer address offset, indexed by thread ID (bid).
///                                    ###
///     @ 0x00044 cdesc                (P)
///               %unsigned 5  base_l                    0x0
///                                    ###
///                                    * Meta cache TAG base address for luma thread in 64B
///                                    ###
///               %unsigned 3  ways_l                    0x7
///                                    ###
///                                    * Meta cache WAYs (Actual value shoud be 'ways'+1) for luma thread in 64B. Note that each thread used the full-associative cache
///                                    ###
///               %unsigned 5  base_c                    0x0
///                                    ###
///                                    * Meta cache TAG base address for chroma thread in 64B
///                                    ###
///               %unsigned 3  ways_c                    0x7
///                                    ###
///                                    * Meta cache WAYs (Actual value shoud be 'ways'+1) for chroma thread in 64B. Note that each thread used the full-associative cache
///                                    ###
///               %unsigned 1  auto_tag_clr              0x0
///                                    ###
///                                    * Hardware will automatically clear meta cache tag for this thread when kick off
///                                    ###
///               %unsigned 1  type_l                    0x0
///                                    ###
///                                    * Cache line size selections for luma, right now only VxG version meta cache support 32B cache line; AVIO/ISP usage should be only configured as 0
///                                    ###
///               %unsigned 1  type_c                    0x0
///                                    ###
///                                    * Cache line size selections for chroma, right now only VxG version meta cache support 32B cache line; AVIO/ISP usage should be only configured as 0
///                                    ###
///               %%        13         # Stuffing bits...
///     @ 0x00048 cfg                  (P)
///               %unsigned 32 enable                    0x0
///                                    ###
///                                    * Set 1 to enable MTR-R de-compression engine for this thread.
///                                    ###
///     @ 0x0004C METAIDMAP            (P)
///     # 0x0004C metaidmap            
///               $IDMAP               metaidmap         REG          
///     @ 0x00054 METAY                (P)
///     # 0x00054 metay                
///               $VxGMETA_FMT         metay             REG       [8]
///     @ 0x000B4 METAC                (P)
///     # 0x000B4 metac                
///               $VxGMETA_FMT         metac             REG       [8]
///                                    ###
///                                    * End of VxGMETA
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     276B, bits:    1655b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_VxGMETA
#define h_VxGMETA (){}

    #define     RA_VxGMETA_base                                0x0000

    #define     BA_VxGMETA_base_addr                           0x0000
    #define     B16VxGMETA_base_addr                           0x0000
    #define   LSb32VxGMETA_base_addr                              0
    #define   LSb16VxGMETA_base_addr                              0
    #define       bVxGMETA_base_addr                           20
    #define   MSK32VxGMETA_base_addr                              0x000FFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMETA_offset                              0x0004
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMETA_cdesc                               0x0044

    #define     BA_VxGMETA_cdesc_base_l                        0x0044
    #define     B16VxGMETA_cdesc_base_l                        0x0044
    #define   LSb32VxGMETA_cdesc_base_l                           0
    #define   LSb16VxGMETA_cdesc_base_l                           0
    #define       bVxGMETA_cdesc_base_l                        5
    #define   MSK32VxGMETA_cdesc_base_l                           0x0000001F

    #define     BA_VxGMETA_cdesc_ways_l                        0x0044
    #define     B16VxGMETA_cdesc_ways_l                        0x0044
    #define   LSb32VxGMETA_cdesc_ways_l                           5
    #define   LSb16VxGMETA_cdesc_ways_l                           5
    #define       bVxGMETA_cdesc_ways_l                        3
    #define   MSK32VxGMETA_cdesc_ways_l                           0x000000E0

    #define     BA_VxGMETA_cdesc_base_c                        0x0045
    #define     B16VxGMETA_cdesc_base_c                        0x0044
    #define   LSb32VxGMETA_cdesc_base_c                           8
    #define   LSb16VxGMETA_cdesc_base_c                           8
    #define       bVxGMETA_cdesc_base_c                        5
    #define   MSK32VxGMETA_cdesc_base_c                           0x00001F00

    #define     BA_VxGMETA_cdesc_ways_c                        0x0045
    #define     B16VxGMETA_cdesc_ways_c                        0x0044
    #define   LSb32VxGMETA_cdesc_ways_c                           13
    #define   LSb16VxGMETA_cdesc_ways_c                           13
    #define       bVxGMETA_cdesc_ways_c                        3
    #define   MSK32VxGMETA_cdesc_ways_c                           0x0000E000

    #define     BA_VxGMETA_cdesc_auto_tag_clr                  0x0046
    #define     B16VxGMETA_cdesc_auto_tag_clr                  0x0046
    #define   LSb32VxGMETA_cdesc_auto_tag_clr                     16
    #define   LSb16VxGMETA_cdesc_auto_tag_clr                     0
    #define       bVxGMETA_cdesc_auto_tag_clr                  1
    #define   MSK32VxGMETA_cdesc_auto_tag_clr                     0x00010000

    #define     BA_VxGMETA_cdesc_type_l                        0x0046
    #define     B16VxGMETA_cdesc_type_l                        0x0046
    #define   LSb32VxGMETA_cdesc_type_l                           17
    #define   LSb16VxGMETA_cdesc_type_l                           1
    #define       bVxGMETA_cdesc_type_l                        1
    #define   MSK32VxGMETA_cdesc_type_l                           0x00020000

    #define     BA_VxGMETA_cdesc_type_c                        0x0046
    #define     B16VxGMETA_cdesc_type_c                        0x0046
    #define   LSb32VxGMETA_cdesc_type_c                           18
    #define   LSb16VxGMETA_cdesc_type_c                           2
    #define       bVxGMETA_cdesc_type_c                        1
    #define   MSK32VxGMETA_cdesc_type_c                           0x00040000
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMETA_cfg                                 0x0048

    #define     BA_VxGMETA_cfg_enable                          0x0048
    #define     B16VxGMETA_cfg_enable                          0x0048
    #define   LSb32VxGMETA_cfg_enable                             0
    #define   LSb16VxGMETA_cfg_enable                             0
    #define       bVxGMETA_cfg_enable                          32
    #define   MSK32VxGMETA_cfg_enable                             0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMETA_METAIDMAP                           0x004C
    #define     RA_VxGMETA_metaidmap                           0x004C
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMETA_METAY                               0x0054
    #define     RA_VxGMETA_metay                               0x0054
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMETA_METAC                               0x00B4
    #define     RA_VxGMETA_metac                               0x00B4
    ///////////////////////////////////////////////////////////

    typedef struct SIE_VxGMETA {
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMETA_base_addr(r32)                      _BFGET_(r32,19, 0)
    #define   SET32VxGMETA_base_addr(r32,v)                    _BFSET_(r32,19, 0,v)

    #define     w32VxGMETA_base                                {\
            UNSG32 ubase_addr                                  : 20;\
            UNSG32 RSVDx0_b20                                  : 12;\
          }
    union { UNSG32 u32VxGMETA_base;
            struct w32VxGMETA_base;
          };
    ///////////////////////////////////////////////////////////
              SIE_VxGMETA_OFST                                 ie_offset[16];
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMETA_cdesc_base_l(r32)                   _BFGET_(r32, 4, 0)
    #define   SET32VxGMETA_cdesc_base_l(r32,v)                 _BFSET_(r32, 4, 0,v)
    #define   GET16VxGMETA_cdesc_base_l(r16)                   _BFGET_(r16, 4, 0)
    #define   SET16VxGMETA_cdesc_base_l(r16,v)                 _BFSET_(r16, 4, 0,v)

    #define   GET32VxGMETA_cdesc_ways_l(r32)                   _BFGET_(r32, 7, 5)
    #define   SET32VxGMETA_cdesc_ways_l(r32,v)                 _BFSET_(r32, 7, 5,v)
    #define   GET16VxGMETA_cdesc_ways_l(r16)                   _BFGET_(r16, 7, 5)
    #define   SET16VxGMETA_cdesc_ways_l(r16,v)                 _BFSET_(r16, 7, 5,v)

    #define   GET32VxGMETA_cdesc_base_c(r32)                   _BFGET_(r32,12, 8)
    #define   SET32VxGMETA_cdesc_base_c(r32,v)                 _BFSET_(r32,12, 8,v)
    #define   GET16VxGMETA_cdesc_base_c(r16)                   _BFGET_(r16,12, 8)
    #define   SET16VxGMETA_cdesc_base_c(r16,v)                 _BFSET_(r16,12, 8,v)

    #define   GET32VxGMETA_cdesc_ways_c(r32)                   _BFGET_(r32,15,13)
    #define   SET32VxGMETA_cdesc_ways_c(r32,v)                 _BFSET_(r32,15,13,v)
    #define   GET16VxGMETA_cdesc_ways_c(r16)                   _BFGET_(r16,15,13)
    #define   SET16VxGMETA_cdesc_ways_c(r16,v)                 _BFSET_(r16,15,13,v)

    #define   GET32VxGMETA_cdesc_auto_tag_clr(r32)             _BFGET_(r32,16,16)
    #define   SET32VxGMETA_cdesc_auto_tag_clr(r32,v)           _BFSET_(r32,16,16,v)
    #define   GET16VxGMETA_cdesc_auto_tag_clr(r16)             _BFGET_(r16, 0, 0)
    #define   SET16VxGMETA_cdesc_auto_tag_clr(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32VxGMETA_cdesc_type_l(r32)                   _BFGET_(r32,17,17)
    #define   SET32VxGMETA_cdesc_type_l(r32,v)                 _BFSET_(r32,17,17,v)
    #define   GET16VxGMETA_cdesc_type_l(r16)                   _BFGET_(r16, 1, 1)
    #define   SET16VxGMETA_cdesc_type_l(r16,v)                 _BFSET_(r16, 1, 1,v)

    #define   GET32VxGMETA_cdesc_type_c(r32)                   _BFGET_(r32,18,18)
    #define   SET32VxGMETA_cdesc_type_c(r32,v)                 _BFSET_(r32,18,18,v)
    #define   GET16VxGMETA_cdesc_type_c(r16)                   _BFGET_(r16, 2, 2)
    #define   SET16VxGMETA_cdesc_type_c(r16,v)                 _BFSET_(r16, 2, 2,v)

    #define     w32VxGMETA_cdesc                               {\
            UNSG32 ucdesc_base_l                               :  5;\
            UNSG32 ucdesc_ways_l                               :  3;\
            UNSG32 ucdesc_base_c                               :  5;\
            UNSG32 ucdesc_ways_c                               :  3;\
            UNSG32 ucdesc_auto_tag_clr                         :  1;\
            UNSG32 ucdesc_type_l                               :  1;\
            UNSG32 ucdesc_type_c                               :  1;\
            UNSG32 RSVDx44_b19                                 : 13;\
          }
    union { UNSG32 u32VxGMETA_cdesc;
            struct w32VxGMETA_cdesc;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMETA_cfg_enable(r32)                     _BFGET_(r32,31, 0)
    #define   SET32VxGMETA_cfg_enable(r32,v)                   _BFSET_(r32,31, 0,v)

    #define     w32VxGMETA_cfg                                 {\
            UNSG32 ucfg_enable                                 : 32;\
          }
    union { UNSG32 u32VxGMETA_cfg;
            struct w32VxGMETA_cfg;
          };
    ///////////////////////////////////////////////////////////
              SIE_IDMAP                                        ie_metaidmap;
    ///////////////////////////////////////////////////////////
              SIE_VxGMETA_FMT                                  ie_metay[8];
    ///////////////////////////////////////////////////////////
              SIE_VxGMETA_FMT                                  ie_metac[8];
    ///////////////////////////////////////////////////////////
    } SIE_VxGMETA;

    typedef union  T32VxGMETA_base
          { UNSG32 u32;
            struct w32VxGMETA_base;
                 } T32VxGMETA_base;
    typedef union  T32VxGMETA_cdesc
          { UNSG32 u32;
            struct w32VxGMETA_cdesc;
                 } T32VxGMETA_cdesc;
    typedef union  T32VxGMETA_cfg
          { UNSG32 u32;
            struct w32VxGMETA_cfg;
                 } T32VxGMETA_cfg;
    ///////////////////////////////////////////////////////////

    typedef union  TVxGMETA_base
          { UNSG32 u32[1];
            struct {
            struct w32VxGMETA_base;
                   };
                 } TVxGMETA_base;
    typedef union  TVxGMETA_cdesc
          { UNSG32 u32[1];
            struct {
            struct w32VxGMETA_cdesc;
                   };
                 } TVxGMETA_cdesc;
    typedef union  TVxGMETA_cfg
          { UNSG32 u32[1];
            struct {
            struct w32VxGMETA_cfg;
                   };
                 } TVxGMETA_cfg;

    ///////////////////////////////////////////////////////////
     SIGN32 VxGMETA_drvrd(SIE_VxGMETA *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 VxGMETA_drvwr(SIE_VxGMETA *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void VxGMETA_reset(SIE_VxGMETA *p);
     SIGN32 VxGMETA_cmp  (SIE_VxGMETA *p, SIE_VxGMETA *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define VxGMETA_check(p,pie,pfx,hLOG) VxGMETA_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define VxGMETA_print(p,    pfx,hLOG) VxGMETA_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: VxGMETA
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE VxGMMU_STRD             biu              (4,4)
///     ###
///     * MMU stride descriptor for VxG use, in which luma and chroma are always combined
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 stride               (P)
///               %unsigned 16 luma                      0x0
///                                    ###
///                                    * Stride for luma reference buffer, in 64Byte unit.
///                                    ###
///               %unsigned 16 chroma                    0x0
///                                    ###
///                                    * Stride for chroma reference buffer buffer, in 64 Byte
///                                    * End of VxGMMU_STRD
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      32b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_VxGMMU_STRD
#define h_VxGMMU_STRD (){}

    #define     RA_VxGMMU_STRD_stride                          0x0000

    #define     BA_VxGMMU_STRD_stride_luma                     0x0000
    #define     B16VxGMMU_STRD_stride_luma                     0x0000
    #define   LSb32VxGMMU_STRD_stride_luma                        0
    #define   LSb16VxGMMU_STRD_stride_luma                        0
    #define       bVxGMMU_STRD_stride_luma                     16
    #define   MSK32VxGMMU_STRD_stride_luma                        0x0000FFFF

    #define     BA_VxGMMU_STRD_stride_chroma                   0x0002
    #define     B16VxGMMU_STRD_stride_chroma                   0x0002
    #define   LSb32VxGMMU_STRD_stride_chroma                      16
    #define   LSb16VxGMMU_STRD_stride_chroma                      0
    #define       bVxGMMU_STRD_stride_chroma                   16
    #define   MSK32VxGMMU_STRD_stride_chroma                      0xFFFF0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_VxGMMU_STRD {
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMMU_STRD_stride_luma(r32)                _BFGET_(r32,15, 0)
    #define   SET32VxGMMU_STRD_stride_luma(r32,v)              _BFSET_(r32,15, 0,v)
    #define   GET16VxGMMU_STRD_stride_luma(r16)                _BFGET_(r16,15, 0)
    #define   SET16VxGMMU_STRD_stride_luma(r16,v)              _BFSET_(r16,15, 0,v)

    #define   GET32VxGMMU_STRD_stride_chroma(r32)              _BFGET_(r32,31,16)
    #define   SET32VxGMMU_STRD_stride_chroma(r32,v)            _BFSET_(r32,31,16,v)
    #define   GET16VxGMMU_STRD_stride_chroma(r16)              _BFGET_(r16,15, 0)
    #define   SET16VxGMMU_STRD_stride_chroma(r16,v)            _BFSET_(r16,15, 0,v)

    #define     w32VxGMMU_STRD_stride                          {\
            UNSG32 ustride_luma                                : 16;\
            UNSG32 ustride_chroma                              : 16;\
          }
    union { UNSG32 u32VxGMMU_STRD_stride;
            struct w32VxGMMU_STRD_stride;
          };
    ///////////////////////////////////////////////////////////
    } SIE_VxGMMU_STRD;

    typedef union  T32VxGMMU_STRD_stride
          { UNSG32 u32;
            struct w32VxGMMU_STRD_stride;
                 } T32VxGMMU_STRD_stride;
    ///////////////////////////////////////////////////////////

    typedef union  TVxGMMU_STRD_stride
          { UNSG32 u32[1];
            struct {
            struct w32VxGMMU_STRD_stride;
                   };
                 } TVxGMMU_STRD_stride;

    ///////////////////////////////////////////////////////////
     SIGN32 VxGMMU_STRD_drvrd(SIE_VxGMMU_STRD *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 VxGMMU_STRD_drvwr(SIE_VxGMMU_STRD *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void VxGMMU_STRD_reset(SIE_VxGMMU_STRD *p);
     SIGN32 VxGMMU_STRD_cmp  (SIE_VxGMMU_STRD *p, SIE_VxGMMU_STRD *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define VxGMMU_STRD_check(p,pie,pfx,hLOG) VxGMMU_STRD_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define VxGMMU_STRD_print(p,    pfx,hLOG) VxGMMU_STRD_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: VxGMMU_STRD
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE VxGMMU_BASE             biu              (4,4)
///     ###
///     * MMU buffer base descriptor for VxG use
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 base                 (P)
///               %unsigned 20 val                       0x0
///                                    ###
///                                    * Frame buffer base address when MMU was disabled or page table base address when MMU is enabled
///                                    * In the unit of 4KB.
///                                    * End of VxGMMU_BASE
///                                    ###
///               %%        12         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      20b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_VxGMMU_BASE
#define h_VxGMMU_BASE (){}

    #define     RA_VxGMMU_BASE_base                            0x0000

    #define     BA_VxGMMU_BASE_base_val                        0x0000
    #define     B16VxGMMU_BASE_base_val                        0x0000
    #define   LSb32VxGMMU_BASE_base_val                           0
    #define   LSb16VxGMMU_BASE_base_val                           0
    #define       bVxGMMU_BASE_base_val                        20
    #define   MSK32VxGMMU_BASE_base_val                           0x000FFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_VxGMMU_BASE {
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMMU_BASE_base_val(r32)                   _BFGET_(r32,19, 0)
    #define   SET32VxGMMU_BASE_base_val(r32,v)                 _BFSET_(r32,19, 0,v)

    #define     w32VxGMMU_BASE_base                            {\
            UNSG32 ubase_val                                   : 20;\
            UNSG32 RSVDx0_b20                                  : 12;\
          }
    union { UNSG32 u32VxGMMU_BASE_base;
            struct w32VxGMMU_BASE_base;
          };
    ///////////////////////////////////////////////////////////
    } SIE_VxGMMU_BASE;

    typedef union  T32VxGMMU_BASE_base
          { UNSG32 u32;
            struct w32VxGMMU_BASE_base;
                 } T32VxGMMU_BASE_base;
    ///////////////////////////////////////////////////////////

    typedef union  TVxGMMU_BASE_base
          { UNSG32 u32[1];
            struct {
            struct w32VxGMMU_BASE_base;
                   };
                 } TVxGMMU_BASE_base;

    ///////////////////////////////////////////////////////////
     SIGN32 VxGMMU_BASE_drvrd(SIE_VxGMMU_BASE *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 VxGMMU_BASE_drvwr(SIE_VxGMMU_BASE *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void VxGMMU_BASE_reset(SIE_VxGMMU_BASE *p);
     SIGN32 VxGMMU_BASE_cmp  (SIE_VxGMMU_BASE *p, SIE_VxGMMU_BASE *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define VxGMMU_BASE_check(p,pie,pfx,hLOG) VxGMMU_BASE_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define VxGMMU_BASE_print(p,    pfx,hLOG) VxGMMU_BASE_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: VxGMMU_BASE
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE VxGMMUW_CFG             biu              (4,4)
///     ###
///     * MMU CFG for one write thread for VxG use case
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 pbm                  (P)
///               ###
///               * Settings for page mapping stage.
///               ###
///               %unsigned 3  shy_bw                    0x0
///               %unsigned 1  shy_pos                   0x0
///                                    ###
///                                    * The lower shy_bw bits of 'ya' will be inserted into bit (shy_pos+2) of 'xa', the remaining bits of xa ([AX-1:shy_pos+2]) will be automatically left shift by (shy_bw+2) bits.
///                                    * Page height (shy_bw) for tile mode: 4, 8, 16, 32, 64, 128
///                                    * Page width (shy_pos) for tile mode: 64, 128
///                                    ###
///               %unsigned 22 stride_64B                0x0
///                                    ###
///                                    * Actual stride of the buffer. After page mapping, the remapped linear address should be converted to actual relative address using the actual stride, which should be derived by (stride_64B<<6)
///                                    ###
///               %unsigned 1  tileMode                  0x1
///                                    ###
///                                    * 0: Raster-scanned format
///                                    * 1: Data format in one burst is 64x4 or 48x4 tile mode. Or Data format in one burst is 32x8 or 24x8 or 32x6 tile mode.
///                                    ###
///               %unsigned 1  pm_enable                 0x0
///                                    ###
///                                    * Set 0 to bypass page mapping stage
///                                    ###
///               %unsigned 1  shuffle_en                0x0
///                                    ###
///                                    * Set 1 to enable address shuffle for bit[7:6] of input linear address.
///                                    ###
///               %unsigned 1  bm_enable                 0x0
///                                    ###
///                                    * Set 1 to enable bank mapping
///                                    ###
///               %unsigned 1  weave                     0x0
///                                    ###
///                                    * 1: output picture is one of the interleaced fields
///                                    * 0: normal frame
///                                    ###
///               %%        1          # Stuffing bits...
///     @ 0x00004 vm                   (P)
///               ###
///               * Settings for virtual address to physical address mapping, the actual 'MMU' operation.
///               ###
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * Set 0 to bypass the virtual address to physical address mapping.
///                                    ###
///               %unsigned 1  prefecth_disable          0x0
///                                    ###
///                                    * Set 1 to disable pre-fetch of page table entries in advance for real-time case, such as VPP use case
///                                    ###
///               %unsigned 3  mode                      0x0
///                                    : normal                    0x0
///                                    : section                   0x1
///                                    : ovp                       0x2
///                                    : pfu                       0x3
///                                    : auto                      0x4
///                                                 ###
///                                                 * Prefetch mode, please refer to section 2.5.2
///                                                 ###
///               %unsigned 1  mTyp                      0x0
///                                    ###
///                                    * Sub-mode selections for Section mode and PFU mode, please refer to section 2.5.2
///                                    ###
///               %unsigned 3  delta                     0x0
///                                    ###
///                                    * For normal mode, it indicates the prefetch distance is (delta+1) * section width. (Maximum value: 1)
///                                    * For section mode, it indicates the prefetch distance is (delta+1) * section size. (Maximum value: 3)
///                                    * For OVP mode, it indicates (delta+1) sections in the first row of tile need to be prefetched after harware kicked off.
///                                    * For pfu mode, it a 3 bit value range from -4 to 4, which represent the ratio between ctbSz and page height. i.e., delta=log2(ctbSz/page height). When mTyp=0, the value ranges from [-4, 2]; when mTyp=1, the value ranges from [1, 4].
///                                    ###
///               %unsigned 20 base                      0x0
///                                    ###
///                                    * Base address in 4KB, the actual base is (base.val<<12).
///                                    * When VM is disabled, it's the base address of frame buffer.
///                                    * When VM is enabled, it's the base address of page table.
///                                    ###
///               %unsigned 1  auto_tag_clr              0x0
///                                    ###
///                                    * Hardware will automatically clear page table cache tag for this thread when kick off
///                                    ###
///               %%        2          # Stuffing bits...
///     @ 0x00008 cdesc                (P)
///               ###
///               * Page table cache descriptor and bank mapping control for current thread.
///               ###
///               %unsigned 6  base                      0x0
///                                    ###
///                                    * TAG base address for this thread in 64B
///                                    ###
///               %unsigned 3  ways                      0x7
///                                    ###
///                                    * WAYs (Actual value shoud be 'ways'+1) for this thread in 64B. Note that each thread used the full-associative cache, thread ID is composed by {bid[0], uv[0]}.
///                                    ###
///               %unsigned 1  rpTyp                     0x0
///                                    : lru                       0x0
///                                    : fifo                      0x1
///                                                 ###
///                                                 * Cache replace strategy
///                                                 * 0: LRU
///                                                 * 1: FIFO (used for VPP/PFU/OVP which have fixed order to scan pixels)
///                                                 ###
///               %unsigned 1  type                      0x0
///                                    : 64B                       0x0
///                                    : 32B                       0x1
///                                                 ###
///                                                 * Cache line size selections, right now only VxG version MMU support 32B cache line; AVIO/ISP usage should be only configured as 0
///                                                 * Below fields are for ROI (Region of interest) settings for current thread that is processing.
///                                                 ###
///               %%        21         # Stuffing bits...
///     @ 0x0000C roix                 (P)
///               %unsigned 12 xs                        0x0
///                                    ###
///                                    * Start coordinate of buffer in x direction in the unit of 64x4 (8-bit) or 48x4 (10-bit) for tile mode or 64B for raster-scanned mode, or in the unit of 32x8 (8-bit) for V8H32 tile mode.
///                                    * The unit is 64B for all formats.
///                                    ###
///               %unsigned 12 xm                        0x10
///                                    ###
///                                    * End coordinate of buffer in x direction in the unit of 64x4 (8-bit) or 48x4 (10-bit) for tile mode or 64B for raster-scanned mode, or in the unit of 32x8 (8-bit) for V8H32 tile mode.
///                                    * Note that xm should reflect the actual physical stride of the physical buffer.
///                                    * The unit is 64B for all formats.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00010 roiy                 (P)
///               %unsigned 14 ys                        0x0
///                                    ###
///                                    * Start coordinate of buffer in y direction in the unit of 4x4 for tile mode, or 1x1 for raster-scanned mode, or in the unit of 8x8 for V8H32 tile mode.
///                                    * The unit is 1 Compression Unit.
///                                    ###
///               %unsigned 14 ym                        0x200
///                                    ###
///                                    * End coordinate of buffer in y direction in the unit of 4x4 for tile mode, or 1x1 for raster-scanned mode, or in the unit of 8x8 for V8H32 tile mode.
///                                    * The unit is 1 Compression Unit.
///                                    * End of VxGMMUW_CFG
///                                    ###
///               %%        4          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      20B, bits:     124b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_VxGMMUW_CFG
#define h_VxGMMUW_CFG (){}

    #define     RA_VxGMMUW_CFG_pbm                             0x0000

    #define     BA_VxGMMUW_CFG_pbm_shy_bw                      0x0000
    #define     B16VxGMMUW_CFG_pbm_shy_bw                      0x0000
    #define   LSb32VxGMMUW_CFG_pbm_shy_bw                         0
    #define   LSb16VxGMMUW_CFG_pbm_shy_bw                         0
    #define       bVxGMMUW_CFG_pbm_shy_bw                      3
    #define   MSK32VxGMMUW_CFG_pbm_shy_bw                         0x00000007

    #define     BA_VxGMMUW_CFG_pbm_shy_pos                     0x0000
    #define     B16VxGMMUW_CFG_pbm_shy_pos                     0x0000
    #define   LSb32VxGMMUW_CFG_pbm_shy_pos                        3
    #define   LSb16VxGMMUW_CFG_pbm_shy_pos                        3
    #define       bVxGMMUW_CFG_pbm_shy_pos                     1
    #define   MSK32VxGMMUW_CFG_pbm_shy_pos                        0x00000008

    #define     BA_VxGMMUW_CFG_pbm_stride_64B                  0x0000
    #define     B16VxGMMUW_CFG_pbm_stride_64B                  0x0000
    #define   LSb32VxGMMUW_CFG_pbm_stride_64B                     4
    #define   LSb16VxGMMUW_CFG_pbm_stride_64B                     4
    #define       bVxGMMUW_CFG_pbm_stride_64B                  22
    #define   MSK32VxGMMUW_CFG_pbm_stride_64B                     0x03FFFFF0

    #define     BA_VxGMMUW_CFG_pbm_tileMode                    0x0003
    #define     B16VxGMMUW_CFG_pbm_tileMode                    0x0002
    #define   LSb32VxGMMUW_CFG_pbm_tileMode                       26
    #define   LSb16VxGMMUW_CFG_pbm_tileMode                       10
    #define       bVxGMMUW_CFG_pbm_tileMode                    1
    #define   MSK32VxGMMUW_CFG_pbm_tileMode                       0x04000000

    #define     BA_VxGMMUW_CFG_pbm_pm_enable                   0x0003
    #define     B16VxGMMUW_CFG_pbm_pm_enable                   0x0002
    #define   LSb32VxGMMUW_CFG_pbm_pm_enable                      27
    #define   LSb16VxGMMUW_CFG_pbm_pm_enable                      11
    #define       bVxGMMUW_CFG_pbm_pm_enable                   1
    #define   MSK32VxGMMUW_CFG_pbm_pm_enable                      0x08000000

    #define     BA_VxGMMUW_CFG_pbm_shuffle_en                  0x0003
    #define     B16VxGMMUW_CFG_pbm_shuffle_en                  0x0002
    #define   LSb32VxGMMUW_CFG_pbm_shuffle_en                     28
    #define   LSb16VxGMMUW_CFG_pbm_shuffle_en                     12
    #define       bVxGMMUW_CFG_pbm_shuffle_en                  1
    #define   MSK32VxGMMUW_CFG_pbm_shuffle_en                     0x10000000

    #define     BA_VxGMMUW_CFG_pbm_bm_enable                   0x0003
    #define     B16VxGMMUW_CFG_pbm_bm_enable                   0x0002
    #define   LSb32VxGMMUW_CFG_pbm_bm_enable                      29
    #define   LSb16VxGMMUW_CFG_pbm_bm_enable                      13
    #define       bVxGMMUW_CFG_pbm_bm_enable                   1
    #define   MSK32VxGMMUW_CFG_pbm_bm_enable                      0x20000000

    #define     BA_VxGMMUW_CFG_pbm_weave                       0x0003
    #define     B16VxGMMUW_CFG_pbm_weave                       0x0002
    #define   LSb32VxGMMUW_CFG_pbm_weave                          30
    #define   LSb16VxGMMUW_CFG_pbm_weave                          14
    #define       bVxGMMUW_CFG_pbm_weave                       1
    #define   MSK32VxGMMUW_CFG_pbm_weave                          0x40000000
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMMUW_CFG_vm                              0x0004

    #define     BA_VxGMMUW_CFG_vm_enable                       0x0004
    #define     B16VxGMMUW_CFG_vm_enable                       0x0004
    #define   LSb32VxGMMUW_CFG_vm_enable                          0
    #define   LSb16VxGMMUW_CFG_vm_enable                          0
    #define       bVxGMMUW_CFG_vm_enable                       1
    #define   MSK32VxGMMUW_CFG_vm_enable                          0x00000001

    #define     BA_VxGMMUW_CFG_vm_prefecth_disable             0x0004
    #define     B16VxGMMUW_CFG_vm_prefecth_disable             0x0004
    #define   LSb32VxGMMUW_CFG_vm_prefecth_disable                1
    #define   LSb16VxGMMUW_CFG_vm_prefecth_disable                1
    #define       bVxGMMUW_CFG_vm_prefecth_disable             1
    #define   MSK32VxGMMUW_CFG_vm_prefecth_disable                0x00000002

    #define     BA_VxGMMUW_CFG_vm_mode                         0x0004
    #define     B16VxGMMUW_CFG_vm_mode                         0x0004
    #define   LSb32VxGMMUW_CFG_vm_mode                            2
    #define   LSb16VxGMMUW_CFG_vm_mode                            2
    #define       bVxGMMUW_CFG_vm_mode                         3
    #define   MSK32VxGMMUW_CFG_vm_mode                            0x0000001C
    #define        VxGMMUW_CFG_vm_mode_normal                               0x0
    #define        VxGMMUW_CFG_vm_mode_section                              0x1
    #define        VxGMMUW_CFG_vm_mode_ovp                                  0x2
    #define        VxGMMUW_CFG_vm_mode_pfu                                  0x3
    #define        VxGMMUW_CFG_vm_mode_auto                                 0x4

    #define     BA_VxGMMUW_CFG_vm_mTyp                         0x0004
    #define     B16VxGMMUW_CFG_vm_mTyp                         0x0004
    #define   LSb32VxGMMUW_CFG_vm_mTyp                            5
    #define   LSb16VxGMMUW_CFG_vm_mTyp                            5
    #define       bVxGMMUW_CFG_vm_mTyp                         1
    #define   MSK32VxGMMUW_CFG_vm_mTyp                            0x00000020

    #define     BA_VxGMMUW_CFG_vm_delta                        0x0004
    #define     B16VxGMMUW_CFG_vm_delta                        0x0004
    #define   LSb32VxGMMUW_CFG_vm_delta                           6
    #define   LSb16VxGMMUW_CFG_vm_delta                           6
    #define       bVxGMMUW_CFG_vm_delta                        3
    #define   MSK32VxGMMUW_CFG_vm_delta                           0x000001C0

    #define     BA_VxGMMUW_CFG_vm_base                         0x0005
    #define     B16VxGMMUW_CFG_vm_base                         0x0004
    #define   LSb32VxGMMUW_CFG_vm_base                            9
    #define   LSb16VxGMMUW_CFG_vm_base                            9
    #define       bVxGMMUW_CFG_vm_base                         20
    #define   MSK32VxGMMUW_CFG_vm_base                            0x1FFFFE00

    #define     BA_VxGMMUW_CFG_vm_auto_tag_clr                 0x0007
    #define     B16VxGMMUW_CFG_vm_auto_tag_clr                 0x0006
    #define   LSb32VxGMMUW_CFG_vm_auto_tag_clr                    29
    #define   LSb16VxGMMUW_CFG_vm_auto_tag_clr                    13
    #define       bVxGMMUW_CFG_vm_auto_tag_clr                 1
    #define   MSK32VxGMMUW_CFG_vm_auto_tag_clr                    0x20000000
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMMUW_CFG_cdesc                           0x0008

    #define     BA_VxGMMUW_CFG_cdesc_base                      0x0008
    #define     B16VxGMMUW_CFG_cdesc_base                      0x0008
    #define   LSb32VxGMMUW_CFG_cdesc_base                         0
    #define   LSb16VxGMMUW_CFG_cdesc_base                         0
    #define       bVxGMMUW_CFG_cdesc_base                      6
    #define   MSK32VxGMMUW_CFG_cdesc_base                         0x0000003F

    #define     BA_VxGMMUW_CFG_cdesc_ways                      0x0008
    #define     B16VxGMMUW_CFG_cdesc_ways                      0x0008
    #define   LSb32VxGMMUW_CFG_cdesc_ways                         6
    #define   LSb16VxGMMUW_CFG_cdesc_ways                         6
    #define       bVxGMMUW_CFG_cdesc_ways                      3
    #define   MSK32VxGMMUW_CFG_cdesc_ways                         0x000001C0

    #define     BA_VxGMMUW_CFG_cdesc_rpTyp                     0x0009
    #define     B16VxGMMUW_CFG_cdesc_rpTyp                     0x0008
    #define   LSb32VxGMMUW_CFG_cdesc_rpTyp                        9
    #define   LSb16VxGMMUW_CFG_cdesc_rpTyp                        9
    #define       bVxGMMUW_CFG_cdesc_rpTyp                     1
    #define   MSK32VxGMMUW_CFG_cdesc_rpTyp                        0x00000200
    #define        VxGMMUW_CFG_cdesc_rpTyp_lru                              0x0
    #define        VxGMMUW_CFG_cdesc_rpTyp_fifo                             0x1

    #define     BA_VxGMMUW_CFG_cdesc_type                      0x0009
    #define     B16VxGMMUW_CFG_cdesc_type                      0x0008
    #define   LSb32VxGMMUW_CFG_cdesc_type                         10
    #define   LSb16VxGMMUW_CFG_cdesc_type                         10
    #define       bVxGMMUW_CFG_cdesc_type                      1
    #define   MSK32VxGMMUW_CFG_cdesc_type                         0x00000400
    #define        VxGMMUW_CFG_cdesc_type_64B                               0x0
    #define        VxGMMUW_CFG_cdesc_type_32B                               0x1
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMMUW_CFG_roix                            0x000C

    #define     BA_VxGMMUW_CFG_roix_xs                         0x000C
    #define     B16VxGMMUW_CFG_roix_xs                         0x000C
    #define   LSb32VxGMMUW_CFG_roix_xs                            0
    #define   LSb16VxGMMUW_CFG_roix_xs                            0
    #define       bVxGMMUW_CFG_roix_xs                         12
    #define   MSK32VxGMMUW_CFG_roix_xs                            0x00000FFF

    #define     BA_VxGMMUW_CFG_roix_xm                         0x000D
    #define     B16VxGMMUW_CFG_roix_xm                         0x000C
    #define   LSb32VxGMMUW_CFG_roix_xm                            12
    #define   LSb16VxGMMUW_CFG_roix_xm                            12
    #define       bVxGMMUW_CFG_roix_xm                         12
    #define   MSK32VxGMMUW_CFG_roix_xm                            0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMMUW_CFG_roiy                            0x0010

    #define     BA_VxGMMUW_CFG_roiy_ys                         0x0010
    #define     B16VxGMMUW_CFG_roiy_ys                         0x0010
    #define   LSb32VxGMMUW_CFG_roiy_ys                            0
    #define   LSb16VxGMMUW_CFG_roiy_ys                            0
    #define       bVxGMMUW_CFG_roiy_ys                         14
    #define   MSK32VxGMMUW_CFG_roiy_ys                            0x00003FFF

    #define     BA_VxGMMUW_CFG_roiy_ym                         0x0011
    #define     B16VxGMMUW_CFG_roiy_ym                         0x0010
    #define   LSb32VxGMMUW_CFG_roiy_ym                            14
    #define   LSb16VxGMMUW_CFG_roiy_ym                            14
    #define       bVxGMMUW_CFG_roiy_ym                         14
    #define   MSK32VxGMMUW_CFG_roiy_ym                            0x0FFFC000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_VxGMMUW_CFG {
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMMUW_CFG_pbm_shy_bw(r32)                 _BFGET_(r32, 2, 0)
    #define   SET32VxGMMUW_CFG_pbm_shy_bw(r32,v)               _BFSET_(r32, 2, 0,v)
    #define   GET16VxGMMUW_CFG_pbm_shy_bw(r16)                 _BFGET_(r16, 2, 0)
    #define   SET16VxGMMUW_CFG_pbm_shy_bw(r16,v)               _BFSET_(r16, 2, 0,v)

    #define   GET32VxGMMUW_CFG_pbm_shy_pos(r32)                _BFGET_(r32, 3, 3)
    #define   SET32VxGMMUW_CFG_pbm_shy_pos(r32,v)              _BFSET_(r32, 3, 3,v)
    #define   GET16VxGMMUW_CFG_pbm_shy_pos(r16)                _BFGET_(r16, 3, 3)
    #define   SET16VxGMMUW_CFG_pbm_shy_pos(r16,v)              _BFSET_(r16, 3, 3,v)

    #define   GET32VxGMMUW_CFG_pbm_stride_64B(r32)             _BFGET_(r32,25, 4)
    #define   SET32VxGMMUW_CFG_pbm_stride_64B(r32,v)           _BFSET_(r32,25, 4,v)

    #define   GET32VxGMMUW_CFG_pbm_tileMode(r32)               _BFGET_(r32,26,26)
    #define   SET32VxGMMUW_CFG_pbm_tileMode(r32,v)             _BFSET_(r32,26,26,v)
    #define   GET16VxGMMUW_CFG_pbm_tileMode(r16)               _BFGET_(r16,10,10)
    #define   SET16VxGMMUW_CFG_pbm_tileMode(r16,v)             _BFSET_(r16,10,10,v)

    #define   GET32VxGMMUW_CFG_pbm_pm_enable(r32)              _BFGET_(r32,27,27)
    #define   SET32VxGMMUW_CFG_pbm_pm_enable(r32,v)            _BFSET_(r32,27,27,v)
    #define   GET16VxGMMUW_CFG_pbm_pm_enable(r16)              _BFGET_(r16,11,11)
    #define   SET16VxGMMUW_CFG_pbm_pm_enable(r16,v)            _BFSET_(r16,11,11,v)

    #define   GET32VxGMMUW_CFG_pbm_shuffle_en(r32)             _BFGET_(r32,28,28)
    #define   SET32VxGMMUW_CFG_pbm_shuffle_en(r32,v)           _BFSET_(r32,28,28,v)
    #define   GET16VxGMMUW_CFG_pbm_shuffle_en(r16)             _BFGET_(r16,12,12)
    #define   SET16VxGMMUW_CFG_pbm_shuffle_en(r16,v)           _BFSET_(r16,12,12,v)

    #define   GET32VxGMMUW_CFG_pbm_bm_enable(r32)              _BFGET_(r32,29,29)
    #define   SET32VxGMMUW_CFG_pbm_bm_enable(r32,v)            _BFSET_(r32,29,29,v)
    #define   GET16VxGMMUW_CFG_pbm_bm_enable(r16)              _BFGET_(r16,13,13)
    #define   SET16VxGMMUW_CFG_pbm_bm_enable(r16,v)            _BFSET_(r16,13,13,v)

    #define   GET32VxGMMUW_CFG_pbm_weave(r32)                  _BFGET_(r32,30,30)
    #define   SET32VxGMMUW_CFG_pbm_weave(r32,v)                _BFSET_(r32,30,30,v)
    #define   GET16VxGMMUW_CFG_pbm_weave(r16)                  _BFGET_(r16,14,14)
    #define   SET16VxGMMUW_CFG_pbm_weave(r16,v)                _BFSET_(r16,14,14,v)

    #define     w32VxGMMUW_CFG_pbm                             {\
            UNSG32 upbm_shy_bw                                 :  3;\
            UNSG32 upbm_shy_pos                                :  1;\
            UNSG32 upbm_stride_64B                             : 22;\
            UNSG32 upbm_tileMode                               :  1;\
            UNSG32 upbm_pm_enable                              :  1;\
            UNSG32 upbm_shuffle_en                             :  1;\
            UNSG32 upbm_bm_enable                              :  1;\
            UNSG32 upbm_weave                                  :  1;\
            UNSG32 RSVDx0_b31                                  :  1;\
          }
    union { UNSG32 u32VxGMMUW_CFG_pbm;
            struct w32VxGMMUW_CFG_pbm;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMMUW_CFG_vm_enable(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32VxGMMUW_CFG_vm_enable(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMMUW_CFG_vm_enable(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16VxGMMUW_CFG_vm_enable(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32VxGMMUW_CFG_vm_prefecth_disable(r32)        _BFGET_(r32, 1, 1)
    #define   SET32VxGMMUW_CFG_vm_prefecth_disable(r32,v)      _BFSET_(r32, 1, 1,v)
    #define   GET16VxGMMUW_CFG_vm_prefecth_disable(r16)        _BFGET_(r16, 1, 1)
    #define   SET16VxGMMUW_CFG_vm_prefecth_disable(r16,v)      _BFSET_(r16, 1, 1,v)

    #define   GET32VxGMMUW_CFG_vm_mode(r32)                    _BFGET_(r32, 4, 2)
    #define   SET32VxGMMUW_CFG_vm_mode(r32,v)                  _BFSET_(r32, 4, 2,v)
    #define   GET16VxGMMUW_CFG_vm_mode(r16)                    _BFGET_(r16, 4, 2)
    #define   SET16VxGMMUW_CFG_vm_mode(r16,v)                  _BFSET_(r16, 4, 2,v)

    #define   GET32VxGMMUW_CFG_vm_mTyp(r32)                    _BFGET_(r32, 5, 5)
    #define   SET32VxGMMUW_CFG_vm_mTyp(r32,v)                  _BFSET_(r32, 5, 5,v)
    #define   GET16VxGMMUW_CFG_vm_mTyp(r16)                    _BFGET_(r16, 5, 5)
    #define   SET16VxGMMUW_CFG_vm_mTyp(r16,v)                  _BFSET_(r16, 5, 5,v)

    #define   GET32VxGMMUW_CFG_vm_delta(r32)                   _BFGET_(r32, 8, 6)
    #define   SET32VxGMMUW_CFG_vm_delta(r32,v)                 _BFSET_(r32, 8, 6,v)
    #define   GET16VxGMMUW_CFG_vm_delta(r16)                   _BFGET_(r16, 8, 6)
    #define   SET16VxGMMUW_CFG_vm_delta(r16,v)                 _BFSET_(r16, 8, 6,v)

    #define   GET32VxGMMUW_CFG_vm_base(r32)                    _BFGET_(r32,28, 9)
    #define   SET32VxGMMUW_CFG_vm_base(r32,v)                  _BFSET_(r32,28, 9,v)

    #define   GET32VxGMMUW_CFG_vm_auto_tag_clr(r32)            _BFGET_(r32,29,29)
    #define   SET32VxGMMUW_CFG_vm_auto_tag_clr(r32,v)          _BFSET_(r32,29,29,v)
    #define   GET16VxGMMUW_CFG_vm_auto_tag_clr(r16)            _BFGET_(r16,13,13)
    #define   SET16VxGMMUW_CFG_vm_auto_tag_clr(r16,v)          _BFSET_(r16,13,13,v)

    #define     w32VxGMMUW_CFG_vm                              {\
            UNSG32 uvm_enable                                  :  1;\
            UNSG32 uvm_prefecth_disable                        :  1;\
            UNSG32 uvm_mode                                    :  3;\
            UNSG32 uvm_mTyp                                    :  1;\
            UNSG32 uvm_delta                                   :  3;\
            UNSG32 uvm_base                                    : 20;\
            UNSG32 uvm_auto_tag_clr                            :  1;\
            UNSG32 RSVDx4_b30                                  :  2;\
          }
    union { UNSG32 u32VxGMMUW_CFG_vm;
            struct w32VxGMMUW_CFG_vm;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMMUW_CFG_cdesc_base(r32)                 _BFGET_(r32, 5, 0)
    #define   SET32VxGMMUW_CFG_cdesc_base(r32,v)               _BFSET_(r32, 5, 0,v)
    #define   GET16VxGMMUW_CFG_cdesc_base(r16)                 _BFGET_(r16, 5, 0)
    #define   SET16VxGMMUW_CFG_cdesc_base(r16,v)               _BFSET_(r16, 5, 0,v)

    #define   GET32VxGMMUW_CFG_cdesc_ways(r32)                 _BFGET_(r32, 8, 6)
    #define   SET32VxGMMUW_CFG_cdesc_ways(r32,v)               _BFSET_(r32, 8, 6,v)
    #define   GET16VxGMMUW_CFG_cdesc_ways(r16)                 _BFGET_(r16, 8, 6)
    #define   SET16VxGMMUW_CFG_cdesc_ways(r16,v)               _BFSET_(r16, 8, 6,v)

    #define   GET32VxGMMUW_CFG_cdesc_rpTyp(r32)                _BFGET_(r32, 9, 9)
    #define   SET32VxGMMUW_CFG_cdesc_rpTyp(r32,v)              _BFSET_(r32, 9, 9,v)
    #define   GET16VxGMMUW_CFG_cdesc_rpTyp(r16)                _BFGET_(r16, 9, 9)
    #define   SET16VxGMMUW_CFG_cdesc_rpTyp(r16,v)              _BFSET_(r16, 9, 9,v)

    #define   GET32VxGMMUW_CFG_cdesc_type(r32)                 _BFGET_(r32,10,10)
    #define   SET32VxGMMUW_CFG_cdesc_type(r32,v)               _BFSET_(r32,10,10,v)
    #define   GET16VxGMMUW_CFG_cdesc_type(r16)                 _BFGET_(r16,10,10)
    #define   SET16VxGMMUW_CFG_cdesc_type(r16,v)               _BFSET_(r16,10,10,v)

    #define     w32VxGMMUW_CFG_cdesc                           {\
            UNSG32 ucdesc_base                                 :  6;\
            UNSG32 ucdesc_ways                                 :  3;\
            UNSG32 ucdesc_rpTyp                                :  1;\
            UNSG32 ucdesc_type                                 :  1;\
            UNSG32 RSVDx8_b11                                  : 21;\
          }
    union { UNSG32 u32VxGMMUW_CFG_cdesc;
            struct w32VxGMMUW_CFG_cdesc;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMMUW_CFG_roix_xs(r32)                    _BFGET_(r32,11, 0)
    #define   SET32VxGMMUW_CFG_roix_xs(r32,v)                  _BFSET_(r32,11, 0,v)
    #define   GET16VxGMMUW_CFG_roix_xs(r16)                    _BFGET_(r16,11, 0)
    #define   SET16VxGMMUW_CFG_roix_xs(r16,v)                  _BFSET_(r16,11, 0,v)

    #define   GET32VxGMMUW_CFG_roix_xm(r32)                    _BFGET_(r32,23,12)
    #define   SET32VxGMMUW_CFG_roix_xm(r32,v)                  _BFSET_(r32,23,12,v)

    #define     w32VxGMMUW_CFG_roix                            {\
            UNSG32 uroix_xs                                    : 12;\
            UNSG32 uroix_xm                                    : 12;\
            UNSG32 RSVDxC_b24                                  :  8;\
          }
    union { UNSG32 u32VxGMMUW_CFG_roix;
            struct w32VxGMMUW_CFG_roix;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMMUW_CFG_roiy_ys(r32)                    _BFGET_(r32,13, 0)
    #define   SET32VxGMMUW_CFG_roiy_ys(r32,v)                  _BFSET_(r32,13, 0,v)
    #define   GET16VxGMMUW_CFG_roiy_ys(r16)                    _BFGET_(r16,13, 0)
    #define   SET16VxGMMUW_CFG_roiy_ys(r16,v)                  _BFSET_(r16,13, 0,v)

    #define   GET32VxGMMUW_CFG_roiy_ym(r32)                    _BFGET_(r32,27,14)
    #define   SET32VxGMMUW_CFG_roiy_ym(r32,v)                  _BFSET_(r32,27,14,v)

    #define     w32VxGMMUW_CFG_roiy                            {\
            UNSG32 uroiy_ys                                    : 14;\
            UNSG32 uroiy_ym                                    : 14;\
            UNSG32 RSVDx10_b28                                 :  4;\
          }
    union { UNSG32 u32VxGMMUW_CFG_roiy;
            struct w32VxGMMUW_CFG_roiy;
          };
    ///////////////////////////////////////////////////////////
    } SIE_VxGMMUW_CFG;

    typedef union  T32VxGMMUW_CFG_pbm
          { UNSG32 u32;
            struct w32VxGMMUW_CFG_pbm;
                 } T32VxGMMUW_CFG_pbm;
    typedef union  T32VxGMMUW_CFG_vm
          { UNSG32 u32;
            struct w32VxGMMUW_CFG_vm;
                 } T32VxGMMUW_CFG_vm;
    typedef union  T32VxGMMUW_CFG_cdesc
          { UNSG32 u32;
            struct w32VxGMMUW_CFG_cdesc;
                 } T32VxGMMUW_CFG_cdesc;
    typedef union  T32VxGMMUW_CFG_roix
          { UNSG32 u32;
            struct w32VxGMMUW_CFG_roix;
                 } T32VxGMMUW_CFG_roix;
    typedef union  T32VxGMMUW_CFG_roiy
          { UNSG32 u32;
            struct w32VxGMMUW_CFG_roiy;
                 } T32VxGMMUW_CFG_roiy;
    ///////////////////////////////////////////////////////////

    typedef union  TVxGMMUW_CFG_pbm
          { UNSG32 u32[1];
            struct {
            struct w32VxGMMUW_CFG_pbm;
                   };
                 } TVxGMMUW_CFG_pbm;
    typedef union  TVxGMMUW_CFG_vm
          { UNSG32 u32[1];
            struct {
            struct w32VxGMMUW_CFG_vm;
                   };
                 } TVxGMMUW_CFG_vm;
    typedef union  TVxGMMUW_CFG_cdesc
          { UNSG32 u32[1];
            struct {
            struct w32VxGMMUW_CFG_cdesc;
                   };
                 } TVxGMMUW_CFG_cdesc;
    typedef union  TVxGMMUW_CFG_roix
          { UNSG32 u32[1];
            struct {
            struct w32VxGMMUW_CFG_roix;
                   };
                 } TVxGMMUW_CFG_roix;
    typedef union  TVxGMMUW_CFG_roiy
          { UNSG32 u32[1];
            struct {
            struct w32VxGMMUW_CFG_roiy;
                   };
                 } TVxGMMUW_CFG_roiy;

    ///////////////////////////////////////////////////////////
     SIGN32 VxGMMUW_CFG_drvrd(SIE_VxGMMUW_CFG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 VxGMMUW_CFG_drvwr(SIE_VxGMMUW_CFG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void VxGMMUW_CFG_reset(SIE_VxGMMUW_CFG *p);
     SIGN32 VxGMMUW_CFG_cmp  (SIE_VxGMMUW_CFG *p, SIE_VxGMMUW_CFG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define VxGMMUW_CFG_check(p,pie,pfx,hLOG) VxGMMUW_CFG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define VxGMMUW_CFG_print(p,    pfx,hLOG) VxGMMUW_CFG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: VxGMMUW_CFG
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE VxGMMUW                 biu              (4,4)
///     ###
///     * MMU CFG for all write threads for VxG use
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 MMU                  (P)
///     # 0x00000 mmu                  
///               $VxGMMUW_CFG         mmu               REG       [4]
///                                    ###
///                                    * Looked-up by the 2-bit index {bid[0], uv}
///                                    * End of VxGMMUW
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      80B, bits:     496b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_VxGMMUW
#define h_VxGMMUW (){}

    #define     RA_VxGMMUW_MMU                                 0x0000
    #define     RA_VxGMMUW_mmu                                 0x0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_VxGMMUW {
    ///////////////////////////////////////////////////////////
              SIE_VxGMMUW_CFG                                  ie_mmu[4];
    ///////////////////////////////////////////////////////////
    } SIE_VxGMMUW;

    ///////////////////////////////////////////////////////////
     SIGN32 VxGMMUW_drvrd(SIE_VxGMMUW *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 VxGMMUW_drvwr(SIE_VxGMMUW *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void VxGMMUW_reset(SIE_VxGMMUW *p);
     SIGN32 VxGMMUW_cmp  (SIE_VxGMMUW *p, SIE_VxGMMUW *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define VxGMMUW_check(p,pie,pfx,hLOG) VxGMMUW_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define VxGMMUW_print(p,    pfx,hLOG) VxGMMUW_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: VxGMMUW
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE VxGMMUR                 biu              (4,4)
///     ###
///     * MMU CFG for all read threads for VxG use
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 cfg                  (P)
///               %unsigned 3  pm_bw                     0x0
///               %unsigned 1  pm_pos                    0x0
///                                    ###
///                                    * Page mapping configurations for all read thread
///                                    ###
///               %unsigned 1  pm_enable                 0x0
///                                    ###
///                                    * Set 0 to bypass page mapping stage.
///                                    ###
///               %unsigned 1  vm_enable                 0x0
///                                    ###
///                                    * Enable virtual address to physical address mapping for all read threads
///                                    ###
///               %unsigned 1  shuffle_en                0x0
///                                    ###
///                                    * Set 1 to enable address shuffle for bit[7:6] of input linear address.
///                                    ###
///               %unsigned 1  bm_enable                 0x0
///                                    ###
///                                    * Set 1 to enable bank mapping
///                                    * Page table cache descriptor for luma and chroma read thread.
///                                    ###
///               %unsigned 6  cbase_y                   0x1
///               %unsigned 3  cways_y                   0x7
///               %unsigned 1  rpTyp_y                   0x0
///                                    ###
///                                    * Cache configuration for luma read threads in 64B. Note that LRU-based cache replacement will be used.
///                                    ###
///               %unsigned 6  cbase_uv                  0x1
///               %unsigned 3  cways_uv                  0x7
///               %unsigned 1  rpTyp_uv                  0x0
///                                    ###
///                                    * Cache configuration for chroma read threads in 64B. Note that LRU-based cache replacement will be used.
///                                    ###
///               %unsigned 1  auto_tag_clr              0x0
///                                    ###
///                                    * Hardware will automatically clear page table cache tag for this thread when kick off
///                                    ###
///               %unsigned 1  ctype_y                   0x0
///                                    ###
///                                    * MMU Cache line size selections for luma threads
///                                    ###
///               %unsigned 1  ctype_uv                  0x0
///                                    ###
///                                    * MMU Cache line size selections for chroma threads
///                                    ###
///               %%        1          # Stuffing bits...
///     @ 0x00004 MMUIDMAP             (P)
///     # 0x00004 mmuidmap             
///               $IDMAP               mmuidmap          REG          
///     @ 0x0000C STRIDE               (P)
///     # 0x0000C stride               
///               $VxGMMU_STRD         stride            REG       [8]
///                                    ###
///                                    * Looked-up by the 3-bit index MMUIDMAP[bid[3:0]][2:0]
///                                    ###
///     @ 0x0002C BASE                 (P)
///     # 0x0002C base                 
///               $VxGMMU_BASE         base              REG      [32]
///                                    ###
///                                    * Frame buffer base address when MMU disabled or page table base addree when MMU enalbed.
///                                    * Indexed by {bid[3:0], uv}
///                                    * End of VxGMMUR
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     172B, bits:     975b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_VxGMMUR
#define h_VxGMMUR (){}

    #define     RA_VxGMMUR_cfg                                 0x0000

    #define     BA_VxGMMUR_cfg_pm_bw                           0x0000
    #define     B16VxGMMUR_cfg_pm_bw                           0x0000
    #define   LSb32VxGMMUR_cfg_pm_bw                              0
    #define   LSb16VxGMMUR_cfg_pm_bw                              0
    #define       bVxGMMUR_cfg_pm_bw                           3
    #define   MSK32VxGMMUR_cfg_pm_bw                              0x00000007

    #define     BA_VxGMMUR_cfg_pm_pos                          0x0000
    #define     B16VxGMMUR_cfg_pm_pos                          0x0000
    #define   LSb32VxGMMUR_cfg_pm_pos                             3
    #define   LSb16VxGMMUR_cfg_pm_pos                             3
    #define       bVxGMMUR_cfg_pm_pos                          1
    #define   MSK32VxGMMUR_cfg_pm_pos                             0x00000008

    #define     BA_VxGMMUR_cfg_pm_enable                       0x0000
    #define     B16VxGMMUR_cfg_pm_enable                       0x0000
    #define   LSb32VxGMMUR_cfg_pm_enable                          4
    #define   LSb16VxGMMUR_cfg_pm_enable                          4
    #define       bVxGMMUR_cfg_pm_enable                       1
    #define   MSK32VxGMMUR_cfg_pm_enable                          0x00000010

    #define     BA_VxGMMUR_cfg_vm_enable                       0x0000
    #define     B16VxGMMUR_cfg_vm_enable                       0x0000
    #define   LSb32VxGMMUR_cfg_vm_enable                          5
    #define   LSb16VxGMMUR_cfg_vm_enable                          5
    #define       bVxGMMUR_cfg_vm_enable                       1
    #define   MSK32VxGMMUR_cfg_vm_enable                          0x00000020

    #define     BA_VxGMMUR_cfg_shuffle_en                      0x0000
    #define     B16VxGMMUR_cfg_shuffle_en                      0x0000
    #define   LSb32VxGMMUR_cfg_shuffle_en                         6
    #define   LSb16VxGMMUR_cfg_shuffle_en                         6
    #define       bVxGMMUR_cfg_shuffle_en                      1
    #define   MSK32VxGMMUR_cfg_shuffle_en                         0x00000040

    #define     BA_VxGMMUR_cfg_bm_enable                       0x0000
    #define     B16VxGMMUR_cfg_bm_enable                       0x0000
    #define   LSb32VxGMMUR_cfg_bm_enable                          7
    #define   LSb16VxGMMUR_cfg_bm_enable                          7
    #define       bVxGMMUR_cfg_bm_enable                       1
    #define   MSK32VxGMMUR_cfg_bm_enable                          0x00000080

    #define     BA_VxGMMUR_cfg_cbase_y                         0x0001
    #define     B16VxGMMUR_cfg_cbase_y                         0x0000
    #define   LSb32VxGMMUR_cfg_cbase_y                            8
    #define   LSb16VxGMMUR_cfg_cbase_y                            8
    #define       bVxGMMUR_cfg_cbase_y                         6
    #define   MSK32VxGMMUR_cfg_cbase_y                            0x00003F00

    #define     BA_VxGMMUR_cfg_cways_y                         0x0001
    #define     B16VxGMMUR_cfg_cways_y                         0x0000
    #define   LSb32VxGMMUR_cfg_cways_y                            14
    #define   LSb16VxGMMUR_cfg_cways_y                            14
    #define       bVxGMMUR_cfg_cways_y                         3
    #define   MSK32VxGMMUR_cfg_cways_y                            0x0001C000

    #define     BA_VxGMMUR_cfg_rpTyp_y                         0x0002
    #define     B16VxGMMUR_cfg_rpTyp_y                         0x0002
    #define   LSb32VxGMMUR_cfg_rpTyp_y                            17
    #define   LSb16VxGMMUR_cfg_rpTyp_y                            1
    #define       bVxGMMUR_cfg_rpTyp_y                         1
    #define   MSK32VxGMMUR_cfg_rpTyp_y                            0x00020000

    #define     BA_VxGMMUR_cfg_cbase_uv                        0x0002
    #define     B16VxGMMUR_cfg_cbase_uv                        0x0002
    #define   LSb32VxGMMUR_cfg_cbase_uv                           18
    #define   LSb16VxGMMUR_cfg_cbase_uv                           2
    #define       bVxGMMUR_cfg_cbase_uv                        6
    #define   MSK32VxGMMUR_cfg_cbase_uv                           0x00FC0000

    #define     BA_VxGMMUR_cfg_cways_uv                        0x0003
    #define     B16VxGMMUR_cfg_cways_uv                        0x0002
    #define   LSb32VxGMMUR_cfg_cways_uv                           24
    #define   LSb16VxGMMUR_cfg_cways_uv                           8
    #define       bVxGMMUR_cfg_cways_uv                        3
    #define   MSK32VxGMMUR_cfg_cways_uv                           0x07000000

    #define     BA_VxGMMUR_cfg_rpTyp_uv                        0x0003
    #define     B16VxGMMUR_cfg_rpTyp_uv                        0x0002
    #define   LSb32VxGMMUR_cfg_rpTyp_uv                           27
    #define   LSb16VxGMMUR_cfg_rpTyp_uv                           11
    #define       bVxGMMUR_cfg_rpTyp_uv                        1
    #define   MSK32VxGMMUR_cfg_rpTyp_uv                           0x08000000

    #define     BA_VxGMMUR_cfg_auto_tag_clr                    0x0003
    #define     B16VxGMMUR_cfg_auto_tag_clr                    0x0002
    #define   LSb32VxGMMUR_cfg_auto_tag_clr                       28
    #define   LSb16VxGMMUR_cfg_auto_tag_clr                       12
    #define       bVxGMMUR_cfg_auto_tag_clr                    1
    #define   MSK32VxGMMUR_cfg_auto_tag_clr                       0x10000000

    #define     BA_VxGMMUR_cfg_ctype_y                         0x0003
    #define     B16VxGMMUR_cfg_ctype_y                         0x0002
    #define   LSb32VxGMMUR_cfg_ctype_y                            29
    #define   LSb16VxGMMUR_cfg_ctype_y                            13
    #define       bVxGMMUR_cfg_ctype_y                         1
    #define   MSK32VxGMMUR_cfg_ctype_y                            0x20000000

    #define     BA_VxGMMUR_cfg_ctype_uv                        0x0003
    #define     B16VxGMMUR_cfg_ctype_uv                        0x0002
    #define   LSb32VxGMMUR_cfg_ctype_uv                           30
    #define   LSb16VxGMMUR_cfg_ctype_uv                           14
    #define       bVxGMMUR_cfg_ctype_uv                        1
    #define   MSK32VxGMMUR_cfg_ctype_uv                           0x40000000
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMMUR_MMUIDMAP                            0x0004
    #define     RA_VxGMMUR_mmuidmap                            0x0004
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMMUR_STRIDE                              0x000C
    #define     RA_VxGMMUR_stride                              0x000C
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMMUR_BASE                                0x002C
    #define     RA_VxGMMUR_base                                0x002C
    ///////////////////////////////////////////////////////////

    typedef struct SIE_VxGMMUR {
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMMUR_cfg_pm_bw(r32)                      _BFGET_(r32, 2, 0)
    #define   SET32VxGMMUR_cfg_pm_bw(r32,v)                    _BFSET_(r32, 2, 0,v)
    #define   GET16VxGMMUR_cfg_pm_bw(r16)                      _BFGET_(r16, 2, 0)
    #define   SET16VxGMMUR_cfg_pm_bw(r16,v)                    _BFSET_(r16, 2, 0,v)

    #define   GET32VxGMMUR_cfg_pm_pos(r32)                     _BFGET_(r32, 3, 3)
    #define   SET32VxGMMUR_cfg_pm_pos(r32,v)                   _BFSET_(r32, 3, 3,v)
    #define   GET16VxGMMUR_cfg_pm_pos(r16)                     _BFGET_(r16, 3, 3)
    #define   SET16VxGMMUR_cfg_pm_pos(r16,v)                   _BFSET_(r16, 3, 3,v)

    #define   GET32VxGMMUR_cfg_pm_enable(r32)                  _BFGET_(r32, 4, 4)
    #define   SET32VxGMMUR_cfg_pm_enable(r32,v)                _BFSET_(r32, 4, 4,v)
    #define   GET16VxGMMUR_cfg_pm_enable(r16)                  _BFGET_(r16, 4, 4)
    #define   SET16VxGMMUR_cfg_pm_enable(r16,v)                _BFSET_(r16, 4, 4,v)

    #define   GET32VxGMMUR_cfg_vm_enable(r32)                  _BFGET_(r32, 5, 5)
    #define   SET32VxGMMUR_cfg_vm_enable(r32,v)                _BFSET_(r32, 5, 5,v)
    #define   GET16VxGMMUR_cfg_vm_enable(r16)                  _BFGET_(r16, 5, 5)
    #define   SET16VxGMMUR_cfg_vm_enable(r16,v)                _BFSET_(r16, 5, 5,v)

    #define   GET32VxGMMUR_cfg_shuffle_en(r32)                 _BFGET_(r32, 6, 6)
    #define   SET32VxGMMUR_cfg_shuffle_en(r32,v)               _BFSET_(r32, 6, 6,v)
    #define   GET16VxGMMUR_cfg_shuffle_en(r16)                 _BFGET_(r16, 6, 6)
    #define   SET16VxGMMUR_cfg_shuffle_en(r16,v)               _BFSET_(r16, 6, 6,v)

    #define   GET32VxGMMUR_cfg_bm_enable(r32)                  _BFGET_(r32, 7, 7)
    #define   SET32VxGMMUR_cfg_bm_enable(r32,v)                _BFSET_(r32, 7, 7,v)
    #define   GET16VxGMMUR_cfg_bm_enable(r16)                  _BFGET_(r16, 7, 7)
    #define   SET16VxGMMUR_cfg_bm_enable(r16,v)                _BFSET_(r16, 7, 7,v)

    #define   GET32VxGMMUR_cfg_cbase_y(r32)                    _BFGET_(r32,13, 8)
    #define   SET32VxGMMUR_cfg_cbase_y(r32,v)                  _BFSET_(r32,13, 8,v)
    #define   GET16VxGMMUR_cfg_cbase_y(r16)                    _BFGET_(r16,13, 8)
    #define   SET16VxGMMUR_cfg_cbase_y(r16,v)                  _BFSET_(r16,13, 8,v)

    #define   GET32VxGMMUR_cfg_cways_y(r32)                    _BFGET_(r32,16,14)
    #define   SET32VxGMMUR_cfg_cways_y(r32,v)                  _BFSET_(r32,16,14,v)

    #define   GET32VxGMMUR_cfg_rpTyp_y(r32)                    _BFGET_(r32,17,17)
    #define   SET32VxGMMUR_cfg_rpTyp_y(r32,v)                  _BFSET_(r32,17,17,v)
    #define   GET16VxGMMUR_cfg_rpTyp_y(r16)                    _BFGET_(r16, 1, 1)
    #define   SET16VxGMMUR_cfg_rpTyp_y(r16,v)                  _BFSET_(r16, 1, 1,v)

    #define   GET32VxGMMUR_cfg_cbase_uv(r32)                   _BFGET_(r32,23,18)
    #define   SET32VxGMMUR_cfg_cbase_uv(r32,v)                 _BFSET_(r32,23,18,v)
    #define   GET16VxGMMUR_cfg_cbase_uv(r16)                   _BFGET_(r16, 7, 2)
    #define   SET16VxGMMUR_cfg_cbase_uv(r16,v)                 _BFSET_(r16, 7, 2,v)

    #define   GET32VxGMMUR_cfg_cways_uv(r32)                   _BFGET_(r32,26,24)
    #define   SET32VxGMMUR_cfg_cways_uv(r32,v)                 _BFSET_(r32,26,24,v)
    #define   GET16VxGMMUR_cfg_cways_uv(r16)                   _BFGET_(r16,10, 8)
    #define   SET16VxGMMUR_cfg_cways_uv(r16,v)                 _BFSET_(r16,10, 8,v)

    #define   GET32VxGMMUR_cfg_rpTyp_uv(r32)                   _BFGET_(r32,27,27)
    #define   SET32VxGMMUR_cfg_rpTyp_uv(r32,v)                 _BFSET_(r32,27,27,v)
    #define   GET16VxGMMUR_cfg_rpTyp_uv(r16)                   _BFGET_(r16,11,11)
    #define   SET16VxGMMUR_cfg_rpTyp_uv(r16,v)                 _BFSET_(r16,11,11,v)

    #define   GET32VxGMMUR_cfg_auto_tag_clr(r32)               _BFGET_(r32,28,28)
    #define   SET32VxGMMUR_cfg_auto_tag_clr(r32,v)             _BFSET_(r32,28,28,v)
    #define   GET16VxGMMUR_cfg_auto_tag_clr(r16)               _BFGET_(r16,12,12)
    #define   SET16VxGMMUR_cfg_auto_tag_clr(r16,v)             _BFSET_(r16,12,12,v)

    #define   GET32VxGMMUR_cfg_ctype_y(r32)                    _BFGET_(r32,29,29)
    #define   SET32VxGMMUR_cfg_ctype_y(r32,v)                  _BFSET_(r32,29,29,v)
    #define   GET16VxGMMUR_cfg_ctype_y(r16)                    _BFGET_(r16,13,13)
    #define   SET16VxGMMUR_cfg_ctype_y(r16,v)                  _BFSET_(r16,13,13,v)

    #define   GET32VxGMMUR_cfg_ctype_uv(r32)                   _BFGET_(r32,30,30)
    #define   SET32VxGMMUR_cfg_ctype_uv(r32,v)                 _BFSET_(r32,30,30,v)
    #define   GET16VxGMMUR_cfg_ctype_uv(r16)                   _BFGET_(r16,14,14)
    #define   SET16VxGMMUR_cfg_ctype_uv(r16,v)                 _BFSET_(r16,14,14,v)

    #define     w32VxGMMUR_cfg                                 {\
            UNSG32 ucfg_pm_bw                                  :  3;\
            UNSG32 ucfg_pm_pos                                 :  1;\
            UNSG32 ucfg_pm_enable                              :  1;\
            UNSG32 ucfg_vm_enable                              :  1;\
            UNSG32 ucfg_shuffle_en                             :  1;\
            UNSG32 ucfg_bm_enable                              :  1;\
            UNSG32 ucfg_cbase_y                                :  6;\
            UNSG32 ucfg_cways_y                                :  3;\
            UNSG32 ucfg_rpTyp_y                                :  1;\
            UNSG32 ucfg_cbase_uv                               :  6;\
            UNSG32 ucfg_cways_uv                               :  3;\
            UNSG32 ucfg_rpTyp_uv                               :  1;\
            UNSG32 ucfg_auto_tag_clr                           :  1;\
            UNSG32 ucfg_ctype_y                                :  1;\
            UNSG32 ucfg_ctype_uv                               :  1;\
            UNSG32 RSVDx0_b31                                  :  1;\
          }
    union { UNSG32 u32VxGMMUR_cfg;
            struct w32VxGMMUR_cfg;
          };
    ///////////////////////////////////////////////////////////
              SIE_IDMAP                                        ie_mmuidmap;
    ///////////////////////////////////////////////////////////
              SIE_VxGMMU_STRD                                  ie_stride[8];
    ///////////////////////////////////////////////////////////
              SIE_VxGMMU_BASE                                  ie_base[32];
    ///////////////////////////////////////////////////////////
    } SIE_VxGMMUR;

    typedef union  T32VxGMMUR_cfg
          { UNSG32 u32;
            struct w32VxGMMUR_cfg;
                 } T32VxGMMUR_cfg;
    ///////////////////////////////////////////////////////////

    typedef union  TVxGMMUR_cfg
          { UNSG32 u32[1];
            struct {
            struct w32VxGMMUR_cfg;
                   };
                 } TVxGMMUR_cfg;

    ///////////////////////////////////////////////////////////
     SIGN32 VxGMMUR_drvrd(SIE_VxGMMUR *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 VxGMMUR_drvwr(SIE_VxGMMUR *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void VxGMMUR_reset(SIE_VxGMMUR *p);
     SIGN32 VxGMMUR_cmp  (SIE_VxGMMUR *p, SIE_VxGMMUR *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define VxGMMUR_check(p,pie,pfx,hLOG) VxGMMUR_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define VxGMMUR_print(p,    pfx,hLOG) VxGMMUR_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: VxGMMUR
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE VxGMMU                  biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 MMU_TAG              (P)
///     # 0x00000 mmu_tags             
///               $MMU_TAG             mmu_tags          MEM          
///                                    ###
///                                    * Page table cache tags
///                                    ###
///     @ 0x00100 ctrl                 (RW-)
///               %unsigned 1  kickoff                   0x0
///                                    ###
///                                    * Set 1 to kickoff MMU, should be cleared after hardware kicked off.
///                                    ###
///               %unsigned 1  page_fault                0x0
///                                    ###
///                                    * It should be set by hardware when in-valid page entry found, and cleared by software.
///                                    ###
///               %unsigned 16 pfa_idx                   0x0
///                                    ###
///                                    * Page idx record (in 4KB) for the first page fault.
///                                    ###
///               %unsigned 6  pfa_tid                   0x0
///                                    ###
///                                    * Thread ID record for the first page fault. {wt, bid[3:0], uv}
///                                    ###
///               %unsigned 8  safe_adr                  0x0
///                                    ###
///                                    * When page fault happens, the safe page address (in the unit of 1MB) could be read/write by MMU.
///                                    ###
///     @ 0x00104 cfg                  (P)
///               ###
///               * Below fields are for MMU common control
///               ###
///               %unsigned 3  pageSz                    0x0
///                                    : 4K                        0x0
///                                    : 16K                       0x1
///                                    : 64K                       0x2
///                                    : 256K                      0x3
///                                    : 1M                        0x4
///                                    : 2M                        0x5
///                                                 ###
///                                                 * Page size: the size indicated by one page entry.
///                                                 ###
///               %unsigned 1  qos_en                    0x0
///                                    ###
///                                    * Enable page table command QoS overwrite or not
///                                    ###
///               %unsigned 4  qos                       0x0
///                                    ###
///                                    * QoS value for page table command if qos_en is 1. If qos_en is 0, use the qos value from pixel loading command.
///                                    * Below fields are settings for bank shuffling in MMU
///                                    ###
///               %unsigned 1  banks                     0x0
///                                    ###
///                                    * Number of banks
///                                    * 0: 4 banks
///                                    * 1: 8 banks
///                                    ###
///               %unsigned 2  sysSz                     0x0
///                                    ###
///                                    * The original bank size. Or in other words, the system configurations on the bank size.
///                                    * 0: 512B
///                                    * 1: 1KB
///                                    * 2: 4KB
///                                    * 3: 8KB
///                                    ###
///               %unsigned 2  tarSz                     0x0
///                                    ###
///                                    * Target bank size that we want to change to:
///                                    * 0: 512B
///                                    * 1: 1KB
///                                    * 2: 4KB
///                                    * 3: 8KB
///                                    ###
///               %unsigned 1  Reserved                  0x0
///                                    ###
///                                    * Reserved.
///                                    ###
///               %%        18         # Stuffing bits...
///     @ 0x00108 MMUW                 (P)
///     # 0x00108 mmuw                 
///               $VxGMMUW             mmuw              REG          
///                                    ###
///                                    * Configurations for write threads
///                                    ###
///     @ 0x00158 MMUR                 (P)
///     # 0x00158 mmur                 
///               $VxGMMUR             mmur              REG          
///                                    ###
///                                    * Configurations for read threads
///                                    * end of VxGMMU interface
///                                    ###
///     @ 0x00204                      (W-)
///     #         # Stuffing bytes...
///               %% 2016
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     768B, bits:    1549b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_VxGMMU
#define h_VxGMMU (){}

    #define     RA_VxGMMU_MMU_TAG                              0x0000
    #define     RA_VxGMMU_mmu_tags                             0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMMU_ctrl                                 0x0100

    #define     BA_VxGMMU_ctrl_kickoff                         0x0100
    #define     B16VxGMMU_ctrl_kickoff                         0x0100
    #define   LSb32VxGMMU_ctrl_kickoff                            0
    #define   LSb16VxGMMU_ctrl_kickoff                            0
    #define       bVxGMMU_ctrl_kickoff                         1
    #define   MSK32VxGMMU_ctrl_kickoff                            0x00000001

    #define     BA_VxGMMU_ctrl_page_fault                      0x0100
    #define     B16VxGMMU_ctrl_page_fault                      0x0100
    #define   LSb32VxGMMU_ctrl_page_fault                         1
    #define   LSb16VxGMMU_ctrl_page_fault                         1
    #define       bVxGMMU_ctrl_page_fault                      1
    #define   MSK32VxGMMU_ctrl_page_fault                         0x00000002

    #define     BA_VxGMMU_ctrl_pfa_idx                         0x0100
    #define     B16VxGMMU_ctrl_pfa_idx                         0x0100
    #define   LSb32VxGMMU_ctrl_pfa_idx                            2
    #define   LSb16VxGMMU_ctrl_pfa_idx                            2
    #define       bVxGMMU_ctrl_pfa_idx                         16
    #define   MSK32VxGMMU_ctrl_pfa_idx                            0x0003FFFC

    #define     BA_VxGMMU_ctrl_pfa_tid                         0x0102
    #define     B16VxGMMU_ctrl_pfa_tid                         0x0102
    #define   LSb32VxGMMU_ctrl_pfa_tid                            18
    #define   LSb16VxGMMU_ctrl_pfa_tid                            2
    #define       bVxGMMU_ctrl_pfa_tid                         6
    #define   MSK32VxGMMU_ctrl_pfa_tid                            0x00FC0000

    #define     BA_VxGMMU_ctrl_safe_adr                        0x0103
    #define     B16VxGMMU_ctrl_safe_adr                        0x0102
    #define   LSb32VxGMMU_ctrl_safe_adr                           24
    #define   LSb16VxGMMU_ctrl_safe_adr                           8
    #define       bVxGMMU_ctrl_safe_adr                        8
    #define   MSK32VxGMMU_ctrl_safe_adr                           0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMMU_cfg                                  0x0104

    #define     BA_VxGMMU_cfg_pageSz                           0x0104
    #define     B16VxGMMU_cfg_pageSz                           0x0104
    #define   LSb32VxGMMU_cfg_pageSz                              0
    #define   LSb16VxGMMU_cfg_pageSz                              0
    #define       bVxGMMU_cfg_pageSz                           3
    #define   MSK32VxGMMU_cfg_pageSz                              0x00000007
    #define        VxGMMU_cfg_pageSz_4K                                     0x0
    #define        VxGMMU_cfg_pageSz_16K                                    0x1
    #define        VxGMMU_cfg_pageSz_64K                                    0x2
    #define        VxGMMU_cfg_pageSz_256K                                   0x3
    #define        VxGMMU_cfg_pageSz_1M                                     0x4
    #define        VxGMMU_cfg_pageSz_2M                                     0x5

    #define     BA_VxGMMU_cfg_qos_en                           0x0104
    #define     B16VxGMMU_cfg_qos_en                           0x0104
    #define   LSb32VxGMMU_cfg_qos_en                              3
    #define   LSb16VxGMMU_cfg_qos_en                              3
    #define       bVxGMMU_cfg_qos_en                           1
    #define   MSK32VxGMMU_cfg_qos_en                              0x00000008

    #define     BA_VxGMMU_cfg_qos                              0x0104
    #define     B16VxGMMU_cfg_qos                              0x0104
    #define   LSb32VxGMMU_cfg_qos                                 4
    #define   LSb16VxGMMU_cfg_qos                                 4
    #define       bVxGMMU_cfg_qos                              4
    #define   MSK32VxGMMU_cfg_qos                                 0x000000F0

    #define     BA_VxGMMU_cfg_banks                            0x0105
    #define     B16VxGMMU_cfg_banks                            0x0104
    #define   LSb32VxGMMU_cfg_banks                               8
    #define   LSb16VxGMMU_cfg_banks                               8
    #define       bVxGMMU_cfg_banks                            1
    #define   MSK32VxGMMU_cfg_banks                               0x00000100

    #define     BA_VxGMMU_cfg_sysSz                            0x0105
    #define     B16VxGMMU_cfg_sysSz                            0x0104
    #define   LSb32VxGMMU_cfg_sysSz                               9
    #define   LSb16VxGMMU_cfg_sysSz                               9
    #define       bVxGMMU_cfg_sysSz                            2
    #define   MSK32VxGMMU_cfg_sysSz                               0x00000600

    #define     BA_VxGMMU_cfg_tarSz                            0x0105
    #define     B16VxGMMU_cfg_tarSz                            0x0104
    #define   LSb32VxGMMU_cfg_tarSz                               11
    #define   LSb16VxGMMU_cfg_tarSz                               11
    #define       bVxGMMU_cfg_tarSz                            2
    #define   MSK32VxGMMU_cfg_tarSz                               0x00001800

    #define     BA_VxGMMU_cfg_Reserved                         0x0105
    #define     B16VxGMMU_cfg_Reserved                         0x0104
    #define   LSb32VxGMMU_cfg_Reserved                            13
    #define   LSb16VxGMMU_cfg_Reserved                            13
    #define       bVxGMMU_cfg_Reserved                         1
    #define   MSK32VxGMMU_cfg_Reserved                            0x00002000
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMMU_MMUW                                 0x0108
    #define     RA_VxGMMU_mmuw                                 0x0108
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMMU_MMUR                                 0x0158
    #define     RA_VxGMMU_mmur                                 0x0158
    ///////////////////////////////////////////////////////////

    typedef struct SIE_VxGMMU {
    ///////////////////////////////////////////////////////////
              SIE_MMU_TAG                                      ie_mmu_tags;
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMMU_ctrl_kickoff(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32VxGMMU_ctrl_kickoff(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMMU_ctrl_kickoff(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16VxGMMU_ctrl_kickoff(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32VxGMMU_ctrl_page_fault(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32VxGMMU_ctrl_page_fault(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16VxGMMU_ctrl_page_fault(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16VxGMMU_ctrl_page_fault(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32VxGMMU_ctrl_pfa_idx(r32)                    _BFGET_(r32,17, 2)
    #define   SET32VxGMMU_ctrl_pfa_idx(r32,v)                  _BFSET_(r32,17, 2,v)

    #define   GET32VxGMMU_ctrl_pfa_tid(r32)                    _BFGET_(r32,23,18)
    #define   SET32VxGMMU_ctrl_pfa_tid(r32,v)                  _BFSET_(r32,23,18,v)
    #define   GET16VxGMMU_ctrl_pfa_tid(r16)                    _BFGET_(r16, 7, 2)
    #define   SET16VxGMMU_ctrl_pfa_tid(r16,v)                  _BFSET_(r16, 7, 2,v)

    #define   GET32VxGMMU_ctrl_safe_adr(r32)                   _BFGET_(r32,31,24)
    #define   SET32VxGMMU_ctrl_safe_adr(r32,v)                 _BFSET_(r32,31,24,v)
    #define   GET16VxGMMU_ctrl_safe_adr(r16)                   _BFGET_(r16,15, 8)
    #define   SET16VxGMMU_ctrl_safe_adr(r16,v)                 _BFSET_(r16,15, 8,v)

    #define     w32VxGMMU_ctrl                                 {\
            UNSG32 uctrl_kickoff                               :  1;\
            UNSG32 uctrl_page_fault                            :  1;\
            UNSG32 uctrl_pfa_idx                               : 16;\
            UNSG32 uctrl_pfa_tid                               :  6;\
            UNSG32 uctrl_safe_adr                              :  8;\
          }
    union { UNSG32 u32VxGMMU_ctrl;
            struct w32VxGMMU_ctrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMMU_cfg_pageSz(r32)                      _BFGET_(r32, 2, 0)
    #define   SET32VxGMMU_cfg_pageSz(r32,v)                    _BFSET_(r32, 2, 0,v)
    #define   GET16VxGMMU_cfg_pageSz(r16)                      _BFGET_(r16, 2, 0)
    #define   SET16VxGMMU_cfg_pageSz(r16,v)                    _BFSET_(r16, 2, 0,v)

    #define   GET32VxGMMU_cfg_qos_en(r32)                      _BFGET_(r32, 3, 3)
    #define   SET32VxGMMU_cfg_qos_en(r32,v)                    _BFSET_(r32, 3, 3,v)
    #define   GET16VxGMMU_cfg_qos_en(r16)                      _BFGET_(r16, 3, 3)
    #define   SET16VxGMMU_cfg_qos_en(r16,v)                    _BFSET_(r16, 3, 3,v)

    #define   GET32VxGMMU_cfg_qos(r32)                         _BFGET_(r32, 7, 4)
    #define   SET32VxGMMU_cfg_qos(r32,v)                       _BFSET_(r32, 7, 4,v)
    #define   GET16VxGMMU_cfg_qos(r16)                         _BFGET_(r16, 7, 4)
    #define   SET16VxGMMU_cfg_qos(r16,v)                       _BFSET_(r16, 7, 4,v)

    #define   GET32VxGMMU_cfg_banks(r32)                       _BFGET_(r32, 8, 8)
    #define   SET32VxGMMU_cfg_banks(r32,v)                     _BFSET_(r32, 8, 8,v)
    #define   GET16VxGMMU_cfg_banks(r16)                       _BFGET_(r16, 8, 8)
    #define   SET16VxGMMU_cfg_banks(r16,v)                     _BFSET_(r16, 8, 8,v)

    #define   GET32VxGMMU_cfg_sysSz(r32)                       _BFGET_(r32,10, 9)
    #define   SET32VxGMMU_cfg_sysSz(r32,v)                     _BFSET_(r32,10, 9,v)
    #define   GET16VxGMMU_cfg_sysSz(r16)                       _BFGET_(r16,10, 9)
    #define   SET16VxGMMU_cfg_sysSz(r16,v)                     _BFSET_(r16,10, 9,v)

    #define   GET32VxGMMU_cfg_tarSz(r32)                       _BFGET_(r32,12,11)
    #define   SET32VxGMMU_cfg_tarSz(r32,v)                     _BFSET_(r32,12,11,v)
    #define   GET16VxGMMU_cfg_tarSz(r16)                       _BFGET_(r16,12,11)
    #define   SET16VxGMMU_cfg_tarSz(r16,v)                     _BFSET_(r16,12,11,v)

    #define   GET32VxGMMU_cfg_Reserved(r32)                    _BFGET_(r32,13,13)
    #define   SET32VxGMMU_cfg_Reserved(r32,v)                  _BFSET_(r32,13,13,v)
    #define   GET16VxGMMU_cfg_Reserved(r16)                    _BFGET_(r16,13,13)
    #define   SET16VxGMMU_cfg_Reserved(r16,v)                  _BFSET_(r16,13,13,v)

    #define     w32VxGMMU_cfg                                  {\
            UNSG32 ucfg_pageSz                                 :  3;\
            UNSG32 ucfg_qos_en                                 :  1;\
            UNSG32 ucfg_qos                                    :  4;\
            UNSG32 ucfg_banks                                  :  1;\
            UNSG32 ucfg_sysSz                                  :  2;\
            UNSG32 ucfg_tarSz                                  :  2;\
            UNSG32 ucfg_Reserved                               :  1;\
            UNSG32 RSVDx104_b14                                : 18;\
          }
    union { UNSG32 u32VxGMMU_cfg;
            struct w32VxGMMU_cfg;
          };
    ///////////////////////////////////////////////////////////
              SIE_VxGMMUW                                      ie_mmuw;
    ///////////////////////////////////////////////////////////
              SIE_VxGMMUR                                      ie_mmur;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx204                                    [252];
    ///////////////////////////////////////////////////////////
    } SIE_VxGMMU;

    typedef union  T32VxGMMU_ctrl
          { UNSG32 u32;
            struct w32VxGMMU_ctrl;
                 } T32VxGMMU_ctrl;
    typedef union  T32VxGMMU_cfg
          { UNSG32 u32;
            struct w32VxGMMU_cfg;
                 } T32VxGMMU_cfg;
    ///////////////////////////////////////////////////////////

    typedef union  TVxGMMU_ctrl
          { UNSG32 u32[1];
            struct {
            struct w32VxGMMU_ctrl;
                   };
                 } TVxGMMU_ctrl;
    typedef union  TVxGMMU_cfg
          { UNSG32 u32[1];
            struct {
            struct w32VxGMMU_cfg;
                   };
                 } TVxGMMU_cfg;

    ///////////////////////////////////////////////////////////
     SIGN32 VxGMMU_drvrd(SIE_VxGMMU *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 VxGMMU_drvwr(SIE_VxGMMU *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void VxGMMU_reset(SIE_VxGMMU *p);
     SIGN32 VxGMMU_cmp  (SIE_VxGMMU *p, SIE_VxGMMU *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define VxGMMU_check(p,pie,pfx,hLOG) VxGMMU_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define VxGMMU_print(p,    pfx,hLOG) VxGMMU_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: VxGMMU
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MTRR                    biu              (4,4)
///     ###
///     * Settings for read thread
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 MTR                  (P)
///     # 0x00000 mtr                  
///               $MTRR_CFG            mtr               REG          
///                                    ###
///                                    * Settings for mtr
///                                    ###
///     @ 0x00008 MMU                  (P)
///     # 0x00008 mmu                  
///               $MMU_CFG             mmu               REG          
///                                    ###
///                                    * Settings for mmu
///                                    * Below fields are for ROI (Region of interest) settings for current thread that is processing.
///                                    ###
///     @ 0x00014 roix                 (P)
///               %unsigned 12 xs                        0x0
///                                    ###
///                                    * Start coordinate of buffer in x direction in the unit of 64x4 (8-bit) or 48x4 (10-bit) for tile mode or 64B for raster-scanned mode, or in the unit of 32x8 (8-bit) for V8H32 tile mode.
///                                    * The unit is 64B for all formats.
///                                    ###
///               %unsigned 12 xm                        0x10
///                                    ###
///                                    * End coordinate of buffer in x direction in the unit of 64x4 (8-bit) or 48x4 (10-bit) for tile mode or 64B for raster-scanned mode, or in the unit of 32x8 (8-bit) for V8H32 tile mode.
///                                    * Note that xm should reflect the actual physical stride of the physical buffer.
///                                    * The unit is 64B for all formats.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00018 roiy                 (P)
///               %unsigned 14 ys                        0x0
///                                    ###
///                                    * Start coordinate of buffer in y direction in the unit of 4x4 for tile mode, or 1x1 for raster-scanned mode, or in the unit of 8x8 for V8H32 tile mode.
///                                    * The unit is 1 Compression Unit.
///                                    ###
///               %unsigned 14 ym                        0x200
///                                    ###
///                                    * End coordinate of buffer in y direction in the unit of 4x4 for tile mode, or 1x1 for raster-scanned mode, or in the unit of 8x8 for V8H32 tile mode.
///                                    * The unit is 1 Compression Unit.
///                                    * end of MTRR interface
///                                    ###
///               %%        4          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      28B, bits:     176b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MTRR
#define h_MTRR (){}

    #define     RA_MTRR_MTR                                    0x0000
    #define     RA_MTRR_mtr                                    0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_MTRR_MMU                                    0x0008
    #define     RA_MTRR_mmu                                    0x0008
    ///////////////////////////////////////////////////////////
    #define     RA_MTRR_roix                                   0x0014

    #define     BA_MTRR_roix_xs                                0x0014
    #define     B16MTRR_roix_xs                                0x0014
    #define   LSb32MTRR_roix_xs                                   0
    #define   LSb16MTRR_roix_xs                                   0
    #define       bMTRR_roix_xs                                12
    #define   MSK32MTRR_roix_xs                                   0x00000FFF

    #define     BA_MTRR_roix_xm                                0x0015
    #define     B16MTRR_roix_xm                                0x0014
    #define   LSb32MTRR_roix_xm                                   12
    #define   LSb16MTRR_roix_xm                                   12
    #define       bMTRR_roix_xm                                12
    #define   MSK32MTRR_roix_xm                                   0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_MTRR_roiy                                   0x0018

    #define     BA_MTRR_roiy_ys                                0x0018
    #define     B16MTRR_roiy_ys                                0x0018
    #define   LSb32MTRR_roiy_ys                                   0
    #define   LSb16MTRR_roiy_ys                                   0
    #define       bMTRR_roiy_ys                                14
    #define   MSK32MTRR_roiy_ys                                   0x00003FFF

    #define     BA_MTRR_roiy_ym                                0x0019
    #define     B16MTRR_roiy_ym                                0x0018
    #define   LSb32MTRR_roiy_ym                                   14
    #define   LSb16MTRR_roiy_ym                                   14
    #define       bMTRR_roiy_ym                                14
    #define   MSK32MTRR_roiy_ym                                   0x0FFFC000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MTRR {
    ///////////////////////////////////////////////////////////
              SIE_MTRR_CFG                                     ie_mtr;
    ///////////////////////////////////////////////////////////
              SIE_MMU_CFG                                      ie_mmu;
    ///////////////////////////////////////////////////////////
    #define   GET32MTRR_roix_xs(r32)                           _BFGET_(r32,11, 0)
    #define   SET32MTRR_roix_xs(r32,v)                         _BFSET_(r32,11, 0,v)
    #define   GET16MTRR_roix_xs(r16)                           _BFGET_(r16,11, 0)
    #define   SET16MTRR_roix_xs(r16,v)                         _BFSET_(r16,11, 0,v)

    #define   GET32MTRR_roix_xm(r32)                           _BFGET_(r32,23,12)
    #define   SET32MTRR_roix_xm(r32,v)                         _BFSET_(r32,23,12,v)

    #define     w32MTRR_roix                                   {\
            UNSG32 uroix_xs                                    : 12;\
            UNSG32 uroix_xm                                    : 12;\
            UNSG32 RSVDx14_b24                                 :  8;\
          }
    union { UNSG32 u32MTRR_roix;
            struct w32MTRR_roix;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTRR_roiy_ys(r32)                           _BFGET_(r32,13, 0)
    #define   SET32MTRR_roiy_ys(r32,v)                         _BFSET_(r32,13, 0,v)
    #define   GET16MTRR_roiy_ys(r16)                           _BFGET_(r16,13, 0)
    #define   SET16MTRR_roiy_ys(r16,v)                         _BFSET_(r16,13, 0,v)

    #define   GET32MTRR_roiy_ym(r32)                           _BFGET_(r32,27,14)
    #define   SET32MTRR_roiy_ym(r32,v)                         _BFSET_(r32,27,14,v)

    #define     w32MTRR_roiy                                   {\
            UNSG32 uroiy_ys                                    : 14;\
            UNSG32 uroiy_ym                                    : 14;\
            UNSG32 RSVDx18_b28                                 :  4;\
          }
    union { UNSG32 u32MTRR_roiy;
            struct w32MTRR_roiy;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MTRR;

    typedef union  T32MTRR_roix
          { UNSG32 u32;
            struct w32MTRR_roix;
                 } T32MTRR_roix;
    typedef union  T32MTRR_roiy
          { UNSG32 u32;
            struct w32MTRR_roiy;
                 } T32MTRR_roiy;
    ///////////////////////////////////////////////////////////

    typedef union  TMTRR_roix
          { UNSG32 u32[1];
            struct {
            struct w32MTRR_roix;
                   };
                 } TMTRR_roix;
    typedef union  TMTRR_roiy
          { UNSG32 u32[1];
            struct {
            struct w32MTRR_roiy;
                   };
                 } TMTRR_roiy;

    ///////////////////////////////////////////////////////////
     SIGN32 MTRR_drvrd(SIE_MTRR *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MTRR_drvwr(SIE_MTRR *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MTRR_reset(SIE_MTRR *p);
     SIGN32 MTRR_cmp  (SIE_MTRR *p, SIE_MTRR *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MTRR_check(p,pie,pfx,hLOG) MTRR_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MTRR_print(p,    pfx,hLOG) MTRR_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MTRR
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MTRW                    biu              (4,4)
///     ###
///     * Settings for read thread
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 MTR                  (P)
///     # 0x00000 mtr                  
///               $MTRW_CFG            mtr               REG          
///                                    ###
///                                    * Settings for mtr
///                                    ###
///     @ 0x00008 MMU                  (P)
///     # 0x00008 mmu                  
///               $MMU_CFG             mmu               REG          
///                                    ###
///                                    * Settings for mmu
///                                    * Below fields are for ROI (Region of interest) settings for current thread that is processing.
///                                    ###
///     @ 0x00014 roix                 (P)
///               %unsigned 12 xs                        0x0
///                                    ###
///                                    * Start coordinate of buffer in x direction in the unit of 64x4 (8-bit) or 48x4 (10-bit) for tile mode or 64B for raster-scanned mode, or in the unit of 32x8 (8-bit) for V8H32 tile mode.
///                                    * The unit is 64B for all formats.
///                                    ###
///               %unsigned 12 xm                        0x10
///                                    ###
///                                    * End coordinate of buffer in x direction in the unit of 64x4 (8-bit) or 48x4 (10-bit) for tile mode or 64B for raster-scanned mode, or in the unit of 32x8 (8-bit) for V8H32 tile mode.
///                                    * Note that xm should reflect the actual physical stride of the physical buffer.
///                                    * The unit is 64B for all formats.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00018 roiy                 (P)
///               %unsigned 14 ys                        0x0
///                                    ###
///                                    * Start coordinate of buffer in y direction in the unit of 4x4 for tile mode, or 1x1 for raster-scanned mode, or in the unit of 8x8 for V8H32 tile mode.
///                                    * The unit is 1 Compression Unit.
///                                    ###
///               %unsigned 14 ym                        0x200
///                                    ###
///                                    * End coordinate of buffer in y direction in the unit of 4x4 for tile mode, or 1x1 for raster-scanned mode, or in the unit of 8x8 for V8H32 tile mode.
///                                    * The unit is 1 Compression Unit.
///                                    * end of MTRW interface
///                                    ###
///               %%        4          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      28B, bits:     163b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MTRW
#define h_MTRW (){}

    #define     RA_MTRW_MTR                                    0x0000
    #define     RA_MTRW_mtr                                    0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_MTRW_MMU                                    0x0008
    #define     RA_MTRW_mmu                                    0x0008
    ///////////////////////////////////////////////////////////
    #define     RA_MTRW_roix                                   0x0014

    #define     BA_MTRW_roix_xs                                0x0014
    #define     B16MTRW_roix_xs                                0x0014
    #define   LSb32MTRW_roix_xs                                   0
    #define   LSb16MTRW_roix_xs                                   0
    #define       bMTRW_roix_xs                                12
    #define   MSK32MTRW_roix_xs                                   0x00000FFF

    #define     BA_MTRW_roix_xm                                0x0015
    #define     B16MTRW_roix_xm                                0x0014
    #define   LSb32MTRW_roix_xm                                   12
    #define   LSb16MTRW_roix_xm                                   12
    #define       bMTRW_roix_xm                                12
    #define   MSK32MTRW_roix_xm                                   0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_MTRW_roiy                                   0x0018

    #define     BA_MTRW_roiy_ys                                0x0018
    #define     B16MTRW_roiy_ys                                0x0018
    #define   LSb32MTRW_roiy_ys                                   0
    #define   LSb16MTRW_roiy_ys                                   0
    #define       bMTRW_roiy_ys                                14
    #define   MSK32MTRW_roiy_ys                                   0x00003FFF

    #define     BA_MTRW_roiy_ym                                0x0019
    #define     B16MTRW_roiy_ym                                0x0018
    #define   LSb32MTRW_roiy_ym                                   14
    #define   LSb16MTRW_roiy_ym                                   14
    #define       bMTRW_roiy_ym                                14
    #define   MSK32MTRW_roiy_ym                                   0x0FFFC000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MTRW {
    ///////////////////////////////////////////////////////////
              SIE_MTRW_CFG                                     ie_mtr;
    ///////////////////////////////////////////////////////////
              SIE_MMU_CFG                                      ie_mmu;
    ///////////////////////////////////////////////////////////
    #define   GET32MTRW_roix_xs(r32)                           _BFGET_(r32,11, 0)
    #define   SET32MTRW_roix_xs(r32,v)                         _BFSET_(r32,11, 0,v)
    #define   GET16MTRW_roix_xs(r16)                           _BFGET_(r16,11, 0)
    #define   SET16MTRW_roix_xs(r16,v)                         _BFSET_(r16,11, 0,v)

    #define   GET32MTRW_roix_xm(r32)                           _BFGET_(r32,23,12)
    #define   SET32MTRW_roix_xm(r32,v)                         _BFSET_(r32,23,12,v)

    #define     w32MTRW_roix                                   {\
            UNSG32 uroix_xs                                    : 12;\
            UNSG32 uroix_xm                                    : 12;\
            UNSG32 RSVDx14_b24                                 :  8;\
          }
    union { UNSG32 u32MTRW_roix;
            struct w32MTRW_roix;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MTRW_roiy_ys(r32)                           _BFGET_(r32,13, 0)
    #define   SET32MTRW_roiy_ys(r32,v)                         _BFSET_(r32,13, 0,v)
    #define   GET16MTRW_roiy_ys(r16)                           _BFGET_(r16,13, 0)
    #define   SET16MTRW_roiy_ys(r16,v)                         _BFSET_(r16,13, 0,v)

    #define   GET32MTRW_roiy_ym(r32)                           _BFGET_(r32,27,14)
    #define   SET32MTRW_roiy_ym(r32,v)                         _BFSET_(r32,27,14,v)

    #define     w32MTRW_roiy                                   {\
            UNSG32 uroiy_ys                                    : 14;\
            UNSG32 uroiy_ym                                    : 14;\
            UNSG32 RSVDx18_b28                                 :  4;\
          }
    union { UNSG32 u32MTRW_roiy;
            struct w32MTRW_roiy;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MTRW;

    typedef union  T32MTRW_roix
          { UNSG32 u32;
            struct w32MTRW_roix;
                 } T32MTRW_roix;
    typedef union  T32MTRW_roiy
          { UNSG32 u32;
            struct w32MTRW_roiy;
                 } T32MTRW_roiy;
    ///////////////////////////////////////////////////////////

    typedef union  TMTRW_roix
          { UNSG32 u32[1];
            struct {
            struct w32MTRW_roix;
                   };
                 } TMTRW_roix;
    typedef union  TMTRW_roiy
          { UNSG32 u32[1];
            struct {
            struct w32MTRW_roiy;
                   };
                 } TMTRW_roiy;

    ///////////////////////////////////////////////////////////
     SIGN32 MTRW_drvrd(SIE_MTRW *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MTRW_drvwr(SIE_MTRW *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MTRW_reset(SIE_MTRW *p);
     SIGN32 MTRW_cmp  (SIE_MTRW *p, SIE_MTRW *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MTRW_check(p,pie,pfx,hLOG) MTRW_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MTRW_print(p,    pfx,hLOG) MTRW_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MTRW
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE AVIOMTR                 biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 Version              (R-)
///               %unsigned 8  build                     
///               %unsigned 8  rsvd                      
///               %unsigned 8  minor                     
///               %unsigned 8  major                     
///                                    ###
///                                    * Assigned to macro “MTR_VERSION” in mtr_config.vh
///                                    ###
///     @ 0x00004 Build                (R-)
///               %unsigned 32 version                   
///                                    ###
///                                    * For FPGA usage.
///                                    * Assigned to macro “MTR_BUILD” in mtr_config.vh
///                                    ###
///     @ 0x00008                      (W-)
///     #         # Stuffing bytes...
///               %% 1984
///     @ 0x00100 MMU_TAG              (P)
///     # 0x00100 mmu_tags             
///               $MMU_TAG             mmu_tags          MEM          
///                                    ###
///                                    * Page table cache tags
///                                    ###
///     @ 0x00200 META_TAG             (P)
///     # 0x00200 meta_tags            
///               $META_TAG            meta_tags         MEM          
///                                    ###
///                                    * Meta data cache tags
///                                    ###
///     @ 0x00300 kickoffR0            (P)
///               %unsigned 1  rthread0                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00304 kickoffR1            (P)
///               %unsigned 1  rthread1                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00308 kickoffR2            (P)
///               %unsigned 1  rthread2                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0030C kickoffR3            (P)
///               %unsigned 1  rthread3                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00310 kickoffR4            (P)
///               %unsigned 1  rthread4                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00314 kickoffR5            (P)
///               %unsigned 1  rthread5                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00318 kickoffR6            (P)
///               %unsigned 1  rthread6                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0031C kickoffR7            (P)
///               %unsigned 1  rthread7                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00320 kickoffR8            (P)
///               %unsigned 1  rthread8                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00324 kickoffR9            (P)
///               %unsigned 1  rthread9                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00328 kickoffR10           (P)
///               %unsigned 1  rthread10                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0032C kickoffR11           (P)
///               %unsigned 1  rthread11                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00330 cfg                  (P)
///               ###
///               * Below fields are for MTRR common control
///               ###
///               %unsigned 1  mtrr_flow_ctrl            0x0
///                                    ###
///                                    * 1: Disable DMA command output when MTRR engine input buffer is going to be full.
///                                    * 0: No flow control, still sends out DMA commands even when input buffer is full.
///                                    ###
///               %unsigned 1  mtrr_qos_en               0x0
///                                    ###
///                                    * Enable meta data command qos value overwrite or not.
///                                    ###
///               %unsigned 4  mtrr_qos                  0x0
///                                    ###
///                                    * QoS value for meta command if qos_en is 1. If qos_en is 0, use the qos value from pixel loading command.
///                                    ###
///               %unsigned 1  mtrr_dis_mtid             0x0
///                                    ###
///                                    * Set 1 to disable multiple AXI ID for mtrr pixel command.
///                                    * Then all pixel command AXI-ID will become 0.
///                                    * Meta command AXI-ID is still 1.
///                                    * Below fields are for MMU common control
///                                    ###
///               %unsigned 3  mmu_pageSz                0x0
///                                    : 4K                        0x0
///                                    : 16K                       0x1
///                                    : 64K                       0x2
///                                    : 256K                      0x3
///                                    : 1M                        0x4
///                                    : 2M                        0x5
///                                                 ###
///                                                 * Page size: the size indicated by one page entry.
///                                                 ###
///               %unsigned 1  mmu_qos_en                0x0
///                                    ###
///                                    * Enable page table command QoS overwrite or not
///                                    ###
///               %unsigned 4  mmu_qos                   0x0
///                                    ###
///                                    * QoS value for page table command if qos_en is 1. If qos_en is 0, use the qos value from pixel loading command.
///                                    * Below fields are settings for bank shuffling in MMU
///                                    ###
///               %unsigned 1  mmu_banks                 0x0
///                                    ###
///                                    * Number of banks
///                                    * 0: 4 banks
///                                    * 1: 8 banks
///                                    ###
///               %unsigned 2  mmu_sysSz                 0x0
///                                    ###
///                                    * The original bank size. Or in other words, the system configurations on the bank size.
///                                    * 0: 512B
///                                    * 1: 1KB
///                                    * 2: 4KB
///                                    * 3: 8KB
///                                    ###
///               %unsigned 2  mmu_tarSz                 0x0
///                                    ###
///                                    * Target bank size that we want to change to:
///                                    * 0: 512B
///                                    * 1: 1KB
///                                    * 2: 4KB
///                                    * 3: 8KB
///                                    ###
///               %unsigned 1  Reserved                  0x0
///                                    ###
///                                    * Reserved.
///                                    ###
///               %%        11         # Stuffing bits...
///     @ 0x00334 pfa                  (RW-)
///               ###
///               * Page fault status record for MMU
///               ###
///               %unsigned 1  page_fault                0x0
///                                    ###
///                                    * It should be set by hardware when in-valid page entry found, and cleared by software.
///                                    ###
///               %unsigned 16 pfa_idx                   0x0
///                                    ###
///                                    * Page idx record (in 4KB) for the first page fault.
///                                    ###
///               %unsigned 6  pfa_tid                   0x0
///                                    ###
///                                    * Thread ID record for the first page fault. {wt, bid[3:0], uv}
///                                    ###
///               %unsigned 9  safe_adr                  0x0
///                                    ###
///                                    * When page fault happens, the safe page address (in the unit of 1MB) could be read/write by MMU.
///                                    ###
///     @ 0x00338 MTRR                 (P)
///     # 0x00338 mtrr                 
///               $MTRR                mtrr              REG      [12]
///                                    ###
///                                    * Configurations for read threads
///                                    * end of AVIOMTR interface
///                                    ###
///     @ 0x00488                      (W-)
///     #         # Stuffing bytes...
///               %% 960
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    1280B, bits:    2305b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_AVIOMTR
#define h_AVIOMTR (){}

    #define     RA_AVIOMTR_Version                             0x0000

    #define     BA_AVIOMTR_Version_build                       0x0000
    #define     B16AVIOMTR_Version_build                       0x0000
    #define   LSb32AVIOMTR_Version_build                          0
    #define   LSb16AVIOMTR_Version_build                          0
    #define       bAVIOMTR_Version_build                       8
    #define   MSK32AVIOMTR_Version_build                          0x000000FF

    #define     BA_AVIOMTR_Version_rsvd                        0x0001
    #define     B16AVIOMTR_Version_rsvd                        0x0000
    #define   LSb32AVIOMTR_Version_rsvd                           8
    #define   LSb16AVIOMTR_Version_rsvd                           8
    #define       bAVIOMTR_Version_rsvd                        8
    #define   MSK32AVIOMTR_Version_rsvd                           0x0000FF00

    #define     BA_AVIOMTR_Version_minor                       0x0002
    #define     B16AVIOMTR_Version_minor                       0x0002
    #define   LSb32AVIOMTR_Version_minor                          16
    #define   LSb16AVIOMTR_Version_minor                          0
    #define       bAVIOMTR_Version_minor                       8
    #define   MSK32AVIOMTR_Version_minor                          0x00FF0000

    #define     BA_AVIOMTR_Version_major                       0x0003
    #define     B16AVIOMTR_Version_major                       0x0002
    #define   LSb32AVIOMTR_Version_major                          24
    #define   LSb16AVIOMTR_Version_major                          8
    #define       bAVIOMTR_Version_major                       8
    #define   MSK32AVIOMTR_Version_major                          0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_Build                               0x0004

    #define     BA_AVIOMTR_Build_version                       0x0004
    #define     B16AVIOMTR_Build_version                       0x0004
    #define   LSb32AVIOMTR_Build_version                          0
    #define   LSb16AVIOMTR_Build_version                          0
    #define       bAVIOMTR_Build_version                       32
    #define   MSK32AVIOMTR_Build_version                          0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_MMU_TAG                             0x0100
    #define     RA_AVIOMTR_mmu_tags                            0x0100
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_META_TAG                            0x0200
    #define     RA_AVIOMTR_meta_tags                           0x0200
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_kickoffR0                           0x0300

    #define     BA_AVIOMTR_kickoffR0_rthread0                  0x0300
    #define     B16AVIOMTR_kickoffR0_rthread0                  0x0300
    #define   LSb32AVIOMTR_kickoffR0_rthread0                     0
    #define   LSb16AVIOMTR_kickoffR0_rthread0                     0
    #define       bAVIOMTR_kickoffR0_rthread0                  1
    #define   MSK32AVIOMTR_kickoffR0_rthread0                     0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_kickoffR1                           0x0304

    #define     BA_AVIOMTR_kickoffR1_rthread1                  0x0304
    #define     B16AVIOMTR_kickoffR1_rthread1                  0x0304
    #define   LSb32AVIOMTR_kickoffR1_rthread1                     0
    #define   LSb16AVIOMTR_kickoffR1_rthread1                     0
    #define       bAVIOMTR_kickoffR1_rthread1                  1
    #define   MSK32AVIOMTR_kickoffR1_rthread1                     0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_kickoffR2                           0x0308

    #define     BA_AVIOMTR_kickoffR2_rthread2                  0x0308
    #define     B16AVIOMTR_kickoffR2_rthread2                  0x0308
    #define   LSb32AVIOMTR_kickoffR2_rthread2                     0
    #define   LSb16AVIOMTR_kickoffR2_rthread2                     0
    #define       bAVIOMTR_kickoffR2_rthread2                  1
    #define   MSK32AVIOMTR_kickoffR2_rthread2                     0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_kickoffR3                           0x030C

    #define     BA_AVIOMTR_kickoffR3_rthread3                  0x030C
    #define     B16AVIOMTR_kickoffR3_rthread3                  0x030C
    #define   LSb32AVIOMTR_kickoffR3_rthread3                     0
    #define   LSb16AVIOMTR_kickoffR3_rthread3                     0
    #define       bAVIOMTR_kickoffR3_rthread3                  1
    #define   MSK32AVIOMTR_kickoffR3_rthread3                     0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_kickoffR4                           0x0310

    #define     BA_AVIOMTR_kickoffR4_rthread4                  0x0310
    #define     B16AVIOMTR_kickoffR4_rthread4                  0x0310
    #define   LSb32AVIOMTR_kickoffR4_rthread4                     0
    #define   LSb16AVIOMTR_kickoffR4_rthread4                     0
    #define       bAVIOMTR_kickoffR4_rthread4                  1
    #define   MSK32AVIOMTR_kickoffR4_rthread4                     0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_kickoffR5                           0x0314

    #define     BA_AVIOMTR_kickoffR5_rthread5                  0x0314
    #define     B16AVIOMTR_kickoffR5_rthread5                  0x0314
    #define   LSb32AVIOMTR_kickoffR5_rthread5                     0
    #define   LSb16AVIOMTR_kickoffR5_rthread5                     0
    #define       bAVIOMTR_kickoffR5_rthread5                  1
    #define   MSK32AVIOMTR_kickoffR5_rthread5                     0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_kickoffR6                           0x0318

    #define     BA_AVIOMTR_kickoffR6_rthread6                  0x0318
    #define     B16AVIOMTR_kickoffR6_rthread6                  0x0318
    #define   LSb32AVIOMTR_kickoffR6_rthread6                     0
    #define   LSb16AVIOMTR_kickoffR6_rthread6                     0
    #define       bAVIOMTR_kickoffR6_rthread6                  1
    #define   MSK32AVIOMTR_kickoffR6_rthread6                     0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_kickoffR7                           0x031C

    #define     BA_AVIOMTR_kickoffR7_rthread7                  0x031C
    #define     B16AVIOMTR_kickoffR7_rthread7                  0x031C
    #define   LSb32AVIOMTR_kickoffR7_rthread7                     0
    #define   LSb16AVIOMTR_kickoffR7_rthread7                     0
    #define       bAVIOMTR_kickoffR7_rthread7                  1
    #define   MSK32AVIOMTR_kickoffR7_rthread7                     0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_kickoffR8                           0x0320

    #define     BA_AVIOMTR_kickoffR8_rthread8                  0x0320
    #define     B16AVIOMTR_kickoffR8_rthread8                  0x0320
    #define   LSb32AVIOMTR_kickoffR8_rthread8                     0
    #define   LSb16AVIOMTR_kickoffR8_rthread8                     0
    #define       bAVIOMTR_kickoffR8_rthread8                  1
    #define   MSK32AVIOMTR_kickoffR8_rthread8                     0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_kickoffR9                           0x0324

    #define     BA_AVIOMTR_kickoffR9_rthread9                  0x0324
    #define     B16AVIOMTR_kickoffR9_rthread9                  0x0324
    #define   LSb32AVIOMTR_kickoffR9_rthread9                     0
    #define   LSb16AVIOMTR_kickoffR9_rthread9                     0
    #define       bAVIOMTR_kickoffR9_rthread9                  1
    #define   MSK32AVIOMTR_kickoffR9_rthread9                     0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_kickoffR10                          0x0328

    #define     BA_AVIOMTR_kickoffR10_rthread10                0x0328
    #define     B16AVIOMTR_kickoffR10_rthread10                0x0328
    #define   LSb32AVIOMTR_kickoffR10_rthread10                   0
    #define   LSb16AVIOMTR_kickoffR10_rthread10                   0
    #define       bAVIOMTR_kickoffR10_rthread10                1
    #define   MSK32AVIOMTR_kickoffR10_rthread10                   0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_kickoffR11                          0x032C

    #define     BA_AVIOMTR_kickoffR11_rthread11                0x032C
    #define     B16AVIOMTR_kickoffR11_rthread11                0x032C
    #define   LSb32AVIOMTR_kickoffR11_rthread11                   0
    #define   LSb16AVIOMTR_kickoffR11_rthread11                   0
    #define       bAVIOMTR_kickoffR11_rthread11                1
    #define   MSK32AVIOMTR_kickoffR11_rthread11                   0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_cfg                                 0x0330

    #define     BA_AVIOMTR_cfg_mtrr_flow_ctrl                  0x0330
    #define     B16AVIOMTR_cfg_mtrr_flow_ctrl                  0x0330
    #define   LSb32AVIOMTR_cfg_mtrr_flow_ctrl                     0
    #define   LSb16AVIOMTR_cfg_mtrr_flow_ctrl                     0
    #define       bAVIOMTR_cfg_mtrr_flow_ctrl                  1
    #define   MSK32AVIOMTR_cfg_mtrr_flow_ctrl                     0x00000001

    #define     BA_AVIOMTR_cfg_mtrr_qos_en                     0x0330
    #define     B16AVIOMTR_cfg_mtrr_qos_en                     0x0330
    #define   LSb32AVIOMTR_cfg_mtrr_qos_en                        1
    #define   LSb16AVIOMTR_cfg_mtrr_qos_en                        1
    #define       bAVIOMTR_cfg_mtrr_qos_en                     1
    #define   MSK32AVIOMTR_cfg_mtrr_qos_en                        0x00000002

    #define     BA_AVIOMTR_cfg_mtrr_qos                        0x0330
    #define     B16AVIOMTR_cfg_mtrr_qos                        0x0330
    #define   LSb32AVIOMTR_cfg_mtrr_qos                           2
    #define   LSb16AVIOMTR_cfg_mtrr_qos                           2
    #define       bAVIOMTR_cfg_mtrr_qos                        4
    #define   MSK32AVIOMTR_cfg_mtrr_qos                           0x0000003C

    #define     BA_AVIOMTR_cfg_mtrr_dis_mtid                   0x0330
    #define     B16AVIOMTR_cfg_mtrr_dis_mtid                   0x0330
    #define   LSb32AVIOMTR_cfg_mtrr_dis_mtid                      6
    #define   LSb16AVIOMTR_cfg_mtrr_dis_mtid                      6
    #define       bAVIOMTR_cfg_mtrr_dis_mtid                   1
    #define   MSK32AVIOMTR_cfg_mtrr_dis_mtid                      0x00000040

    #define     BA_AVIOMTR_cfg_mmu_pageSz                      0x0330
    #define     B16AVIOMTR_cfg_mmu_pageSz                      0x0330
    #define   LSb32AVIOMTR_cfg_mmu_pageSz                         7
    #define   LSb16AVIOMTR_cfg_mmu_pageSz                         7
    #define       bAVIOMTR_cfg_mmu_pageSz                      3
    #define   MSK32AVIOMTR_cfg_mmu_pageSz                         0x00000380
    #define        AVIOMTR_cfg_mmu_pageSz_4K                                0x0
    #define        AVIOMTR_cfg_mmu_pageSz_16K                               0x1
    #define        AVIOMTR_cfg_mmu_pageSz_64K                               0x2
    #define        AVIOMTR_cfg_mmu_pageSz_256K                              0x3
    #define        AVIOMTR_cfg_mmu_pageSz_1M                                0x4
    #define        AVIOMTR_cfg_mmu_pageSz_2M                                0x5

    #define     BA_AVIOMTR_cfg_mmu_qos_en                      0x0331
    #define     B16AVIOMTR_cfg_mmu_qos_en                      0x0330
    #define   LSb32AVIOMTR_cfg_mmu_qos_en                         10
    #define   LSb16AVIOMTR_cfg_mmu_qos_en                         10
    #define       bAVIOMTR_cfg_mmu_qos_en                      1
    #define   MSK32AVIOMTR_cfg_mmu_qos_en                         0x00000400

    #define     BA_AVIOMTR_cfg_mmu_qos                         0x0331
    #define     B16AVIOMTR_cfg_mmu_qos                         0x0330
    #define   LSb32AVIOMTR_cfg_mmu_qos                            11
    #define   LSb16AVIOMTR_cfg_mmu_qos                            11
    #define       bAVIOMTR_cfg_mmu_qos                         4
    #define   MSK32AVIOMTR_cfg_mmu_qos                            0x00007800

    #define     BA_AVIOMTR_cfg_mmu_banks                       0x0331
    #define     B16AVIOMTR_cfg_mmu_banks                       0x0330
    #define   LSb32AVIOMTR_cfg_mmu_banks                          15
    #define   LSb16AVIOMTR_cfg_mmu_banks                          15
    #define       bAVIOMTR_cfg_mmu_banks                       1
    #define   MSK32AVIOMTR_cfg_mmu_banks                          0x00008000

    #define     BA_AVIOMTR_cfg_mmu_sysSz                       0x0332
    #define     B16AVIOMTR_cfg_mmu_sysSz                       0x0332
    #define   LSb32AVIOMTR_cfg_mmu_sysSz                          16
    #define   LSb16AVIOMTR_cfg_mmu_sysSz                          0
    #define       bAVIOMTR_cfg_mmu_sysSz                       2
    #define   MSK32AVIOMTR_cfg_mmu_sysSz                          0x00030000

    #define     BA_AVIOMTR_cfg_mmu_tarSz                       0x0332
    #define     B16AVIOMTR_cfg_mmu_tarSz                       0x0332
    #define   LSb32AVIOMTR_cfg_mmu_tarSz                          18
    #define   LSb16AVIOMTR_cfg_mmu_tarSz                          2
    #define       bAVIOMTR_cfg_mmu_tarSz                       2
    #define   MSK32AVIOMTR_cfg_mmu_tarSz                          0x000C0000

    #define     BA_AVIOMTR_cfg_Reserved                        0x0332
    #define     B16AVIOMTR_cfg_Reserved                        0x0332
    #define   LSb32AVIOMTR_cfg_Reserved                           20
    #define   LSb16AVIOMTR_cfg_Reserved                           4
    #define       bAVIOMTR_cfg_Reserved                        1
    #define   MSK32AVIOMTR_cfg_Reserved                           0x00100000
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_pfa                                 0x0334

    #define     BA_AVIOMTR_pfa_page_fault                      0x0334
    #define     B16AVIOMTR_pfa_page_fault                      0x0334
    #define   LSb32AVIOMTR_pfa_page_fault                         0
    #define   LSb16AVIOMTR_pfa_page_fault                         0
    #define       bAVIOMTR_pfa_page_fault                      1
    #define   MSK32AVIOMTR_pfa_page_fault                         0x00000001

    #define     BA_AVIOMTR_pfa_pfa_idx                         0x0334
    #define     B16AVIOMTR_pfa_pfa_idx                         0x0334
    #define   LSb32AVIOMTR_pfa_pfa_idx                            1
    #define   LSb16AVIOMTR_pfa_pfa_idx                            1
    #define       bAVIOMTR_pfa_pfa_idx                         16
    #define   MSK32AVIOMTR_pfa_pfa_idx                            0x0001FFFE

    #define     BA_AVIOMTR_pfa_pfa_tid                         0x0336
    #define     B16AVIOMTR_pfa_pfa_tid                         0x0336
    #define   LSb32AVIOMTR_pfa_pfa_tid                            17
    #define   LSb16AVIOMTR_pfa_pfa_tid                            1
    #define       bAVIOMTR_pfa_pfa_tid                         6
    #define   MSK32AVIOMTR_pfa_pfa_tid                            0x007E0000

    #define     BA_AVIOMTR_pfa_safe_adr                        0x0336
    #define     B16AVIOMTR_pfa_safe_adr                        0x0336
    #define   LSb32AVIOMTR_pfa_safe_adr                           23
    #define   LSb16AVIOMTR_pfa_safe_adr                           7
    #define       bAVIOMTR_pfa_safe_adr                        9
    #define   MSK32AVIOMTR_pfa_safe_adr                           0xFF800000
    ///////////////////////////////////////////////////////////
    #define     RA_AVIOMTR_MTRR                                0x0338
    #define     RA_AVIOMTR_mtrr                                0x0338
    ///////////////////////////////////////////////////////////

    typedef struct SIE_AVIOMTR {
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_Version_build(r32)                  _BFGET_(r32, 7, 0)
    #define   SET32AVIOMTR_Version_build(r32,v)                _BFSET_(r32, 7, 0,v)
    #define   GET16AVIOMTR_Version_build(r16)                  _BFGET_(r16, 7, 0)
    #define   SET16AVIOMTR_Version_build(r16,v)                _BFSET_(r16, 7, 0,v)

    #define   GET32AVIOMTR_Version_rsvd(r32)                   _BFGET_(r32,15, 8)
    #define   SET32AVIOMTR_Version_rsvd(r32,v)                 _BFSET_(r32,15, 8,v)
    #define   GET16AVIOMTR_Version_rsvd(r16)                   _BFGET_(r16,15, 8)
    #define   SET16AVIOMTR_Version_rsvd(r16,v)                 _BFSET_(r16,15, 8,v)

    #define   GET32AVIOMTR_Version_minor(r32)                  _BFGET_(r32,23,16)
    #define   SET32AVIOMTR_Version_minor(r32,v)                _BFSET_(r32,23,16,v)
    #define   GET16AVIOMTR_Version_minor(r16)                  _BFGET_(r16, 7, 0)
    #define   SET16AVIOMTR_Version_minor(r16,v)                _BFSET_(r16, 7, 0,v)

    #define   GET32AVIOMTR_Version_major(r32)                  _BFGET_(r32,31,24)
    #define   SET32AVIOMTR_Version_major(r32,v)                _BFSET_(r32,31,24,v)
    #define   GET16AVIOMTR_Version_major(r16)                  _BFGET_(r16,15, 8)
    #define   SET16AVIOMTR_Version_major(r16,v)                _BFSET_(r16,15, 8,v)

    #define     w32AVIOMTR_Version                             {\
            UNSG32 uVersion_build                              :  8;\
            UNSG32 uVersion_rsvd                               :  8;\
            UNSG32 uVersion_minor                              :  8;\
            UNSG32 uVersion_major                              :  8;\
          }
    union { UNSG32 u32AVIOMTR_Version;
            struct w32AVIOMTR_Version;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_Build_version(r32)                  _BFGET_(r32,31, 0)
    #define   SET32AVIOMTR_Build_version(r32,v)                _BFSET_(r32,31, 0,v)

    #define     w32AVIOMTR_Build                               {\
            UNSG32 uBuild_version                              : 32;\
          }
    union { UNSG32 u32AVIOMTR_Build;
            struct w32AVIOMTR_Build;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx8                                      [248];
    ///////////////////////////////////////////////////////////
              SIE_MMU_TAG                                      ie_mmu_tags;
    ///////////////////////////////////////////////////////////
              SIE_META_TAG                                     ie_meta_tags;
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_kickoffR0_rthread0(r32)             _BFGET_(r32, 0, 0)
    #define   SET32AVIOMTR_kickoffR0_rthread0(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16AVIOMTR_kickoffR0_rthread0(r16)             _BFGET_(r16, 0, 0)
    #define   SET16AVIOMTR_kickoffR0_rthread0(r16,v)           _BFSET_(r16, 0, 0,v)

    #define     w32AVIOMTR_kickoffR0                           {\
            UNSG32 ukickoffR0_rthread0                         :  1;\
            UNSG32 RSVDx300_b1                                 : 31;\
          }
    union { UNSG32 u32AVIOMTR_kickoffR0;
            struct w32AVIOMTR_kickoffR0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_kickoffR1_rthread1(r32)             _BFGET_(r32, 0, 0)
    #define   SET32AVIOMTR_kickoffR1_rthread1(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16AVIOMTR_kickoffR1_rthread1(r16)             _BFGET_(r16, 0, 0)
    #define   SET16AVIOMTR_kickoffR1_rthread1(r16,v)           _BFSET_(r16, 0, 0,v)

    #define     w32AVIOMTR_kickoffR1                           {\
            UNSG32 ukickoffR1_rthread1                         :  1;\
            UNSG32 RSVDx304_b1                                 : 31;\
          }
    union { UNSG32 u32AVIOMTR_kickoffR1;
            struct w32AVIOMTR_kickoffR1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_kickoffR2_rthread2(r32)             _BFGET_(r32, 0, 0)
    #define   SET32AVIOMTR_kickoffR2_rthread2(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16AVIOMTR_kickoffR2_rthread2(r16)             _BFGET_(r16, 0, 0)
    #define   SET16AVIOMTR_kickoffR2_rthread2(r16,v)           _BFSET_(r16, 0, 0,v)

    #define     w32AVIOMTR_kickoffR2                           {\
            UNSG32 ukickoffR2_rthread2                         :  1;\
            UNSG32 RSVDx308_b1                                 : 31;\
          }
    union { UNSG32 u32AVIOMTR_kickoffR2;
            struct w32AVIOMTR_kickoffR2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_kickoffR3_rthread3(r32)             _BFGET_(r32, 0, 0)
    #define   SET32AVIOMTR_kickoffR3_rthread3(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16AVIOMTR_kickoffR3_rthread3(r16)             _BFGET_(r16, 0, 0)
    #define   SET16AVIOMTR_kickoffR3_rthread3(r16,v)           _BFSET_(r16, 0, 0,v)

    #define     w32AVIOMTR_kickoffR3                           {\
            UNSG32 ukickoffR3_rthread3                         :  1;\
            UNSG32 RSVDx30C_b1                                 : 31;\
          }
    union { UNSG32 u32AVIOMTR_kickoffR3;
            struct w32AVIOMTR_kickoffR3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_kickoffR4_rthread4(r32)             _BFGET_(r32, 0, 0)
    #define   SET32AVIOMTR_kickoffR4_rthread4(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16AVIOMTR_kickoffR4_rthread4(r16)             _BFGET_(r16, 0, 0)
    #define   SET16AVIOMTR_kickoffR4_rthread4(r16,v)           _BFSET_(r16, 0, 0,v)

    #define     w32AVIOMTR_kickoffR4                           {\
            UNSG32 ukickoffR4_rthread4                         :  1;\
            UNSG32 RSVDx310_b1                                 : 31;\
          }
    union { UNSG32 u32AVIOMTR_kickoffR4;
            struct w32AVIOMTR_kickoffR4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_kickoffR5_rthread5(r32)             _BFGET_(r32, 0, 0)
    #define   SET32AVIOMTR_kickoffR5_rthread5(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16AVIOMTR_kickoffR5_rthread5(r16)             _BFGET_(r16, 0, 0)
    #define   SET16AVIOMTR_kickoffR5_rthread5(r16,v)           _BFSET_(r16, 0, 0,v)

    #define     w32AVIOMTR_kickoffR5                           {\
            UNSG32 ukickoffR5_rthread5                         :  1;\
            UNSG32 RSVDx314_b1                                 : 31;\
          }
    union { UNSG32 u32AVIOMTR_kickoffR5;
            struct w32AVIOMTR_kickoffR5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_kickoffR6_rthread6(r32)             _BFGET_(r32, 0, 0)
    #define   SET32AVIOMTR_kickoffR6_rthread6(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16AVIOMTR_kickoffR6_rthread6(r16)             _BFGET_(r16, 0, 0)
    #define   SET16AVIOMTR_kickoffR6_rthread6(r16,v)           _BFSET_(r16, 0, 0,v)

    #define     w32AVIOMTR_kickoffR6                           {\
            UNSG32 ukickoffR6_rthread6                         :  1;\
            UNSG32 RSVDx318_b1                                 : 31;\
          }
    union { UNSG32 u32AVIOMTR_kickoffR6;
            struct w32AVIOMTR_kickoffR6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_kickoffR7_rthread7(r32)             _BFGET_(r32, 0, 0)
    #define   SET32AVIOMTR_kickoffR7_rthread7(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16AVIOMTR_kickoffR7_rthread7(r16)             _BFGET_(r16, 0, 0)
    #define   SET16AVIOMTR_kickoffR7_rthread7(r16,v)           _BFSET_(r16, 0, 0,v)

    #define     w32AVIOMTR_kickoffR7                           {\
            UNSG32 ukickoffR7_rthread7                         :  1;\
            UNSG32 RSVDx31C_b1                                 : 31;\
          }
    union { UNSG32 u32AVIOMTR_kickoffR7;
            struct w32AVIOMTR_kickoffR7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_kickoffR8_rthread8(r32)             _BFGET_(r32, 0, 0)
    #define   SET32AVIOMTR_kickoffR8_rthread8(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16AVIOMTR_kickoffR8_rthread8(r16)             _BFGET_(r16, 0, 0)
    #define   SET16AVIOMTR_kickoffR8_rthread8(r16,v)           _BFSET_(r16, 0, 0,v)

    #define     w32AVIOMTR_kickoffR8                           {\
            UNSG32 ukickoffR8_rthread8                         :  1;\
            UNSG32 RSVDx320_b1                                 : 31;\
          }
    union { UNSG32 u32AVIOMTR_kickoffR8;
            struct w32AVIOMTR_kickoffR8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_kickoffR9_rthread9(r32)             _BFGET_(r32, 0, 0)
    #define   SET32AVIOMTR_kickoffR9_rthread9(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16AVIOMTR_kickoffR9_rthread9(r16)             _BFGET_(r16, 0, 0)
    #define   SET16AVIOMTR_kickoffR9_rthread9(r16,v)           _BFSET_(r16, 0, 0,v)

    #define     w32AVIOMTR_kickoffR9                           {\
            UNSG32 ukickoffR9_rthread9                         :  1;\
            UNSG32 RSVDx324_b1                                 : 31;\
          }
    union { UNSG32 u32AVIOMTR_kickoffR9;
            struct w32AVIOMTR_kickoffR9;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_kickoffR10_rthread10(r32)           _BFGET_(r32, 0, 0)
    #define   SET32AVIOMTR_kickoffR10_rthread10(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16AVIOMTR_kickoffR10_rthread10(r16)           _BFGET_(r16, 0, 0)
    #define   SET16AVIOMTR_kickoffR10_rthread10(r16,v)         _BFSET_(r16, 0, 0,v)

    #define     w32AVIOMTR_kickoffR10                          {\
            UNSG32 ukickoffR10_rthread10                       :  1;\
            UNSG32 RSVDx328_b1                                 : 31;\
          }
    union { UNSG32 u32AVIOMTR_kickoffR10;
            struct w32AVIOMTR_kickoffR10;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_kickoffR11_rthread11(r32)           _BFGET_(r32, 0, 0)
    #define   SET32AVIOMTR_kickoffR11_rthread11(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16AVIOMTR_kickoffR11_rthread11(r16)           _BFGET_(r16, 0, 0)
    #define   SET16AVIOMTR_kickoffR11_rthread11(r16,v)         _BFSET_(r16, 0, 0,v)

    #define     w32AVIOMTR_kickoffR11                          {\
            UNSG32 ukickoffR11_rthread11                       :  1;\
            UNSG32 RSVDx32C_b1                                 : 31;\
          }
    union { UNSG32 u32AVIOMTR_kickoffR11;
            struct w32AVIOMTR_kickoffR11;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_cfg_mtrr_flow_ctrl(r32)             _BFGET_(r32, 0, 0)
    #define   SET32AVIOMTR_cfg_mtrr_flow_ctrl(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16AVIOMTR_cfg_mtrr_flow_ctrl(r16)             _BFGET_(r16, 0, 0)
    #define   SET16AVIOMTR_cfg_mtrr_flow_ctrl(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32AVIOMTR_cfg_mtrr_qos_en(r32)                _BFGET_(r32, 1, 1)
    #define   SET32AVIOMTR_cfg_mtrr_qos_en(r32,v)              _BFSET_(r32, 1, 1,v)
    #define   GET16AVIOMTR_cfg_mtrr_qos_en(r16)                _BFGET_(r16, 1, 1)
    #define   SET16AVIOMTR_cfg_mtrr_qos_en(r16,v)              _BFSET_(r16, 1, 1,v)

    #define   GET32AVIOMTR_cfg_mtrr_qos(r32)                   _BFGET_(r32, 5, 2)
    #define   SET32AVIOMTR_cfg_mtrr_qos(r32,v)                 _BFSET_(r32, 5, 2,v)
    #define   GET16AVIOMTR_cfg_mtrr_qos(r16)                   _BFGET_(r16, 5, 2)
    #define   SET16AVIOMTR_cfg_mtrr_qos(r16,v)                 _BFSET_(r16, 5, 2,v)

    #define   GET32AVIOMTR_cfg_mtrr_dis_mtid(r32)              _BFGET_(r32, 6, 6)
    #define   SET32AVIOMTR_cfg_mtrr_dis_mtid(r32,v)            _BFSET_(r32, 6, 6,v)
    #define   GET16AVIOMTR_cfg_mtrr_dis_mtid(r16)              _BFGET_(r16, 6, 6)
    #define   SET16AVIOMTR_cfg_mtrr_dis_mtid(r16,v)            _BFSET_(r16, 6, 6,v)

    #define   GET32AVIOMTR_cfg_mmu_pageSz(r32)                 _BFGET_(r32, 9, 7)
    #define   SET32AVIOMTR_cfg_mmu_pageSz(r32,v)               _BFSET_(r32, 9, 7,v)
    #define   GET16AVIOMTR_cfg_mmu_pageSz(r16)                 _BFGET_(r16, 9, 7)
    #define   SET16AVIOMTR_cfg_mmu_pageSz(r16,v)               _BFSET_(r16, 9, 7,v)

    #define   GET32AVIOMTR_cfg_mmu_qos_en(r32)                 _BFGET_(r32,10,10)
    #define   SET32AVIOMTR_cfg_mmu_qos_en(r32,v)               _BFSET_(r32,10,10,v)
    #define   GET16AVIOMTR_cfg_mmu_qos_en(r16)                 _BFGET_(r16,10,10)
    #define   SET16AVIOMTR_cfg_mmu_qos_en(r16,v)               _BFSET_(r16,10,10,v)

    #define   GET32AVIOMTR_cfg_mmu_qos(r32)                    _BFGET_(r32,14,11)
    #define   SET32AVIOMTR_cfg_mmu_qos(r32,v)                  _BFSET_(r32,14,11,v)
    #define   GET16AVIOMTR_cfg_mmu_qos(r16)                    _BFGET_(r16,14,11)
    #define   SET16AVIOMTR_cfg_mmu_qos(r16,v)                  _BFSET_(r16,14,11,v)

    #define   GET32AVIOMTR_cfg_mmu_banks(r32)                  _BFGET_(r32,15,15)
    #define   SET32AVIOMTR_cfg_mmu_banks(r32,v)                _BFSET_(r32,15,15,v)
    #define   GET16AVIOMTR_cfg_mmu_banks(r16)                  _BFGET_(r16,15,15)
    #define   SET16AVIOMTR_cfg_mmu_banks(r16,v)                _BFSET_(r16,15,15,v)

    #define   GET32AVIOMTR_cfg_mmu_sysSz(r32)                  _BFGET_(r32,17,16)
    #define   SET32AVIOMTR_cfg_mmu_sysSz(r32,v)                _BFSET_(r32,17,16,v)
    #define   GET16AVIOMTR_cfg_mmu_sysSz(r16)                  _BFGET_(r16, 1, 0)
    #define   SET16AVIOMTR_cfg_mmu_sysSz(r16,v)                _BFSET_(r16, 1, 0,v)

    #define   GET32AVIOMTR_cfg_mmu_tarSz(r32)                  _BFGET_(r32,19,18)
    #define   SET32AVIOMTR_cfg_mmu_tarSz(r32,v)                _BFSET_(r32,19,18,v)
    #define   GET16AVIOMTR_cfg_mmu_tarSz(r16)                  _BFGET_(r16, 3, 2)
    #define   SET16AVIOMTR_cfg_mmu_tarSz(r16,v)                _BFSET_(r16, 3, 2,v)

    #define   GET32AVIOMTR_cfg_Reserved(r32)                   _BFGET_(r32,20,20)
    #define   SET32AVIOMTR_cfg_Reserved(r32,v)                 _BFSET_(r32,20,20,v)
    #define   GET16AVIOMTR_cfg_Reserved(r16)                   _BFGET_(r16, 4, 4)
    #define   SET16AVIOMTR_cfg_Reserved(r16,v)                 _BFSET_(r16, 4, 4,v)

    #define     w32AVIOMTR_cfg                                 {\
            UNSG32 ucfg_mtrr_flow_ctrl                         :  1;\
            UNSG32 ucfg_mtrr_qos_en                            :  1;\
            UNSG32 ucfg_mtrr_qos                               :  4;\
            UNSG32 ucfg_mtrr_dis_mtid                          :  1;\
            UNSG32 ucfg_mmu_pageSz                             :  3;\
            UNSG32 ucfg_mmu_qos_en                             :  1;\
            UNSG32 ucfg_mmu_qos                                :  4;\
            UNSG32 ucfg_mmu_banks                              :  1;\
            UNSG32 ucfg_mmu_sysSz                              :  2;\
            UNSG32 ucfg_mmu_tarSz                              :  2;\
            UNSG32 ucfg_Reserved                               :  1;\
            UNSG32 RSVDx330_b21                                : 11;\
          }
    union { UNSG32 u32AVIOMTR_cfg;
            struct w32AVIOMTR_cfg;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AVIOMTR_pfa_page_fault(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32AVIOMTR_pfa_page_fault(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16AVIOMTR_pfa_page_fault(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16AVIOMTR_pfa_page_fault(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32AVIOMTR_pfa_pfa_idx(r32)                    _BFGET_(r32,16, 1)
    #define   SET32AVIOMTR_pfa_pfa_idx(r32,v)                  _BFSET_(r32,16, 1,v)

    #define   GET32AVIOMTR_pfa_pfa_tid(r32)                    _BFGET_(r32,22,17)
    #define   SET32AVIOMTR_pfa_pfa_tid(r32,v)                  _BFSET_(r32,22,17,v)
    #define   GET16AVIOMTR_pfa_pfa_tid(r16)                    _BFGET_(r16, 6, 1)
    #define   SET16AVIOMTR_pfa_pfa_tid(r16,v)                  _BFSET_(r16, 6, 1,v)

    #define   GET32AVIOMTR_pfa_safe_adr(r32)                   _BFGET_(r32,31,23)
    #define   SET32AVIOMTR_pfa_safe_adr(r32,v)                 _BFSET_(r32,31,23,v)
    #define   GET16AVIOMTR_pfa_safe_adr(r16)                   _BFGET_(r16,15, 7)
    #define   SET16AVIOMTR_pfa_safe_adr(r16,v)                 _BFSET_(r16,15, 7,v)

    #define     w32AVIOMTR_pfa                                 {\
            UNSG32 upfa_page_fault                             :  1;\
            UNSG32 upfa_pfa_idx                                : 16;\
            UNSG32 upfa_pfa_tid                                :  6;\
            UNSG32 upfa_safe_adr                               :  9;\
          }
    union { UNSG32 u32AVIOMTR_pfa;
            struct w32AVIOMTR_pfa;
          };
    ///////////////////////////////////////////////////////////
              SIE_MTRR                                         ie_mtrr[12];
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx488                                    [120];
    ///////////////////////////////////////////////////////////
    } SIE_AVIOMTR;

    typedef union  T32AVIOMTR_Version
          { UNSG32 u32;
            struct w32AVIOMTR_Version;
                 } T32AVIOMTR_Version;
    typedef union  T32AVIOMTR_Build
          { UNSG32 u32;
            struct w32AVIOMTR_Build;
                 } T32AVIOMTR_Build;
    typedef union  T32AVIOMTR_kickoffR0
          { UNSG32 u32;
            struct w32AVIOMTR_kickoffR0;
                 } T32AVIOMTR_kickoffR0;
    typedef union  T32AVIOMTR_kickoffR1
          { UNSG32 u32;
            struct w32AVIOMTR_kickoffR1;
                 } T32AVIOMTR_kickoffR1;
    typedef union  T32AVIOMTR_kickoffR2
          { UNSG32 u32;
            struct w32AVIOMTR_kickoffR2;
                 } T32AVIOMTR_kickoffR2;
    typedef union  T32AVIOMTR_kickoffR3
          { UNSG32 u32;
            struct w32AVIOMTR_kickoffR3;
                 } T32AVIOMTR_kickoffR3;
    typedef union  T32AVIOMTR_kickoffR4
          { UNSG32 u32;
            struct w32AVIOMTR_kickoffR4;
                 } T32AVIOMTR_kickoffR4;
    typedef union  T32AVIOMTR_kickoffR5
          { UNSG32 u32;
            struct w32AVIOMTR_kickoffR5;
                 } T32AVIOMTR_kickoffR5;
    typedef union  T32AVIOMTR_kickoffR6
          { UNSG32 u32;
            struct w32AVIOMTR_kickoffR6;
                 } T32AVIOMTR_kickoffR6;
    typedef union  T32AVIOMTR_kickoffR7
          { UNSG32 u32;
            struct w32AVIOMTR_kickoffR7;
                 } T32AVIOMTR_kickoffR7;
    typedef union  T32AVIOMTR_kickoffR8
          { UNSG32 u32;
            struct w32AVIOMTR_kickoffR8;
                 } T32AVIOMTR_kickoffR8;
    typedef union  T32AVIOMTR_kickoffR9
          { UNSG32 u32;
            struct w32AVIOMTR_kickoffR9;
                 } T32AVIOMTR_kickoffR9;
    typedef union  T32AVIOMTR_kickoffR10
          { UNSG32 u32;
            struct w32AVIOMTR_kickoffR10;
                 } T32AVIOMTR_kickoffR10;
    typedef union  T32AVIOMTR_kickoffR11
          { UNSG32 u32;
            struct w32AVIOMTR_kickoffR11;
                 } T32AVIOMTR_kickoffR11;
    typedef union  T32AVIOMTR_cfg
          { UNSG32 u32;
            struct w32AVIOMTR_cfg;
                 } T32AVIOMTR_cfg;
    typedef union  T32AVIOMTR_pfa
          { UNSG32 u32;
            struct w32AVIOMTR_pfa;
                 } T32AVIOMTR_pfa;
    ///////////////////////////////////////////////////////////

    typedef union  TAVIOMTR_Version
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_Version;
                   };
                 } TAVIOMTR_Version;
    typedef union  TAVIOMTR_Build
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_Build;
                   };
                 } TAVIOMTR_Build;
    typedef union  TAVIOMTR_kickoffR0
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_kickoffR0;
                   };
                 } TAVIOMTR_kickoffR0;
    typedef union  TAVIOMTR_kickoffR1
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_kickoffR1;
                   };
                 } TAVIOMTR_kickoffR1;
    typedef union  TAVIOMTR_kickoffR2
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_kickoffR2;
                   };
                 } TAVIOMTR_kickoffR2;
    typedef union  TAVIOMTR_kickoffR3
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_kickoffR3;
                   };
                 } TAVIOMTR_kickoffR3;
    typedef union  TAVIOMTR_kickoffR4
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_kickoffR4;
                   };
                 } TAVIOMTR_kickoffR4;
    typedef union  TAVIOMTR_kickoffR5
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_kickoffR5;
                   };
                 } TAVIOMTR_kickoffR5;
    typedef union  TAVIOMTR_kickoffR6
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_kickoffR6;
                   };
                 } TAVIOMTR_kickoffR6;
    typedef union  TAVIOMTR_kickoffR7
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_kickoffR7;
                   };
                 } TAVIOMTR_kickoffR7;
    typedef union  TAVIOMTR_kickoffR8
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_kickoffR8;
                   };
                 } TAVIOMTR_kickoffR8;
    typedef union  TAVIOMTR_kickoffR9
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_kickoffR9;
                   };
                 } TAVIOMTR_kickoffR9;
    typedef union  TAVIOMTR_kickoffR10
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_kickoffR10;
                   };
                 } TAVIOMTR_kickoffR10;
    typedef union  TAVIOMTR_kickoffR11
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_kickoffR11;
                   };
                 } TAVIOMTR_kickoffR11;
    typedef union  TAVIOMTR_cfg
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_cfg;
                   };
                 } TAVIOMTR_cfg;
    typedef union  TAVIOMTR_pfa
          { UNSG32 u32[1];
            struct {
            struct w32AVIOMTR_pfa;
                   };
                 } TAVIOMTR_pfa;

    ///////////////////////////////////////////////////////////
     SIGN32 AVIOMTR_drvrd(SIE_AVIOMTR *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 AVIOMTR_drvwr(SIE_AVIOMTR *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void AVIOMTR_reset(SIE_AVIOMTR *p);
     SIGN32 AVIOMTR_cmp  (SIE_AVIOMTR *p, SIE_AVIOMTR *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define AVIOMTR_check(p,pie,pfx,hLOG) AVIOMTR_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define AVIOMTR_print(p,    pfx,hLOG) AVIOMTR_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: AVIOMTR
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE ISPMTR                  biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 Version              (R-)
///               %unsigned 8  build                     
///               %unsigned 8  rsvd                      
///               %unsigned 8  minor                     
///               %unsigned 8  major                     
///                                    ###
///                                    * Assigned to macro “MTR_VERSION” in mtr_config.vh
///                                    ###
///     @ 0x00004 Build                (R-)
///               %unsigned 32 version                   
///                                    ###
///                                    * For FPGA usage.
///                                    * Assigned to macro “MTR_BUILD” in mtr_config.vh
///                                    ###
///     @ 0x00008                      (W-)
///     #         # Stuffing bytes...
///               %% 1984
///     @ 0x00100 MMU_TAG              (P)
///     # 0x00100 mmu_tags             
///               $MMU_TAG             mmu_tags          MEM          
///                                    ###
///                                    * Page table cache tags
///                                    ###
///     @ 0x00200 META_TAG             (P)
///     # 0x00200 meta_tags            
///               $META_TAG            meta_tags         MEM          
///                                    ###
///                                    * Meta data cache tags
///                                    ###
///     @ 0x00300 kickoffR0            (P)
///               %unsigned 1  rthread0                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00304 kickoffR1            (P)
///               %unsigned 1  rthread1                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00308 kickoffR2            (P)
///               %unsigned 1  rthread2                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0030C kickoffR3            (P)
///               %unsigned 1  rthread3                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00310 kickoffR4            (P)
///               %unsigned 1  rthread4                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00314 kickoffR5            (P)
///               %unsigned 1  rthread5                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00318 kickoffR6            (P)
///               %unsigned 1  rthread6                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0031C kickoffR7            (P)
///               %unsigned 1  rthread7                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00320 kickoffR8            (P)
///               %unsigned 1  rthread8                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00324 kickoffR9            (P)
///               %unsigned 1  rthread9                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00328 kickoffR10           (P)
///               %unsigned 1  rthread10                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0032C kickoffR11           (P)
///               %unsigned 1  rthread11                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00330 kickoffR12           (P)
///               %unsigned 1  rthread12                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00334 kickoffR13           (P)
///               %unsigned 1  rthread13                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00338 kickoffR14           (P)
///               %unsigned 1  rthread14                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0033C kickoffR15           (P)
///               %unsigned 1  rthread15                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00340 kickoffW0            (P)
///               %unsigned 1  wthread0                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00344 kickoffW1            (P)
///               %unsigned 1  wthread1                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00348 kickoffW2            (P)
///               %unsigned 1  wthread2                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0034C kickoffW3            (P)
///               %unsigned 1  wthread3                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00350 kickoffW4            (P)
///               %unsigned 1  wthread4                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00354 kickoffW5            (P)
///               %unsigned 1  wthread5                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00358 kickoffW6            (P)
///               %unsigned 1  wthread6                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0035C kickoffW7            (P)
///               %unsigned 1  wthread7                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00360 kickoffW8            (P)
///               %unsigned 1  wthread8                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00364 kickoffW9            (P)
///               %unsigned 1  wthread9                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00368 kickoffW10           (P)
///               %unsigned 1  wthread10                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0036C kickoffW11           (P)
///               %unsigned 1  wthread11                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00370 kickoffW12           (P)
///               %unsigned 1  wthread12                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00374 kickoffW13           (P)
///               %unsigned 1  wthread13                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00378 kickoffW14           (P)
///               %unsigned 1  wthread14                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0037C kickoffW15           (P)
///               %unsigned 1  wthread15                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00380 cfg                  (P)
///               ###
///               * Below fields are for MTRR common control
///               ###
///               %unsigned 1  mtrr_flow_ctrl            0x0
///                                    ###
///                                    * 1: Disable DMA command output when MTRR engine input buffer is going to be full.
///                                    * 0: No flow control, still sends out DMA commands even when input buffer is full.
///                                    ###
///               %unsigned 1  mtrr_qos_en               0x0
///                                    ###
///                                    * Enable meta data command qos value overwrite or not.
///                                    ###
///               %unsigned 4  mtrr_qos                  0x0
///                                    ###
///                                    * QoS value for meta command if qos_en is 1. If qos_en is 0, use the qos value from pixel loading command.
///                                    ###
///               %unsigned 1  mtrr_dis_mtid             0x0
///                                    ###
///                                    * Set 1 to disable multiple AXI ID for mtrr pixel command.
///                                    * Then all pixel command AXI-ID will become 0.
///                                    * Meta command AXI-ID is still 1.
///                                    * Below fields are for MMU common control
///                                    ###
///               %unsigned 3  mmu_pageSz                0x0
///                                    : 4K                        0x0
///                                    : 16K                       0x1
///                                    : 64K                       0x2
///                                    : 256K                      0x3
///                                    : 1M                        0x4
///                                    : 2M                        0x5
///                                                 ###
///                                                 * Page size: the size indicated by one page entry.
///                                                 ###
///               %unsigned 1  mmu_qos_en                0x0
///                                    ###
///                                    * Enable page table command QoS overwrite or not
///                                    ###
///               %unsigned 4  mmu_qos                   0x0
///                                    ###
///                                    * QoS value for page table command if qos_en is 1. If qos_en is 0, use the qos value from pixel loading command.
///                                    * Below fields are settings for bank shuffling in MMU
///                                    ###
///               %unsigned 1  mmu_banks                 0x0
///                                    ###
///                                    * Number of banks
///                                    * 0: 4 banks
///                                    * 1: 8 banks
///                                    ###
///               %unsigned 2  mmu_sysSz                 0x0
///                                    ###
///                                    * The original bank size. Or in other words, the system configurations on the bank size.
///                                    * 0: 512B
///                                    * 1: 1KB
///                                    * 2: 4KB
///                                    * 3: 8KB
///                                    ###
///               %unsigned 2  mmu_tarSz                 0x0
///                                    ###
///                                    * Target bank size that we want to change to:
///                                    * 0: 512B
///                                    * 1: 1KB
///                                    * 2: 4KB
///                                    * 3: 8KB
///                                    ###
///               %unsigned 1  Reserved                  0x0
///                                    ###
///                                    * Reserved.
///                                    ###
///               %%        11         # Stuffing bits...
///     @ 0x00384 pfa                  (RW-)
///               ###
///               * Page fault status record for MMU
///               ###
///               %unsigned 1  page_fault                0x0
///                                    ###
///                                    * It should be set by hardware when in-valid page entry found, and cleared by software.
///                                    ###
///               %unsigned 16 pfa_idx                   0x0
///                                    ###
///                                    * Page idx record (in 4KB) for the first page fault.
///                                    ###
///               %unsigned 6  pfa_tid                   0x0
///                                    ###
///                                    * Thread ID record for the first page fault. {wt, bid[3:0], uv}
///                                    ###
///               %unsigned 9  safe_adr                  0x0
///                                    ###
///                                    * When page fault happens, the safe page address (in the unit of 1MB) could be read/write by MMU.
///                                    ###
///     @ 0x00388 MTRR                 (P)
///     # 0x00388 mtrr                 
///               $MTRR                mtrr              REG      [16]
///                                    ###
///                                    * Configurations for read threads
///                                    ###
///     @ 0x00548 MTRW                 (P)
///     # 0x00548 mtrw                 
///               $MTRW                mtrw              REG      [16]
///                                    ###
///                                    * Configurations for write threads
///                                    * end of ISPMTR interface
///                                    ###
///     @ 0x00708                      (W-)
///     #         # Stuffing bytes...
///               %% 1984
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    2048B, bits:    5637b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ISPMTR
#define h_ISPMTR (){}

    #define     RA_ISPMTR_Version                              0x0000

    #define     BA_ISPMTR_Version_build                        0x0000
    #define     B16ISPMTR_Version_build                        0x0000
    #define   LSb32ISPMTR_Version_build                           0
    #define   LSb16ISPMTR_Version_build                           0
    #define       bISPMTR_Version_build                        8
    #define   MSK32ISPMTR_Version_build                           0x000000FF

    #define     BA_ISPMTR_Version_rsvd                         0x0001
    #define     B16ISPMTR_Version_rsvd                         0x0000
    #define   LSb32ISPMTR_Version_rsvd                            8
    #define   LSb16ISPMTR_Version_rsvd                            8
    #define       bISPMTR_Version_rsvd                         8
    #define   MSK32ISPMTR_Version_rsvd                            0x0000FF00

    #define     BA_ISPMTR_Version_minor                        0x0002
    #define     B16ISPMTR_Version_minor                        0x0002
    #define   LSb32ISPMTR_Version_minor                           16
    #define   LSb16ISPMTR_Version_minor                           0
    #define       bISPMTR_Version_minor                        8
    #define   MSK32ISPMTR_Version_minor                           0x00FF0000

    #define     BA_ISPMTR_Version_major                        0x0003
    #define     B16ISPMTR_Version_major                        0x0002
    #define   LSb32ISPMTR_Version_major                           24
    #define   LSb16ISPMTR_Version_major                           8
    #define       bISPMTR_Version_major                        8
    #define   MSK32ISPMTR_Version_major                           0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_Build                                0x0004

    #define     BA_ISPMTR_Build_version                        0x0004
    #define     B16ISPMTR_Build_version                        0x0004
    #define   LSb32ISPMTR_Build_version                           0
    #define   LSb16ISPMTR_Build_version                           0
    #define       bISPMTR_Build_version                        32
    #define   MSK32ISPMTR_Build_version                           0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_MMU_TAG                              0x0100
    #define     RA_ISPMTR_mmu_tags                             0x0100
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_META_TAG                             0x0200
    #define     RA_ISPMTR_meta_tags                            0x0200
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR0                            0x0300

    #define     BA_ISPMTR_kickoffR0_rthread0                   0x0300
    #define     B16ISPMTR_kickoffR0_rthread0                   0x0300
    #define   LSb32ISPMTR_kickoffR0_rthread0                      0
    #define   LSb16ISPMTR_kickoffR0_rthread0                      0
    #define       bISPMTR_kickoffR0_rthread0                   1
    #define   MSK32ISPMTR_kickoffR0_rthread0                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR1                            0x0304

    #define     BA_ISPMTR_kickoffR1_rthread1                   0x0304
    #define     B16ISPMTR_kickoffR1_rthread1                   0x0304
    #define   LSb32ISPMTR_kickoffR1_rthread1                      0
    #define   LSb16ISPMTR_kickoffR1_rthread1                      0
    #define       bISPMTR_kickoffR1_rthread1                   1
    #define   MSK32ISPMTR_kickoffR1_rthread1                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR2                            0x0308

    #define     BA_ISPMTR_kickoffR2_rthread2                   0x0308
    #define     B16ISPMTR_kickoffR2_rthread2                   0x0308
    #define   LSb32ISPMTR_kickoffR2_rthread2                      0
    #define   LSb16ISPMTR_kickoffR2_rthread2                      0
    #define       bISPMTR_kickoffR2_rthread2                   1
    #define   MSK32ISPMTR_kickoffR2_rthread2                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR3                            0x030C

    #define     BA_ISPMTR_kickoffR3_rthread3                   0x030C
    #define     B16ISPMTR_kickoffR3_rthread3                   0x030C
    #define   LSb32ISPMTR_kickoffR3_rthread3                      0
    #define   LSb16ISPMTR_kickoffR3_rthread3                      0
    #define       bISPMTR_kickoffR3_rthread3                   1
    #define   MSK32ISPMTR_kickoffR3_rthread3                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR4                            0x0310

    #define     BA_ISPMTR_kickoffR4_rthread4                   0x0310
    #define     B16ISPMTR_kickoffR4_rthread4                   0x0310
    #define   LSb32ISPMTR_kickoffR4_rthread4                      0
    #define   LSb16ISPMTR_kickoffR4_rthread4                      0
    #define       bISPMTR_kickoffR4_rthread4                   1
    #define   MSK32ISPMTR_kickoffR4_rthread4                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR5                            0x0314

    #define     BA_ISPMTR_kickoffR5_rthread5                   0x0314
    #define     B16ISPMTR_kickoffR5_rthread5                   0x0314
    #define   LSb32ISPMTR_kickoffR5_rthread5                      0
    #define   LSb16ISPMTR_kickoffR5_rthread5                      0
    #define       bISPMTR_kickoffR5_rthread5                   1
    #define   MSK32ISPMTR_kickoffR5_rthread5                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR6                            0x0318

    #define     BA_ISPMTR_kickoffR6_rthread6                   0x0318
    #define     B16ISPMTR_kickoffR6_rthread6                   0x0318
    #define   LSb32ISPMTR_kickoffR6_rthread6                      0
    #define   LSb16ISPMTR_kickoffR6_rthread6                      0
    #define       bISPMTR_kickoffR6_rthread6                   1
    #define   MSK32ISPMTR_kickoffR6_rthread6                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR7                            0x031C

    #define     BA_ISPMTR_kickoffR7_rthread7                   0x031C
    #define     B16ISPMTR_kickoffR7_rthread7                   0x031C
    #define   LSb32ISPMTR_kickoffR7_rthread7                      0
    #define   LSb16ISPMTR_kickoffR7_rthread7                      0
    #define       bISPMTR_kickoffR7_rthread7                   1
    #define   MSK32ISPMTR_kickoffR7_rthread7                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR8                            0x0320

    #define     BA_ISPMTR_kickoffR8_rthread8                   0x0320
    #define     B16ISPMTR_kickoffR8_rthread8                   0x0320
    #define   LSb32ISPMTR_kickoffR8_rthread8                      0
    #define   LSb16ISPMTR_kickoffR8_rthread8                      0
    #define       bISPMTR_kickoffR8_rthread8                   1
    #define   MSK32ISPMTR_kickoffR8_rthread8                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR9                            0x0324

    #define     BA_ISPMTR_kickoffR9_rthread9                   0x0324
    #define     B16ISPMTR_kickoffR9_rthread9                   0x0324
    #define   LSb32ISPMTR_kickoffR9_rthread9                      0
    #define   LSb16ISPMTR_kickoffR9_rthread9                      0
    #define       bISPMTR_kickoffR9_rthread9                   1
    #define   MSK32ISPMTR_kickoffR9_rthread9                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR10                           0x0328

    #define     BA_ISPMTR_kickoffR10_rthread10                 0x0328
    #define     B16ISPMTR_kickoffR10_rthread10                 0x0328
    #define   LSb32ISPMTR_kickoffR10_rthread10                    0
    #define   LSb16ISPMTR_kickoffR10_rthread10                    0
    #define       bISPMTR_kickoffR10_rthread10                 1
    #define   MSK32ISPMTR_kickoffR10_rthread10                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR11                           0x032C

    #define     BA_ISPMTR_kickoffR11_rthread11                 0x032C
    #define     B16ISPMTR_kickoffR11_rthread11                 0x032C
    #define   LSb32ISPMTR_kickoffR11_rthread11                    0
    #define   LSb16ISPMTR_kickoffR11_rthread11                    0
    #define       bISPMTR_kickoffR11_rthread11                 1
    #define   MSK32ISPMTR_kickoffR11_rthread11                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR12                           0x0330

    #define     BA_ISPMTR_kickoffR12_rthread12                 0x0330
    #define     B16ISPMTR_kickoffR12_rthread12                 0x0330
    #define   LSb32ISPMTR_kickoffR12_rthread12                    0
    #define   LSb16ISPMTR_kickoffR12_rthread12                    0
    #define       bISPMTR_kickoffR12_rthread12                 1
    #define   MSK32ISPMTR_kickoffR12_rthread12                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR13                           0x0334

    #define     BA_ISPMTR_kickoffR13_rthread13                 0x0334
    #define     B16ISPMTR_kickoffR13_rthread13                 0x0334
    #define   LSb32ISPMTR_kickoffR13_rthread13                    0
    #define   LSb16ISPMTR_kickoffR13_rthread13                    0
    #define       bISPMTR_kickoffR13_rthread13                 1
    #define   MSK32ISPMTR_kickoffR13_rthread13                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR14                           0x0338

    #define     BA_ISPMTR_kickoffR14_rthread14                 0x0338
    #define     B16ISPMTR_kickoffR14_rthread14                 0x0338
    #define   LSb32ISPMTR_kickoffR14_rthread14                    0
    #define   LSb16ISPMTR_kickoffR14_rthread14                    0
    #define       bISPMTR_kickoffR14_rthread14                 1
    #define   MSK32ISPMTR_kickoffR14_rthread14                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffR15                           0x033C

    #define     BA_ISPMTR_kickoffR15_rthread15                 0x033C
    #define     B16ISPMTR_kickoffR15_rthread15                 0x033C
    #define   LSb32ISPMTR_kickoffR15_rthread15                    0
    #define   LSb16ISPMTR_kickoffR15_rthread15                    0
    #define       bISPMTR_kickoffR15_rthread15                 1
    #define   MSK32ISPMTR_kickoffR15_rthread15                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW0                            0x0340

    #define     BA_ISPMTR_kickoffW0_wthread0                   0x0340
    #define     B16ISPMTR_kickoffW0_wthread0                   0x0340
    #define   LSb32ISPMTR_kickoffW0_wthread0                      0
    #define   LSb16ISPMTR_kickoffW0_wthread0                      0
    #define       bISPMTR_kickoffW0_wthread0                   1
    #define   MSK32ISPMTR_kickoffW0_wthread0                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW1                            0x0344

    #define     BA_ISPMTR_kickoffW1_wthread1                   0x0344
    #define     B16ISPMTR_kickoffW1_wthread1                   0x0344
    #define   LSb32ISPMTR_kickoffW1_wthread1                      0
    #define   LSb16ISPMTR_kickoffW1_wthread1                      0
    #define       bISPMTR_kickoffW1_wthread1                   1
    #define   MSK32ISPMTR_kickoffW1_wthread1                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW2                            0x0348

    #define     BA_ISPMTR_kickoffW2_wthread2                   0x0348
    #define     B16ISPMTR_kickoffW2_wthread2                   0x0348
    #define   LSb32ISPMTR_kickoffW2_wthread2                      0
    #define   LSb16ISPMTR_kickoffW2_wthread2                      0
    #define       bISPMTR_kickoffW2_wthread2                   1
    #define   MSK32ISPMTR_kickoffW2_wthread2                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW3                            0x034C

    #define     BA_ISPMTR_kickoffW3_wthread3                   0x034C
    #define     B16ISPMTR_kickoffW3_wthread3                   0x034C
    #define   LSb32ISPMTR_kickoffW3_wthread3                      0
    #define   LSb16ISPMTR_kickoffW3_wthread3                      0
    #define       bISPMTR_kickoffW3_wthread3                   1
    #define   MSK32ISPMTR_kickoffW3_wthread3                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW4                            0x0350

    #define     BA_ISPMTR_kickoffW4_wthread4                   0x0350
    #define     B16ISPMTR_kickoffW4_wthread4                   0x0350
    #define   LSb32ISPMTR_kickoffW4_wthread4                      0
    #define   LSb16ISPMTR_kickoffW4_wthread4                      0
    #define       bISPMTR_kickoffW4_wthread4                   1
    #define   MSK32ISPMTR_kickoffW4_wthread4                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW5                            0x0354

    #define     BA_ISPMTR_kickoffW5_wthread5                   0x0354
    #define     B16ISPMTR_kickoffW5_wthread5                   0x0354
    #define   LSb32ISPMTR_kickoffW5_wthread5                      0
    #define   LSb16ISPMTR_kickoffW5_wthread5                      0
    #define       bISPMTR_kickoffW5_wthread5                   1
    #define   MSK32ISPMTR_kickoffW5_wthread5                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW6                            0x0358

    #define     BA_ISPMTR_kickoffW6_wthread6                   0x0358
    #define     B16ISPMTR_kickoffW6_wthread6                   0x0358
    #define   LSb32ISPMTR_kickoffW6_wthread6                      0
    #define   LSb16ISPMTR_kickoffW6_wthread6                      0
    #define       bISPMTR_kickoffW6_wthread6                   1
    #define   MSK32ISPMTR_kickoffW6_wthread6                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW7                            0x035C

    #define     BA_ISPMTR_kickoffW7_wthread7                   0x035C
    #define     B16ISPMTR_kickoffW7_wthread7                   0x035C
    #define   LSb32ISPMTR_kickoffW7_wthread7                      0
    #define   LSb16ISPMTR_kickoffW7_wthread7                      0
    #define       bISPMTR_kickoffW7_wthread7                   1
    #define   MSK32ISPMTR_kickoffW7_wthread7                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW8                            0x0360

    #define     BA_ISPMTR_kickoffW8_wthread8                   0x0360
    #define     B16ISPMTR_kickoffW8_wthread8                   0x0360
    #define   LSb32ISPMTR_kickoffW8_wthread8                      0
    #define   LSb16ISPMTR_kickoffW8_wthread8                      0
    #define       bISPMTR_kickoffW8_wthread8                   1
    #define   MSK32ISPMTR_kickoffW8_wthread8                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW9                            0x0364

    #define     BA_ISPMTR_kickoffW9_wthread9                   0x0364
    #define     B16ISPMTR_kickoffW9_wthread9                   0x0364
    #define   LSb32ISPMTR_kickoffW9_wthread9                      0
    #define   LSb16ISPMTR_kickoffW9_wthread9                      0
    #define       bISPMTR_kickoffW9_wthread9                   1
    #define   MSK32ISPMTR_kickoffW9_wthread9                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW10                           0x0368

    #define     BA_ISPMTR_kickoffW10_wthread10                 0x0368
    #define     B16ISPMTR_kickoffW10_wthread10                 0x0368
    #define   LSb32ISPMTR_kickoffW10_wthread10                    0
    #define   LSb16ISPMTR_kickoffW10_wthread10                    0
    #define       bISPMTR_kickoffW10_wthread10                 1
    #define   MSK32ISPMTR_kickoffW10_wthread10                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW11                           0x036C

    #define     BA_ISPMTR_kickoffW11_wthread11                 0x036C
    #define     B16ISPMTR_kickoffW11_wthread11                 0x036C
    #define   LSb32ISPMTR_kickoffW11_wthread11                    0
    #define   LSb16ISPMTR_kickoffW11_wthread11                    0
    #define       bISPMTR_kickoffW11_wthread11                 1
    #define   MSK32ISPMTR_kickoffW11_wthread11                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW12                           0x0370

    #define     BA_ISPMTR_kickoffW12_wthread12                 0x0370
    #define     B16ISPMTR_kickoffW12_wthread12                 0x0370
    #define   LSb32ISPMTR_kickoffW12_wthread12                    0
    #define   LSb16ISPMTR_kickoffW12_wthread12                    0
    #define       bISPMTR_kickoffW12_wthread12                 1
    #define   MSK32ISPMTR_kickoffW12_wthread12                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW13                           0x0374

    #define     BA_ISPMTR_kickoffW13_wthread13                 0x0374
    #define     B16ISPMTR_kickoffW13_wthread13                 0x0374
    #define   LSb32ISPMTR_kickoffW13_wthread13                    0
    #define   LSb16ISPMTR_kickoffW13_wthread13                    0
    #define       bISPMTR_kickoffW13_wthread13                 1
    #define   MSK32ISPMTR_kickoffW13_wthread13                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW14                           0x0378

    #define     BA_ISPMTR_kickoffW14_wthread14                 0x0378
    #define     B16ISPMTR_kickoffW14_wthread14                 0x0378
    #define   LSb32ISPMTR_kickoffW14_wthread14                    0
    #define   LSb16ISPMTR_kickoffW14_wthread14                    0
    #define       bISPMTR_kickoffW14_wthread14                 1
    #define   MSK32ISPMTR_kickoffW14_wthread14                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_kickoffW15                           0x037C

    #define     BA_ISPMTR_kickoffW15_wthread15                 0x037C
    #define     B16ISPMTR_kickoffW15_wthread15                 0x037C
    #define   LSb32ISPMTR_kickoffW15_wthread15                    0
    #define   LSb16ISPMTR_kickoffW15_wthread15                    0
    #define       bISPMTR_kickoffW15_wthread15                 1
    #define   MSK32ISPMTR_kickoffW15_wthread15                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_cfg                                  0x0380

    #define     BA_ISPMTR_cfg_mtrr_flow_ctrl                   0x0380
    #define     B16ISPMTR_cfg_mtrr_flow_ctrl                   0x0380
    #define   LSb32ISPMTR_cfg_mtrr_flow_ctrl                      0
    #define   LSb16ISPMTR_cfg_mtrr_flow_ctrl                      0
    #define       bISPMTR_cfg_mtrr_flow_ctrl                   1
    #define   MSK32ISPMTR_cfg_mtrr_flow_ctrl                      0x00000001

    #define     BA_ISPMTR_cfg_mtrr_qos_en                      0x0380
    #define     B16ISPMTR_cfg_mtrr_qos_en                      0x0380
    #define   LSb32ISPMTR_cfg_mtrr_qos_en                         1
    #define   LSb16ISPMTR_cfg_mtrr_qos_en                         1
    #define       bISPMTR_cfg_mtrr_qos_en                      1
    #define   MSK32ISPMTR_cfg_mtrr_qos_en                         0x00000002

    #define     BA_ISPMTR_cfg_mtrr_qos                         0x0380
    #define     B16ISPMTR_cfg_mtrr_qos                         0x0380
    #define   LSb32ISPMTR_cfg_mtrr_qos                            2
    #define   LSb16ISPMTR_cfg_mtrr_qos                            2
    #define       bISPMTR_cfg_mtrr_qos                         4
    #define   MSK32ISPMTR_cfg_mtrr_qos                            0x0000003C

    #define     BA_ISPMTR_cfg_mtrr_dis_mtid                    0x0380
    #define     B16ISPMTR_cfg_mtrr_dis_mtid                    0x0380
    #define   LSb32ISPMTR_cfg_mtrr_dis_mtid                       6
    #define   LSb16ISPMTR_cfg_mtrr_dis_mtid                       6
    #define       bISPMTR_cfg_mtrr_dis_mtid                    1
    #define   MSK32ISPMTR_cfg_mtrr_dis_mtid                       0x00000040

    #define     BA_ISPMTR_cfg_mmu_pageSz                       0x0380
    #define     B16ISPMTR_cfg_mmu_pageSz                       0x0380
    #define   LSb32ISPMTR_cfg_mmu_pageSz                          7
    #define   LSb16ISPMTR_cfg_mmu_pageSz                          7
    #define       bISPMTR_cfg_mmu_pageSz                       3
    #define   MSK32ISPMTR_cfg_mmu_pageSz                          0x00000380
    #define        ISPMTR_cfg_mmu_pageSz_4K                                 0x0
    #define        ISPMTR_cfg_mmu_pageSz_16K                                0x1
    #define        ISPMTR_cfg_mmu_pageSz_64K                                0x2
    #define        ISPMTR_cfg_mmu_pageSz_256K                               0x3
    #define        ISPMTR_cfg_mmu_pageSz_1M                                 0x4
    #define        ISPMTR_cfg_mmu_pageSz_2M                                 0x5

    #define     BA_ISPMTR_cfg_mmu_qos_en                       0x0381
    #define     B16ISPMTR_cfg_mmu_qos_en                       0x0380
    #define   LSb32ISPMTR_cfg_mmu_qos_en                          10
    #define   LSb16ISPMTR_cfg_mmu_qos_en                          10
    #define       bISPMTR_cfg_mmu_qos_en                       1
    #define   MSK32ISPMTR_cfg_mmu_qos_en                          0x00000400

    #define     BA_ISPMTR_cfg_mmu_qos                          0x0381
    #define     B16ISPMTR_cfg_mmu_qos                          0x0380
    #define   LSb32ISPMTR_cfg_mmu_qos                             11
    #define   LSb16ISPMTR_cfg_mmu_qos                             11
    #define       bISPMTR_cfg_mmu_qos                          4
    #define   MSK32ISPMTR_cfg_mmu_qos                             0x00007800

    #define     BA_ISPMTR_cfg_mmu_banks                        0x0381
    #define     B16ISPMTR_cfg_mmu_banks                        0x0380
    #define   LSb32ISPMTR_cfg_mmu_banks                           15
    #define   LSb16ISPMTR_cfg_mmu_banks                           15
    #define       bISPMTR_cfg_mmu_banks                        1
    #define   MSK32ISPMTR_cfg_mmu_banks                           0x00008000

    #define     BA_ISPMTR_cfg_mmu_sysSz                        0x0382
    #define     B16ISPMTR_cfg_mmu_sysSz                        0x0382
    #define   LSb32ISPMTR_cfg_mmu_sysSz                           16
    #define   LSb16ISPMTR_cfg_mmu_sysSz                           0
    #define       bISPMTR_cfg_mmu_sysSz                        2
    #define   MSK32ISPMTR_cfg_mmu_sysSz                           0x00030000

    #define     BA_ISPMTR_cfg_mmu_tarSz                        0x0382
    #define     B16ISPMTR_cfg_mmu_tarSz                        0x0382
    #define   LSb32ISPMTR_cfg_mmu_tarSz                           18
    #define   LSb16ISPMTR_cfg_mmu_tarSz                           2
    #define       bISPMTR_cfg_mmu_tarSz                        2
    #define   MSK32ISPMTR_cfg_mmu_tarSz                           0x000C0000

    #define     BA_ISPMTR_cfg_Reserved                         0x0382
    #define     B16ISPMTR_cfg_Reserved                         0x0382
    #define   LSb32ISPMTR_cfg_Reserved                            20
    #define   LSb16ISPMTR_cfg_Reserved                            4
    #define       bISPMTR_cfg_Reserved                         1
    #define   MSK32ISPMTR_cfg_Reserved                            0x00100000
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_pfa                                  0x0384

    #define     BA_ISPMTR_pfa_page_fault                       0x0384
    #define     B16ISPMTR_pfa_page_fault                       0x0384
    #define   LSb32ISPMTR_pfa_page_fault                          0
    #define   LSb16ISPMTR_pfa_page_fault                          0
    #define       bISPMTR_pfa_page_fault                       1
    #define   MSK32ISPMTR_pfa_page_fault                          0x00000001

    #define     BA_ISPMTR_pfa_pfa_idx                          0x0384
    #define     B16ISPMTR_pfa_pfa_idx                          0x0384
    #define   LSb32ISPMTR_pfa_pfa_idx                             1
    #define   LSb16ISPMTR_pfa_pfa_idx                             1
    #define       bISPMTR_pfa_pfa_idx                          16
    #define   MSK32ISPMTR_pfa_pfa_idx                             0x0001FFFE

    #define     BA_ISPMTR_pfa_pfa_tid                          0x0386
    #define     B16ISPMTR_pfa_pfa_tid                          0x0386
    #define   LSb32ISPMTR_pfa_pfa_tid                             17
    #define   LSb16ISPMTR_pfa_pfa_tid                             1
    #define       bISPMTR_pfa_pfa_tid                          6
    #define   MSK32ISPMTR_pfa_pfa_tid                             0x007E0000

    #define     BA_ISPMTR_pfa_safe_adr                         0x0386
    #define     B16ISPMTR_pfa_safe_adr                         0x0386
    #define   LSb32ISPMTR_pfa_safe_adr                            23
    #define   LSb16ISPMTR_pfa_safe_adr                            7
    #define       bISPMTR_pfa_safe_adr                         9
    #define   MSK32ISPMTR_pfa_safe_adr                            0xFF800000
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_MTRR                                 0x0388
    #define     RA_ISPMTR_mtrr                                 0x0388
    ///////////////////////////////////////////////////////////
    #define     RA_ISPMTR_MTRW                                 0x0548
    #define     RA_ISPMTR_mtrw                                 0x0548
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ISPMTR {
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_Version_build(r32)                   _BFGET_(r32, 7, 0)
    #define   SET32ISPMTR_Version_build(r32,v)                 _BFSET_(r32, 7, 0,v)
    #define   GET16ISPMTR_Version_build(r16)                   _BFGET_(r16, 7, 0)
    #define   SET16ISPMTR_Version_build(r16,v)                 _BFSET_(r16, 7, 0,v)

    #define   GET32ISPMTR_Version_rsvd(r32)                    _BFGET_(r32,15, 8)
    #define   SET32ISPMTR_Version_rsvd(r32,v)                  _BFSET_(r32,15, 8,v)
    #define   GET16ISPMTR_Version_rsvd(r16)                    _BFGET_(r16,15, 8)
    #define   SET16ISPMTR_Version_rsvd(r16,v)                  _BFSET_(r16,15, 8,v)

    #define   GET32ISPMTR_Version_minor(r32)                   _BFGET_(r32,23,16)
    #define   SET32ISPMTR_Version_minor(r32,v)                 _BFSET_(r32,23,16,v)
    #define   GET16ISPMTR_Version_minor(r16)                   _BFGET_(r16, 7, 0)
    #define   SET16ISPMTR_Version_minor(r16,v)                 _BFSET_(r16, 7, 0,v)

    #define   GET32ISPMTR_Version_major(r32)                   _BFGET_(r32,31,24)
    #define   SET32ISPMTR_Version_major(r32,v)                 _BFSET_(r32,31,24,v)
    #define   GET16ISPMTR_Version_major(r16)                   _BFGET_(r16,15, 8)
    #define   SET16ISPMTR_Version_major(r16,v)                 _BFSET_(r16,15, 8,v)

    #define     w32ISPMTR_Version                              {\
            UNSG32 uVersion_build                              :  8;\
            UNSG32 uVersion_rsvd                               :  8;\
            UNSG32 uVersion_minor                              :  8;\
            UNSG32 uVersion_major                              :  8;\
          }
    union { UNSG32 u32ISPMTR_Version;
            struct w32ISPMTR_Version;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_Build_version(r32)                   _BFGET_(r32,31, 0)
    #define   SET32ISPMTR_Build_version(r32,v)                 _BFSET_(r32,31, 0,v)

    #define     w32ISPMTR_Build                                {\
            UNSG32 uBuild_version                              : 32;\
          }
    union { UNSG32 u32ISPMTR_Build;
            struct w32ISPMTR_Build;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx8                                      [248];
    ///////////////////////////////////////////////////////////
              SIE_MMU_TAG                                      ie_mmu_tags;
    ///////////////////////////////////////////////////////////
              SIE_META_TAG                                     ie_meta_tags;
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR0_rthread0(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR0_rthread0(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR0_rthread0(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR0_rthread0(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR0                            {\
            UNSG32 ukickoffR0_rthread0                         :  1;\
            UNSG32 RSVDx300_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR0;
            struct w32ISPMTR_kickoffR0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR1_rthread1(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR1_rthread1(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR1_rthread1(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR1_rthread1(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR1                            {\
            UNSG32 ukickoffR1_rthread1                         :  1;\
            UNSG32 RSVDx304_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR1;
            struct w32ISPMTR_kickoffR1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR2_rthread2(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR2_rthread2(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR2_rthread2(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR2_rthread2(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR2                            {\
            UNSG32 ukickoffR2_rthread2                         :  1;\
            UNSG32 RSVDx308_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR2;
            struct w32ISPMTR_kickoffR2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR3_rthread3(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR3_rthread3(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR3_rthread3(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR3_rthread3(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR3                            {\
            UNSG32 ukickoffR3_rthread3                         :  1;\
            UNSG32 RSVDx30C_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR3;
            struct w32ISPMTR_kickoffR3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR4_rthread4(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR4_rthread4(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR4_rthread4(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR4_rthread4(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR4                            {\
            UNSG32 ukickoffR4_rthread4                         :  1;\
            UNSG32 RSVDx310_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR4;
            struct w32ISPMTR_kickoffR4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR5_rthread5(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR5_rthread5(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR5_rthread5(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR5_rthread5(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR5                            {\
            UNSG32 ukickoffR5_rthread5                         :  1;\
            UNSG32 RSVDx314_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR5;
            struct w32ISPMTR_kickoffR5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR6_rthread6(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR6_rthread6(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR6_rthread6(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR6_rthread6(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR6                            {\
            UNSG32 ukickoffR6_rthread6                         :  1;\
            UNSG32 RSVDx318_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR6;
            struct w32ISPMTR_kickoffR6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR7_rthread7(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR7_rthread7(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR7_rthread7(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR7_rthread7(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR7                            {\
            UNSG32 ukickoffR7_rthread7                         :  1;\
            UNSG32 RSVDx31C_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR7;
            struct w32ISPMTR_kickoffR7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR8_rthread8(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR8_rthread8(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR8_rthread8(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR8_rthread8(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR8                            {\
            UNSG32 ukickoffR8_rthread8                         :  1;\
            UNSG32 RSVDx320_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR8;
            struct w32ISPMTR_kickoffR8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR9_rthread9(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR9_rthread9(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR9_rthread9(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR9_rthread9(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR9                            {\
            UNSG32 ukickoffR9_rthread9                         :  1;\
            UNSG32 RSVDx324_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR9;
            struct w32ISPMTR_kickoffR9;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR10_rthread10(r32)            _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR10_rthread10(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR10_rthread10(r16)            _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR10_rthread10(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR10                           {\
            UNSG32 ukickoffR10_rthread10                       :  1;\
            UNSG32 RSVDx328_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR10;
            struct w32ISPMTR_kickoffR10;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR11_rthread11(r32)            _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR11_rthread11(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR11_rthread11(r16)            _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR11_rthread11(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR11                           {\
            UNSG32 ukickoffR11_rthread11                       :  1;\
            UNSG32 RSVDx32C_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR11;
            struct w32ISPMTR_kickoffR11;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR12_rthread12(r32)            _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR12_rthread12(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR12_rthread12(r16)            _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR12_rthread12(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR12                           {\
            UNSG32 ukickoffR12_rthread12                       :  1;\
            UNSG32 RSVDx330_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR12;
            struct w32ISPMTR_kickoffR12;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR13_rthread13(r32)            _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR13_rthread13(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR13_rthread13(r16)            _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR13_rthread13(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR13                           {\
            UNSG32 ukickoffR13_rthread13                       :  1;\
            UNSG32 RSVDx334_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR13;
            struct w32ISPMTR_kickoffR13;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR14_rthread14(r32)            _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR14_rthread14(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR14_rthread14(r16)            _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR14_rthread14(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR14                           {\
            UNSG32 ukickoffR14_rthread14                       :  1;\
            UNSG32 RSVDx338_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR14;
            struct w32ISPMTR_kickoffR14;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffR15_rthread15(r32)            _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffR15_rthread15(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffR15_rthread15(r16)            _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffR15_rthread15(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffR15                           {\
            UNSG32 ukickoffR15_rthread15                       :  1;\
            UNSG32 RSVDx33C_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffR15;
            struct w32ISPMTR_kickoffR15;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW0_wthread0(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW0_wthread0(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW0_wthread0(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW0_wthread0(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW0                            {\
            UNSG32 ukickoffW0_wthread0                         :  1;\
            UNSG32 RSVDx340_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW0;
            struct w32ISPMTR_kickoffW0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW1_wthread1(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW1_wthread1(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW1_wthread1(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW1_wthread1(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW1                            {\
            UNSG32 ukickoffW1_wthread1                         :  1;\
            UNSG32 RSVDx344_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW1;
            struct w32ISPMTR_kickoffW1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW2_wthread2(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW2_wthread2(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW2_wthread2(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW2_wthread2(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW2                            {\
            UNSG32 ukickoffW2_wthread2                         :  1;\
            UNSG32 RSVDx348_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW2;
            struct w32ISPMTR_kickoffW2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW3_wthread3(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW3_wthread3(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW3_wthread3(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW3_wthread3(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW3                            {\
            UNSG32 ukickoffW3_wthread3                         :  1;\
            UNSG32 RSVDx34C_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW3;
            struct w32ISPMTR_kickoffW3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW4_wthread4(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW4_wthread4(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW4_wthread4(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW4_wthread4(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW4                            {\
            UNSG32 ukickoffW4_wthread4                         :  1;\
            UNSG32 RSVDx350_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW4;
            struct w32ISPMTR_kickoffW4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW5_wthread5(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW5_wthread5(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW5_wthread5(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW5_wthread5(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW5                            {\
            UNSG32 ukickoffW5_wthread5                         :  1;\
            UNSG32 RSVDx354_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW5;
            struct w32ISPMTR_kickoffW5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW6_wthread6(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW6_wthread6(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW6_wthread6(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW6_wthread6(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW6                            {\
            UNSG32 ukickoffW6_wthread6                         :  1;\
            UNSG32 RSVDx358_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW6;
            struct w32ISPMTR_kickoffW6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW7_wthread7(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW7_wthread7(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW7_wthread7(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW7_wthread7(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW7                            {\
            UNSG32 ukickoffW7_wthread7                         :  1;\
            UNSG32 RSVDx35C_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW7;
            struct w32ISPMTR_kickoffW7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW8_wthread8(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW8_wthread8(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW8_wthread8(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW8_wthread8(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW8                            {\
            UNSG32 ukickoffW8_wthread8                         :  1;\
            UNSG32 RSVDx360_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW8;
            struct w32ISPMTR_kickoffW8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW9_wthread9(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW9_wthread9(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW9_wthread9(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW9_wthread9(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW9                            {\
            UNSG32 ukickoffW9_wthread9                         :  1;\
            UNSG32 RSVDx364_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW9;
            struct w32ISPMTR_kickoffW9;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW10_wthread10(r32)            _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW10_wthread10(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW10_wthread10(r16)            _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW10_wthread10(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW10                           {\
            UNSG32 ukickoffW10_wthread10                       :  1;\
            UNSG32 RSVDx368_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW10;
            struct w32ISPMTR_kickoffW10;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW11_wthread11(r32)            _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW11_wthread11(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW11_wthread11(r16)            _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW11_wthread11(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW11                           {\
            UNSG32 ukickoffW11_wthread11                       :  1;\
            UNSG32 RSVDx36C_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW11;
            struct w32ISPMTR_kickoffW11;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW12_wthread12(r32)            _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW12_wthread12(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW12_wthread12(r16)            _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW12_wthread12(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW12                           {\
            UNSG32 ukickoffW12_wthread12                       :  1;\
            UNSG32 RSVDx370_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW12;
            struct w32ISPMTR_kickoffW12;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW13_wthread13(r32)            _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW13_wthread13(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW13_wthread13(r16)            _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW13_wthread13(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW13                           {\
            UNSG32 ukickoffW13_wthread13                       :  1;\
            UNSG32 RSVDx374_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW13;
            struct w32ISPMTR_kickoffW13;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW14_wthread14(r32)            _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW14_wthread14(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW14_wthread14(r16)            _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW14_wthread14(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW14                           {\
            UNSG32 ukickoffW14_wthread14                       :  1;\
            UNSG32 RSVDx378_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW14;
            struct w32ISPMTR_kickoffW14;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_kickoffW15_wthread15(r32)            _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_kickoffW15_wthread15(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_kickoffW15_wthread15(r16)            _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_kickoffW15_wthread15(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32ISPMTR_kickoffW15                           {\
            UNSG32 ukickoffW15_wthread15                       :  1;\
            UNSG32 RSVDx37C_b1                                 : 31;\
          }
    union { UNSG32 u32ISPMTR_kickoffW15;
            struct w32ISPMTR_kickoffW15;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_cfg_mtrr_flow_ctrl(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_cfg_mtrr_flow_ctrl(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_cfg_mtrr_flow_ctrl(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_cfg_mtrr_flow_ctrl(r16,v)            _BFSET_(r16, 0, 0,v)

    #define   GET32ISPMTR_cfg_mtrr_qos_en(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32ISPMTR_cfg_mtrr_qos_en(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16ISPMTR_cfg_mtrr_qos_en(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16ISPMTR_cfg_mtrr_qos_en(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32ISPMTR_cfg_mtrr_qos(r32)                    _BFGET_(r32, 5, 2)
    #define   SET32ISPMTR_cfg_mtrr_qos(r32,v)                  _BFSET_(r32, 5, 2,v)
    #define   GET16ISPMTR_cfg_mtrr_qos(r16)                    _BFGET_(r16, 5, 2)
    #define   SET16ISPMTR_cfg_mtrr_qos(r16,v)                  _BFSET_(r16, 5, 2,v)

    #define   GET32ISPMTR_cfg_mtrr_dis_mtid(r32)               _BFGET_(r32, 6, 6)
    #define   SET32ISPMTR_cfg_mtrr_dis_mtid(r32,v)             _BFSET_(r32, 6, 6,v)
    #define   GET16ISPMTR_cfg_mtrr_dis_mtid(r16)               _BFGET_(r16, 6, 6)
    #define   SET16ISPMTR_cfg_mtrr_dis_mtid(r16,v)             _BFSET_(r16, 6, 6,v)

    #define   GET32ISPMTR_cfg_mmu_pageSz(r32)                  _BFGET_(r32, 9, 7)
    #define   SET32ISPMTR_cfg_mmu_pageSz(r32,v)                _BFSET_(r32, 9, 7,v)
    #define   GET16ISPMTR_cfg_mmu_pageSz(r16)                  _BFGET_(r16, 9, 7)
    #define   SET16ISPMTR_cfg_mmu_pageSz(r16,v)                _BFSET_(r16, 9, 7,v)

    #define   GET32ISPMTR_cfg_mmu_qos_en(r32)                  _BFGET_(r32,10,10)
    #define   SET32ISPMTR_cfg_mmu_qos_en(r32,v)                _BFSET_(r32,10,10,v)
    #define   GET16ISPMTR_cfg_mmu_qos_en(r16)                  _BFGET_(r16,10,10)
    #define   SET16ISPMTR_cfg_mmu_qos_en(r16,v)                _BFSET_(r16,10,10,v)

    #define   GET32ISPMTR_cfg_mmu_qos(r32)                     _BFGET_(r32,14,11)
    #define   SET32ISPMTR_cfg_mmu_qos(r32,v)                   _BFSET_(r32,14,11,v)
    #define   GET16ISPMTR_cfg_mmu_qos(r16)                     _BFGET_(r16,14,11)
    #define   SET16ISPMTR_cfg_mmu_qos(r16,v)                   _BFSET_(r16,14,11,v)

    #define   GET32ISPMTR_cfg_mmu_banks(r32)                   _BFGET_(r32,15,15)
    #define   SET32ISPMTR_cfg_mmu_banks(r32,v)                 _BFSET_(r32,15,15,v)
    #define   GET16ISPMTR_cfg_mmu_banks(r16)                   _BFGET_(r16,15,15)
    #define   SET16ISPMTR_cfg_mmu_banks(r16,v)                 _BFSET_(r16,15,15,v)

    #define   GET32ISPMTR_cfg_mmu_sysSz(r32)                   _BFGET_(r32,17,16)
    #define   SET32ISPMTR_cfg_mmu_sysSz(r32,v)                 _BFSET_(r32,17,16,v)
    #define   GET16ISPMTR_cfg_mmu_sysSz(r16)                   _BFGET_(r16, 1, 0)
    #define   SET16ISPMTR_cfg_mmu_sysSz(r16,v)                 _BFSET_(r16, 1, 0,v)

    #define   GET32ISPMTR_cfg_mmu_tarSz(r32)                   _BFGET_(r32,19,18)
    #define   SET32ISPMTR_cfg_mmu_tarSz(r32,v)                 _BFSET_(r32,19,18,v)
    #define   GET16ISPMTR_cfg_mmu_tarSz(r16)                   _BFGET_(r16, 3, 2)
    #define   SET16ISPMTR_cfg_mmu_tarSz(r16,v)                 _BFSET_(r16, 3, 2,v)

    #define   GET32ISPMTR_cfg_Reserved(r32)                    _BFGET_(r32,20,20)
    #define   SET32ISPMTR_cfg_Reserved(r32,v)                  _BFSET_(r32,20,20,v)
    #define   GET16ISPMTR_cfg_Reserved(r16)                    _BFGET_(r16, 4, 4)
    #define   SET16ISPMTR_cfg_Reserved(r16,v)                  _BFSET_(r16, 4, 4,v)

    #define     w32ISPMTR_cfg                                  {\
            UNSG32 ucfg_mtrr_flow_ctrl                         :  1;\
            UNSG32 ucfg_mtrr_qos_en                            :  1;\
            UNSG32 ucfg_mtrr_qos                               :  4;\
            UNSG32 ucfg_mtrr_dis_mtid                          :  1;\
            UNSG32 ucfg_mmu_pageSz                             :  3;\
            UNSG32 ucfg_mmu_qos_en                             :  1;\
            UNSG32 ucfg_mmu_qos                                :  4;\
            UNSG32 ucfg_mmu_banks                              :  1;\
            UNSG32 ucfg_mmu_sysSz                              :  2;\
            UNSG32 ucfg_mmu_tarSz                              :  2;\
            UNSG32 ucfg_Reserved                               :  1;\
            UNSG32 RSVDx380_b21                                : 11;\
          }
    union { UNSG32 u32ISPMTR_cfg;
            struct w32ISPMTR_cfg;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ISPMTR_pfa_page_fault(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32ISPMTR_pfa_page_fault(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16ISPMTR_pfa_page_fault(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16ISPMTR_pfa_page_fault(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32ISPMTR_pfa_pfa_idx(r32)                     _BFGET_(r32,16, 1)
    #define   SET32ISPMTR_pfa_pfa_idx(r32,v)                   _BFSET_(r32,16, 1,v)

    #define   GET32ISPMTR_pfa_pfa_tid(r32)                     _BFGET_(r32,22,17)
    #define   SET32ISPMTR_pfa_pfa_tid(r32,v)                   _BFSET_(r32,22,17,v)
    #define   GET16ISPMTR_pfa_pfa_tid(r16)                     _BFGET_(r16, 6, 1)
    #define   SET16ISPMTR_pfa_pfa_tid(r16,v)                   _BFSET_(r16, 6, 1,v)

    #define   GET32ISPMTR_pfa_safe_adr(r32)                    _BFGET_(r32,31,23)
    #define   SET32ISPMTR_pfa_safe_adr(r32,v)                  _BFSET_(r32,31,23,v)
    #define   GET16ISPMTR_pfa_safe_adr(r16)                    _BFGET_(r16,15, 7)
    #define   SET16ISPMTR_pfa_safe_adr(r16,v)                  _BFSET_(r16,15, 7,v)

    #define     w32ISPMTR_pfa                                  {\
            UNSG32 upfa_page_fault                             :  1;\
            UNSG32 upfa_pfa_idx                                : 16;\
            UNSG32 upfa_pfa_tid                                :  6;\
            UNSG32 upfa_safe_adr                               :  9;\
          }
    union { UNSG32 u32ISPMTR_pfa;
            struct w32ISPMTR_pfa;
          };
    ///////////////////////////////////////////////////////////
              SIE_MTRR                                         ie_mtrr[16];
    ///////////////////////////////////////////////////////////
              SIE_MTRW                                         ie_mtrw[16];
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx708                                    [248];
    ///////////////////////////////////////////////////////////
    } SIE_ISPMTR;

    typedef union  T32ISPMTR_Version
          { UNSG32 u32;
            struct w32ISPMTR_Version;
                 } T32ISPMTR_Version;
    typedef union  T32ISPMTR_Build
          { UNSG32 u32;
            struct w32ISPMTR_Build;
                 } T32ISPMTR_Build;
    typedef union  T32ISPMTR_kickoffR0
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR0;
                 } T32ISPMTR_kickoffR0;
    typedef union  T32ISPMTR_kickoffR1
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR1;
                 } T32ISPMTR_kickoffR1;
    typedef union  T32ISPMTR_kickoffR2
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR2;
                 } T32ISPMTR_kickoffR2;
    typedef union  T32ISPMTR_kickoffR3
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR3;
                 } T32ISPMTR_kickoffR3;
    typedef union  T32ISPMTR_kickoffR4
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR4;
                 } T32ISPMTR_kickoffR4;
    typedef union  T32ISPMTR_kickoffR5
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR5;
                 } T32ISPMTR_kickoffR5;
    typedef union  T32ISPMTR_kickoffR6
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR6;
                 } T32ISPMTR_kickoffR6;
    typedef union  T32ISPMTR_kickoffR7
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR7;
                 } T32ISPMTR_kickoffR7;
    typedef union  T32ISPMTR_kickoffR8
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR8;
                 } T32ISPMTR_kickoffR8;
    typedef union  T32ISPMTR_kickoffR9
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR9;
                 } T32ISPMTR_kickoffR9;
    typedef union  T32ISPMTR_kickoffR10
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR10;
                 } T32ISPMTR_kickoffR10;
    typedef union  T32ISPMTR_kickoffR11
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR11;
                 } T32ISPMTR_kickoffR11;
    typedef union  T32ISPMTR_kickoffR12
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR12;
                 } T32ISPMTR_kickoffR12;
    typedef union  T32ISPMTR_kickoffR13
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR13;
                 } T32ISPMTR_kickoffR13;
    typedef union  T32ISPMTR_kickoffR14
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR14;
                 } T32ISPMTR_kickoffR14;
    typedef union  T32ISPMTR_kickoffR15
          { UNSG32 u32;
            struct w32ISPMTR_kickoffR15;
                 } T32ISPMTR_kickoffR15;
    typedef union  T32ISPMTR_kickoffW0
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW0;
                 } T32ISPMTR_kickoffW0;
    typedef union  T32ISPMTR_kickoffW1
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW1;
                 } T32ISPMTR_kickoffW1;
    typedef union  T32ISPMTR_kickoffW2
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW2;
                 } T32ISPMTR_kickoffW2;
    typedef union  T32ISPMTR_kickoffW3
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW3;
                 } T32ISPMTR_kickoffW3;
    typedef union  T32ISPMTR_kickoffW4
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW4;
                 } T32ISPMTR_kickoffW4;
    typedef union  T32ISPMTR_kickoffW5
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW5;
                 } T32ISPMTR_kickoffW5;
    typedef union  T32ISPMTR_kickoffW6
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW6;
                 } T32ISPMTR_kickoffW6;
    typedef union  T32ISPMTR_kickoffW7
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW7;
                 } T32ISPMTR_kickoffW7;
    typedef union  T32ISPMTR_kickoffW8
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW8;
                 } T32ISPMTR_kickoffW8;
    typedef union  T32ISPMTR_kickoffW9
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW9;
                 } T32ISPMTR_kickoffW9;
    typedef union  T32ISPMTR_kickoffW10
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW10;
                 } T32ISPMTR_kickoffW10;
    typedef union  T32ISPMTR_kickoffW11
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW11;
                 } T32ISPMTR_kickoffW11;
    typedef union  T32ISPMTR_kickoffW12
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW12;
                 } T32ISPMTR_kickoffW12;
    typedef union  T32ISPMTR_kickoffW13
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW13;
                 } T32ISPMTR_kickoffW13;
    typedef union  T32ISPMTR_kickoffW14
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW14;
                 } T32ISPMTR_kickoffW14;
    typedef union  T32ISPMTR_kickoffW15
          { UNSG32 u32;
            struct w32ISPMTR_kickoffW15;
                 } T32ISPMTR_kickoffW15;
    typedef union  T32ISPMTR_cfg
          { UNSG32 u32;
            struct w32ISPMTR_cfg;
                 } T32ISPMTR_cfg;
    typedef union  T32ISPMTR_pfa
          { UNSG32 u32;
            struct w32ISPMTR_pfa;
                 } T32ISPMTR_pfa;
    ///////////////////////////////////////////////////////////

    typedef union  TISPMTR_Version
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_Version;
                   };
                 } TISPMTR_Version;
    typedef union  TISPMTR_Build
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_Build;
                   };
                 } TISPMTR_Build;
    typedef union  TISPMTR_kickoffR0
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR0;
                   };
                 } TISPMTR_kickoffR0;
    typedef union  TISPMTR_kickoffR1
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR1;
                   };
                 } TISPMTR_kickoffR1;
    typedef union  TISPMTR_kickoffR2
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR2;
                   };
                 } TISPMTR_kickoffR2;
    typedef union  TISPMTR_kickoffR3
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR3;
                   };
                 } TISPMTR_kickoffR3;
    typedef union  TISPMTR_kickoffR4
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR4;
                   };
                 } TISPMTR_kickoffR4;
    typedef union  TISPMTR_kickoffR5
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR5;
                   };
                 } TISPMTR_kickoffR5;
    typedef union  TISPMTR_kickoffR6
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR6;
                   };
                 } TISPMTR_kickoffR6;
    typedef union  TISPMTR_kickoffR7
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR7;
                   };
                 } TISPMTR_kickoffR7;
    typedef union  TISPMTR_kickoffR8
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR8;
                   };
                 } TISPMTR_kickoffR8;
    typedef union  TISPMTR_kickoffR9
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR9;
                   };
                 } TISPMTR_kickoffR9;
    typedef union  TISPMTR_kickoffR10
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR10;
                   };
                 } TISPMTR_kickoffR10;
    typedef union  TISPMTR_kickoffR11
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR11;
                   };
                 } TISPMTR_kickoffR11;
    typedef union  TISPMTR_kickoffR12
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR12;
                   };
                 } TISPMTR_kickoffR12;
    typedef union  TISPMTR_kickoffR13
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR13;
                   };
                 } TISPMTR_kickoffR13;
    typedef union  TISPMTR_kickoffR14
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR14;
                   };
                 } TISPMTR_kickoffR14;
    typedef union  TISPMTR_kickoffR15
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffR15;
                   };
                 } TISPMTR_kickoffR15;
    typedef union  TISPMTR_kickoffW0
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW0;
                   };
                 } TISPMTR_kickoffW0;
    typedef union  TISPMTR_kickoffW1
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW1;
                   };
                 } TISPMTR_kickoffW1;
    typedef union  TISPMTR_kickoffW2
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW2;
                   };
                 } TISPMTR_kickoffW2;
    typedef union  TISPMTR_kickoffW3
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW3;
                   };
                 } TISPMTR_kickoffW3;
    typedef union  TISPMTR_kickoffW4
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW4;
                   };
                 } TISPMTR_kickoffW4;
    typedef union  TISPMTR_kickoffW5
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW5;
                   };
                 } TISPMTR_kickoffW5;
    typedef union  TISPMTR_kickoffW6
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW6;
                   };
                 } TISPMTR_kickoffW6;
    typedef union  TISPMTR_kickoffW7
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW7;
                   };
                 } TISPMTR_kickoffW7;
    typedef union  TISPMTR_kickoffW8
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW8;
                   };
                 } TISPMTR_kickoffW8;
    typedef union  TISPMTR_kickoffW9
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW9;
                   };
                 } TISPMTR_kickoffW9;
    typedef union  TISPMTR_kickoffW10
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW10;
                   };
                 } TISPMTR_kickoffW10;
    typedef union  TISPMTR_kickoffW11
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW11;
                   };
                 } TISPMTR_kickoffW11;
    typedef union  TISPMTR_kickoffW12
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW12;
                   };
                 } TISPMTR_kickoffW12;
    typedef union  TISPMTR_kickoffW13
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW13;
                   };
                 } TISPMTR_kickoffW13;
    typedef union  TISPMTR_kickoffW14
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW14;
                   };
                 } TISPMTR_kickoffW14;
    typedef union  TISPMTR_kickoffW15
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_kickoffW15;
                   };
                 } TISPMTR_kickoffW15;
    typedef union  TISPMTR_cfg
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_cfg;
                   };
                 } TISPMTR_cfg;
    typedef union  TISPMTR_pfa
          { UNSG32 u32[1];
            struct {
            struct w32ISPMTR_pfa;
                   };
                 } TISPMTR_pfa;

    ///////////////////////////////////////////////////////////
     SIGN32 ISPMTR_drvrd(SIE_ISPMTR *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ISPMTR_drvwr(SIE_ISPMTR *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ISPMTR_reset(SIE_ISPMTR *p);
     SIGN32 ISPMTR_cmp  (SIE_ISPMTR *p, SIE_ISPMTR *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ISPMTR_check(p,pie,pfx,hLOG) ISPMTR_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ISPMTR_print(p,    pfx,hLOG) ISPMTR_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ISPMTR
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE VxGMTR                  biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 Version              (R-)
///               %unsigned 8  build                     
///               %unsigned 8  rsvd                      
///               %unsigned 8  minor                     
///               %unsigned 8  major                     
///                                    ###
///                                    * Assigned to macro “MTR_VERSION” in mtr_config.vh
///                                    ###
///     @ 0x00004 Build                (R-)
///               %unsigned 32 version                   
///                                    ###
///                                    * For FPGA usage.
///                                    * Assigned to macro “MTR_BUILD” in mtr_config.vh
///                                    ###
///     @ 0x00008                      (W-)
///     #         # Stuffing bytes...
///               %% 1984
///     @ 0x00100 MMU_TAG              (P)
///     # 0x00100 mmu_tags             
///               $MMU_TAG             mmu_tags          MEM          
///                                    ###
///                                    * Page table cache tags
///                                    ###
///     @ 0x00200 META_TAG             (P)
///     # 0x00200 meta_tags            
///               $META_TAG            meta_tags         MEM          
///                                    ###
///                                    * Meta data cache tags
///                                    ###
///     @ 0x00300 kickoffR0            (P)
///               %unsigned 1  rthread0                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00304 kickoffR1            (P)
///               %unsigned 1  rthread1                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00308 kickoffR2            (P)
///               %unsigned 1  rthread2                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0030C kickoffR3            (P)
///               %unsigned 1  rthread3                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00310 kickoffR4            (P)
///               %unsigned 1  rthread4                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00314 kickoffR5            (P)
///               %unsigned 1  rthread5                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00318 kickoffR6            (P)
///               %unsigned 1  rthread6                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0031C kickoffR7            (P)
///               %unsigned 1  rthread7                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00320 kickoffR8            (P)
///               %unsigned 1  rthread8                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00324 kickoffR9            (P)
///               %unsigned 1  rthread9                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00328 kickoffR10           (P)
///               %unsigned 1  rthread10                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0032C kickoffR11           (P)
///               %unsigned 1  rthread11                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00330 kickoffR12           (P)
///               %unsigned 1  rthread12                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00334 kickoffR13           (P)
///               %unsigned 1  rthread13                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00338 kickoffR14           (P)
///               %unsigned 1  rthread14                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0033C kickoffR15           (P)
///               %unsigned 1  rthread15                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00340 kickoffR16           (P)
///               %unsigned 1  rthread16                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00344 kickoffR17           (P)
///               %unsigned 1  rthread17                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00348 kickoffR18           (P)
///               %unsigned 1  rthread18                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0034C kickoffR19           (P)
///               %unsigned 1  rthread19                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00350 kickoffR20           (P)
///               %unsigned 1  rthread20                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00354 kickoffR21           (P)
///               %unsigned 1  rthread21                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00358 kickoffR22           (P)
///               %unsigned 1  rthread22                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0035C kickoffR23           (P)
///               %unsigned 1  rthread23                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00360 kickoffR24           (P)
///               %unsigned 1  rthread24                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00364 kickoffR25           (P)
///               %unsigned 1  rthread25                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00368 kickoffR26           (P)
///               %unsigned 1  rthread26                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0036C kickoffR27           (P)
///               %unsigned 1  rthread27                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00370 kickoffR28           (P)
///               %unsigned 1  rthread28                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00374 kickoffR29           (P)
///               %unsigned 1  rthread29                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00378 kickoffR30           (P)
///               %unsigned 1  rthread30                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0037C kickoffR31           (P)
///               %unsigned 1  rthread31                 0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00380 kickoffW0            (P)
///               %unsigned 1  wthread0                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00384 kickoffW1            (P)
///               %unsigned 1  wthread1                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00388 kickoffW2            (P)
///               %unsigned 1  wthread2                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0038C kickoffW3            (P)
///               %unsigned 1  wthread3                  0x0
///                                    ###
///                                    * Kick off bit for each thread, and should be cleared by hardware after acked.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00390 cfg                  (P)
///               ###
///               * Below fields are for MTRR common control
///               ###
///               %unsigned 1  mtrr_flow_ctrl            0x0
///                                    ###
///                                    * 1: Disable DMA command output when MTRR engine input buffer is going to be full.
///                                    * 0: No flow control, still sends out DMA commands even when input buffer is full.
///                                    ###
///               %unsigned 1  mtrr_qos_en               0x0
///                                    ###
///                                    * Enable meta data command qos value overwrite or not.
///                                    ###
///               %unsigned 4  mtrr_qos                  0x0
///                                    ###
///                                    * QoS value for meta command if qos_en is 1. If qos_en is 0, use the qos value from pixel loading command.
///                                    ###
///               %unsigned 1  mtrr_dis_mtid             0x0
///                                    ###
///                                    * Set 1 to disable multiple AXI ID for mtrr pixel command.
///                                    * Then all pixel command AXI-ID will become 0.
///                                    * Meta command AXI-ID is still 1.
///                                    * Below fields are for MMU common control
///                                    ###
///               %unsigned 3  mmu_pageSz                0x0
///                                    : 4K                        0x0
///                                    : 16K                       0x1
///                                    : 64K                       0x2
///                                    : 256K                      0x3
///                                    : 1M                        0x4
///                                    : 2M                        0x5
///                                                 ###
///                                                 * Page size: the size indicated by one page entry.
///                                                 ###
///               %unsigned 1  mmu_qos_en                0x0
///                                    ###
///                                    * Enable page table command QoS overwrite or not
///                                    ###
///               %unsigned 4  mmu_qos                   0x0
///                                    ###
///                                    * QoS value for page table command if qos_en is 1. If qos_en is 0, use the qos value from pixel loading command.
///                                    * Below fields are settings for bank shuffling in MMU
///                                    ###
///               %unsigned 1  mmu_banks                 0x0
///                                    ###
///                                    * Number of banks
///                                    * 0: 4 banks
///                                    * 1: 8 banks
///                                    ###
///               %unsigned 2  mmu_sysSz                 0x0
///                                    ###
///                                    * The original bank size. Or in other words, the system configurations on the bank size.
///                                    * 0: 512B
///                                    * 1: 1KB
///                                    * 2: 4KB
///                                    * 3: 8KB
///                                    ###
///               %unsigned 2  mmu_tarSz                 0x0
///                                    ###
///                                    * Target bank size that we want to change to:
///                                    * 0: 512B
///                                    * 1: 1KB
///                                    * 2: 4KB
///                                    * 3: 8KB
///                                    ###
///               %unsigned 1  Reserved                  0x0
///                                    ###
///                                    * Reserved.
///                                    ###
///               %%        11         # Stuffing bits...
///     @ 0x00394 pfa                  (RW-)
///               ###
///               * Page fault status record for MMU
///               ###
///               %unsigned 1  page_fault                0x0
///                                    ###
///                                    * It should be set by hardware when in-valid page entry found, and cleared by software.
///                                    ###
///               %unsigned 16 pfa_idx                   0x0
///                                    ###
///                                    * Page idx record (in 4KB) for the first page fault.
///                                    ###
///               %unsigned 6  pfa_tid                   0x0
///                                    ###
///                                    * Thread ID record for the first page fault. {wt, bid[3:0], uv}
///                                    ###
///               %unsigned 9  safe_adr                  0x0
///                                    ###
///                                    * When page fault happens, the safe page address (in the unit of 1MB) could be read/write by MMU.
///                                    ###
///     @ 0x00398 VxGMETA              (P)
///     # 0x00398 metar                
///               $VxGMETA             metar             REG          
///                                    ###
///                                    * Configurations for read threads
///                                    ###
///     @ 0x004AC VxGMMUR              (P)
///     # 0x004AC mmur                 
///               $VxGMMUR             mmur              REG          
///                                    ###
///                                    * MMU CFG for all read threads for VxG use.
///                                    ###
///     @ 0x00558 MTRW                 (P)
///     # 0x00558 mtrw                 
///               $MTRW                mtrw              REG       [4]
///                                    ###
///                                    * Configurations for write threads
///                                    * end of VxGMTR interface
///                                    ###
///     @ 0x005C8                      (W-)
///     #         # Stuffing bytes...
///               %% 448
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    1536B, bits:    3499b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_VxGMTR
#define h_VxGMTR (){}

    #define     RA_VxGMTR_Version                              0x0000

    #define     BA_VxGMTR_Version_build                        0x0000
    #define     B16VxGMTR_Version_build                        0x0000
    #define   LSb32VxGMTR_Version_build                           0
    #define   LSb16VxGMTR_Version_build                           0
    #define       bVxGMTR_Version_build                        8
    #define   MSK32VxGMTR_Version_build                           0x000000FF

    #define     BA_VxGMTR_Version_rsvd                         0x0001
    #define     B16VxGMTR_Version_rsvd                         0x0000
    #define   LSb32VxGMTR_Version_rsvd                            8
    #define   LSb16VxGMTR_Version_rsvd                            8
    #define       bVxGMTR_Version_rsvd                         8
    #define   MSK32VxGMTR_Version_rsvd                            0x0000FF00

    #define     BA_VxGMTR_Version_minor                        0x0002
    #define     B16VxGMTR_Version_minor                        0x0002
    #define   LSb32VxGMTR_Version_minor                           16
    #define   LSb16VxGMTR_Version_minor                           0
    #define       bVxGMTR_Version_minor                        8
    #define   MSK32VxGMTR_Version_minor                           0x00FF0000

    #define     BA_VxGMTR_Version_major                        0x0003
    #define     B16VxGMTR_Version_major                        0x0002
    #define   LSb32VxGMTR_Version_major                           24
    #define   LSb16VxGMTR_Version_major                           8
    #define       bVxGMTR_Version_major                        8
    #define   MSK32VxGMTR_Version_major                           0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_Build                                0x0004

    #define     BA_VxGMTR_Build_version                        0x0004
    #define     B16VxGMTR_Build_version                        0x0004
    #define   LSb32VxGMTR_Build_version                           0
    #define   LSb16VxGMTR_Build_version                           0
    #define       bVxGMTR_Build_version                        32
    #define   MSK32VxGMTR_Build_version                           0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_MMU_TAG                              0x0100
    #define     RA_VxGMTR_mmu_tags                             0x0100
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_META_TAG                             0x0200
    #define     RA_VxGMTR_meta_tags                            0x0200
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR0                            0x0300

    #define     BA_VxGMTR_kickoffR0_rthread0                   0x0300
    #define     B16VxGMTR_kickoffR0_rthread0                   0x0300
    #define   LSb32VxGMTR_kickoffR0_rthread0                      0
    #define   LSb16VxGMTR_kickoffR0_rthread0                      0
    #define       bVxGMTR_kickoffR0_rthread0                   1
    #define   MSK32VxGMTR_kickoffR0_rthread0                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR1                            0x0304

    #define     BA_VxGMTR_kickoffR1_rthread1                   0x0304
    #define     B16VxGMTR_kickoffR1_rthread1                   0x0304
    #define   LSb32VxGMTR_kickoffR1_rthread1                      0
    #define   LSb16VxGMTR_kickoffR1_rthread1                      0
    #define       bVxGMTR_kickoffR1_rthread1                   1
    #define   MSK32VxGMTR_kickoffR1_rthread1                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR2                            0x0308

    #define     BA_VxGMTR_kickoffR2_rthread2                   0x0308
    #define     B16VxGMTR_kickoffR2_rthread2                   0x0308
    #define   LSb32VxGMTR_kickoffR2_rthread2                      0
    #define   LSb16VxGMTR_kickoffR2_rthread2                      0
    #define       bVxGMTR_kickoffR2_rthread2                   1
    #define   MSK32VxGMTR_kickoffR2_rthread2                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR3                            0x030C

    #define     BA_VxGMTR_kickoffR3_rthread3                   0x030C
    #define     B16VxGMTR_kickoffR3_rthread3                   0x030C
    #define   LSb32VxGMTR_kickoffR3_rthread3                      0
    #define   LSb16VxGMTR_kickoffR3_rthread3                      0
    #define       bVxGMTR_kickoffR3_rthread3                   1
    #define   MSK32VxGMTR_kickoffR3_rthread3                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR4                            0x0310

    #define     BA_VxGMTR_kickoffR4_rthread4                   0x0310
    #define     B16VxGMTR_kickoffR4_rthread4                   0x0310
    #define   LSb32VxGMTR_kickoffR4_rthread4                      0
    #define   LSb16VxGMTR_kickoffR4_rthread4                      0
    #define       bVxGMTR_kickoffR4_rthread4                   1
    #define   MSK32VxGMTR_kickoffR4_rthread4                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR5                            0x0314

    #define     BA_VxGMTR_kickoffR5_rthread5                   0x0314
    #define     B16VxGMTR_kickoffR5_rthread5                   0x0314
    #define   LSb32VxGMTR_kickoffR5_rthread5                      0
    #define   LSb16VxGMTR_kickoffR5_rthread5                      0
    #define       bVxGMTR_kickoffR5_rthread5                   1
    #define   MSK32VxGMTR_kickoffR5_rthread5                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR6                            0x0318

    #define     BA_VxGMTR_kickoffR6_rthread6                   0x0318
    #define     B16VxGMTR_kickoffR6_rthread6                   0x0318
    #define   LSb32VxGMTR_kickoffR6_rthread6                      0
    #define   LSb16VxGMTR_kickoffR6_rthread6                      0
    #define       bVxGMTR_kickoffR6_rthread6                   1
    #define   MSK32VxGMTR_kickoffR6_rthread6                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR7                            0x031C

    #define     BA_VxGMTR_kickoffR7_rthread7                   0x031C
    #define     B16VxGMTR_kickoffR7_rthread7                   0x031C
    #define   LSb32VxGMTR_kickoffR7_rthread7                      0
    #define   LSb16VxGMTR_kickoffR7_rthread7                      0
    #define       bVxGMTR_kickoffR7_rthread7                   1
    #define   MSK32VxGMTR_kickoffR7_rthread7                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR8                            0x0320

    #define     BA_VxGMTR_kickoffR8_rthread8                   0x0320
    #define     B16VxGMTR_kickoffR8_rthread8                   0x0320
    #define   LSb32VxGMTR_kickoffR8_rthread8                      0
    #define   LSb16VxGMTR_kickoffR8_rthread8                      0
    #define       bVxGMTR_kickoffR8_rthread8                   1
    #define   MSK32VxGMTR_kickoffR8_rthread8                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR9                            0x0324

    #define     BA_VxGMTR_kickoffR9_rthread9                   0x0324
    #define     B16VxGMTR_kickoffR9_rthread9                   0x0324
    #define   LSb32VxGMTR_kickoffR9_rthread9                      0
    #define   LSb16VxGMTR_kickoffR9_rthread9                      0
    #define       bVxGMTR_kickoffR9_rthread9                   1
    #define   MSK32VxGMTR_kickoffR9_rthread9                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR10                           0x0328

    #define     BA_VxGMTR_kickoffR10_rthread10                 0x0328
    #define     B16VxGMTR_kickoffR10_rthread10                 0x0328
    #define   LSb32VxGMTR_kickoffR10_rthread10                    0
    #define   LSb16VxGMTR_kickoffR10_rthread10                    0
    #define       bVxGMTR_kickoffR10_rthread10                 1
    #define   MSK32VxGMTR_kickoffR10_rthread10                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR11                           0x032C

    #define     BA_VxGMTR_kickoffR11_rthread11                 0x032C
    #define     B16VxGMTR_kickoffR11_rthread11                 0x032C
    #define   LSb32VxGMTR_kickoffR11_rthread11                    0
    #define   LSb16VxGMTR_kickoffR11_rthread11                    0
    #define       bVxGMTR_kickoffR11_rthread11                 1
    #define   MSK32VxGMTR_kickoffR11_rthread11                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR12                           0x0330

    #define     BA_VxGMTR_kickoffR12_rthread12                 0x0330
    #define     B16VxGMTR_kickoffR12_rthread12                 0x0330
    #define   LSb32VxGMTR_kickoffR12_rthread12                    0
    #define   LSb16VxGMTR_kickoffR12_rthread12                    0
    #define       bVxGMTR_kickoffR12_rthread12                 1
    #define   MSK32VxGMTR_kickoffR12_rthread12                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR13                           0x0334

    #define     BA_VxGMTR_kickoffR13_rthread13                 0x0334
    #define     B16VxGMTR_kickoffR13_rthread13                 0x0334
    #define   LSb32VxGMTR_kickoffR13_rthread13                    0
    #define   LSb16VxGMTR_kickoffR13_rthread13                    0
    #define       bVxGMTR_kickoffR13_rthread13                 1
    #define   MSK32VxGMTR_kickoffR13_rthread13                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR14                           0x0338

    #define     BA_VxGMTR_kickoffR14_rthread14                 0x0338
    #define     B16VxGMTR_kickoffR14_rthread14                 0x0338
    #define   LSb32VxGMTR_kickoffR14_rthread14                    0
    #define   LSb16VxGMTR_kickoffR14_rthread14                    0
    #define       bVxGMTR_kickoffR14_rthread14                 1
    #define   MSK32VxGMTR_kickoffR14_rthread14                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR15                           0x033C

    #define     BA_VxGMTR_kickoffR15_rthread15                 0x033C
    #define     B16VxGMTR_kickoffR15_rthread15                 0x033C
    #define   LSb32VxGMTR_kickoffR15_rthread15                    0
    #define   LSb16VxGMTR_kickoffR15_rthread15                    0
    #define       bVxGMTR_kickoffR15_rthread15                 1
    #define   MSK32VxGMTR_kickoffR15_rthread15                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR16                           0x0340

    #define     BA_VxGMTR_kickoffR16_rthread16                 0x0340
    #define     B16VxGMTR_kickoffR16_rthread16                 0x0340
    #define   LSb32VxGMTR_kickoffR16_rthread16                    0
    #define   LSb16VxGMTR_kickoffR16_rthread16                    0
    #define       bVxGMTR_kickoffR16_rthread16                 1
    #define   MSK32VxGMTR_kickoffR16_rthread16                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR17                           0x0344

    #define     BA_VxGMTR_kickoffR17_rthread17                 0x0344
    #define     B16VxGMTR_kickoffR17_rthread17                 0x0344
    #define   LSb32VxGMTR_kickoffR17_rthread17                    0
    #define   LSb16VxGMTR_kickoffR17_rthread17                    0
    #define       bVxGMTR_kickoffR17_rthread17                 1
    #define   MSK32VxGMTR_kickoffR17_rthread17                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR18                           0x0348

    #define     BA_VxGMTR_kickoffR18_rthread18                 0x0348
    #define     B16VxGMTR_kickoffR18_rthread18                 0x0348
    #define   LSb32VxGMTR_kickoffR18_rthread18                    0
    #define   LSb16VxGMTR_kickoffR18_rthread18                    0
    #define       bVxGMTR_kickoffR18_rthread18                 1
    #define   MSK32VxGMTR_kickoffR18_rthread18                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR19                           0x034C

    #define     BA_VxGMTR_kickoffR19_rthread19                 0x034C
    #define     B16VxGMTR_kickoffR19_rthread19                 0x034C
    #define   LSb32VxGMTR_kickoffR19_rthread19                    0
    #define   LSb16VxGMTR_kickoffR19_rthread19                    0
    #define       bVxGMTR_kickoffR19_rthread19                 1
    #define   MSK32VxGMTR_kickoffR19_rthread19                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR20                           0x0350

    #define     BA_VxGMTR_kickoffR20_rthread20                 0x0350
    #define     B16VxGMTR_kickoffR20_rthread20                 0x0350
    #define   LSb32VxGMTR_kickoffR20_rthread20                    0
    #define   LSb16VxGMTR_kickoffR20_rthread20                    0
    #define       bVxGMTR_kickoffR20_rthread20                 1
    #define   MSK32VxGMTR_kickoffR20_rthread20                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR21                           0x0354

    #define     BA_VxGMTR_kickoffR21_rthread21                 0x0354
    #define     B16VxGMTR_kickoffR21_rthread21                 0x0354
    #define   LSb32VxGMTR_kickoffR21_rthread21                    0
    #define   LSb16VxGMTR_kickoffR21_rthread21                    0
    #define       bVxGMTR_kickoffR21_rthread21                 1
    #define   MSK32VxGMTR_kickoffR21_rthread21                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR22                           0x0358

    #define     BA_VxGMTR_kickoffR22_rthread22                 0x0358
    #define     B16VxGMTR_kickoffR22_rthread22                 0x0358
    #define   LSb32VxGMTR_kickoffR22_rthread22                    0
    #define   LSb16VxGMTR_kickoffR22_rthread22                    0
    #define       bVxGMTR_kickoffR22_rthread22                 1
    #define   MSK32VxGMTR_kickoffR22_rthread22                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR23                           0x035C

    #define     BA_VxGMTR_kickoffR23_rthread23                 0x035C
    #define     B16VxGMTR_kickoffR23_rthread23                 0x035C
    #define   LSb32VxGMTR_kickoffR23_rthread23                    0
    #define   LSb16VxGMTR_kickoffR23_rthread23                    0
    #define       bVxGMTR_kickoffR23_rthread23                 1
    #define   MSK32VxGMTR_kickoffR23_rthread23                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR24                           0x0360

    #define     BA_VxGMTR_kickoffR24_rthread24                 0x0360
    #define     B16VxGMTR_kickoffR24_rthread24                 0x0360
    #define   LSb32VxGMTR_kickoffR24_rthread24                    0
    #define   LSb16VxGMTR_kickoffR24_rthread24                    0
    #define       bVxGMTR_kickoffR24_rthread24                 1
    #define   MSK32VxGMTR_kickoffR24_rthread24                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR25                           0x0364

    #define     BA_VxGMTR_kickoffR25_rthread25                 0x0364
    #define     B16VxGMTR_kickoffR25_rthread25                 0x0364
    #define   LSb32VxGMTR_kickoffR25_rthread25                    0
    #define   LSb16VxGMTR_kickoffR25_rthread25                    0
    #define       bVxGMTR_kickoffR25_rthread25                 1
    #define   MSK32VxGMTR_kickoffR25_rthread25                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR26                           0x0368

    #define     BA_VxGMTR_kickoffR26_rthread26                 0x0368
    #define     B16VxGMTR_kickoffR26_rthread26                 0x0368
    #define   LSb32VxGMTR_kickoffR26_rthread26                    0
    #define   LSb16VxGMTR_kickoffR26_rthread26                    0
    #define       bVxGMTR_kickoffR26_rthread26                 1
    #define   MSK32VxGMTR_kickoffR26_rthread26                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR27                           0x036C

    #define     BA_VxGMTR_kickoffR27_rthread27                 0x036C
    #define     B16VxGMTR_kickoffR27_rthread27                 0x036C
    #define   LSb32VxGMTR_kickoffR27_rthread27                    0
    #define   LSb16VxGMTR_kickoffR27_rthread27                    0
    #define       bVxGMTR_kickoffR27_rthread27                 1
    #define   MSK32VxGMTR_kickoffR27_rthread27                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR28                           0x0370

    #define     BA_VxGMTR_kickoffR28_rthread28                 0x0370
    #define     B16VxGMTR_kickoffR28_rthread28                 0x0370
    #define   LSb32VxGMTR_kickoffR28_rthread28                    0
    #define   LSb16VxGMTR_kickoffR28_rthread28                    0
    #define       bVxGMTR_kickoffR28_rthread28                 1
    #define   MSK32VxGMTR_kickoffR28_rthread28                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR29                           0x0374

    #define     BA_VxGMTR_kickoffR29_rthread29                 0x0374
    #define     B16VxGMTR_kickoffR29_rthread29                 0x0374
    #define   LSb32VxGMTR_kickoffR29_rthread29                    0
    #define   LSb16VxGMTR_kickoffR29_rthread29                    0
    #define       bVxGMTR_kickoffR29_rthread29                 1
    #define   MSK32VxGMTR_kickoffR29_rthread29                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR30                           0x0378

    #define     BA_VxGMTR_kickoffR30_rthread30                 0x0378
    #define     B16VxGMTR_kickoffR30_rthread30                 0x0378
    #define   LSb32VxGMTR_kickoffR30_rthread30                    0
    #define   LSb16VxGMTR_kickoffR30_rthread30                    0
    #define       bVxGMTR_kickoffR30_rthread30                 1
    #define   MSK32VxGMTR_kickoffR30_rthread30                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffR31                           0x037C

    #define     BA_VxGMTR_kickoffR31_rthread31                 0x037C
    #define     B16VxGMTR_kickoffR31_rthread31                 0x037C
    #define   LSb32VxGMTR_kickoffR31_rthread31                    0
    #define   LSb16VxGMTR_kickoffR31_rthread31                    0
    #define       bVxGMTR_kickoffR31_rthread31                 1
    #define   MSK32VxGMTR_kickoffR31_rthread31                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffW0                            0x0380

    #define     BA_VxGMTR_kickoffW0_wthread0                   0x0380
    #define     B16VxGMTR_kickoffW0_wthread0                   0x0380
    #define   LSb32VxGMTR_kickoffW0_wthread0                      0
    #define   LSb16VxGMTR_kickoffW0_wthread0                      0
    #define       bVxGMTR_kickoffW0_wthread0                   1
    #define   MSK32VxGMTR_kickoffW0_wthread0                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffW1                            0x0384

    #define     BA_VxGMTR_kickoffW1_wthread1                   0x0384
    #define     B16VxGMTR_kickoffW1_wthread1                   0x0384
    #define   LSb32VxGMTR_kickoffW1_wthread1                      0
    #define   LSb16VxGMTR_kickoffW1_wthread1                      0
    #define       bVxGMTR_kickoffW1_wthread1                   1
    #define   MSK32VxGMTR_kickoffW1_wthread1                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffW2                            0x0388

    #define     BA_VxGMTR_kickoffW2_wthread2                   0x0388
    #define     B16VxGMTR_kickoffW2_wthread2                   0x0388
    #define   LSb32VxGMTR_kickoffW2_wthread2                      0
    #define   LSb16VxGMTR_kickoffW2_wthread2                      0
    #define       bVxGMTR_kickoffW2_wthread2                   1
    #define   MSK32VxGMTR_kickoffW2_wthread2                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_kickoffW3                            0x038C

    #define     BA_VxGMTR_kickoffW3_wthread3                   0x038C
    #define     B16VxGMTR_kickoffW3_wthread3                   0x038C
    #define   LSb32VxGMTR_kickoffW3_wthread3                      0
    #define   LSb16VxGMTR_kickoffW3_wthread3                      0
    #define       bVxGMTR_kickoffW3_wthread3                   1
    #define   MSK32VxGMTR_kickoffW3_wthread3                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_cfg                                  0x0390

    #define     BA_VxGMTR_cfg_mtrr_flow_ctrl                   0x0390
    #define     B16VxGMTR_cfg_mtrr_flow_ctrl                   0x0390
    #define   LSb32VxGMTR_cfg_mtrr_flow_ctrl                      0
    #define   LSb16VxGMTR_cfg_mtrr_flow_ctrl                      0
    #define       bVxGMTR_cfg_mtrr_flow_ctrl                   1
    #define   MSK32VxGMTR_cfg_mtrr_flow_ctrl                      0x00000001

    #define     BA_VxGMTR_cfg_mtrr_qos_en                      0x0390
    #define     B16VxGMTR_cfg_mtrr_qos_en                      0x0390
    #define   LSb32VxGMTR_cfg_mtrr_qos_en                         1
    #define   LSb16VxGMTR_cfg_mtrr_qos_en                         1
    #define       bVxGMTR_cfg_mtrr_qos_en                      1
    #define   MSK32VxGMTR_cfg_mtrr_qos_en                         0x00000002

    #define     BA_VxGMTR_cfg_mtrr_qos                         0x0390
    #define     B16VxGMTR_cfg_mtrr_qos                         0x0390
    #define   LSb32VxGMTR_cfg_mtrr_qos                            2
    #define   LSb16VxGMTR_cfg_mtrr_qos                            2
    #define       bVxGMTR_cfg_mtrr_qos                         4
    #define   MSK32VxGMTR_cfg_mtrr_qos                            0x0000003C

    #define     BA_VxGMTR_cfg_mtrr_dis_mtid                    0x0390
    #define     B16VxGMTR_cfg_mtrr_dis_mtid                    0x0390
    #define   LSb32VxGMTR_cfg_mtrr_dis_mtid                       6
    #define   LSb16VxGMTR_cfg_mtrr_dis_mtid                       6
    #define       bVxGMTR_cfg_mtrr_dis_mtid                    1
    #define   MSK32VxGMTR_cfg_mtrr_dis_mtid                       0x00000040

    #define     BA_VxGMTR_cfg_mmu_pageSz                       0x0390
    #define     B16VxGMTR_cfg_mmu_pageSz                       0x0390
    #define   LSb32VxGMTR_cfg_mmu_pageSz                          7
    #define   LSb16VxGMTR_cfg_mmu_pageSz                          7
    #define       bVxGMTR_cfg_mmu_pageSz                       3
    #define   MSK32VxGMTR_cfg_mmu_pageSz                          0x00000380
    #define        VxGMTR_cfg_mmu_pageSz_4K                                 0x0
    #define        VxGMTR_cfg_mmu_pageSz_16K                                0x1
    #define        VxGMTR_cfg_mmu_pageSz_64K                                0x2
    #define        VxGMTR_cfg_mmu_pageSz_256K                               0x3
    #define        VxGMTR_cfg_mmu_pageSz_1M                                 0x4
    #define        VxGMTR_cfg_mmu_pageSz_2M                                 0x5

    #define     BA_VxGMTR_cfg_mmu_qos_en                       0x0391
    #define     B16VxGMTR_cfg_mmu_qos_en                       0x0390
    #define   LSb32VxGMTR_cfg_mmu_qos_en                          10
    #define   LSb16VxGMTR_cfg_mmu_qos_en                          10
    #define       bVxGMTR_cfg_mmu_qos_en                       1
    #define   MSK32VxGMTR_cfg_mmu_qos_en                          0x00000400

    #define     BA_VxGMTR_cfg_mmu_qos                          0x0391
    #define     B16VxGMTR_cfg_mmu_qos                          0x0390
    #define   LSb32VxGMTR_cfg_mmu_qos                             11
    #define   LSb16VxGMTR_cfg_mmu_qos                             11
    #define       bVxGMTR_cfg_mmu_qos                          4
    #define   MSK32VxGMTR_cfg_mmu_qos                             0x00007800

    #define     BA_VxGMTR_cfg_mmu_banks                        0x0391
    #define     B16VxGMTR_cfg_mmu_banks                        0x0390
    #define   LSb32VxGMTR_cfg_mmu_banks                           15
    #define   LSb16VxGMTR_cfg_mmu_banks                           15
    #define       bVxGMTR_cfg_mmu_banks                        1
    #define   MSK32VxGMTR_cfg_mmu_banks                           0x00008000

    #define     BA_VxGMTR_cfg_mmu_sysSz                        0x0392
    #define     B16VxGMTR_cfg_mmu_sysSz                        0x0392
    #define   LSb32VxGMTR_cfg_mmu_sysSz                           16
    #define   LSb16VxGMTR_cfg_mmu_sysSz                           0
    #define       bVxGMTR_cfg_mmu_sysSz                        2
    #define   MSK32VxGMTR_cfg_mmu_sysSz                           0x00030000

    #define     BA_VxGMTR_cfg_mmu_tarSz                        0x0392
    #define     B16VxGMTR_cfg_mmu_tarSz                        0x0392
    #define   LSb32VxGMTR_cfg_mmu_tarSz                           18
    #define   LSb16VxGMTR_cfg_mmu_tarSz                           2
    #define       bVxGMTR_cfg_mmu_tarSz                        2
    #define   MSK32VxGMTR_cfg_mmu_tarSz                           0x000C0000

    #define     BA_VxGMTR_cfg_Reserved                         0x0392
    #define     B16VxGMTR_cfg_Reserved                         0x0392
    #define   LSb32VxGMTR_cfg_Reserved                            20
    #define   LSb16VxGMTR_cfg_Reserved                            4
    #define       bVxGMTR_cfg_Reserved                         1
    #define   MSK32VxGMTR_cfg_Reserved                            0x00100000
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_pfa                                  0x0394

    #define     BA_VxGMTR_pfa_page_fault                       0x0394
    #define     B16VxGMTR_pfa_page_fault                       0x0394
    #define   LSb32VxGMTR_pfa_page_fault                          0
    #define   LSb16VxGMTR_pfa_page_fault                          0
    #define       bVxGMTR_pfa_page_fault                       1
    #define   MSK32VxGMTR_pfa_page_fault                          0x00000001

    #define     BA_VxGMTR_pfa_pfa_idx                          0x0394
    #define     B16VxGMTR_pfa_pfa_idx                          0x0394
    #define   LSb32VxGMTR_pfa_pfa_idx                             1
    #define   LSb16VxGMTR_pfa_pfa_idx                             1
    #define       bVxGMTR_pfa_pfa_idx                          16
    #define   MSK32VxGMTR_pfa_pfa_idx                             0x0001FFFE

    #define     BA_VxGMTR_pfa_pfa_tid                          0x0396
    #define     B16VxGMTR_pfa_pfa_tid                          0x0396
    #define   LSb32VxGMTR_pfa_pfa_tid                             17
    #define   LSb16VxGMTR_pfa_pfa_tid                             1
    #define       bVxGMTR_pfa_pfa_tid                          6
    #define   MSK32VxGMTR_pfa_pfa_tid                             0x007E0000

    #define     BA_VxGMTR_pfa_safe_adr                         0x0396
    #define     B16VxGMTR_pfa_safe_adr                         0x0396
    #define   LSb32VxGMTR_pfa_safe_adr                            23
    #define   LSb16VxGMTR_pfa_safe_adr                            7
    #define       bVxGMTR_pfa_safe_adr                         9
    #define   MSK32VxGMTR_pfa_safe_adr                            0xFF800000
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_VxGMETA                              0x0398
    #define     RA_VxGMTR_metar                                0x0398
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_VxGMMUR                              0x04AC
    #define     RA_VxGMTR_mmur                                 0x04AC
    ///////////////////////////////////////////////////////////
    #define     RA_VxGMTR_MTRW                                 0x0558
    #define     RA_VxGMTR_mtrw                                 0x0558
    ///////////////////////////////////////////////////////////

    typedef struct SIE_VxGMTR {
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_Version_build(r32)                   _BFGET_(r32, 7, 0)
    #define   SET32VxGMTR_Version_build(r32,v)                 _BFSET_(r32, 7, 0,v)
    #define   GET16VxGMTR_Version_build(r16)                   _BFGET_(r16, 7, 0)
    #define   SET16VxGMTR_Version_build(r16,v)                 _BFSET_(r16, 7, 0,v)

    #define   GET32VxGMTR_Version_rsvd(r32)                    _BFGET_(r32,15, 8)
    #define   SET32VxGMTR_Version_rsvd(r32,v)                  _BFSET_(r32,15, 8,v)
    #define   GET16VxGMTR_Version_rsvd(r16)                    _BFGET_(r16,15, 8)
    #define   SET16VxGMTR_Version_rsvd(r16,v)                  _BFSET_(r16,15, 8,v)

    #define   GET32VxGMTR_Version_minor(r32)                   _BFGET_(r32,23,16)
    #define   SET32VxGMTR_Version_minor(r32,v)                 _BFSET_(r32,23,16,v)
    #define   GET16VxGMTR_Version_minor(r16)                   _BFGET_(r16, 7, 0)
    #define   SET16VxGMTR_Version_minor(r16,v)                 _BFSET_(r16, 7, 0,v)

    #define   GET32VxGMTR_Version_major(r32)                   _BFGET_(r32,31,24)
    #define   SET32VxGMTR_Version_major(r32,v)                 _BFSET_(r32,31,24,v)
    #define   GET16VxGMTR_Version_major(r16)                   _BFGET_(r16,15, 8)
    #define   SET16VxGMTR_Version_major(r16,v)                 _BFSET_(r16,15, 8,v)

    #define     w32VxGMTR_Version                              {\
            UNSG32 uVersion_build                              :  8;\
            UNSG32 uVersion_rsvd                               :  8;\
            UNSG32 uVersion_minor                              :  8;\
            UNSG32 uVersion_major                              :  8;\
          }
    union { UNSG32 u32VxGMTR_Version;
            struct w32VxGMTR_Version;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_Build_version(r32)                   _BFGET_(r32,31, 0)
    #define   SET32VxGMTR_Build_version(r32,v)                 _BFSET_(r32,31, 0,v)

    #define     w32VxGMTR_Build                                {\
            UNSG32 uBuild_version                              : 32;\
          }
    union { UNSG32 u32VxGMTR_Build;
            struct w32VxGMTR_Build;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx8                                      [248];
    ///////////////////////////////////////////////////////////
              SIE_MMU_TAG                                      ie_mmu_tags;
    ///////////////////////////////////////////////////////////
              SIE_META_TAG                                     ie_meta_tags;
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR0_rthread0(r32)              _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR0_rthread0(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR0_rthread0(r16)              _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR0_rthread0(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR0                            {\
            UNSG32 ukickoffR0_rthread0                         :  1;\
            UNSG32 RSVDx300_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR0;
            struct w32VxGMTR_kickoffR0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR1_rthread1(r32)              _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR1_rthread1(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR1_rthread1(r16)              _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR1_rthread1(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR1                            {\
            UNSG32 ukickoffR1_rthread1                         :  1;\
            UNSG32 RSVDx304_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR1;
            struct w32VxGMTR_kickoffR1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR2_rthread2(r32)              _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR2_rthread2(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR2_rthread2(r16)              _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR2_rthread2(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR2                            {\
            UNSG32 ukickoffR2_rthread2                         :  1;\
            UNSG32 RSVDx308_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR2;
            struct w32VxGMTR_kickoffR2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR3_rthread3(r32)              _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR3_rthread3(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR3_rthread3(r16)              _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR3_rthread3(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR3                            {\
            UNSG32 ukickoffR3_rthread3                         :  1;\
            UNSG32 RSVDx30C_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR3;
            struct w32VxGMTR_kickoffR3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR4_rthread4(r32)              _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR4_rthread4(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR4_rthread4(r16)              _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR4_rthread4(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR4                            {\
            UNSG32 ukickoffR4_rthread4                         :  1;\
            UNSG32 RSVDx310_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR4;
            struct w32VxGMTR_kickoffR4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR5_rthread5(r32)              _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR5_rthread5(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR5_rthread5(r16)              _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR5_rthread5(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR5                            {\
            UNSG32 ukickoffR5_rthread5                         :  1;\
            UNSG32 RSVDx314_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR5;
            struct w32VxGMTR_kickoffR5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR6_rthread6(r32)              _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR6_rthread6(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR6_rthread6(r16)              _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR6_rthread6(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR6                            {\
            UNSG32 ukickoffR6_rthread6                         :  1;\
            UNSG32 RSVDx318_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR6;
            struct w32VxGMTR_kickoffR6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR7_rthread7(r32)              _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR7_rthread7(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR7_rthread7(r16)              _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR7_rthread7(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR7                            {\
            UNSG32 ukickoffR7_rthread7                         :  1;\
            UNSG32 RSVDx31C_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR7;
            struct w32VxGMTR_kickoffR7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR8_rthread8(r32)              _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR8_rthread8(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR8_rthread8(r16)              _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR8_rthread8(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR8                            {\
            UNSG32 ukickoffR8_rthread8                         :  1;\
            UNSG32 RSVDx320_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR8;
            struct w32VxGMTR_kickoffR8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR9_rthread9(r32)              _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR9_rthread9(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR9_rthread9(r16)              _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR9_rthread9(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR9                            {\
            UNSG32 ukickoffR9_rthread9                         :  1;\
            UNSG32 RSVDx324_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR9;
            struct w32VxGMTR_kickoffR9;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR10_rthread10(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR10_rthread10(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR10_rthread10(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR10_rthread10(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR10                           {\
            UNSG32 ukickoffR10_rthread10                       :  1;\
            UNSG32 RSVDx328_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR10;
            struct w32VxGMTR_kickoffR10;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR11_rthread11(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR11_rthread11(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR11_rthread11(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR11_rthread11(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR11                           {\
            UNSG32 ukickoffR11_rthread11                       :  1;\
            UNSG32 RSVDx32C_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR11;
            struct w32VxGMTR_kickoffR11;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR12_rthread12(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR12_rthread12(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR12_rthread12(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR12_rthread12(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR12                           {\
            UNSG32 ukickoffR12_rthread12                       :  1;\
            UNSG32 RSVDx330_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR12;
            struct w32VxGMTR_kickoffR12;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR13_rthread13(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR13_rthread13(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR13_rthread13(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR13_rthread13(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR13                           {\
            UNSG32 ukickoffR13_rthread13                       :  1;\
            UNSG32 RSVDx334_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR13;
            struct w32VxGMTR_kickoffR13;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR14_rthread14(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR14_rthread14(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR14_rthread14(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR14_rthread14(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR14                           {\
            UNSG32 ukickoffR14_rthread14                       :  1;\
            UNSG32 RSVDx338_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR14;
            struct w32VxGMTR_kickoffR14;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR15_rthread15(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR15_rthread15(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR15_rthread15(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR15_rthread15(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR15                           {\
            UNSG32 ukickoffR15_rthread15                       :  1;\
            UNSG32 RSVDx33C_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR15;
            struct w32VxGMTR_kickoffR15;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR16_rthread16(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR16_rthread16(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR16_rthread16(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR16_rthread16(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR16                           {\
            UNSG32 ukickoffR16_rthread16                       :  1;\
            UNSG32 RSVDx340_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR16;
            struct w32VxGMTR_kickoffR16;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR17_rthread17(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR17_rthread17(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR17_rthread17(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR17_rthread17(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR17                           {\
            UNSG32 ukickoffR17_rthread17                       :  1;\
            UNSG32 RSVDx344_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR17;
            struct w32VxGMTR_kickoffR17;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR18_rthread18(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR18_rthread18(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR18_rthread18(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR18_rthread18(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR18                           {\
            UNSG32 ukickoffR18_rthread18                       :  1;\
            UNSG32 RSVDx348_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR18;
            struct w32VxGMTR_kickoffR18;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR19_rthread19(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR19_rthread19(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR19_rthread19(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR19_rthread19(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR19                           {\
            UNSG32 ukickoffR19_rthread19                       :  1;\
            UNSG32 RSVDx34C_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR19;
            struct w32VxGMTR_kickoffR19;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR20_rthread20(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR20_rthread20(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR20_rthread20(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR20_rthread20(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR20                           {\
            UNSG32 ukickoffR20_rthread20                       :  1;\
            UNSG32 RSVDx350_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR20;
            struct w32VxGMTR_kickoffR20;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR21_rthread21(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR21_rthread21(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR21_rthread21(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR21_rthread21(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR21                           {\
            UNSG32 ukickoffR21_rthread21                       :  1;\
            UNSG32 RSVDx354_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR21;
            struct w32VxGMTR_kickoffR21;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR22_rthread22(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR22_rthread22(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR22_rthread22(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR22_rthread22(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR22                           {\
            UNSG32 ukickoffR22_rthread22                       :  1;\
            UNSG32 RSVDx358_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR22;
            struct w32VxGMTR_kickoffR22;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR23_rthread23(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR23_rthread23(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR23_rthread23(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR23_rthread23(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR23                           {\
            UNSG32 ukickoffR23_rthread23                       :  1;\
            UNSG32 RSVDx35C_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR23;
            struct w32VxGMTR_kickoffR23;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR24_rthread24(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR24_rthread24(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR24_rthread24(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR24_rthread24(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR24                           {\
            UNSG32 ukickoffR24_rthread24                       :  1;\
            UNSG32 RSVDx360_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR24;
            struct w32VxGMTR_kickoffR24;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR25_rthread25(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR25_rthread25(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR25_rthread25(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR25_rthread25(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR25                           {\
            UNSG32 ukickoffR25_rthread25                       :  1;\
            UNSG32 RSVDx364_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR25;
            struct w32VxGMTR_kickoffR25;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR26_rthread26(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR26_rthread26(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR26_rthread26(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR26_rthread26(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR26                           {\
            UNSG32 ukickoffR26_rthread26                       :  1;\
            UNSG32 RSVDx368_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR26;
            struct w32VxGMTR_kickoffR26;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR27_rthread27(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR27_rthread27(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR27_rthread27(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR27_rthread27(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR27                           {\
            UNSG32 ukickoffR27_rthread27                       :  1;\
            UNSG32 RSVDx36C_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR27;
            struct w32VxGMTR_kickoffR27;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR28_rthread28(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR28_rthread28(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR28_rthread28(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR28_rthread28(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR28                           {\
            UNSG32 ukickoffR28_rthread28                       :  1;\
            UNSG32 RSVDx370_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR28;
            struct w32VxGMTR_kickoffR28;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR29_rthread29(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR29_rthread29(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR29_rthread29(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR29_rthread29(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR29                           {\
            UNSG32 ukickoffR29_rthread29                       :  1;\
            UNSG32 RSVDx374_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR29;
            struct w32VxGMTR_kickoffR29;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR30_rthread30(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR30_rthread30(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR30_rthread30(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR30_rthread30(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR30                           {\
            UNSG32 ukickoffR30_rthread30                       :  1;\
            UNSG32 RSVDx378_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR30;
            struct w32VxGMTR_kickoffR30;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffR31_rthread31(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffR31_rthread31(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffR31_rthread31(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffR31_rthread31(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffR31                           {\
            UNSG32 ukickoffR31_rthread31                       :  1;\
            UNSG32 RSVDx37C_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffR31;
            struct w32VxGMTR_kickoffR31;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffW0_wthread0(r32)              _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffW0_wthread0(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffW0_wthread0(r16)              _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffW0_wthread0(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffW0                            {\
            UNSG32 ukickoffW0_wthread0                         :  1;\
            UNSG32 RSVDx380_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffW0;
            struct w32VxGMTR_kickoffW0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffW1_wthread1(r32)              _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffW1_wthread1(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffW1_wthread1(r16)              _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffW1_wthread1(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffW1                            {\
            UNSG32 ukickoffW1_wthread1                         :  1;\
            UNSG32 RSVDx384_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffW1;
            struct w32VxGMTR_kickoffW1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffW2_wthread2(r32)              _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffW2_wthread2(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffW2_wthread2(r16)              _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffW2_wthread2(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffW2                            {\
            UNSG32 ukickoffW2_wthread2                         :  1;\
            UNSG32 RSVDx388_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffW2;
            struct w32VxGMTR_kickoffW2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_kickoffW3_wthread3(r32)              _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_kickoffW3_wthread3(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_kickoffW3_wthread3(r16)              _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_kickoffW3_wthread3(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32VxGMTR_kickoffW3                            {\
            UNSG32 ukickoffW3_wthread3                         :  1;\
            UNSG32 RSVDx38C_b1                                 : 31;\
          }
    union { UNSG32 u32VxGMTR_kickoffW3;
            struct w32VxGMTR_kickoffW3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_cfg_mtrr_flow_ctrl(r32)              _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_cfg_mtrr_flow_ctrl(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_cfg_mtrr_flow_ctrl(r16)              _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_cfg_mtrr_flow_ctrl(r16,v)            _BFSET_(r16, 0, 0,v)

    #define   GET32VxGMTR_cfg_mtrr_qos_en(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32VxGMTR_cfg_mtrr_qos_en(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16VxGMTR_cfg_mtrr_qos_en(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16VxGMTR_cfg_mtrr_qos_en(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32VxGMTR_cfg_mtrr_qos(r32)                    _BFGET_(r32, 5, 2)
    #define   SET32VxGMTR_cfg_mtrr_qos(r32,v)                  _BFSET_(r32, 5, 2,v)
    #define   GET16VxGMTR_cfg_mtrr_qos(r16)                    _BFGET_(r16, 5, 2)
    #define   SET16VxGMTR_cfg_mtrr_qos(r16,v)                  _BFSET_(r16, 5, 2,v)

    #define   GET32VxGMTR_cfg_mtrr_dis_mtid(r32)               _BFGET_(r32, 6, 6)
    #define   SET32VxGMTR_cfg_mtrr_dis_mtid(r32,v)             _BFSET_(r32, 6, 6,v)
    #define   GET16VxGMTR_cfg_mtrr_dis_mtid(r16)               _BFGET_(r16, 6, 6)
    #define   SET16VxGMTR_cfg_mtrr_dis_mtid(r16,v)             _BFSET_(r16, 6, 6,v)

    #define   GET32VxGMTR_cfg_mmu_pageSz(r32)                  _BFGET_(r32, 9, 7)
    #define   SET32VxGMTR_cfg_mmu_pageSz(r32,v)                _BFSET_(r32, 9, 7,v)
    #define   GET16VxGMTR_cfg_mmu_pageSz(r16)                  _BFGET_(r16, 9, 7)
    #define   SET16VxGMTR_cfg_mmu_pageSz(r16,v)                _BFSET_(r16, 9, 7,v)

    #define   GET32VxGMTR_cfg_mmu_qos_en(r32)                  _BFGET_(r32,10,10)
    #define   SET32VxGMTR_cfg_mmu_qos_en(r32,v)                _BFSET_(r32,10,10,v)
    #define   GET16VxGMTR_cfg_mmu_qos_en(r16)                  _BFGET_(r16,10,10)
    #define   SET16VxGMTR_cfg_mmu_qos_en(r16,v)                _BFSET_(r16,10,10,v)

    #define   GET32VxGMTR_cfg_mmu_qos(r32)                     _BFGET_(r32,14,11)
    #define   SET32VxGMTR_cfg_mmu_qos(r32,v)                   _BFSET_(r32,14,11,v)
    #define   GET16VxGMTR_cfg_mmu_qos(r16)                     _BFGET_(r16,14,11)
    #define   SET16VxGMTR_cfg_mmu_qos(r16,v)                   _BFSET_(r16,14,11,v)

    #define   GET32VxGMTR_cfg_mmu_banks(r32)                   _BFGET_(r32,15,15)
    #define   SET32VxGMTR_cfg_mmu_banks(r32,v)                 _BFSET_(r32,15,15,v)
    #define   GET16VxGMTR_cfg_mmu_banks(r16)                   _BFGET_(r16,15,15)
    #define   SET16VxGMTR_cfg_mmu_banks(r16,v)                 _BFSET_(r16,15,15,v)

    #define   GET32VxGMTR_cfg_mmu_sysSz(r32)                   _BFGET_(r32,17,16)
    #define   SET32VxGMTR_cfg_mmu_sysSz(r32,v)                 _BFSET_(r32,17,16,v)
    #define   GET16VxGMTR_cfg_mmu_sysSz(r16)                   _BFGET_(r16, 1, 0)
    #define   SET16VxGMTR_cfg_mmu_sysSz(r16,v)                 _BFSET_(r16, 1, 0,v)

    #define   GET32VxGMTR_cfg_mmu_tarSz(r32)                   _BFGET_(r32,19,18)
    #define   SET32VxGMTR_cfg_mmu_tarSz(r32,v)                 _BFSET_(r32,19,18,v)
    #define   GET16VxGMTR_cfg_mmu_tarSz(r16)                   _BFGET_(r16, 3, 2)
    #define   SET16VxGMTR_cfg_mmu_tarSz(r16,v)                 _BFSET_(r16, 3, 2,v)

    #define   GET32VxGMTR_cfg_Reserved(r32)                    _BFGET_(r32,20,20)
    #define   SET32VxGMTR_cfg_Reserved(r32,v)                  _BFSET_(r32,20,20,v)
    #define   GET16VxGMTR_cfg_Reserved(r16)                    _BFGET_(r16, 4, 4)
    #define   SET16VxGMTR_cfg_Reserved(r16,v)                  _BFSET_(r16, 4, 4,v)

    #define     w32VxGMTR_cfg                                  {\
            UNSG32 ucfg_mtrr_flow_ctrl                         :  1;\
            UNSG32 ucfg_mtrr_qos_en                            :  1;\
            UNSG32 ucfg_mtrr_qos                               :  4;\
            UNSG32 ucfg_mtrr_dis_mtid                          :  1;\
            UNSG32 ucfg_mmu_pageSz                             :  3;\
            UNSG32 ucfg_mmu_qos_en                             :  1;\
            UNSG32 ucfg_mmu_qos                                :  4;\
            UNSG32 ucfg_mmu_banks                              :  1;\
            UNSG32 ucfg_mmu_sysSz                              :  2;\
            UNSG32 ucfg_mmu_tarSz                              :  2;\
            UNSG32 ucfg_Reserved                               :  1;\
            UNSG32 RSVDx390_b21                                : 11;\
          }
    union { UNSG32 u32VxGMTR_cfg;
            struct w32VxGMTR_cfg;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VxGMTR_pfa_page_fault(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32VxGMTR_pfa_page_fault(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16VxGMTR_pfa_page_fault(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16VxGMTR_pfa_page_fault(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32VxGMTR_pfa_pfa_idx(r32)                     _BFGET_(r32,16, 1)
    #define   SET32VxGMTR_pfa_pfa_idx(r32,v)                   _BFSET_(r32,16, 1,v)

    #define   GET32VxGMTR_pfa_pfa_tid(r32)                     _BFGET_(r32,22,17)
    #define   SET32VxGMTR_pfa_pfa_tid(r32,v)                   _BFSET_(r32,22,17,v)
    #define   GET16VxGMTR_pfa_pfa_tid(r16)                     _BFGET_(r16, 6, 1)
    #define   SET16VxGMTR_pfa_pfa_tid(r16,v)                   _BFSET_(r16, 6, 1,v)

    #define   GET32VxGMTR_pfa_safe_adr(r32)                    _BFGET_(r32,31,23)
    #define   SET32VxGMTR_pfa_safe_adr(r32,v)                  _BFSET_(r32,31,23,v)
    #define   GET16VxGMTR_pfa_safe_adr(r16)                    _BFGET_(r16,15, 7)
    #define   SET16VxGMTR_pfa_safe_adr(r16,v)                  _BFSET_(r16,15, 7,v)

    #define     w32VxGMTR_pfa                                  {\
            UNSG32 upfa_page_fault                             :  1;\
            UNSG32 upfa_pfa_idx                                : 16;\
            UNSG32 upfa_pfa_tid                                :  6;\
            UNSG32 upfa_safe_adr                               :  9;\
          }
    union { UNSG32 u32VxGMTR_pfa;
            struct w32VxGMTR_pfa;
          };
    ///////////////////////////////////////////////////////////
              SIE_VxGMETA                                      ie_metar;
    ///////////////////////////////////////////////////////////
              SIE_VxGMMUR                                      ie_mmur;
    ///////////////////////////////////////////////////////////
              SIE_MTRW                                         ie_mtrw[4];
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx5C8                                    [56];
    ///////////////////////////////////////////////////////////
    } SIE_VxGMTR;

    typedef union  T32VxGMTR_Version
          { UNSG32 u32;
            struct w32VxGMTR_Version;
                 } T32VxGMTR_Version;
    typedef union  T32VxGMTR_Build
          { UNSG32 u32;
            struct w32VxGMTR_Build;
                 } T32VxGMTR_Build;
    typedef union  T32VxGMTR_kickoffR0
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR0;
                 } T32VxGMTR_kickoffR0;
    typedef union  T32VxGMTR_kickoffR1
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR1;
                 } T32VxGMTR_kickoffR1;
    typedef union  T32VxGMTR_kickoffR2
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR2;
                 } T32VxGMTR_kickoffR2;
    typedef union  T32VxGMTR_kickoffR3
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR3;
                 } T32VxGMTR_kickoffR3;
    typedef union  T32VxGMTR_kickoffR4
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR4;
                 } T32VxGMTR_kickoffR4;
    typedef union  T32VxGMTR_kickoffR5
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR5;
                 } T32VxGMTR_kickoffR5;
    typedef union  T32VxGMTR_kickoffR6
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR6;
                 } T32VxGMTR_kickoffR6;
    typedef union  T32VxGMTR_kickoffR7
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR7;
                 } T32VxGMTR_kickoffR7;
    typedef union  T32VxGMTR_kickoffR8
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR8;
                 } T32VxGMTR_kickoffR8;
    typedef union  T32VxGMTR_kickoffR9
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR9;
                 } T32VxGMTR_kickoffR9;
    typedef union  T32VxGMTR_kickoffR10
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR10;
                 } T32VxGMTR_kickoffR10;
    typedef union  T32VxGMTR_kickoffR11
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR11;
                 } T32VxGMTR_kickoffR11;
    typedef union  T32VxGMTR_kickoffR12
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR12;
                 } T32VxGMTR_kickoffR12;
    typedef union  T32VxGMTR_kickoffR13
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR13;
                 } T32VxGMTR_kickoffR13;
    typedef union  T32VxGMTR_kickoffR14
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR14;
                 } T32VxGMTR_kickoffR14;
    typedef union  T32VxGMTR_kickoffR15
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR15;
                 } T32VxGMTR_kickoffR15;
    typedef union  T32VxGMTR_kickoffR16
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR16;
                 } T32VxGMTR_kickoffR16;
    typedef union  T32VxGMTR_kickoffR17
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR17;
                 } T32VxGMTR_kickoffR17;
    typedef union  T32VxGMTR_kickoffR18
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR18;
                 } T32VxGMTR_kickoffR18;
    typedef union  T32VxGMTR_kickoffR19
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR19;
                 } T32VxGMTR_kickoffR19;
    typedef union  T32VxGMTR_kickoffR20
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR20;
                 } T32VxGMTR_kickoffR20;
    typedef union  T32VxGMTR_kickoffR21
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR21;
                 } T32VxGMTR_kickoffR21;
    typedef union  T32VxGMTR_kickoffR22
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR22;
                 } T32VxGMTR_kickoffR22;
    typedef union  T32VxGMTR_kickoffR23
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR23;
                 } T32VxGMTR_kickoffR23;
    typedef union  T32VxGMTR_kickoffR24
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR24;
                 } T32VxGMTR_kickoffR24;
    typedef union  T32VxGMTR_kickoffR25
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR25;
                 } T32VxGMTR_kickoffR25;
    typedef union  T32VxGMTR_kickoffR26
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR26;
                 } T32VxGMTR_kickoffR26;
    typedef union  T32VxGMTR_kickoffR27
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR27;
                 } T32VxGMTR_kickoffR27;
    typedef union  T32VxGMTR_kickoffR28
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR28;
                 } T32VxGMTR_kickoffR28;
    typedef union  T32VxGMTR_kickoffR29
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR29;
                 } T32VxGMTR_kickoffR29;
    typedef union  T32VxGMTR_kickoffR30
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR30;
                 } T32VxGMTR_kickoffR30;
    typedef union  T32VxGMTR_kickoffR31
          { UNSG32 u32;
            struct w32VxGMTR_kickoffR31;
                 } T32VxGMTR_kickoffR31;
    typedef union  T32VxGMTR_kickoffW0
          { UNSG32 u32;
            struct w32VxGMTR_kickoffW0;
                 } T32VxGMTR_kickoffW0;
    typedef union  T32VxGMTR_kickoffW1
          { UNSG32 u32;
            struct w32VxGMTR_kickoffW1;
                 } T32VxGMTR_kickoffW1;
    typedef union  T32VxGMTR_kickoffW2
          { UNSG32 u32;
            struct w32VxGMTR_kickoffW2;
                 } T32VxGMTR_kickoffW2;
    typedef union  T32VxGMTR_kickoffW3
          { UNSG32 u32;
            struct w32VxGMTR_kickoffW3;
                 } T32VxGMTR_kickoffW3;
    typedef union  T32VxGMTR_cfg
          { UNSG32 u32;
            struct w32VxGMTR_cfg;
                 } T32VxGMTR_cfg;
    typedef union  T32VxGMTR_pfa
          { UNSG32 u32;
            struct w32VxGMTR_pfa;
                 } T32VxGMTR_pfa;
    ///////////////////////////////////////////////////////////

    typedef union  TVxGMTR_Version
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_Version;
                   };
                 } TVxGMTR_Version;
    typedef union  TVxGMTR_Build
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_Build;
                   };
                 } TVxGMTR_Build;
    typedef union  TVxGMTR_kickoffR0
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR0;
                   };
                 } TVxGMTR_kickoffR0;
    typedef union  TVxGMTR_kickoffR1
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR1;
                   };
                 } TVxGMTR_kickoffR1;
    typedef union  TVxGMTR_kickoffR2
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR2;
                   };
                 } TVxGMTR_kickoffR2;
    typedef union  TVxGMTR_kickoffR3
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR3;
                   };
                 } TVxGMTR_kickoffR3;
    typedef union  TVxGMTR_kickoffR4
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR4;
                   };
                 } TVxGMTR_kickoffR4;
    typedef union  TVxGMTR_kickoffR5
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR5;
                   };
                 } TVxGMTR_kickoffR5;
    typedef union  TVxGMTR_kickoffR6
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR6;
                   };
                 } TVxGMTR_kickoffR6;
    typedef union  TVxGMTR_kickoffR7
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR7;
                   };
                 } TVxGMTR_kickoffR7;
    typedef union  TVxGMTR_kickoffR8
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR8;
                   };
                 } TVxGMTR_kickoffR8;
    typedef union  TVxGMTR_kickoffR9
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR9;
                   };
                 } TVxGMTR_kickoffR9;
    typedef union  TVxGMTR_kickoffR10
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR10;
                   };
                 } TVxGMTR_kickoffR10;
    typedef union  TVxGMTR_kickoffR11
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR11;
                   };
                 } TVxGMTR_kickoffR11;
    typedef union  TVxGMTR_kickoffR12
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR12;
                   };
                 } TVxGMTR_kickoffR12;
    typedef union  TVxGMTR_kickoffR13
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR13;
                   };
                 } TVxGMTR_kickoffR13;
    typedef union  TVxGMTR_kickoffR14
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR14;
                   };
                 } TVxGMTR_kickoffR14;
    typedef union  TVxGMTR_kickoffR15
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR15;
                   };
                 } TVxGMTR_kickoffR15;
    typedef union  TVxGMTR_kickoffR16
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR16;
                   };
                 } TVxGMTR_kickoffR16;
    typedef union  TVxGMTR_kickoffR17
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR17;
                   };
                 } TVxGMTR_kickoffR17;
    typedef union  TVxGMTR_kickoffR18
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR18;
                   };
                 } TVxGMTR_kickoffR18;
    typedef union  TVxGMTR_kickoffR19
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR19;
                   };
                 } TVxGMTR_kickoffR19;
    typedef union  TVxGMTR_kickoffR20
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR20;
                   };
                 } TVxGMTR_kickoffR20;
    typedef union  TVxGMTR_kickoffR21
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR21;
                   };
                 } TVxGMTR_kickoffR21;
    typedef union  TVxGMTR_kickoffR22
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR22;
                   };
                 } TVxGMTR_kickoffR22;
    typedef union  TVxGMTR_kickoffR23
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR23;
                   };
                 } TVxGMTR_kickoffR23;
    typedef union  TVxGMTR_kickoffR24
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR24;
                   };
                 } TVxGMTR_kickoffR24;
    typedef union  TVxGMTR_kickoffR25
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR25;
                   };
                 } TVxGMTR_kickoffR25;
    typedef union  TVxGMTR_kickoffR26
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR26;
                   };
                 } TVxGMTR_kickoffR26;
    typedef union  TVxGMTR_kickoffR27
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR27;
                   };
                 } TVxGMTR_kickoffR27;
    typedef union  TVxGMTR_kickoffR28
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR28;
                   };
                 } TVxGMTR_kickoffR28;
    typedef union  TVxGMTR_kickoffR29
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR29;
                   };
                 } TVxGMTR_kickoffR29;
    typedef union  TVxGMTR_kickoffR30
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR30;
                   };
                 } TVxGMTR_kickoffR30;
    typedef union  TVxGMTR_kickoffR31
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffR31;
                   };
                 } TVxGMTR_kickoffR31;
    typedef union  TVxGMTR_kickoffW0
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffW0;
                   };
                 } TVxGMTR_kickoffW0;
    typedef union  TVxGMTR_kickoffW1
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffW1;
                   };
                 } TVxGMTR_kickoffW1;
    typedef union  TVxGMTR_kickoffW2
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffW2;
                   };
                 } TVxGMTR_kickoffW2;
    typedef union  TVxGMTR_kickoffW3
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_kickoffW3;
                   };
                 } TVxGMTR_kickoffW3;
    typedef union  TVxGMTR_cfg
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_cfg;
                   };
                 } TVxGMTR_cfg;
    typedef union  TVxGMTR_pfa
          { UNSG32 u32[1];
            struct {
            struct w32VxGMTR_pfa;
                   };
                 } TVxGMTR_pfa;

    ///////////////////////////////////////////////////////////
     SIGN32 VxGMTR_drvrd(SIE_VxGMTR *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 VxGMTR_drvwr(SIE_VxGMTR *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void VxGMTR_reset(SIE_VxGMTR *p);
     SIGN32 VxGMTR_cmp  (SIE_VxGMTR *p, SIE_VxGMTR *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define VxGMTR_check(p,pie,pfx,hLOG) VxGMTR_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define VxGMTR_print(p,    pfx,hLOG) VxGMTR_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: VxGMTR
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MTR                     biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 cfg                  (P)
///               ###
///               * Below fields are for MTRR common control
///               ###
///               %unsigned 1  mtrr_flow_ctrl            0x0
///                                    ###
///                                    * 1: Disable DMA command output when MTRR engine input buffer is going to be full.
///                                    * 0: No flow control, still sends out DMA commands even when input buffer is full.
///                                    ###
///               %unsigned 1  mtrr_qos_en               0x0
///                                    ###
///                                    * Enable meta data command qos value overwrite or not.
///                                    ###
///               %unsigned 4  mtrr_qos                  0x0
///                                    ###
///                                    * QoS value for meta command if qos_en is 1. If qos_en is 0, use the qos value from pixel loading command.
///                                    ###
///               %unsigned 1  mtrr_dis_mtid             0x0
///                                    ###
///                                    * Set 1 to disable multiple AXI ID for mtrr pixel command.
///                                    * Then all pixel command AXI-ID will become 0.
///                                    * Meta command AXI-ID is still 1.
///                                    * Below fields are for MMU common control
///                                    ###
///               %unsigned 3  mmu_pageSz                0x0
///                                    : 4K                        0x0
///                                    : 16K                       0x1
///                                    : 64K                       0x2
///                                    : 256K                      0x3
///                                    : 1M                        0x4
///                                    : 2M                        0x5
///                                                 ###
///                                                 * Page size: the size indicated by one page entry.
///                                                 ###
///               %unsigned 1  mmu_qos_en                0x0
///                                    ###
///                                    * Enable page table command QoS overwrite or not
///                                    ###
///               %unsigned 4  mmu_qos                   0x0
///                                    ###
///                                    * QoS value for page table command if qos_en is 1. If qos_en is 0, use the qos value from pixel loading command.
///                                    * Below fields are settings for bank shuffling in MMU
///                                    ###
///               %unsigned 1  mmu_banks                 0x0
///                                    ###
///                                    * Number of banks
///                                    * 0: 4 banks
///                                    * 1: 8 banks
///                                    ###
///               %unsigned 2  mmu_sysSz                 0x0
///                                    ###
///                                    * The original bank size. Or in other words, the system configurations on the bank size.
///                                    * 0: 512B
///                                    * 1: 1KB
///                                    * 2: 4KB
///                                    * 3: 8KB
///                                    ###
///               %unsigned 2  mmu_tarSz                 0x0
///                                    ###
///                                    * Target bank size that we want to change to:
///                                    * 0: 512B
///                                    * 1: 1KB
///                                    * 2: 4KB
///                                    * 3: 8KB
///                                    ###
///               %unsigned 1  Reserved                  0x0
///                                    ###
///                                    * Reserved.
///                                    ###
///               %%        11         # Stuffing bits...
///     @ 0x00004 MTRR                 (P)
///     # 0x00004 mtrr                 
///               $MTRR                mtrr              REG      [32]
///                                    ###
///                                    * Configurations for read threads
///                                    ###
///     @ 0x00384 MTRW                 (P)
///     # 0x00384 mtrw                 
///               $MTRW                mtrw              REG      [16]
///                                    ###
///                                    * Configurations for write threads
///                                    ###
///     @ 0x00544 offset               (P)
///     # 0x00544 offset               
///               $VxGMETA_OFST        offset            REG      [16]
///                                    ###
///                                    * Meta buffer address offset, indexed by thread ID (bid).
///                                    * end of MTR interface
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    1412B, bits:    8773b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MTR
#define h_MTR (){}

    #define     RA_MTR_cfg                                     0x0000

    #define     BA_MTR_cfg_mtrr_flow_ctrl                      0x0000
    #define     B16MTR_cfg_mtrr_flow_ctrl                      0x0000
    #define   LSb32MTR_cfg_mtrr_flow_ctrl                         0
    #define   LSb16MTR_cfg_mtrr_flow_ctrl                         0
    #define       bMTR_cfg_mtrr_flow_ctrl                      1
    #define   MSK32MTR_cfg_mtrr_flow_ctrl                         0x00000001

    #define     BA_MTR_cfg_mtrr_qos_en                         0x0000
    #define     B16MTR_cfg_mtrr_qos_en                         0x0000
    #define   LSb32MTR_cfg_mtrr_qos_en                            1
    #define   LSb16MTR_cfg_mtrr_qos_en                            1
    #define       bMTR_cfg_mtrr_qos_en                         1
    #define   MSK32MTR_cfg_mtrr_qos_en                            0x00000002

    #define     BA_MTR_cfg_mtrr_qos                            0x0000
    #define     B16MTR_cfg_mtrr_qos                            0x0000
    #define   LSb32MTR_cfg_mtrr_qos                               2
    #define   LSb16MTR_cfg_mtrr_qos                               2
    #define       bMTR_cfg_mtrr_qos                            4
    #define   MSK32MTR_cfg_mtrr_qos                               0x0000003C

    #define     BA_MTR_cfg_mtrr_dis_mtid                       0x0000
    #define     B16MTR_cfg_mtrr_dis_mtid                       0x0000
    #define   LSb32MTR_cfg_mtrr_dis_mtid                          6
    #define   LSb16MTR_cfg_mtrr_dis_mtid                          6
    #define       bMTR_cfg_mtrr_dis_mtid                       1
    #define   MSK32MTR_cfg_mtrr_dis_mtid                          0x00000040

    #define     BA_MTR_cfg_mmu_pageSz                          0x0000
    #define     B16MTR_cfg_mmu_pageSz                          0x0000
    #define   LSb32MTR_cfg_mmu_pageSz                             7
    #define   LSb16MTR_cfg_mmu_pageSz                             7
    #define       bMTR_cfg_mmu_pageSz                          3
    #define   MSK32MTR_cfg_mmu_pageSz                             0x00000380
    #define        MTR_cfg_mmu_pageSz_4K                                    0x0
    #define        MTR_cfg_mmu_pageSz_16K                                   0x1
    #define        MTR_cfg_mmu_pageSz_64K                                   0x2
    #define        MTR_cfg_mmu_pageSz_256K                                  0x3
    #define        MTR_cfg_mmu_pageSz_1M                                    0x4
    #define        MTR_cfg_mmu_pageSz_2M                                    0x5

    #define     BA_MTR_cfg_mmu_qos_en                          0x0001
    #define     B16MTR_cfg_mmu_qos_en                          0x0000
    #define   LSb32MTR_cfg_mmu_qos_en                             10
    #define   LSb16MTR_cfg_mmu_qos_en                             10
    #define       bMTR_cfg_mmu_qos_en                          1
    #define   MSK32MTR_cfg_mmu_qos_en                             0x00000400

    #define     BA_MTR_cfg_mmu_qos                             0x0001
    #define     B16MTR_cfg_mmu_qos                             0x0000
    #define   LSb32MTR_cfg_mmu_qos                                11
    #define   LSb16MTR_cfg_mmu_qos                                11
    #define       bMTR_cfg_mmu_qos                             4
    #define   MSK32MTR_cfg_mmu_qos                                0x00007800

    #define     BA_MTR_cfg_mmu_banks                           0x0001
    #define     B16MTR_cfg_mmu_banks                           0x0000
    #define   LSb32MTR_cfg_mmu_banks                              15
    #define   LSb16MTR_cfg_mmu_banks                              15
    #define       bMTR_cfg_mmu_banks                           1
    #define   MSK32MTR_cfg_mmu_banks                              0x00008000

    #define     BA_MTR_cfg_mmu_sysSz                           0x0002
    #define     B16MTR_cfg_mmu_sysSz                           0x0002
    #define   LSb32MTR_cfg_mmu_sysSz                              16
    #define   LSb16MTR_cfg_mmu_sysSz                              0
    #define       bMTR_cfg_mmu_sysSz                           2
    #define   MSK32MTR_cfg_mmu_sysSz                              0x00030000

    #define     BA_MTR_cfg_mmu_tarSz                           0x0002
    #define     B16MTR_cfg_mmu_tarSz                           0x0002
    #define   LSb32MTR_cfg_mmu_tarSz                              18
    #define   LSb16MTR_cfg_mmu_tarSz                              2
    #define       bMTR_cfg_mmu_tarSz                           2
    #define   MSK32MTR_cfg_mmu_tarSz                              0x000C0000

    #define     BA_MTR_cfg_Reserved                            0x0002
    #define     B16MTR_cfg_Reserved                            0x0002
    #define   LSb32MTR_cfg_Reserved                               20
    #define   LSb16MTR_cfg_Reserved                               4
    #define       bMTR_cfg_Reserved                            1
    #define   MSK32MTR_cfg_Reserved                               0x00100000
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_MTRR                                    0x0004
    #define     RA_MTR_mtrr                                    0x0004
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_MTRW                                    0x0384
    #define     RA_MTR_mtrw                                    0x0384
    ///////////////////////////////////////////////////////////
    #define     RA_MTR_offset                                  0x0544
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MTR {
    ///////////////////////////////////////////////////////////
    #define   GET32MTR_cfg_mtrr_flow_ctrl(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32MTR_cfg_mtrr_flow_ctrl(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16MTR_cfg_mtrr_flow_ctrl(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16MTR_cfg_mtrr_flow_ctrl(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32MTR_cfg_mtrr_qos_en(r32)                    _BFGET_(r32, 1, 1)
    #define   SET32MTR_cfg_mtrr_qos_en(r32,v)                  _BFSET_(r32, 1, 1,v)
    #define   GET16MTR_cfg_mtrr_qos_en(r16)                    _BFGET_(r16, 1, 1)
    #define   SET16MTR_cfg_mtrr_qos_en(r16,v)                  _BFSET_(r16, 1, 1,v)

    #define   GET32MTR_cfg_mtrr_qos(r32)                       _BFGET_(r32, 5, 2)
    #define   SET32MTR_cfg_mtrr_qos(r32,v)                     _BFSET_(r32, 5, 2,v)
    #define   GET16MTR_cfg_mtrr_qos(r16)                       _BFGET_(r16, 5, 2)
    #define   SET16MTR_cfg_mtrr_qos(r16,v)                     _BFSET_(r16, 5, 2,v)

    #define   GET32MTR_cfg_mtrr_dis_mtid(r32)                  _BFGET_(r32, 6, 6)
    #define   SET32MTR_cfg_mtrr_dis_mtid(r32,v)                _BFSET_(r32, 6, 6,v)
    #define   GET16MTR_cfg_mtrr_dis_mtid(r16)                  _BFGET_(r16, 6, 6)
    #define   SET16MTR_cfg_mtrr_dis_mtid(r16,v)                _BFSET_(r16, 6, 6,v)

    #define   GET32MTR_cfg_mmu_pageSz(r32)                     _BFGET_(r32, 9, 7)
    #define   SET32MTR_cfg_mmu_pageSz(r32,v)                   _BFSET_(r32, 9, 7,v)
    #define   GET16MTR_cfg_mmu_pageSz(r16)                     _BFGET_(r16, 9, 7)
    #define   SET16MTR_cfg_mmu_pageSz(r16,v)                   _BFSET_(r16, 9, 7,v)

    #define   GET32MTR_cfg_mmu_qos_en(r32)                     _BFGET_(r32,10,10)
    #define   SET32MTR_cfg_mmu_qos_en(r32,v)                   _BFSET_(r32,10,10,v)
    #define   GET16MTR_cfg_mmu_qos_en(r16)                     _BFGET_(r16,10,10)
    #define   SET16MTR_cfg_mmu_qos_en(r16,v)                   _BFSET_(r16,10,10,v)

    #define   GET32MTR_cfg_mmu_qos(r32)                        _BFGET_(r32,14,11)
    #define   SET32MTR_cfg_mmu_qos(r32,v)                      _BFSET_(r32,14,11,v)
    #define   GET16MTR_cfg_mmu_qos(r16)                        _BFGET_(r16,14,11)
    #define   SET16MTR_cfg_mmu_qos(r16,v)                      _BFSET_(r16,14,11,v)

    #define   GET32MTR_cfg_mmu_banks(r32)                      _BFGET_(r32,15,15)
    #define   SET32MTR_cfg_mmu_banks(r32,v)                    _BFSET_(r32,15,15,v)
    #define   GET16MTR_cfg_mmu_banks(r16)                      _BFGET_(r16,15,15)
    #define   SET16MTR_cfg_mmu_banks(r16,v)                    _BFSET_(r16,15,15,v)

    #define   GET32MTR_cfg_mmu_sysSz(r32)                      _BFGET_(r32,17,16)
    #define   SET32MTR_cfg_mmu_sysSz(r32,v)                    _BFSET_(r32,17,16,v)
    #define   GET16MTR_cfg_mmu_sysSz(r16)                      _BFGET_(r16, 1, 0)
    #define   SET16MTR_cfg_mmu_sysSz(r16,v)                    _BFSET_(r16, 1, 0,v)

    #define   GET32MTR_cfg_mmu_tarSz(r32)                      _BFGET_(r32,19,18)
    #define   SET32MTR_cfg_mmu_tarSz(r32,v)                    _BFSET_(r32,19,18,v)
    #define   GET16MTR_cfg_mmu_tarSz(r16)                      _BFGET_(r16, 3, 2)
    #define   SET16MTR_cfg_mmu_tarSz(r16,v)                    _BFSET_(r16, 3, 2,v)

    #define   GET32MTR_cfg_Reserved(r32)                       _BFGET_(r32,20,20)
    #define   SET32MTR_cfg_Reserved(r32,v)                     _BFSET_(r32,20,20,v)
    #define   GET16MTR_cfg_Reserved(r16)                       _BFGET_(r16, 4, 4)
    #define   SET16MTR_cfg_Reserved(r16,v)                     _BFSET_(r16, 4, 4,v)

    #define     w32MTR_cfg                                     {\
            UNSG32 ucfg_mtrr_flow_ctrl                         :  1;\
            UNSG32 ucfg_mtrr_qos_en                            :  1;\
            UNSG32 ucfg_mtrr_qos                               :  4;\
            UNSG32 ucfg_mtrr_dis_mtid                          :  1;\
            UNSG32 ucfg_mmu_pageSz                             :  3;\
            UNSG32 ucfg_mmu_qos_en                             :  1;\
            UNSG32 ucfg_mmu_qos                                :  4;\
            UNSG32 ucfg_mmu_banks                              :  1;\
            UNSG32 ucfg_mmu_sysSz                              :  2;\
            UNSG32 ucfg_mmu_tarSz                              :  2;\
            UNSG32 ucfg_Reserved                               :  1;\
            UNSG32 RSVDx0_b21                                  : 11;\
          }
    union { UNSG32 u32MTR_cfg;
            struct w32MTR_cfg;
          };
    ///////////////////////////////////////////////////////////
              SIE_MTRR                                         ie_mtrr[32];
    ///////////////////////////////////////////////////////////
              SIE_MTRW                                         ie_mtrw[16];
    ///////////////////////////////////////////////////////////
              SIE_VxGMETA_OFST                                 ie_offset[16];
    ///////////////////////////////////////////////////////////
    } SIE_MTR;

    typedef union  T32MTR_cfg
          { UNSG32 u32;
            struct w32MTR_cfg;
                 } T32MTR_cfg;
    ///////////////////////////////////////////////////////////

    typedef union  TMTR_cfg
          { UNSG32 u32[1];
            struct {
            struct w32MTR_cfg;
                   };
                 } TMTR_cfg;

    ///////////////////////////////////////////////////////////
     SIGN32 MTR_drvrd(SIE_MTR *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MTR_drvwr(SIE_MTR *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MTR_reset(SIE_MTR *p);
     SIGN32 MTR_cmp  (SIE_MTR *p, SIE_MTR *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MTR_check(p,pie,pfx,hLOG) MTR_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MTR_print(p,    pfx,hLOG) MTR_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MTR
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: mtr.h
////////////////////////////////////////////////////////////

