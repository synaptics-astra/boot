//////
/// don't edit! auto-generated by docc: sataWrapper.h
////////////////////////////////////////////////////////////
#ifndef sataWrapper_h
#define sataWrapper_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE SataRegs                biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (W-)
///     #         # Stuffing bytes...
///               %% 262144
///     @ 0x08000 IPPorts              (P)
///               %unsigned 4  unit_mbus_id              0x1
///                                    ###
///                                    * Connected to port unit_mbus_id
///                                    ###
///               %unsigned 3  REFCLK_CNFG               0x1
///                                    ###
///                                    * Connected to port REFCLK_CNFG
///                                    ###
///               %unsigned 1  SATA_GEN2_EN_0            0x1
///                                    ###
///                                    * Connected to port SATA_GEN2_EN_0
///                                    ###
///               %unsigned 1  SATA_COMM_EN_0            0x1
///                                    ###
///                                    * Connected to port SATA_COMM_EN_0
///                                    ###
///               %unsigned 1  SATA_PHY_OFF_0            0x0
///                                    ###
///                                    * Connected to port SATA_PHY_OFF_0
///                                    ###
///               %unsigned 1  SATA_GEN2_EN_1            0x1
///                                    ###
///                                    * Connected to port SATA_GEN2_EN_1
///                                    ###
///               %unsigned 1  SATA_COMM_EN_1            0x1
///                                    ###
///                                    * Connected to port SATA_COMM_EN_1
///                                    ###
///               %unsigned 1  SATA_PHY_OFF_1            0x0
///                                    ###
///                                    * Connected to port SATA_PHY_OFF_1
///                                    ###
///               %unsigned 2  SATA_DIG_DEBUG            0x0
///                                    ###
///                                    * SATA Debug Bus Select
///                                    * 0: SATA_MONITOR_0 (Controller)
///                                    * 1: DIG_TEST_BUS (Analog)
///                                    * 2: SATA_ST_ACTIVE_0, SATA_PHY_READY_0
///                                    ###
///               %unsigned 1  PIN_DFE_UPDATE_DIS        0x1
///                                    ###
///                                    * DFE Update Enable.
///                                    * 0: Enable DFE adaptation.
///                                    * 1: Disable DFE adaptation but keep DFE current
///                                    * coefficient values.
///                                    * This pin is valid when register
///                                    * dfe_control_from_pin is set to high. Default is high.
///                                    ###
///               %unsigned 1  PIN_DFE_PAT_DIS           0x1
///                                    ###
///                                    * DFE Pattern Protection Disable.
///                                    * 0: Enable DFE Pattern Protection function.
///                                    * 1: Disable DFE Pattern Protection function.
///                                    * This pin is valid when register
///                                    * dfe_control_from_pin is set to high. Default is high.
///                                    ###
///               %unsigned 1  PIN_DFE_EN                0x1
///                                    ###
///                                    * DFE Function Enable.
///                                    * 0: Disable DFE function and set F1-F5 to ¡°0¡±.
///                                    * 1: Enable DFE function.
///                                    * This pin is valid when register
///                                    * dfe_control_from_pin is set to high. Default is high.
///                                    ###
///               %unsigned 1  PIN_SSC_EN                0x0
///                                    ###
///                                    * Spread Spectrum Clock Enable.
///                                    * 0: Disable SSC
///                                    * 1: Enable SSC
///                                    ###
///               %unsigned 1  PIN_PU_IVREF              0x1
///                                    ###
///                                    * Power Up current and voltage reference
///                                    * 0:Power down
///                                    * 1: Power up
///                                    ###
///               %unsigned 1  PIN_SNRZ_MODE             0x0
///                                    ###
///                                    * Set PHY into PHY stand alone SNRZ mode. Force
///                                    * PHY to be in a 20-bit mode. Connect to the RDC
///                                    * output PIN_SNRZ_MODE.
///                                    ###
///               %unsigned 1  PIN_RESET_CORE            0x0
///                                    ###
///                                    * PHY core reset Pin.
///                                    * 1: reset internal core logic, not reset register
///                                    * 0: normal working mode
///                                    ###
///               %unsigned 1  PIN_SQ_OOB_SEL            0x0
///                                    ###
///                                    * Squelch detector selection for OOB
///                                    * 0: Used for non-SATA and non-SAS applications without OOB detection function, such as PCIE and USB3, etc.
///                                    * 1: Used for SATA or SAS applications with OOB detection function.
///                                    ###
///               %unsigned 1  PIN_DEV_SEL               0x0
///                                    ###
///                                    * Device select for serial interface
///                                    * 0: SIF is disabled for current lane
///                                    * 1: SIF is enabled for current lane
///                                    * Please tie to Vss if not in USB3 or PCIE mode
///                                    ###
///               %unsigned 1  PIN_SEL                   0x0
///               %%        7          # Stuffing bits...
///     @ 0x08004 COMPHY_CTRL0         (P-)
///               ###
///               * Power control inputs of COMPHY_M_PIPE macro
///               ###
///               %unsigned 1  PIN_PU_IVREF              0x0
///                                    ###
///                                    * Power up current and voltage reference
///                                    * 0 : Power down
///                                    * 1 : Power up
///                                    ###
///               %unsigned 1  PIN_RESET_CORE            0x0
///                                    ###
///                                    * PHY core reset pin
///                                    * 1 : reset internal core logic, not reset register
///                                    * 0: normal working mode
///                                    ###
///               %unsigned 1  PIN_REFCLK_DIS            0x0
///                                    ###
///                                    * Reference Clock Disable Request
///                                    * 0: Enable PHY digital reference clock
///                                    * 1: Request for disable PHY digital reference clock
///                                    ###
///               %unsigned 1  PIN_ISOLATION_ENB         0x1
///                                    ###
///                                    * Isolation Digital Power Supply. This signal controls the PHY digital power supply switch between DVDD and DVDD_ISOLATION. It should be tied to 1 if there is only one digital power supply DVDD for PHY.
///                                    * 0: power saving mode in which DVDD can be turned off.
///                                    * 1: Normal function mode in which DVDD must be on.
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x08008 COMPHY_CTRL1         (P-)
///               ###
///               * Controls the PIPE related control inputs of COMPHY_M_PIPE macro
///               ###
///               %unsigned 1  PIN_PIPE_SEL              0x0
///                                    ###
///                                    * 0: COMPHY_M interface
///                                    * 1: USB3 PIPE interface
///                                    ###
///               %unsigned 1  PWR_RST_N                 0x1
///                                    ###
///                                    * Asynchronous reset signal, active low, power on reset
///                                    ###
///               %unsigned 1  CORE_RST_N                0x1
///                                    ###
///                                    * Core reset from MAC
///                                    ###
///               %unsigned 1  PIPE_PHY_MODE             0x0
///                                    ###
///                                    * Selects PHY operating mode
///                                    * 0 : PCI Express
///                                    * 1 : USB SuperSpeed
///                                    * Always program as 0x0.
///                                    ###
///               %unsigned 1  MAC_PHY_RXEIDETECT_DIS    0x0
///                                    ###
///                                    * Rx electrical idle (or squelch) detect disable
///                                    * 0 : squelch detector is enabled
///                                    * 1 : squelch detector is disabled
///                                    ###
///               %unsigned 1  MAC_PHY_TXCMN_MODE_DIS    0x0
///                                    ###
///                                    * Tx common mode disable
///                                    * 0 : tx common mode circuit is enabled
///                                    * 1: tx common mode circuit is disabled
///                                    ###
///               %unsigned 1  MAC_PHY_TXSWING           0x0
///                                    ###
///                                    * To control transmitter voltage swing level
///                                    * 0 : full swing
///                                    * 1 : low swing
///                                    ###
///               %unsigned 3  MAC_PHY_TXMARGIN0         0x0
///                                    ###
///                                    * Margin[2:0] HS FS
///                                    * 000 500 1000(P)
///                                    * 001 600 1200
///                                    * 010 550 1100
///                                    * 011 450 900
///                                    * 100 300 600(P)
///                                    * 101 400 800
///                                    * 110 300 600
///                                    * 111 200 400
///                                    * when Margin is set to 000 or 100, Tx voltage can be programmed by registers
///                                    ###
///               %unsigned 2  MAC_PHY_TXDEEMPH0         0x0
///                                    ###
///                                    * Selects transmitter de-emphasis
///                                    * 00 : -6.0 dB
///                                    * 01: -3.5 dB
///                                    * 10 : no de-emphasis
///                                    * 11 : reserved
///                                    ###
///               %unsigned 1  MAC_PHY_TXONESZEROS       0x0
///                                    ###
///                                    * This is used when transmitting compliance pattern(CP7/CP8). Causes the transmitter to transmit an alternating sequence of 50-250 ones and 50-250 zeros.
///                                    ###
///               %unsigned 1  MAC_PHY_RXEQTRAINING      0x0
///                                    ###
///                                    * Tie to 0 for PCIe application.
///                                    ###
///               %unsigned 1  MAC_PHY_RX_TERMINATION    0x0
///                                    ###
///                                    * Tie to 0 for PCIe application.
///                                    ###
///               %unsigned 1  MAC_PHY_CLK_REQ_N         0x0
///                                    ###
///                                    * CLKREQ# enable. When set to 1, reference clock can be stopped and PCLK replaced by OSCCLK.
///                                    ###
///               %unsigned 1  MAC_PHY_EBUF_MODE         0x0
///                                    ###
///                                    * Selects Elasticity Buffer Operating mode
///                                    * 0 : Nominal Half Full Buffer mode
///                                    * 1: Nominal Empty Buffer mode
///                                    * Tie it to 0 for PCIe application.
///                                    ###
///               %unsigned 1  MAC_PHY_RATE              0x0
///                                    ###
///                                    * Controls the link signaling rate
///                                    * 0 : Use 2.5GT/s signaling rate
///                                    * 1: Use 5.0GT/s signaling rate
///                                    ###
///               %unsigned 8  PHY_RESERVED_IN           0x0
///                                    ###
///                                    * Reserved.
///                                    ###
///               %%        6          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:   32780B, bits:      55b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SataRegs
#define h_SataRegs (){}

    #define     RA_SataRegs_IPPorts                            0x8000

    #define     BA_SataRegs_IPPorts_unit_mbus_id               0x8000
    #define     B16SataRegs_IPPorts_unit_mbus_id               0x8000
    #define   LSb32SataRegs_IPPorts_unit_mbus_id                  0
    #define   LSb16SataRegs_IPPorts_unit_mbus_id                  0
    #define       bSataRegs_IPPorts_unit_mbus_id               4
    #define   MSK32SataRegs_IPPorts_unit_mbus_id                  0x0000000F

    #define     BA_SataRegs_IPPorts_REFCLK_CNFG                0x8000
    #define     B16SataRegs_IPPorts_REFCLK_CNFG                0x8000
    #define   LSb32SataRegs_IPPorts_REFCLK_CNFG                   4
    #define   LSb16SataRegs_IPPorts_REFCLK_CNFG                   4
    #define       bSataRegs_IPPorts_REFCLK_CNFG                3
    #define   MSK32SataRegs_IPPorts_REFCLK_CNFG                   0x00000070

    #define     BA_SataRegs_IPPorts_SATA_GEN2_EN_0             0x8000
    #define     B16SataRegs_IPPorts_SATA_GEN2_EN_0             0x8000
    #define   LSb32SataRegs_IPPorts_SATA_GEN2_EN_0                7
    #define   LSb16SataRegs_IPPorts_SATA_GEN2_EN_0                7
    #define       bSataRegs_IPPorts_SATA_GEN2_EN_0             1
    #define   MSK32SataRegs_IPPorts_SATA_GEN2_EN_0                0x00000080

    #define     BA_SataRegs_IPPorts_SATA_COMM_EN_0             0x8001
    #define     B16SataRegs_IPPorts_SATA_COMM_EN_0             0x8000
    #define   LSb32SataRegs_IPPorts_SATA_COMM_EN_0                8
    #define   LSb16SataRegs_IPPorts_SATA_COMM_EN_0                8
    #define       bSataRegs_IPPorts_SATA_COMM_EN_0             1
    #define   MSK32SataRegs_IPPorts_SATA_COMM_EN_0                0x00000100

    #define     BA_SataRegs_IPPorts_SATA_PHY_OFF_0             0x8001
    #define     B16SataRegs_IPPorts_SATA_PHY_OFF_0             0x8000
    #define   LSb32SataRegs_IPPorts_SATA_PHY_OFF_0                9
    #define   LSb16SataRegs_IPPorts_SATA_PHY_OFF_0                9
    #define       bSataRegs_IPPorts_SATA_PHY_OFF_0             1
    #define   MSK32SataRegs_IPPorts_SATA_PHY_OFF_0                0x00000200

    #define     BA_SataRegs_IPPorts_SATA_GEN2_EN_1             0x8001
    #define     B16SataRegs_IPPorts_SATA_GEN2_EN_1             0x8000
    #define   LSb32SataRegs_IPPorts_SATA_GEN2_EN_1                10
    #define   LSb16SataRegs_IPPorts_SATA_GEN2_EN_1                10
    #define       bSataRegs_IPPorts_SATA_GEN2_EN_1             1
    #define   MSK32SataRegs_IPPorts_SATA_GEN2_EN_1                0x00000400

    #define     BA_SataRegs_IPPorts_SATA_COMM_EN_1             0x8001
    #define     B16SataRegs_IPPorts_SATA_COMM_EN_1             0x8000
    #define   LSb32SataRegs_IPPorts_SATA_COMM_EN_1                11
    #define   LSb16SataRegs_IPPorts_SATA_COMM_EN_1                11
    #define       bSataRegs_IPPorts_SATA_COMM_EN_1             1
    #define   MSK32SataRegs_IPPorts_SATA_COMM_EN_1                0x00000800

    #define     BA_SataRegs_IPPorts_SATA_PHY_OFF_1             0x8001
    #define     B16SataRegs_IPPorts_SATA_PHY_OFF_1             0x8000
    #define   LSb32SataRegs_IPPorts_SATA_PHY_OFF_1                12
    #define   LSb16SataRegs_IPPorts_SATA_PHY_OFF_1                12
    #define       bSataRegs_IPPorts_SATA_PHY_OFF_1             1
    #define   MSK32SataRegs_IPPorts_SATA_PHY_OFF_1                0x00001000

    #define     BA_SataRegs_IPPorts_SATA_DIG_DEBUG             0x8001
    #define     B16SataRegs_IPPorts_SATA_DIG_DEBUG             0x8000
    #define   LSb32SataRegs_IPPorts_SATA_DIG_DEBUG                13
    #define   LSb16SataRegs_IPPorts_SATA_DIG_DEBUG                13
    #define       bSataRegs_IPPorts_SATA_DIG_DEBUG             2
    #define   MSK32SataRegs_IPPorts_SATA_DIG_DEBUG                0x00006000

    #define     BA_SataRegs_IPPorts_PIN_DFE_UPDATE_DIS         0x8001
    #define     B16SataRegs_IPPorts_PIN_DFE_UPDATE_DIS         0x8000
    #define   LSb32SataRegs_IPPorts_PIN_DFE_UPDATE_DIS            15
    #define   LSb16SataRegs_IPPorts_PIN_DFE_UPDATE_DIS            15
    #define       bSataRegs_IPPorts_PIN_DFE_UPDATE_DIS         1
    #define   MSK32SataRegs_IPPorts_PIN_DFE_UPDATE_DIS            0x00008000

    #define     BA_SataRegs_IPPorts_PIN_DFE_PAT_DIS            0x8002
    #define     B16SataRegs_IPPorts_PIN_DFE_PAT_DIS            0x8002
    #define   LSb32SataRegs_IPPorts_PIN_DFE_PAT_DIS               16
    #define   LSb16SataRegs_IPPorts_PIN_DFE_PAT_DIS               0
    #define       bSataRegs_IPPorts_PIN_DFE_PAT_DIS            1
    #define   MSK32SataRegs_IPPorts_PIN_DFE_PAT_DIS               0x00010000

    #define     BA_SataRegs_IPPorts_PIN_DFE_EN                 0x8002
    #define     B16SataRegs_IPPorts_PIN_DFE_EN                 0x8002
    #define   LSb32SataRegs_IPPorts_PIN_DFE_EN                    17
    #define   LSb16SataRegs_IPPorts_PIN_DFE_EN                    1
    #define       bSataRegs_IPPorts_PIN_DFE_EN                 1
    #define   MSK32SataRegs_IPPorts_PIN_DFE_EN                    0x00020000

    #define     BA_SataRegs_IPPorts_PIN_SSC_EN                 0x8002
    #define     B16SataRegs_IPPorts_PIN_SSC_EN                 0x8002
    #define   LSb32SataRegs_IPPorts_PIN_SSC_EN                    18
    #define   LSb16SataRegs_IPPorts_PIN_SSC_EN                    2
    #define       bSataRegs_IPPorts_PIN_SSC_EN                 1
    #define   MSK32SataRegs_IPPorts_PIN_SSC_EN                    0x00040000

    #define     BA_SataRegs_IPPorts_PIN_PU_IVREF               0x8002
    #define     B16SataRegs_IPPorts_PIN_PU_IVREF               0x8002
    #define   LSb32SataRegs_IPPorts_PIN_PU_IVREF                  19
    #define   LSb16SataRegs_IPPorts_PIN_PU_IVREF                  3
    #define       bSataRegs_IPPorts_PIN_PU_IVREF               1
    #define   MSK32SataRegs_IPPorts_PIN_PU_IVREF                  0x00080000

    #define     BA_SataRegs_IPPorts_PIN_SNRZ_MODE              0x8002
    #define     B16SataRegs_IPPorts_PIN_SNRZ_MODE              0x8002
    #define   LSb32SataRegs_IPPorts_PIN_SNRZ_MODE                 20
    #define   LSb16SataRegs_IPPorts_PIN_SNRZ_MODE                 4
    #define       bSataRegs_IPPorts_PIN_SNRZ_MODE              1
    #define   MSK32SataRegs_IPPorts_PIN_SNRZ_MODE                 0x00100000

    #define     BA_SataRegs_IPPorts_PIN_RESET_CORE             0x8002
    #define     B16SataRegs_IPPorts_PIN_RESET_CORE             0x8002
    #define   LSb32SataRegs_IPPorts_PIN_RESET_CORE                21
    #define   LSb16SataRegs_IPPorts_PIN_RESET_CORE                5
    #define       bSataRegs_IPPorts_PIN_RESET_CORE             1
    #define   MSK32SataRegs_IPPorts_PIN_RESET_CORE                0x00200000

    #define     BA_SataRegs_IPPorts_PIN_SQ_OOB_SEL             0x8002
    #define     B16SataRegs_IPPorts_PIN_SQ_OOB_SEL             0x8002
    #define   LSb32SataRegs_IPPorts_PIN_SQ_OOB_SEL                22
    #define   LSb16SataRegs_IPPorts_PIN_SQ_OOB_SEL                6
    #define       bSataRegs_IPPorts_PIN_SQ_OOB_SEL             1
    #define   MSK32SataRegs_IPPorts_PIN_SQ_OOB_SEL                0x00400000

    #define     BA_SataRegs_IPPorts_PIN_DEV_SEL                0x8002
    #define     B16SataRegs_IPPorts_PIN_DEV_SEL                0x8002
    #define   LSb32SataRegs_IPPorts_PIN_DEV_SEL                   23
    #define   LSb16SataRegs_IPPorts_PIN_DEV_SEL                   7
    #define       bSataRegs_IPPorts_PIN_DEV_SEL                1
    #define   MSK32SataRegs_IPPorts_PIN_DEV_SEL                   0x00800000

    #define     BA_SataRegs_IPPorts_PIN_SEL                    0x8003
    #define     B16SataRegs_IPPorts_PIN_SEL                    0x8002
    #define   LSb32SataRegs_IPPorts_PIN_SEL                       24
    #define   LSb16SataRegs_IPPorts_PIN_SEL                       8
    #define       bSataRegs_IPPorts_PIN_SEL                    1
    #define   MSK32SataRegs_IPPorts_PIN_SEL                       0x01000000
    ///////////////////////////////////////////////////////////
    #define     RA_SataRegs_COMPHY_CTRL0                       0x8004

    #define     BA_SataRegs_COMPHY_CTRL0_PIN_PU_IVREF          0x8004
    #define     B16SataRegs_COMPHY_CTRL0_PIN_PU_IVREF          0x8004
    #define   LSb32SataRegs_COMPHY_CTRL0_PIN_PU_IVREF             0
    #define   LSb16SataRegs_COMPHY_CTRL0_PIN_PU_IVREF             0
    #define       bSataRegs_COMPHY_CTRL0_PIN_PU_IVREF          1
    #define   MSK32SataRegs_COMPHY_CTRL0_PIN_PU_IVREF             0x00000001

    #define     BA_SataRegs_COMPHY_CTRL0_PIN_RESET_CORE        0x8004
    #define     B16SataRegs_COMPHY_CTRL0_PIN_RESET_CORE        0x8004
    #define   LSb32SataRegs_COMPHY_CTRL0_PIN_RESET_CORE           1
    #define   LSb16SataRegs_COMPHY_CTRL0_PIN_RESET_CORE           1
    #define       bSataRegs_COMPHY_CTRL0_PIN_RESET_CORE        1
    #define   MSK32SataRegs_COMPHY_CTRL0_PIN_RESET_CORE           0x00000002

    #define     BA_SataRegs_COMPHY_CTRL0_PIN_REFCLK_DIS        0x8004
    #define     B16SataRegs_COMPHY_CTRL0_PIN_REFCLK_DIS        0x8004
    #define   LSb32SataRegs_COMPHY_CTRL0_PIN_REFCLK_DIS           2
    #define   LSb16SataRegs_COMPHY_CTRL0_PIN_REFCLK_DIS           2
    #define       bSataRegs_COMPHY_CTRL0_PIN_REFCLK_DIS        1
    #define   MSK32SataRegs_COMPHY_CTRL0_PIN_REFCLK_DIS           0x00000004

    #define     BA_SataRegs_COMPHY_CTRL0_PIN_ISOLATION_ENB     0x8004
    #define     B16SataRegs_COMPHY_CTRL0_PIN_ISOLATION_ENB     0x8004
    #define   LSb32SataRegs_COMPHY_CTRL0_PIN_ISOLATION_ENB        3
    #define   LSb16SataRegs_COMPHY_CTRL0_PIN_ISOLATION_ENB        3
    #define       bSataRegs_COMPHY_CTRL0_PIN_ISOLATION_ENB     1
    #define   MSK32SataRegs_COMPHY_CTRL0_PIN_ISOLATION_ENB        0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_SataRegs_COMPHY_CTRL1                       0x8008

    #define     BA_SataRegs_COMPHY_CTRL1_PIN_PIPE_SEL          0x8008
    #define     B16SataRegs_COMPHY_CTRL1_PIN_PIPE_SEL          0x8008
    #define   LSb32SataRegs_COMPHY_CTRL1_PIN_PIPE_SEL             0
    #define   LSb16SataRegs_COMPHY_CTRL1_PIN_PIPE_SEL             0
    #define       bSataRegs_COMPHY_CTRL1_PIN_PIPE_SEL          1
    #define   MSK32SataRegs_COMPHY_CTRL1_PIN_PIPE_SEL             0x00000001

    #define     BA_SataRegs_COMPHY_CTRL1_PWR_RST_N             0x8008
    #define     B16SataRegs_COMPHY_CTRL1_PWR_RST_N             0x8008
    #define   LSb32SataRegs_COMPHY_CTRL1_PWR_RST_N                1
    #define   LSb16SataRegs_COMPHY_CTRL1_PWR_RST_N                1
    #define       bSataRegs_COMPHY_CTRL1_PWR_RST_N             1
    #define   MSK32SataRegs_COMPHY_CTRL1_PWR_RST_N                0x00000002

    #define     BA_SataRegs_COMPHY_CTRL1_CORE_RST_N            0x8008
    #define     B16SataRegs_COMPHY_CTRL1_CORE_RST_N            0x8008
    #define   LSb32SataRegs_COMPHY_CTRL1_CORE_RST_N               2
    #define   LSb16SataRegs_COMPHY_CTRL1_CORE_RST_N               2
    #define       bSataRegs_COMPHY_CTRL1_CORE_RST_N            1
    #define   MSK32SataRegs_COMPHY_CTRL1_CORE_RST_N               0x00000004

    #define     BA_SataRegs_COMPHY_CTRL1_PIPE_PHY_MODE         0x8008
    #define     B16SataRegs_COMPHY_CTRL1_PIPE_PHY_MODE         0x8008
    #define   LSb32SataRegs_COMPHY_CTRL1_PIPE_PHY_MODE            3
    #define   LSb16SataRegs_COMPHY_CTRL1_PIPE_PHY_MODE            3
    #define       bSataRegs_COMPHY_CTRL1_PIPE_PHY_MODE         1
    #define   MSK32SataRegs_COMPHY_CTRL1_PIPE_PHY_MODE            0x00000008

    #define     BA_SataRegs_COMPHY_CTRL1_MAC_PHY_RXEIDETECT_DIS 0x8008
    #define     B16SataRegs_COMPHY_CTRL1_MAC_PHY_RXEIDETECT_DIS 0x8008
    #define   LSb32SataRegs_COMPHY_CTRL1_MAC_PHY_RXEIDETECT_DIS    4
    #define   LSb16SataRegs_COMPHY_CTRL1_MAC_PHY_RXEIDETECT_DIS    4
    #define       bSataRegs_COMPHY_CTRL1_MAC_PHY_RXEIDETECT_DIS 1
    #define   MSK32SataRegs_COMPHY_CTRL1_MAC_PHY_RXEIDETECT_DIS    0x00000010

    #define     BA_SataRegs_COMPHY_CTRL1_MAC_PHY_TXCMN_MODE_DIS 0x8008
    #define     B16SataRegs_COMPHY_CTRL1_MAC_PHY_TXCMN_MODE_DIS 0x8008
    #define   LSb32SataRegs_COMPHY_CTRL1_MAC_PHY_TXCMN_MODE_DIS    5
    #define   LSb16SataRegs_COMPHY_CTRL1_MAC_PHY_TXCMN_MODE_DIS    5
    #define       bSataRegs_COMPHY_CTRL1_MAC_PHY_TXCMN_MODE_DIS 1
    #define   MSK32SataRegs_COMPHY_CTRL1_MAC_PHY_TXCMN_MODE_DIS    0x00000020

    #define     BA_SataRegs_COMPHY_CTRL1_MAC_PHY_TXSWING       0x8008
    #define     B16SataRegs_COMPHY_CTRL1_MAC_PHY_TXSWING       0x8008
    #define   LSb32SataRegs_COMPHY_CTRL1_MAC_PHY_TXSWING          6
    #define   LSb16SataRegs_COMPHY_CTRL1_MAC_PHY_TXSWING          6
    #define       bSataRegs_COMPHY_CTRL1_MAC_PHY_TXSWING       1
    #define   MSK32SataRegs_COMPHY_CTRL1_MAC_PHY_TXSWING          0x00000040

    #define     BA_SataRegs_COMPHY_CTRL1_MAC_PHY_TXMARGIN0     0x8008
    #define     B16SataRegs_COMPHY_CTRL1_MAC_PHY_TXMARGIN0     0x8008
    #define   LSb32SataRegs_COMPHY_CTRL1_MAC_PHY_TXMARGIN0        7
    #define   LSb16SataRegs_COMPHY_CTRL1_MAC_PHY_TXMARGIN0        7
    #define       bSataRegs_COMPHY_CTRL1_MAC_PHY_TXMARGIN0     3
    #define   MSK32SataRegs_COMPHY_CTRL1_MAC_PHY_TXMARGIN0        0x00000380

    #define     BA_SataRegs_COMPHY_CTRL1_MAC_PHY_TXDEEMPH0     0x8009
    #define     B16SataRegs_COMPHY_CTRL1_MAC_PHY_TXDEEMPH0     0x8008
    #define   LSb32SataRegs_COMPHY_CTRL1_MAC_PHY_TXDEEMPH0        10
    #define   LSb16SataRegs_COMPHY_CTRL1_MAC_PHY_TXDEEMPH0        10
    #define       bSataRegs_COMPHY_CTRL1_MAC_PHY_TXDEEMPH0     2
    #define   MSK32SataRegs_COMPHY_CTRL1_MAC_PHY_TXDEEMPH0        0x00000C00

    #define     BA_SataRegs_COMPHY_CTRL1_MAC_PHY_TXONESZEROS   0x8009
    #define     B16SataRegs_COMPHY_CTRL1_MAC_PHY_TXONESZEROS   0x8008
    #define   LSb32SataRegs_COMPHY_CTRL1_MAC_PHY_TXONESZEROS      12
    #define   LSb16SataRegs_COMPHY_CTRL1_MAC_PHY_TXONESZEROS      12
    #define       bSataRegs_COMPHY_CTRL1_MAC_PHY_TXONESZEROS   1
    #define   MSK32SataRegs_COMPHY_CTRL1_MAC_PHY_TXONESZEROS      0x00001000

    #define     BA_SataRegs_COMPHY_CTRL1_MAC_PHY_RXEQTRAINING  0x8009
    #define     B16SataRegs_COMPHY_CTRL1_MAC_PHY_RXEQTRAINING  0x8008
    #define   LSb32SataRegs_COMPHY_CTRL1_MAC_PHY_RXEQTRAINING     13
    #define   LSb16SataRegs_COMPHY_CTRL1_MAC_PHY_RXEQTRAINING     13
    #define       bSataRegs_COMPHY_CTRL1_MAC_PHY_RXEQTRAINING  1
    #define   MSK32SataRegs_COMPHY_CTRL1_MAC_PHY_RXEQTRAINING     0x00002000

    #define     BA_SataRegs_COMPHY_CTRL1_MAC_PHY_RX_TERMINATION 0x8009
    #define     B16SataRegs_COMPHY_CTRL1_MAC_PHY_RX_TERMINATION 0x8008
    #define   LSb32SataRegs_COMPHY_CTRL1_MAC_PHY_RX_TERMINATION    14
    #define   LSb16SataRegs_COMPHY_CTRL1_MAC_PHY_RX_TERMINATION    14
    #define       bSataRegs_COMPHY_CTRL1_MAC_PHY_RX_TERMINATION 1
    #define   MSK32SataRegs_COMPHY_CTRL1_MAC_PHY_RX_TERMINATION    0x00004000

    #define     BA_SataRegs_COMPHY_CTRL1_MAC_PHY_CLK_REQ_N     0x8009
    #define     B16SataRegs_COMPHY_CTRL1_MAC_PHY_CLK_REQ_N     0x8008
    #define   LSb32SataRegs_COMPHY_CTRL1_MAC_PHY_CLK_REQ_N        15
    #define   LSb16SataRegs_COMPHY_CTRL1_MAC_PHY_CLK_REQ_N        15
    #define       bSataRegs_COMPHY_CTRL1_MAC_PHY_CLK_REQ_N     1
    #define   MSK32SataRegs_COMPHY_CTRL1_MAC_PHY_CLK_REQ_N        0x00008000

    #define     BA_SataRegs_COMPHY_CTRL1_MAC_PHY_EBUF_MODE     0x800A
    #define     B16SataRegs_COMPHY_CTRL1_MAC_PHY_EBUF_MODE     0x800A
    #define   LSb32SataRegs_COMPHY_CTRL1_MAC_PHY_EBUF_MODE        16
    #define   LSb16SataRegs_COMPHY_CTRL1_MAC_PHY_EBUF_MODE        0
    #define       bSataRegs_COMPHY_CTRL1_MAC_PHY_EBUF_MODE     1
    #define   MSK32SataRegs_COMPHY_CTRL1_MAC_PHY_EBUF_MODE        0x00010000

    #define     BA_SataRegs_COMPHY_CTRL1_MAC_PHY_RATE          0x800A
    #define     B16SataRegs_COMPHY_CTRL1_MAC_PHY_RATE          0x800A
    #define   LSb32SataRegs_COMPHY_CTRL1_MAC_PHY_RATE             17
    #define   LSb16SataRegs_COMPHY_CTRL1_MAC_PHY_RATE             1
    #define       bSataRegs_COMPHY_CTRL1_MAC_PHY_RATE          1
    #define   MSK32SataRegs_COMPHY_CTRL1_MAC_PHY_RATE             0x00020000

    #define     BA_SataRegs_COMPHY_CTRL1_PHY_RESERVED_IN       0x800A
    #define     B16SataRegs_COMPHY_CTRL1_PHY_RESERVED_IN       0x800A
    #define   LSb32SataRegs_COMPHY_CTRL1_PHY_RESERVED_IN          18
    #define   LSb16SataRegs_COMPHY_CTRL1_PHY_RESERVED_IN          2
    #define       bSataRegs_COMPHY_CTRL1_PHY_RESERVED_IN       8
    #define   MSK32SataRegs_COMPHY_CTRL1_PHY_RESERVED_IN          0x03FC0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SataRegs {
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx0                                      [32768];
    ///////////////////////////////////////////////////////////
    #define   GET32SataRegs_IPPorts_unit_mbus_id(r32)          _BFGET_(r32, 3, 0)
    #define   SET32SataRegs_IPPorts_unit_mbus_id(r32,v)        _BFSET_(r32, 3, 0,v)
    #define   GET16SataRegs_IPPorts_unit_mbus_id(r16)          _BFGET_(r16, 3, 0)
    #define   SET16SataRegs_IPPorts_unit_mbus_id(r16,v)        _BFSET_(r16, 3, 0,v)

    #define   GET32SataRegs_IPPorts_REFCLK_CNFG(r32)           _BFGET_(r32, 6, 4)
    #define   SET32SataRegs_IPPorts_REFCLK_CNFG(r32,v)         _BFSET_(r32, 6, 4,v)
    #define   GET16SataRegs_IPPorts_REFCLK_CNFG(r16)           _BFGET_(r16, 6, 4)
    #define   SET16SataRegs_IPPorts_REFCLK_CNFG(r16,v)         _BFSET_(r16, 6, 4,v)

    #define   GET32SataRegs_IPPorts_SATA_GEN2_EN_0(r32)        _BFGET_(r32, 7, 7)
    #define   SET32SataRegs_IPPorts_SATA_GEN2_EN_0(r32,v)      _BFSET_(r32, 7, 7,v)
    #define   GET16SataRegs_IPPorts_SATA_GEN2_EN_0(r16)        _BFGET_(r16, 7, 7)
    #define   SET16SataRegs_IPPorts_SATA_GEN2_EN_0(r16,v)      _BFSET_(r16, 7, 7,v)

    #define   GET32SataRegs_IPPorts_SATA_COMM_EN_0(r32)        _BFGET_(r32, 8, 8)
    #define   SET32SataRegs_IPPorts_SATA_COMM_EN_0(r32,v)      _BFSET_(r32, 8, 8,v)
    #define   GET16SataRegs_IPPorts_SATA_COMM_EN_0(r16)        _BFGET_(r16, 8, 8)
    #define   SET16SataRegs_IPPorts_SATA_COMM_EN_0(r16,v)      _BFSET_(r16, 8, 8,v)

    #define   GET32SataRegs_IPPorts_SATA_PHY_OFF_0(r32)        _BFGET_(r32, 9, 9)
    #define   SET32SataRegs_IPPorts_SATA_PHY_OFF_0(r32,v)      _BFSET_(r32, 9, 9,v)
    #define   GET16SataRegs_IPPorts_SATA_PHY_OFF_0(r16)        _BFGET_(r16, 9, 9)
    #define   SET16SataRegs_IPPorts_SATA_PHY_OFF_0(r16,v)      _BFSET_(r16, 9, 9,v)

    #define   GET32SataRegs_IPPorts_SATA_GEN2_EN_1(r32)        _BFGET_(r32,10,10)
    #define   SET32SataRegs_IPPorts_SATA_GEN2_EN_1(r32,v)      _BFSET_(r32,10,10,v)
    #define   GET16SataRegs_IPPorts_SATA_GEN2_EN_1(r16)        _BFGET_(r16,10,10)
    #define   SET16SataRegs_IPPorts_SATA_GEN2_EN_1(r16,v)      _BFSET_(r16,10,10,v)

    #define   GET32SataRegs_IPPorts_SATA_COMM_EN_1(r32)        _BFGET_(r32,11,11)
    #define   SET32SataRegs_IPPorts_SATA_COMM_EN_1(r32,v)      _BFSET_(r32,11,11,v)
    #define   GET16SataRegs_IPPorts_SATA_COMM_EN_1(r16)        _BFGET_(r16,11,11)
    #define   SET16SataRegs_IPPorts_SATA_COMM_EN_1(r16,v)      _BFSET_(r16,11,11,v)

    #define   GET32SataRegs_IPPorts_SATA_PHY_OFF_1(r32)        _BFGET_(r32,12,12)
    #define   SET32SataRegs_IPPorts_SATA_PHY_OFF_1(r32,v)      _BFSET_(r32,12,12,v)
    #define   GET16SataRegs_IPPorts_SATA_PHY_OFF_1(r16)        _BFGET_(r16,12,12)
    #define   SET16SataRegs_IPPorts_SATA_PHY_OFF_1(r16,v)      _BFSET_(r16,12,12,v)

    #define   GET32SataRegs_IPPorts_SATA_DIG_DEBUG(r32)        _BFGET_(r32,14,13)
    #define   SET32SataRegs_IPPorts_SATA_DIG_DEBUG(r32,v)      _BFSET_(r32,14,13,v)
    #define   GET16SataRegs_IPPorts_SATA_DIG_DEBUG(r16)        _BFGET_(r16,14,13)
    #define   SET16SataRegs_IPPorts_SATA_DIG_DEBUG(r16,v)      _BFSET_(r16,14,13,v)

    #define   GET32SataRegs_IPPorts_PIN_DFE_UPDATE_DIS(r32)    _BFGET_(r32,15,15)
    #define   SET32SataRegs_IPPorts_PIN_DFE_UPDATE_DIS(r32,v)  _BFSET_(r32,15,15,v)
    #define   GET16SataRegs_IPPorts_PIN_DFE_UPDATE_DIS(r16)    _BFGET_(r16,15,15)
    #define   SET16SataRegs_IPPorts_PIN_DFE_UPDATE_DIS(r16,v)  _BFSET_(r16,15,15,v)

    #define   GET32SataRegs_IPPorts_PIN_DFE_PAT_DIS(r32)       _BFGET_(r32,16,16)
    #define   SET32SataRegs_IPPorts_PIN_DFE_PAT_DIS(r32,v)     _BFSET_(r32,16,16,v)
    #define   GET16SataRegs_IPPorts_PIN_DFE_PAT_DIS(r16)       _BFGET_(r16, 0, 0)
    #define   SET16SataRegs_IPPorts_PIN_DFE_PAT_DIS(r16,v)     _BFSET_(r16, 0, 0,v)

    #define   GET32SataRegs_IPPorts_PIN_DFE_EN(r32)            _BFGET_(r32,17,17)
    #define   SET32SataRegs_IPPorts_PIN_DFE_EN(r32,v)          _BFSET_(r32,17,17,v)
    #define   GET16SataRegs_IPPorts_PIN_DFE_EN(r16)            _BFGET_(r16, 1, 1)
    #define   SET16SataRegs_IPPorts_PIN_DFE_EN(r16,v)          _BFSET_(r16, 1, 1,v)

    #define   GET32SataRegs_IPPorts_PIN_SSC_EN(r32)            _BFGET_(r32,18,18)
    #define   SET32SataRegs_IPPorts_PIN_SSC_EN(r32,v)          _BFSET_(r32,18,18,v)
    #define   GET16SataRegs_IPPorts_PIN_SSC_EN(r16)            _BFGET_(r16, 2, 2)
    #define   SET16SataRegs_IPPorts_PIN_SSC_EN(r16,v)          _BFSET_(r16, 2, 2,v)

    #define   GET32SataRegs_IPPorts_PIN_PU_IVREF(r32)          _BFGET_(r32,19,19)
    #define   SET32SataRegs_IPPorts_PIN_PU_IVREF(r32,v)        _BFSET_(r32,19,19,v)
    #define   GET16SataRegs_IPPorts_PIN_PU_IVREF(r16)          _BFGET_(r16, 3, 3)
    #define   SET16SataRegs_IPPorts_PIN_PU_IVREF(r16,v)        _BFSET_(r16, 3, 3,v)

    #define   GET32SataRegs_IPPorts_PIN_SNRZ_MODE(r32)         _BFGET_(r32,20,20)
    #define   SET32SataRegs_IPPorts_PIN_SNRZ_MODE(r32,v)       _BFSET_(r32,20,20,v)
    #define   GET16SataRegs_IPPorts_PIN_SNRZ_MODE(r16)         _BFGET_(r16, 4, 4)
    #define   SET16SataRegs_IPPorts_PIN_SNRZ_MODE(r16,v)       _BFSET_(r16, 4, 4,v)

    #define   GET32SataRegs_IPPorts_PIN_RESET_CORE(r32)        _BFGET_(r32,21,21)
    #define   SET32SataRegs_IPPorts_PIN_RESET_CORE(r32,v)      _BFSET_(r32,21,21,v)
    #define   GET16SataRegs_IPPorts_PIN_RESET_CORE(r16)        _BFGET_(r16, 5, 5)
    #define   SET16SataRegs_IPPorts_PIN_RESET_CORE(r16,v)      _BFSET_(r16, 5, 5,v)

    #define   GET32SataRegs_IPPorts_PIN_SQ_OOB_SEL(r32)        _BFGET_(r32,22,22)
    #define   SET32SataRegs_IPPorts_PIN_SQ_OOB_SEL(r32,v)      _BFSET_(r32,22,22,v)
    #define   GET16SataRegs_IPPorts_PIN_SQ_OOB_SEL(r16)        _BFGET_(r16, 6, 6)
    #define   SET16SataRegs_IPPorts_PIN_SQ_OOB_SEL(r16,v)      _BFSET_(r16, 6, 6,v)

    #define   GET32SataRegs_IPPorts_PIN_DEV_SEL(r32)           _BFGET_(r32,23,23)
    #define   SET32SataRegs_IPPorts_PIN_DEV_SEL(r32,v)         _BFSET_(r32,23,23,v)
    #define   GET16SataRegs_IPPorts_PIN_DEV_SEL(r16)           _BFGET_(r16, 7, 7)
    #define   SET16SataRegs_IPPorts_PIN_DEV_SEL(r16,v)         _BFSET_(r16, 7, 7,v)

    #define   GET32SataRegs_IPPorts_PIN_SEL(r32)               _BFGET_(r32,24,24)
    #define   SET32SataRegs_IPPorts_PIN_SEL(r32,v)             _BFSET_(r32,24,24,v)
    #define   GET16SataRegs_IPPorts_PIN_SEL(r16)               _BFGET_(r16, 8, 8)
    #define   SET16SataRegs_IPPorts_PIN_SEL(r16,v)             _BFSET_(r16, 8, 8,v)

    #define     w32SataRegs_IPPorts                            {\
            UNSG32 uIPPorts_unit_mbus_id                       :  4;\
            UNSG32 uIPPorts_REFCLK_CNFG                        :  3;\
            UNSG32 uIPPorts_SATA_GEN2_EN_0                     :  1;\
            UNSG32 uIPPorts_SATA_COMM_EN_0                     :  1;\
            UNSG32 uIPPorts_SATA_PHY_OFF_0                     :  1;\
            UNSG32 uIPPorts_SATA_GEN2_EN_1                     :  1;\
            UNSG32 uIPPorts_SATA_COMM_EN_1                     :  1;\
            UNSG32 uIPPorts_SATA_PHY_OFF_1                     :  1;\
            UNSG32 uIPPorts_SATA_DIG_DEBUG                     :  2;\
            UNSG32 uIPPorts_PIN_DFE_UPDATE_DIS                 :  1;\
            UNSG32 uIPPorts_PIN_DFE_PAT_DIS                    :  1;\
            UNSG32 uIPPorts_PIN_DFE_EN                         :  1;\
            UNSG32 uIPPorts_PIN_SSC_EN                         :  1;\
            UNSG32 uIPPorts_PIN_PU_IVREF                       :  1;\
            UNSG32 uIPPorts_PIN_SNRZ_MODE                      :  1;\
            UNSG32 uIPPorts_PIN_RESET_CORE                     :  1;\
            UNSG32 uIPPorts_PIN_SQ_OOB_SEL                     :  1;\
            UNSG32 uIPPorts_PIN_DEV_SEL                        :  1;\
            UNSG32 uIPPorts_PIN_SEL                            :  1;\
            UNSG32 RSVDx8000_b25                               :  7;\
          }
    union { UNSG32 u32SataRegs_IPPorts;
            struct w32SataRegs_IPPorts;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SataRegs_COMPHY_CTRL0_PIN_PU_IVREF(r32)     _BFGET_(r32, 0, 0)
    #define   SET32SataRegs_COMPHY_CTRL0_PIN_PU_IVREF(r32,v)   _BFSET_(r32, 0, 0,v)
    #define   GET16SataRegs_COMPHY_CTRL0_PIN_PU_IVREF(r16)     _BFGET_(r16, 0, 0)
    #define   SET16SataRegs_COMPHY_CTRL0_PIN_PU_IVREF(r16,v)   _BFSET_(r16, 0, 0,v)

    #define   GET32SataRegs_COMPHY_CTRL0_PIN_RESET_CORE(r32)   _BFGET_(r32, 1, 1)
    #define   SET32SataRegs_COMPHY_CTRL0_PIN_RESET_CORE(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16SataRegs_COMPHY_CTRL0_PIN_RESET_CORE(r16)   _BFGET_(r16, 1, 1)
    #define   SET16SataRegs_COMPHY_CTRL0_PIN_RESET_CORE(r16,v) _BFSET_(r16, 1, 1,v)

    #define   GET32SataRegs_COMPHY_CTRL0_PIN_REFCLK_DIS(r32)   _BFGET_(r32, 2, 2)
    #define   SET32SataRegs_COMPHY_CTRL0_PIN_REFCLK_DIS(r32,v) _BFSET_(r32, 2, 2,v)
    #define   GET16SataRegs_COMPHY_CTRL0_PIN_REFCLK_DIS(r16)   _BFGET_(r16, 2, 2)
    #define   SET16SataRegs_COMPHY_CTRL0_PIN_REFCLK_DIS(r16,v) _BFSET_(r16, 2, 2,v)

    #define   GET32SataRegs_COMPHY_CTRL0_PIN_ISOLATION_ENB(r32) _BFGET_(r32, 3, 3)
    #define   SET32SataRegs_COMPHY_CTRL0_PIN_ISOLATION_ENB(r32,v) _BFSET_(r32, 3, 3,v)
    #define   GET16SataRegs_COMPHY_CTRL0_PIN_ISOLATION_ENB(r16) _BFGET_(r16, 3, 3)
    #define   SET16SataRegs_COMPHY_CTRL0_PIN_ISOLATION_ENB(r16,v) _BFSET_(r16, 3, 3,v)

    #define     w32SataRegs_COMPHY_CTRL0                       {\
            UNSG32 uCOMPHY_CTRL0_PIN_PU_IVREF                  :  1;\
            UNSG32 uCOMPHY_CTRL0_PIN_RESET_CORE                :  1;\
            UNSG32 uCOMPHY_CTRL0_PIN_REFCLK_DIS                :  1;\
            UNSG32 uCOMPHY_CTRL0_PIN_ISOLATION_ENB             :  1;\
            UNSG32 RSVDx8004_b4                                : 28;\
          }
    union { UNSG32 u32SataRegs_COMPHY_CTRL0;
            struct w32SataRegs_COMPHY_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SataRegs_COMPHY_CTRL1_PIN_PIPE_SEL(r32)     _BFGET_(r32, 0, 0)
    #define   SET32SataRegs_COMPHY_CTRL1_PIN_PIPE_SEL(r32,v)   _BFSET_(r32, 0, 0,v)
    #define   GET16SataRegs_COMPHY_CTRL1_PIN_PIPE_SEL(r16)     _BFGET_(r16, 0, 0)
    #define   SET16SataRegs_COMPHY_CTRL1_PIN_PIPE_SEL(r16,v)   _BFSET_(r16, 0, 0,v)

    #define   GET32SataRegs_COMPHY_CTRL1_PWR_RST_N(r32)        _BFGET_(r32, 1, 1)
    #define   SET32SataRegs_COMPHY_CTRL1_PWR_RST_N(r32,v)      _BFSET_(r32, 1, 1,v)
    #define   GET16SataRegs_COMPHY_CTRL1_PWR_RST_N(r16)        _BFGET_(r16, 1, 1)
    #define   SET16SataRegs_COMPHY_CTRL1_PWR_RST_N(r16,v)      _BFSET_(r16, 1, 1,v)

    #define   GET32SataRegs_COMPHY_CTRL1_CORE_RST_N(r32)       _BFGET_(r32, 2, 2)
    #define   SET32SataRegs_COMPHY_CTRL1_CORE_RST_N(r32,v)     _BFSET_(r32, 2, 2,v)
    #define   GET16SataRegs_COMPHY_CTRL1_CORE_RST_N(r16)       _BFGET_(r16, 2, 2)
    #define   SET16SataRegs_COMPHY_CTRL1_CORE_RST_N(r16,v)     _BFSET_(r16, 2, 2,v)

    #define   GET32SataRegs_COMPHY_CTRL1_PIPE_PHY_MODE(r32)    _BFGET_(r32, 3, 3)
    #define   SET32SataRegs_COMPHY_CTRL1_PIPE_PHY_MODE(r32,v)  _BFSET_(r32, 3, 3,v)
    #define   GET16SataRegs_COMPHY_CTRL1_PIPE_PHY_MODE(r16)    _BFGET_(r16, 3, 3)
    #define   SET16SataRegs_COMPHY_CTRL1_PIPE_PHY_MODE(r16,v)  _BFSET_(r16, 3, 3,v)

    #define   GET32SataRegs_COMPHY_CTRL1_MAC_PHY_RXEIDETECT_DIS(r32) _BFGET_(r32, 4, 4)
    #define   SET32SataRegs_COMPHY_CTRL1_MAC_PHY_RXEIDETECT_DIS(r32,v) _BFSET_(r32, 4, 4,v)
    #define   GET16SataRegs_COMPHY_CTRL1_MAC_PHY_RXEIDETECT_DIS(r16) _BFGET_(r16, 4, 4)
    #define   SET16SataRegs_COMPHY_CTRL1_MAC_PHY_RXEIDETECT_DIS(r16,v) _BFSET_(r16, 4, 4,v)

    #define   GET32SataRegs_COMPHY_CTRL1_MAC_PHY_TXCMN_MODE_DIS(r32) _BFGET_(r32, 5, 5)
    #define   SET32SataRegs_COMPHY_CTRL1_MAC_PHY_TXCMN_MODE_DIS(r32,v) _BFSET_(r32, 5, 5,v)
    #define   GET16SataRegs_COMPHY_CTRL1_MAC_PHY_TXCMN_MODE_DIS(r16) _BFGET_(r16, 5, 5)
    #define   SET16SataRegs_COMPHY_CTRL1_MAC_PHY_TXCMN_MODE_DIS(r16,v) _BFSET_(r16, 5, 5,v)

    #define   GET32SataRegs_COMPHY_CTRL1_MAC_PHY_TXSWING(r32)  _BFGET_(r32, 6, 6)
    #define   SET32SataRegs_COMPHY_CTRL1_MAC_PHY_TXSWING(r32,v) _BFSET_(r32, 6, 6,v)
    #define   GET16SataRegs_COMPHY_CTRL1_MAC_PHY_TXSWING(r16)  _BFGET_(r16, 6, 6)
    #define   SET16SataRegs_COMPHY_CTRL1_MAC_PHY_TXSWING(r16,v) _BFSET_(r16, 6, 6,v)

    #define   GET32SataRegs_COMPHY_CTRL1_MAC_PHY_TXMARGIN0(r32) _BFGET_(r32, 9, 7)
    #define   SET32SataRegs_COMPHY_CTRL1_MAC_PHY_TXMARGIN0(r32,v) _BFSET_(r32, 9, 7,v)
    #define   GET16SataRegs_COMPHY_CTRL1_MAC_PHY_TXMARGIN0(r16) _BFGET_(r16, 9, 7)
    #define   SET16SataRegs_COMPHY_CTRL1_MAC_PHY_TXMARGIN0(r16,v) _BFSET_(r16, 9, 7,v)

    #define   GET32SataRegs_COMPHY_CTRL1_MAC_PHY_TXDEEMPH0(r32) _BFGET_(r32,11,10)
    #define   SET32SataRegs_COMPHY_CTRL1_MAC_PHY_TXDEEMPH0(r32,v) _BFSET_(r32,11,10,v)
    #define   GET16SataRegs_COMPHY_CTRL1_MAC_PHY_TXDEEMPH0(r16) _BFGET_(r16,11,10)
    #define   SET16SataRegs_COMPHY_CTRL1_MAC_PHY_TXDEEMPH0(r16,v) _BFSET_(r16,11,10,v)

    #define   GET32SataRegs_COMPHY_CTRL1_MAC_PHY_TXONESZEROS(r32) _BFGET_(r32,12,12)
    #define   SET32SataRegs_COMPHY_CTRL1_MAC_PHY_TXONESZEROS(r32,v) _BFSET_(r32,12,12,v)
    #define   GET16SataRegs_COMPHY_CTRL1_MAC_PHY_TXONESZEROS(r16) _BFGET_(r16,12,12)
    #define   SET16SataRegs_COMPHY_CTRL1_MAC_PHY_TXONESZEROS(r16,v) _BFSET_(r16,12,12,v)

    #define   GET32SataRegs_COMPHY_CTRL1_MAC_PHY_RXEQTRAINING(r32) _BFGET_(r32,13,13)
    #define   SET32SataRegs_COMPHY_CTRL1_MAC_PHY_RXEQTRAINING(r32,v) _BFSET_(r32,13,13,v)
    #define   GET16SataRegs_COMPHY_CTRL1_MAC_PHY_RXEQTRAINING(r16) _BFGET_(r16,13,13)
    #define   SET16SataRegs_COMPHY_CTRL1_MAC_PHY_RXEQTRAINING(r16,v) _BFSET_(r16,13,13,v)

    #define   GET32SataRegs_COMPHY_CTRL1_MAC_PHY_RX_TERMINATION(r32) _BFGET_(r32,14,14)
    #define   SET32SataRegs_COMPHY_CTRL1_MAC_PHY_RX_TERMINATION(r32,v) _BFSET_(r32,14,14,v)
    #define   GET16SataRegs_COMPHY_CTRL1_MAC_PHY_RX_TERMINATION(r16) _BFGET_(r16,14,14)
    #define   SET16SataRegs_COMPHY_CTRL1_MAC_PHY_RX_TERMINATION(r16,v) _BFSET_(r16,14,14,v)

    #define   GET32SataRegs_COMPHY_CTRL1_MAC_PHY_CLK_REQ_N(r32) _BFGET_(r32,15,15)
    #define   SET32SataRegs_COMPHY_CTRL1_MAC_PHY_CLK_REQ_N(r32,v) _BFSET_(r32,15,15,v)
    #define   GET16SataRegs_COMPHY_CTRL1_MAC_PHY_CLK_REQ_N(r16) _BFGET_(r16,15,15)
    #define   SET16SataRegs_COMPHY_CTRL1_MAC_PHY_CLK_REQ_N(r16,v) _BFSET_(r16,15,15,v)

    #define   GET32SataRegs_COMPHY_CTRL1_MAC_PHY_EBUF_MODE(r32) _BFGET_(r32,16,16)
    #define   SET32SataRegs_COMPHY_CTRL1_MAC_PHY_EBUF_MODE(r32,v) _BFSET_(r32,16,16,v)
    #define   GET16SataRegs_COMPHY_CTRL1_MAC_PHY_EBUF_MODE(r16) _BFGET_(r16, 0, 0)
    #define   SET16SataRegs_COMPHY_CTRL1_MAC_PHY_EBUF_MODE(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32SataRegs_COMPHY_CTRL1_MAC_PHY_RATE(r32)     _BFGET_(r32,17,17)
    #define   SET32SataRegs_COMPHY_CTRL1_MAC_PHY_RATE(r32,v)   _BFSET_(r32,17,17,v)
    #define   GET16SataRegs_COMPHY_CTRL1_MAC_PHY_RATE(r16)     _BFGET_(r16, 1, 1)
    #define   SET16SataRegs_COMPHY_CTRL1_MAC_PHY_RATE(r16,v)   _BFSET_(r16, 1, 1,v)

    #define   GET32SataRegs_COMPHY_CTRL1_PHY_RESERVED_IN(r32)  _BFGET_(r32,25,18)
    #define   SET32SataRegs_COMPHY_CTRL1_PHY_RESERVED_IN(r32,v) _BFSET_(r32,25,18,v)
    #define   GET16SataRegs_COMPHY_CTRL1_PHY_RESERVED_IN(r16)  _BFGET_(r16, 9, 2)
    #define   SET16SataRegs_COMPHY_CTRL1_PHY_RESERVED_IN(r16,v) _BFSET_(r16, 9, 2,v)

    #define     w32SataRegs_COMPHY_CTRL1                       {\
            UNSG32 uCOMPHY_CTRL1_PIN_PIPE_SEL                  :  1;\
            UNSG32 uCOMPHY_CTRL1_PWR_RST_N                     :  1;\
            UNSG32 uCOMPHY_CTRL1_CORE_RST_N                    :  1;\
            UNSG32 uCOMPHY_CTRL1_PIPE_PHY_MODE                 :  1;\
            UNSG32 uCOMPHY_CTRL1_MAC_PHY_RXEIDETECT_DIS        :  1;\
            UNSG32 uCOMPHY_CTRL1_MAC_PHY_TXCMN_MODE_DIS        :  1;\
            UNSG32 uCOMPHY_CTRL1_MAC_PHY_TXSWING               :  1;\
            UNSG32 uCOMPHY_CTRL1_MAC_PHY_TXMARGIN0             :  3;\
            UNSG32 uCOMPHY_CTRL1_MAC_PHY_TXDEEMPH0             :  2;\
            UNSG32 uCOMPHY_CTRL1_MAC_PHY_TXONESZEROS           :  1;\
            UNSG32 uCOMPHY_CTRL1_MAC_PHY_RXEQTRAINING          :  1;\
            UNSG32 uCOMPHY_CTRL1_MAC_PHY_RX_TERMINATION        :  1;\
            UNSG32 uCOMPHY_CTRL1_MAC_PHY_CLK_REQ_N             :  1;\
            UNSG32 uCOMPHY_CTRL1_MAC_PHY_EBUF_MODE             :  1;\
            UNSG32 uCOMPHY_CTRL1_MAC_PHY_RATE                  :  1;\
            UNSG32 uCOMPHY_CTRL1_PHY_RESERVED_IN               :  8;\
            UNSG32 RSVDx8008_b26                               :  6;\
          }
    union { UNSG32 u32SataRegs_COMPHY_CTRL1;
            struct w32SataRegs_COMPHY_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    } SIE_SataRegs;

    typedef union  T32SataRegs_IPPorts
          { UNSG32 u32;
            struct w32SataRegs_IPPorts;
                 } T32SataRegs_IPPorts;
    typedef union  T32SataRegs_COMPHY_CTRL0
          { UNSG32 u32;
            struct w32SataRegs_COMPHY_CTRL0;
                 } T32SataRegs_COMPHY_CTRL0;
    typedef union  T32SataRegs_COMPHY_CTRL1
          { UNSG32 u32;
            struct w32SataRegs_COMPHY_CTRL1;
                 } T32SataRegs_COMPHY_CTRL1;
    ///////////////////////////////////////////////////////////

    typedef union  TSataRegs_IPPorts
          { UNSG32 u32[1];
            struct {
            struct w32SataRegs_IPPorts;
                   };
                 } TSataRegs_IPPorts;
    typedef union  TSataRegs_COMPHY_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32SataRegs_COMPHY_CTRL0;
                   };
                 } TSataRegs_COMPHY_CTRL0;
    typedef union  TSataRegs_COMPHY_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32SataRegs_COMPHY_CTRL1;
                   };
                 } TSataRegs_COMPHY_CTRL1;

    ///////////////////////////////////////////////////////////
     SIGN32 SataRegs_drvrd(SIE_SataRegs *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SataRegs_drvwr(SIE_SataRegs *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SataRegs_reset(SIE_SataRegs *p);
     SIGN32 SataRegs_cmp  (SIE_SataRegs *p, SIE_SataRegs *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SataRegs_check(p,pie,pfx,hLOG) SataRegs_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SataRegs_print(p,    pfx,hLOG) SataRegs_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SataRegs
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: sataWrapper.h
////////////////////////////////////////////////////////////

