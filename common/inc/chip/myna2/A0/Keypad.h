//////
/// don't edit! auto-generated by docc: Keypad.h
////////////////////////////////////////////////////////////
#ifndef Keypad_h
#define Keypad_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE KPINT                                    (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 KPINT_CFG            (P)
///               ###
///               * Keypad Interface Configuration Register
///               ###
///               %unsigned 8  KPINT_COL_EN              0x0
///                                    ###
///                                    * Enable/Disable the corresponding COL[i]
///                                    * 1'b1: Enabled
///                                    * 1'b0: Disabled
///                                    ###
///               %unsigned 10 KPINT_ROW_EN              0x0
///                                    ###
///                                    * Enable/Disable the corresponding ROW[i]
///                                    * 1'b1: Enabled
///                                    * 1'b0: Disabled
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x00004 KPINT_COL            (P)
///               ###
///               * Keypad Interface Column Register
///               ###
///               %unsigned 8  COL_ACTIVATE              0x0
///                                    ###
///                                    * Activate/deactivate enabled COL[i]
///                                    * 1'b1: enabled column is activated
///                                    * 1'b0: enabled column is deactivated
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00008 KPINT_ROW            (R-)
///               ###
///               * Keypad Interface Row Register
///               ###
///               %unsigned 10 KEY_PRESSED               
///                                    ###
///                                    * Indicate which key on ROW[i] get pressed in the enabled & activated column
///                                    * 1'b1: a key on ROW[i] get pressed
///                                    * 1'b0: no key on ROW[i] get pressed or ROW[i] is not enabled
///                                    ###
///               %%        22         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      12B, bits:      36b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_KPINT
#define h_KPINT (){}

    #define     RA_KPINT_KPINT_CFG                             0x0000

    #define     BA_KPINT_KPINT_CFG_KPINT_COL_EN                0x0000
    #define     B16KPINT_KPINT_CFG_KPINT_COL_EN                0x0000
    #define   LSb32KPINT_KPINT_CFG_KPINT_COL_EN                   0
    #define   LSb16KPINT_KPINT_CFG_KPINT_COL_EN                   0
    #define       bKPINT_KPINT_CFG_KPINT_COL_EN                8
    #define   MSK32KPINT_KPINT_CFG_KPINT_COL_EN                   0x000000FF

    #define     BA_KPINT_KPINT_CFG_KPINT_ROW_EN                0x0001
    #define     B16KPINT_KPINT_CFG_KPINT_ROW_EN                0x0000
    #define   LSb32KPINT_KPINT_CFG_KPINT_ROW_EN                   8
    #define   LSb16KPINT_KPINT_CFG_KPINT_ROW_EN                   8
    #define       bKPINT_KPINT_CFG_KPINT_ROW_EN                10
    #define   MSK32KPINT_KPINT_CFG_KPINT_ROW_EN                   0x0003FF00
    ///////////////////////////////////////////////////////////
    #define     RA_KPINT_KPINT_COL                             0x0004

    #define     BA_KPINT_KPINT_COL_COL_ACTIVATE                0x0004
    #define     B16KPINT_KPINT_COL_COL_ACTIVATE                0x0004
    #define   LSb32KPINT_KPINT_COL_COL_ACTIVATE                   0
    #define   LSb16KPINT_KPINT_COL_COL_ACTIVATE                   0
    #define       bKPINT_KPINT_COL_COL_ACTIVATE                8
    #define   MSK32KPINT_KPINT_COL_COL_ACTIVATE                   0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_KPINT_KPINT_ROW                             0x0008

    #define     BA_KPINT_KPINT_ROW_KEY_PRESSED                 0x0008
    #define     B16KPINT_KPINT_ROW_KEY_PRESSED                 0x0008
    #define   LSb32KPINT_KPINT_ROW_KEY_PRESSED                    0
    #define   LSb16KPINT_KPINT_ROW_KEY_PRESSED                    0
    #define       bKPINT_KPINT_ROW_KEY_PRESSED                 10
    #define   MSK32KPINT_KPINT_ROW_KEY_PRESSED                    0x000003FF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_KPINT {
    ///////////////////////////////////////////////////////////
    #define   GET32KPINT_KPINT_CFG_KPINT_COL_EN(r32)           _BFGET_(r32, 7, 0)
    #define   SET32KPINT_KPINT_CFG_KPINT_COL_EN(r32,v)         _BFSET_(r32, 7, 0,v)
    #define   GET16KPINT_KPINT_CFG_KPINT_COL_EN(r16)           _BFGET_(r16, 7, 0)
    #define   SET16KPINT_KPINT_CFG_KPINT_COL_EN(r16,v)         _BFSET_(r16, 7, 0,v)

    #define   GET32KPINT_KPINT_CFG_KPINT_ROW_EN(r32)           _BFGET_(r32,17, 8)
    #define   SET32KPINT_KPINT_CFG_KPINT_ROW_EN(r32,v)         _BFSET_(r32,17, 8,v)

    #define     w32KPINT_KPINT_CFG                             {\
            UNSG32 uKPINT_CFG_KPINT_COL_EN                     :  8;\
            UNSG32 uKPINT_CFG_KPINT_ROW_EN                     : 10;\
            UNSG32 RSVDx0_b18                                  : 14;\
          }
    union { UNSG32 u32KPINT_KPINT_CFG;
            struct w32KPINT_KPINT_CFG;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32KPINT_KPINT_COL_COL_ACTIVATE(r32)           _BFGET_(r32, 7, 0)
    #define   SET32KPINT_KPINT_COL_COL_ACTIVATE(r32,v)         _BFSET_(r32, 7, 0,v)
    #define   GET16KPINT_KPINT_COL_COL_ACTIVATE(r16)           _BFGET_(r16, 7, 0)
    #define   SET16KPINT_KPINT_COL_COL_ACTIVATE(r16,v)         _BFSET_(r16, 7, 0,v)

    #define     w32KPINT_KPINT_COL                             {\
            UNSG32 uKPINT_COL_COL_ACTIVATE                     :  8;\
            UNSG32 RSVDx4_b8                                   : 24;\
          }
    union { UNSG32 u32KPINT_KPINT_COL;
            struct w32KPINT_KPINT_COL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32KPINT_KPINT_ROW_KEY_PRESSED(r32)            _BFGET_(r32, 9, 0)
    #define   SET32KPINT_KPINT_ROW_KEY_PRESSED(r32,v)          _BFSET_(r32, 9, 0,v)
    #define   GET16KPINT_KPINT_ROW_KEY_PRESSED(r16)            _BFGET_(r16, 9, 0)
    #define   SET16KPINT_KPINT_ROW_KEY_PRESSED(r16,v)          _BFSET_(r16, 9, 0,v)

    #define     w32KPINT_KPINT_ROW                             {\
            UNSG32 uKPINT_ROW_KEY_PRESSED                      : 10;\
            UNSG32 RSVDx8_b10                                  : 22;\
          }
    union { UNSG32 u32KPINT_KPINT_ROW;
            struct w32KPINT_KPINT_ROW;
          };
    ///////////////////////////////////////////////////////////
    } SIE_KPINT;

    typedef union  T32KPINT_KPINT_CFG
          { UNSG32 u32;
            struct w32KPINT_KPINT_CFG;
                 } T32KPINT_KPINT_CFG;
    typedef union  T32KPINT_KPINT_COL
          { UNSG32 u32;
            struct w32KPINT_KPINT_COL;
                 } T32KPINT_KPINT_COL;
    typedef union  T32KPINT_KPINT_ROW
          { UNSG32 u32;
            struct w32KPINT_KPINT_ROW;
                 } T32KPINT_KPINT_ROW;
    ///////////////////////////////////////////////////////////

    typedef union  TKPINT_KPINT_CFG
          { UNSG32 u32[1];
            struct {
            struct w32KPINT_KPINT_CFG;
                   };
                 } TKPINT_KPINT_CFG;
    typedef union  TKPINT_KPINT_COL
          { UNSG32 u32[1];
            struct {
            struct w32KPINT_KPINT_COL;
                   };
                 } TKPINT_KPINT_COL;
    typedef union  TKPINT_KPINT_ROW
          { UNSG32 u32[1];
            struct {
            struct w32KPINT_KPINT_ROW;
                   };
                 } TKPINT_KPINT_ROW;

    ///////////////////////////////////////////////////////////
     SIGN32 KPINT_drvrd(SIE_KPINT *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 KPINT_drvwr(SIE_KPINT *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void KPINT_reset(SIE_KPINT *p);
     SIGN32 KPINT_cmp  (SIE_KPINT *p, SIE_KPINT *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define KPINT_check(p,pie,pfx,hLOG) KPINT_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define KPINT_print(p,    pfx,hLOG) KPINT_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: KPINT
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: Keypad.h
////////////////////////////////////////////////////////////

