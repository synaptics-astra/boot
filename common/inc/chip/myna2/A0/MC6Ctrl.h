//////
/// don't edit! auto-generated by docc: MC6Ctrl.h
////////////////////////////////////////////////////////////
#ifndef MC6Ctrl_h
#define MC6Ctrl_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE pll                                      (4,4)
///     ###
///     * SSPLL is a differential, wide range, and low power spread-spectrum PLL that is also capable of
///     * adding in a fixed frequency offset in about 1 ppm/step resolution.
///     * .. Input Frequency: Fref: 8 MHz ~ 2 GHz
///     * Output Frequency: Fout: 9 MHz ~ 3GHz for differential outputs CLKOUTP and CLKOUTN;
///     * 9 MHz ~ 2.1 GHz for single -ended output CLKOUT.
///     * .. Fout(CLKOUT) = Fref *(4*N/M) / CLKOUT_SE_DIV_SEL
///     * Fout(CLKOUTP, CLKOUTN) = Fref*(4*N/M) / CLKOUT_DIFF_DIV_SEL
///     * M: Reference Divider: 1 to 511.
///     * N: Feedback Divider: 1 to 511.
///     * VCODIV: VCO differential divider is controlled by CLKOUT_DIFF_DIV_SEL.
///     * VCO single-ended divider is controlled by CLKOUT_SE_DIV_SEL.
///     * Divider value = 1 1,2,3,4.128.
///     * Update Rate: Fref / M = 8 to 32 MHz (to maintain the PLL stability).
///     * NOTE: Although VCO can be operated between 12 ~ 3 GHz, the 1 ~ 1.5 GHz range is
///     * applicable only in the low power mode and cannot be used with the SSC function. In order to
///     * use the SSC function VCO must be operated above 1.5GHz.
///     * .. Cycle to Cycle Jitter (max): <30 ps.
///     * .. Programmable Reference and Feedback Divider.
///     * .. 1 ppm/step frequency offset resolution. Up to 50,000 ppm without changing the Feedback
///     * Divider setting.
///     * .. SSC frequency range: 30 KHz ~ 100 KHz
///     * .. SSC amplitude range: up to +/-5%. (SSC function is disabled by default.)
///     * .. Supporting both down-spread and center-spread modes.
///     * .. Current consumption( typical corner, AVDD=1.8 V, DVDD=1.05V): see sspll document
///     * .. Locking time: < 50 us
///     * .. Process Node: 28 nm LP
///     * .. Analog Power Supply: 1.8 V (+10%, -5%)
///     * .. Digital Power Supply: 1.05 V (±10%)
///     * Support Low DVDD Mode: Digtial Power Supply = 0.75V ~ 1.32V. See section 2.1 for detail.
///     * .. Output Duty Cycle: 45% - 55% for any post divider ratio
///     * .. Built-in Bandgap circuit.
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl                 (P-)
///               ###
///               * PLL Control register
///               ###
///               %unsigned 1  PU                        0x1
///                                    ###
///                                    * PLL Power-Up
///                                    * 1: power up.
///                                    * 0: power down.
///                                    ###
///               %unsigned 1  RESET                     0x0
///                                    ###
///                                    * Power On Reset. Active high, reset PLL and all logic.
///                                    * 1: reset.
///                                    * 0: no reset.
///                                    ###
///               %unsigned 1  AVDD1815_SEL              0x1
///                                    ###
///                                    * AVDD Select.
///                                    * Selects whether AVDD is 1.8V
///                                    * or 1.5V.
///                                    * 1: 1.8V
///                                    * 0: 1.5V
///                                    ###
///               %unsigned 9  REFDIV                    0x2
///                                    ###
///                                    * Reference Clock Divider
///                                    * Select.
///                                    * Divider = REFDIV[8:0]
///                                    * 9’h000 = divide by 1
///                                    * 9’h001 = divide by 1
///                                    * 9’h002 = divide by 2
///                                    * 9’h003 = divide by 3
///                                    * ...
///                                    * 9’h1FF = divide by 511.
///                                    * REFDIV[8:0] range is 1~250
///                                    ###
///               %unsigned 9  FBDIV                     0x20
///                                    ###
///                                    * Feedback Clock Divider Select.
///                                    * Divider= FBDIV [8:0]
///                                    * 9’h000 = divide by 1
///                                    * 9’h001 = divide by 1
///                                    * 9’h002 = divide by 2
///                                    * 9’h003 = divide by 3
///                                    * ...
///                                    * 9’h1FF = divide by 511.
///                                    * FBDIV range is 9 to 94
///                                    ###
///               %unsigned 2  VDDM                      0x1
///                                    ###
///                                    * VCO Supply Control.
///                                    * The bit enumerations for this
///                                    * signal is used to select a
///                                    * particular supply voltage.
///                                    * Except the default all other
///                                    * bits are for internal use.
///                                    * 11: 1.3V
///                                    * 10: 1.25V
///                                    * 01: 1.2V
///                                    * 00: 1.15V.
///                                    ###
///               %unsigned 3  VDDL                      0x4
///                                    ###
///                                    * Internal VDD Supply
///                                    * Control.
///                                    * The bit enumerations for this
///                                    * signal is used to select a
///                                    * particular supply voltage.
///                                    * Except the default all other
///                                    * bits are for internal use.
///                                    * 000: 0.7V.
///                                    * 001: 0.75V
///                                    * 010: 0.8V
///                                    * 011: 0.85V
///                                    * 100: 0.9V
///                                    * 101: 0.95V
///                                    * 110: 1.0V
///                                    * 111: 1.05V
///                                    ###
///               %unsigned 4  ICP                       0x4
///                                    ###
///                                    * Charge-pump Current Control Bits.
///                                    * 0000: 3 uA
///                                    * 0001: 3.75 uA
///                                    * 0010: 4.5 uA
///                                    * 0011: 5.25 uA
///                                    * 0100: 6 uA
///                                    * 0101: 7.5 uA
///                                    * 0110: 9 uA
///                                    * 0111: 10.5 uA
///                                    * 1000: 12 uA
///                                    * 1001: 15 uA
///                                    * 1010: 18 uA
///                                    * 1011: 21 uA
///                                    * 1100: 24 uA
///                                    * 1101: 30 uA
///                                    * 1110: 36 uA
///                                    * 1111: 42 uA.
///                                    * Note : ICP[3:0] = (10 MHz / Update Rate) * Default.
///                                    * If PU_BW_SEL = 1, then increase ICP value by 2x
///                                    ###
///               %unsigned 1  PLL_BW_SEL                0x0
///                                    ###
///                                    * PLL Bandwidth Select.
///                                    * 1: BW x 2
///                                    * 0: Normal PLL bandwidth.
///                                    * Note: Use bandwidth x 2 only if update rate is between 16 - 32 MHz.
///                                    * NOTE: Bandwidth x 2 is for special cases only. If used, the update rate must be between 16 MHz - 32 MHz.
///                                    ###
///               %%        1          # Stuffing bits...
///     # 0x00004 ctrl1                
///               %unsigned 4  KVCO                      0x5
///                                    ###
///                                    * KVCO Frequency Range
///                                    * Select.
///                                    * 0000: Reserved
///                                    * 0001: 1.0G ~ 1.15G
///                                    * 0010: 1.15G ~ 1.25G
///                                    * 0011: 1.25G ~ 1.40G
///                                    * 0100: 1.40G ~ 1.55G
///                                    * 0101: 1.55G ~ 1.65G
///                                    * 0110: 1.65G ~ 1.80G
///                                    * 0111: 1.80G ~ 1.95G
///                                    * 1000: 1.95G ~ 2.17G
///                                    * 1001: 2.17G ~ 2.50G
///                                    * 1010: 2.50G ~ 2.80G
///                                    * 1011: 2.80G ~ 3.10G
///                                    * 1100: 3.10G ~ 3.45G
///                                    * 1101: 3.45G ~ 3.75G
///                                    * 1110: 3.75G ~ 4.0G
///                                    * 1111: Reserved.
///                                    * SSC mode is only supported for frequency >=2 GHz
///                                    * FVCO=((4*REFCLK/M)*N)/(1+OFFSET_PERCENT)
///                                    ###
///               %unsigned 2  CTUNE                     0x2
///                                    ###
///                                    * VCO Capacitor Select.
///                                    * 00: No Cap Loading
///                                    * 01: One Unit Cap Loading
///                                    * 10: Two Unit Cap Loading
///                                    * 11: Three Unit Cap Loading.
///                                    * Besides the default other bit
///                                    * enumerations are for internal
///                                    * use.
///                                    ###
///               %unsigned 9  CLKOUT_DIFF_DIV_SEL       0x4
///                                    ###
///                                    * Post Divider For Differential
///                                    * Output Clock.
///                                    * 9’h000 = 1
///                                    * 9’h001 = 1
///                                    * 9’h002 = 2
///                                    * 9’h003 = 3
///                                    * 9’h004 = 4
///                                    * ...
///                                    * 9’h1FF = 511.
///                                    ###
///               %unsigned 9  CLKOUT_SE_DIV_SEL         0x4
///                                    ###
///                                    * Post Divider For
///                                    * Single-ended Output Clock.
///                                    * 9’h000 = 1
///                                    * 9’h001 = 1
///                                    * 9’h002 = 2
///                                    * 9’h003 = 3
///                                    * 9’h004 = 4
///                                    * ...
///                                    * 9’h1FF = 511.
///                                    ###
///               %unsigned 1  CLKOUT_SOURCE_SEL         0x1
///                                    ###
///                                    * Differential Clock And
///                                    * Single-ended Clock Source Control.
///                                    * 0: from the phase interpolator.
///                                    * 1: from VCO directly.
///                                    * Note: This is used in test mode only. Select ‘1’ for normal operation.
///                                    ###
///               %unsigned 1  CLKOUT_DIFF_EN            0x1
///                                    ###
///                                    * Differential Clock Enable.
///                                    * 0:Disable differential clock
///                                    * 1:Enable differential clock
///                                    ###
///               %unsigned 1  BYPASS_EN                 0x0
///                                    ###
///                                    * PLL Clock Bypass Enable.
///                                    * 1: The PLL is bypassed. CLKOUT is derived from REFCLK.
///                                    * 0: CLKOUT is derived from the PLL clock.
///                                    * NOTE: Bypass only works for the single ended clock.
///                                    * If BYPASS_EN==1. CLKOUT= REFCLK.
///                                    * Make sure Fvco/CLKOUT_SE_DIV_SEL< 2.1 GHz, when using the bypass function.
///                                    ###
///               %unsigned 1  CLKOUT_SE_GATING_EN       0x1
///                                    ###
///                                    * Clock Output Gating Control.
///                                    * Selection for using the PLL lock signal to gate the output clock.
///                                    * 0: The PLL_LOCK signal won't affect the output clock, CLKOUT
///                                    * 1: Use PLL_LOCK signal to gate the output clock, CLKOUT.
///                                    ###
///               %unsigned 1  FBCLK_EXT_SEL             0x0
///                                    ###
///                                    * External Or Internal Feedback
///                                    * Clock Select.
///                                    * 0: select internal feedback clock
///                                    * 1: select external feedback clock.
///                                    * Note: For most applications the external feedback clock is not used. In these cases use the default selection "0".
///                                    ###
///               %%        3          # Stuffing bits...
///     # 0x00008 ctrl2                
///               %unsigned 6  FBCDLY                    0x0
///                                    ###
///                                    * Fine Tune Delay Select
///                                    * Between REFCLK And FBCLK_EXT When FBCLK_EXT_SEL = 1.
///                                    * FBCDLY[5] is the sign bit.
///                                    * 1 = FBCLK_EXT will lag REFCLK.
///                                    * 0 = FBCLK_EXT will lead REFCLK.
///                                    * FBCDLY[4:0] decides the actual amount of delay.
///                                    * 00000: No delay.
///                                    * Each additional step has these
///                                    * delays:
///                                    * 00h = No delay
///                                    * 01h = 15 - 50 ps phase difference
///                                    * 02h = 30 - 100 ps phase difference
///                                    * 03h = 45 - 150 ps phase difference
///                                    * ...
///                                    * 3Fh = 945 ps - 3150 ps phase difference.
///                                    * Note: Used in DSPLL application, do not use in regular PLL application.
///                                    ###
///               %unsigned 3  FD                        0x4
///                                    ###
///                                    * Tune Frequency Detector Precision
///                                    * FD[0]: Reserved.
///                                    * FD[2:1] FD precision
///                                    * 00 +/- 0.1%
///                                    * 01 +/- 0.2%
///                                    * 10 +/- 0.4%
///                                    * 11 +/- 0.8%.
///                                    ###
///               %unsigned 4  INTPI                     0x6
///                                    ###
///                                    * Phase Interpolator Bias Current Select.
///                                    * 1~2 GHz Not SUPPORTED
///                                    * 0011 = 10 μA (2 ~ 2.75 GHz)
///                                    * 0101 = 15 μA (2.75 ~ 3.25 GHz).
///                                    * 0111 = 20 μA (3.25 ~ 4 GHz).
///                                    * VCO running frequency below
///                                    * 2 GHz not supported.
///                                    ###
///               %unsigned 3  INTPR                     0x4
///                                    ###
///                                    * Phase Interpolator Resistor Select.
///                                    * NOTE: VCO running frequency below 2 GHz not supported.
///                                    ###
///               %unsigned 1  PI_EN                     0x0
///                                    ###
///                                    * Phase Interpolator Enable.
///                                    * 1: Enable phase interpolator
///                                    * 0: Disable phase interpolator.
///                                    ###
///               %unsigned 1  PI_LOOP_MODE              0x0
///                                    ###
///                                    * Phase Interpolator Loop Control.
///                                    * 1: PI is in the PLL loop.
///                                    * 0: PI is out of the PLL loop
///                                    ###
///               %unsigned 1  CLK_DET_EN                0x1
///                                    ###
///                                    * PI Output Clock Enable. This selection enables the PI output clock for the internal reset circuit
///                                    ###
///               %unsigned 1  RESET_PI                  0x0
///                                    ###
///                                    * External Interpolator Reset.
///                                    * 1: reset.
///                                    * 0: no reset.
///                                    ###
///               %unsigned 1  RESET_SSC                 0x0
///                                    ###
///                                    * SSC reset
///                                    * 0 : No reset
///                                    * 1 : Reset
///                                    ###
///               %unsigned 1  FREQ_OFFSET_EN            0x0
///                                    ###
///                                    * Frequency Offset Enable.
///                                    * 0: Disable
///                                    * 1: Enable.
///                                    ###
///               %%        10         # Stuffing bits...
///     # 0x0000C ctrl3                
///               %unsigned 17 FREQ_OFFSET               0x0
///                                    ###
///                                    * Frequency Offset Value
///                                    * Control.
///                                    * [16]: Sign-Bit.
///                                    * 0: Frequency down
///                                    * 1: Frequency up
///                                    * [15:0] : 1 LSB 1 ppm, upto 5%
///                                    * 1LSB=10e6/(4*128 *2048) ppm
///                                    * [16]=0--->Sign= 1
///                                    * [16]=1--->Sign= -1
///                                    * Fout = Fvco/ (1 + Sign* FREQ_OFFSET[15:0] *1LSB)
///                                    ###
///               %unsigned 1  FREQ_OFFSET_MODE_SELECTION 0x0
///                                    ###
///                                    * Frequency Offset Mode Select.
///                                    * 0: FREQ_OFFSET[16:0] is updated by FREQ_OFFSET_VALID
///                                    * 1: FREQ_OFFSET[16:0] is sampled by CK_DIV64_OUT
///                                    * (It has to be valid at the rising edge of CK_DIV64_OUT).
///                                    * Note: For special application only. Use FREQ_OFFSET_VALID to update FREQ_OFFSET[16:0] by default.
///                                    ###
///               %unsigned 1  FREQ_OFFSET_VALID         0x0
///                                    ###
///                                    * Frequency Offset Value Valid.
///                                    * Indicates that frequency offset value (FREQ_OFFSET[16:0]) is valid.
///                                    * Note:
///                                    * 1) A rising edge will trigger the frequency offset generation circuit to read in the FREQ_OFFSET [16:0] value. The pulse width has to be no less than 50 ns.
///                                    * 2) This signal is only needed when FREQ_OFFSET_MODE_SELECTION=0.
///                                    ###
///               %unsigned 1  SSC_CLK_EN                0x0
///                                    ###
///                                    * SSC Clock Enable.
///                                    * This selection enables the PI output clock for SSC digital logic.
///                                    ###
///               %unsigned 1  SSC_MODE                  0x1
///                                    ###
///                                    * SSC Mode Select.
///                                    * 0: center spread
///                                    * 1: down spread.
///                                    ###
///               %%        11         # Stuffing bits...
///     # 0x00010 ctrl4                
///               %unsigned 16 SSC_FREQ_DIV              0x0
///                                    ###
///                                    * SSC Frequency Select.
///                                    ###
///               %unsigned 11 SSC_RNGE                  0x0
///                                    ###
///                                    * SSC Range Select. SSC_RNGE[10:0] = Desired SSC amplitude /(SSC_FREQ_DIV[14:0]*2^(-28)).
///                                    * Rounding to integer required.
///                                    ###
///               %unsigned 4  TEST_ANA                  0x0
///                                    ###
///                                    * Analog test point
///                                    ###
///               %%        1          # Stuffing bits...
///     # 0x00014 ctrl5                
///               %unsigned 8  RESERVE_IN                0x0
///                                    ###
///                                    * Reserved input pins
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00018 status               (R-)
///               ###
///               * PLL status register
///               ###
///               %unsigned 1  PLL_LOCK                  
///                                    ###
///                                    * PLL Lock Detect.
///                                    * 1: PLL locked.
///                                    * 0: PLL not locked.
///                                    * Note:
///                                    * After PLL is powered up, wait for 50 us to check for the lock status.
///                                    * In normal operation, when PLL_LOCK signal is detected low, sample the signal again after 100 us to confirm the status.
///                                    * This signal is for testing purpose only, do not use it for any functional use.
///                                    ###
///               %unsigned 1  CLK_CFMOD                 
///                                    ###
///                                    * Clock Mode Output.
///                                    *  For down spread and
///                                    * PI_LOOP_MODE = 0, output
///                                    * is 0.
///                                    *  For down spread and
///                                    * PI_LOOP_MODE = 1, output
///                                    * is 1.
///                                    *  For center spread, output a
///                                    * clock with SSC modulation
///                                    * frequency.
///                                    ###
///               %unsigned 1  CLK_FMOD                  
///                                    ###
///                                    * Clock Output And Modulation
///                                    * Frequency.
///                                    * For down spread, output a clock
///                                    * with SSC modulation frequency.
///                                    * For center spread, output a clock
///                                    * with double SSC modulation
///                                    * frequency.
///                                    ###
///               %unsigned 8  RESERVE_OUT               
///                                    ###
///                                    * Reserve Output Register pins.
///                                    ###
///               %%        21         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      28B, bits:     153b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_pll
#define h_pll (){}

    #define     RA_pll_ctrl                                    0x0000

    #define     BA_pll_ctrl_PU                                 0x0000
    #define     B16pll_ctrl_PU                                 0x0000
    #define   LSb32pll_ctrl_PU                                    0
    #define   LSb16pll_ctrl_PU                                    0
    #define       bpll_ctrl_PU                                 1
    #define   MSK32pll_ctrl_PU                                    0x00000001

    #define     BA_pll_ctrl_RESET                              0x0000
    #define     B16pll_ctrl_RESET                              0x0000
    #define   LSb32pll_ctrl_RESET                                 1
    #define   LSb16pll_ctrl_RESET                                 1
    #define       bpll_ctrl_RESET                              1
    #define   MSK32pll_ctrl_RESET                                 0x00000002

    #define     BA_pll_ctrl_AVDD1815_SEL                       0x0000
    #define     B16pll_ctrl_AVDD1815_SEL                       0x0000
    #define   LSb32pll_ctrl_AVDD1815_SEL                          2
    #define   LSb16pll_ctrl_AVDD1815_SEL                          2
    #define       bpll_ctrl_AVDD1815_SEL                       1
    #define   MSK32pll_ctrl_AVDD1815_SEL                          0x00000004

    #define     BA_pll_ctrl_REFDIV                             0x0000
    #define     B16pll_ctrl_REFDIV                             0x0000
    #define   LSb32pll_ctrl_REFDIV                                3
    #define   LSb16pll_ctrl_REFDIV                                3
    #define       bpll_ctrl_REFDIV                             9
    #define   MSK32pll_ctrl_REFDIV                                0x00000FF8

    #define     BA_pll_ctrl_FBDIV                              0x0001
    #define     B16pll_ctrl_FBDIV                              0x0000
    #define   LSb32pll_ctrl_FBDIV                                 12
    #define   LSb16pll_ctrl_FBDIV                                 12
    #define       bpll_ctrl_FBDIV                              9
    #define   MSK32pll_ctrl_FBDIV                                 0x001FF000

    #define     BA_pll_ctrl_VDDM                               0x0002
    #define     B16pll_ctrl_VDDM                               0x0002
    #define   LSb32pll_ctrl_VDDM                                  21
    #define   LSb16pll_ctrl_VDDM                                  5
    #define       bpll_ctrl_VDDM                               2
    #define   MSK32pll_ctrl_VDDM                                  0x00600000

    #define     BA_pll_ctrl_VDDL                               0x0002
    #define     B16pll_ctrl_VDDL                               0x0002
    #define   LSb32pll_ctrl_VDDL                                  23
    #define   LSb16pll_ctrl_VDDL                                  7
    #define       bpll_ctrl_VDDL                               3
    #define   MSK32pll_ctrl_VDDL                                  0x03800000

    #define     BA_pll_ctrl_ICP                                0x0003
    #define     B16pll_ctrl_ICP                                0x0002
    #define   LSb32pll_ctrl_ICP                                   26
    #define   LSb16pll_ctrl_ICP                                   10
    #define       bpll_ctrl_ICP                                4
    #define   MSK32pll_ctrl_ICP                                   0x3C000000

    #define     BA_pll_ctrl_PLL_BW_SEL                         0x0003
    #define     B16pll_ctrl_PLL_BW_SEL                         0x0002
    #define   LSb32pll_ctrl_PLL_BW_SEL                            30
    #define   LSb16pll_ctrl_PLL_BW_SEL                            14
    #define       bpll_ctrl_PLL_BW_SEL                         1
    #define   MSK32pll_ctrl_PLL_BW_SEL                            0x40000000

    #define     RA_pll_ctrl1                                   0x0004

    #define     BA_pll_ctrl_KVCO                               0x0004
    #define     B16pll_ctrl_KVCO                               0x0004
    #define   LSb32pll_ctrl_KVCO                                  0
    #define   LSb16pll_ctrl_KVCO                                  0
    #define       bpll_ctrl_KVCO                               4
    #define   MSK32pll_ctrl_KVCO                                  0x0000000F

    #define     BA_pll_ctrl_CTUNE                              0x0004
    #define     B16pll_ctrl_CTUNE                              0x0004
    #define   LSb32pll_ctrl_CTUNE                                 4
    #define   LSb16pll_ctrl_CTUNE                                 4
    #define       bpll_ctrl_CTUNE                              2
    #define   MSK32pll_ctrl_CTUNE                                 0x00000030

    #define     BA_pll_ctrl_CLKOUT_DIFF_DIV_SEL                0x0004
    #define     B16pll_ctrl_CLKOUT_DIFF_DIV_SEL                0x0004
    #define   LSb32pll_ctrl_CLKOUT_DIFF_DIV_SEL                   6
    #define   LSb16pll_ctrl_CLKOUT_DIFF_DIV_SEL                   6
    #define       bpll_ctrl_CLKOUT_DIFF_DIV_SEL                9
    #define   MSK32pll_ctrl_CLKOUT_DIFF_DIV_SEL                   0x00007FC0

    #define     BA_pll_ctrl_CLKOUT_SE_DIV_SEL                  0x0005
    #define     B16pll_ctrl_CLKOUT_SE_DIV_SEL                  0x0004
    #define   LSb32pll_ctrl_CLKOUT_SE_DIV_SEL                     15
    #define   LSb16pll_ctrl_CLKOUT_SE_DIV_SEL                     15
    #define       bpll_ctrl_CLKOUT_SE_DIV_SEL                  9
    #define   MSK32pll_ctrl_CLKOUT_SE_DIV_SEL                     0x00FF8000

    #define     BA_pll_ctrl_CLKOUT_SOURCE_SEL                  0x0007
    #define     B16pll_ctrl_CLKOUT_SOURCE_SEL                  0x0006
    #define   LSb32pll_ctrl_CLKOUT_SOURCE_SEL                     24
    #define   LSb16pll_ctrl_CLKOUT_SOURCE_SEL                     8
    #define       bpll_ctrl_CLKOUT_SOURCE_SEL                  1
    #define   MSK32pll_ctrl_CLKOUT_SOURCE_SEL                     0x01000000

    #define     BA_pll_ctrl_CLKOUT_DIFF_EN                     0x0007
    #define     B16pll_ctrl_CLKOUT_DIFF_EN                     0x0006
    #define   LSb32pll_ctrl_CLKOUT_DIFF_EN                        25
    #define   LSb16pll_ctrl_CLKOUT_DIFF_EN                        9
    #define       bpll_ctrl_CLKOUT_DIFF_EN                     1
    #define   MSK32pll_ctrl_CLKOUT_DIFF_EN                        0x02000000

    #define     BA_pll_ctrl_BYPASS_EN                          0x0007
    #define     B16pll_ctrl_BYPASS_EN                          0x0006
    #define   LSb32pll_ctrl_BYPASS_EN                             26
    #define   LSb16pll_ctrl_BYPASS_EN                             10
    #define       bpll_ctrl_BYPASS_EN                          1
    #define   MSK32pll_ctrl_BYPASS_EN                             0x04000000

    #define     BA_pll_ctrl_CLKOUT_SE_GATING_EN                0x0007
    #define     B16pll_ctrl_CLKOUT_SE_GATING_EN                0x0006
    #define   LSb32pll_ctrl_CLKOUT_SE_GATING_EN                   27
    #define   LSb16pll_ctrl_CLKOUT_SE_GATING_EN                   11
    #define       bpll_ctrl_CLKOUT_SE_GATING_EN                1
    #define   MSK32pll_ctrl_CLKOUT_SE_GATING_EN                   0x08000000

    #define     BA_pll_ctrl_FBCLK_EXT_SEL                      0x0007
    #define     B16pll_ctrl_FBCLK_EXT_SEL                      0x0006
    #define   LSb32pll_ctrl_FBCLK_EXT_SEL                         28
    #define   LSb16pll_ctrl_FBCLK_EXT_SEL                         12
    #define       bpll_ctrl_FBCLK_EXT_SEL                      1
    #define   MSK32pll_ctrl_FBCLK_EXT_SEL                         0x10000000

    #define     RA_pll_ctrl2                                   0x0008

    #define     BA_pll_ctrl_FBCDLY                             0x0008
    #define     B16pll_ctrl_FBCDLY                             0x0008
    #define   LSb32pll_ctrl_FBCDLY                                0
    #define   LSb16pll_ctrl_FBCDLY                                0
    #define       bpll_ctrl_FBCDLY                             6
    #define   MSK32pll_ctrl_FBCDLY                                0x0000003F

    #define     BA_pll_ctrl_FD                                 0x0008
    #define     B16pll_ctrl_FD                                 0x0008
    #define   LSb32pll_ctrl_FD                                    6
    #define   LSb16pll_ctrl_FD                                    6
    #define       bpll_ctrl_FD                                 3
    #define   MSK32pll_ctrl_FD                                    0x000001C0

    #define     BA_pll_ctrl_INTPI                              0x0009
    #define     B16pll_ctrl_INTPI                              0x0008
    #define   LSb32pll_ctrl_INTPI                                 9
    #define   LSb16pll_ctrl_INTPI                                 9
    #define       bpll_ctrl_INTPI                              4
    #define   MSK32pll_ctrl_INTPI                                 0x00001E00

    #define     BA_pll_ctrl_INTPR                              0x0009
    #define     B16pll_ctrl_INTPR                              0x0008
    #define   LSb32pll_ctrl_INTPR                                 13
    #define   LSb16pll_ctrl_INTPR                                 13
    #define       bpll_ctrl_INTPR                              3
    #define   MSK32pll_ctrl_INTPR                                 0x0000E000

    #define     BA_pll_ctrl_PI_EN                              0x000A
    #define     B16pll_ctrl_PI_EN                              0x000A
    #define   LSb32pll_ctrl_PI_EN                                 16
    #define   LSb16pll_ctrl_PI_EN                                 0
    #define       bpll_ctrl_PI_EN                              1
    #define   MSK32pll_ctrl_PI_EN                                 0x00010000

    #define     BA_pll_ctrl_PI_LOOP_MODE                       0x000A
    #define     B16pll_ctrl_PI_LOOP_MODE                       0x000A
    #define   LSb32pll_ctrl_PI_LOOP_MODE                          17
    #define   LSb16pll_ctrl_PI_LOOP_MODE                          1
    #define       bpll_ctrl_PI_LOOP_MODE                       1
    #define   MSK32pll_ctrl_PI_LOOP_MODE                          0x00020000

    #define     BA_pll_ctrl_CLK_DET_EN                         0x000A
    #define     B16pll_ctrl_CLK_DET_EN                         0x000A
    #define   LSb32pll_ctrl_CLK_DET_EN                            18
    #define   LSb16pll_ctrl_CLK_DET_EN                            2
    #define       bpll_ctrl_CLK_DET_EN                         1
    #define   MSK32pll_ctrl_CLK_DET_EN                            0x00040000

    #define     BA_pll_ctrl_RESET_PI                           0x000A
    #define     B16pll_ctrl_RESET_PI                           0x000A
    #define   LSb32pll_ctrl_RESET_PI                              19
    #define   LSb16pll_ctrl_RESET_PI                              3
    #define       bpll_ctrl_RESET_PI                           1
    #define   MSK32pll_ctrl_RESET_PI                              0x00080000

    #define     BA_pll_ctrl_RESET_SSC                          0x000A
    #define     B16pll_ctrl_RESET_SSC                          0x000A
    #define   LSb32pll_ctrl_RESET_SSC                             20
    #define   LSb16pll_ctrl_RESET_SSC                             4
    #define       bpll_ctrl_RESET_SSC                          1
    #define   MSK32pll_ctrl_RESET_SSC                             0x00100000

    #define     BA_pll_ctrl_FREQ_OFFSET_EN                     0x000A
    #define     B16pll_ctrl_FREQ_OFFSET_EN                     0x000A
    #define   LSb32pll_ctrl_FREQ_OFFSET_EN                        21
    #define   LSb16pll_ctrl_FREQ_OFFSET_EN                        5
    #define       bpll_ctrl_FREQ_OFFSET_EN                     1
    #define   MSK32pll_ctrl_FREQ_OFFSET_EN                        0x00200000

    #define     RA_pll_ctrl3                                   0x000C

    #define     BA_pll_ctrl_FREQ_OFFSET                        0x000C
    #define     B16pll_ctrl_FREQ_OFFSET                        0x000C
    #define   LSb32pll_ctrl_FREQ_OFFSET                           0
    #define   LSb16pll_ctrl_FREQ_OFFSET                           0
    #define       bpll_ctrl_FREQ_OFFSET                        17
    #define   MSK32pll_ctrl_FREQ_OFFSET                           0x0001FFFF

    #define     BA_pll_ctrl_FREQ_OFFSET_MODE_SELECTION         0x000E
    #define     B16pll_ctrl_FREQ_OFFSET_MODE_SELECTION         0x000E
    #define   LSb32pll_ctrl_FREQ_OFFSET_MODE_SELECTION            17
    #define   LSb16pll_ctrl_FREQ_OFFSET_MODE_SELECTION            1
    #define       bpll_ctrl_FREQ_OFFSET_MODE_SELECTION         1
    #define   MSK32pll_ctrl_FREQ_OFFSET_MODE_SELECTION            0x00020000

    #define     BA_pll_ctrl_FREQ_OFFSET_VALID                  0x000E
    #define     B16pll_ctrl_FREQ_OFFSET_VALID                  0x000E
    #define   LSb32pll_ctrl_FREQ_OFFSET_VALID                     18
    #define   LSb16pll_ctrl_FREQ_OFFSET_VALID                     2
    #define       bpll_ctrl_FREQ_OFFSET_VALID                  1
    #define   MSK32pll_ctrl_FREQ_OFFSET_VALID                     0x00040000

    #define     BA_pll_ctrl_SSC_CLK_EN                         0x000E
    #define     B16pll_ctrl_SSC_CLK_EN                         0x000E
    #define   LSb32pll_ctrl_SSC_CLK_EN                            19
    #define   LSb16pll_ctrl_SSC_CLK_EN                            3
    #define       bpll_ctrl_SSC_CLK_EN                         1
    #define   MSK32pll_ctrl_SSC_CLK_EN                            0x00080000

    #define     BA_pll_ctrl_SSC_MODE                           0x000E
    #define     B16pll_ctrl_SSC_MODE                           0x000E
    #define   LSb32pll_ctrl_SSC_MODE                              20
    #define   LSb16pll_ctrl_SSC_MODE                              4
    #define       bpll_ctrl_SSC_MODE                           1
    #define   MSK32pll_ctrl_SSC_MODE                              0x00100000

    #define     RA_pll_ctrl4                                   0x0010

    #define     BA_pll_ctrl_SSC_FREQ_DIV                       0x0010
    #define     B16pll_ctrl_SSC_FREQ_DIV                       0x0010
    #define   LSb32pll_ctrl_SSC_FREQ_DIV                          0
    #define   LSb16pll_ctrl_SSC_FREQ_DIV                          0
    #define       bpll_ctrl_SSC_FREQ_DIV                       16
    #define   MSK32pll_ctrl_SSC_FREQ_DIV                          0x0000FFFF

    #define     BA_pll_ctrl_SSC_RNGE                           0x0012
    #define     B16pll_ctrl_SSC_RNGE                           0x0012
    #define   LSb32pll_ctrl_SSC_RNGE                              16
    #define   LSb16pll_ctrl_SSC_RNGE                              0
    #define       bpll_ctrl_SSC_RNGE                           11
    #define   MSK32pll_ctrl_SSC_RNGE                              0x07FF0000

    #define     BA_pll_ctrl_TEST_ANA                           0x0013
    #define     B16pll_ctrl_TEST_ANA                           0x0012
    #define   LSb32pll_ctrl_TEST_ANA                              27
    #define   LSb16pll_ctrl_TEST_ANA                              11
    #define       bpll_ctrl_TEST_ANA                           4
    #define   MSK32pll_ctrl_TEST_ANA                              0x78000000

    #define     RA_pll_ctrl5                                   0x0014

    #define     BA_pll_ctrl_RESERVE_IN                         0x0014
    #define     B16pll_ctrl_RESERVE_IN                         0x0014
    #define   LSb32pll_ctrl_RESERVE_IN                            0
    #define   LSb16pll_ctrl_RESERVE_IN                            0
    #define       bpll_ctrl_RESERVE_IN                         8
    #define   MSK32pll_ctrl_RESERVE_IN                            0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_pll_status                                  0x0018

    #define     BA_pll_status_PLL_LOCK                         0x0018
    #define     B16pll_status_PLL_LOCK                         0x0018
    #define   LSb32pll_status_PLL_LOCK                            0
    #define   LSb16pll_status_PLL_LOCK                            0
    #define       bpll_status_PLL_LOCK                         1
    #define   MSK32pll_status_PLL_LOCK                            0x00000001

    #define     BA_pll_status_CLK_CFMOD                        0x0018
    #define     B16pll_status_CLK_CFMOD                        0x0018
    #define   LSb32pll_status_CLK_CFMOD                           1
    #define   LSb16pll_status_CLK_CFMOD                           1
    #define       bpll_status_CLK_CFMOD                        1
    #define   MSK32pll_status_CLK_CFMOD                           0x00000002

    #define     BA_pll_status_CLK_FMOD                         0x0018
    #define     B16pll_status_CLK_FMOD                         0x0018
    #define   LSb32pll_status_CLK_FMOD                            2
    #define   LSb16pll_status_CLK_FMOD                            2
    #define       bpll_status_CLK_FMOD                         1
    #define   MSK32pll_status_CLK_FMOD                            0x00000004

    #define     BA_pll_status_RESERVE_OUT                      0x0018
    #define     B16pll_status_RESERVE_OUT                      0x0018
    #define   LSb32pll_status_RESERVE_OUT                         3
    #define   LSb16pll_status_RESERVE_OUT                         3
    #define       bpll_status_RESERVE_OUT                      8
    #define   MSK32pll_status_RESERVE_OUT                         0x000007F8
    ///////////////////////////////////////////////////////////

    typedef struct SIE_pll {
    ///////////////////////////////////////////////////////////
    #define   GET32pll_ctrl_PU(r32)                            _BFGET_(r32, 0, 0)
    #define   SET32pll_ctrl_PU(r32,v)                          _BFSET_(r32, 0, 0,v)
    #define   GET16pll_ctrl_PU(r16)                            _BFGET_(r16, 0, 0)
    #define   SET16pll_ctrl_PU(r16,v)                          _BFSET_(r16, 0, 0,v)

    #define   GET32pll_ctrl_RESET(r32)                         _BFGET_(r32, 1, 1)
    #define   SET32pll_ctrl_RESET(r32,v)                       _BFSET_(r32, 1, 1,v)
    #define   GET16pll_ctrl_RESET(r16)                         _BFGET_(r16, 1, 1)
    #define   SET16pll_ctrl_RESET(r16,v)                       _BFSET_(r16, 1, 1,v)

    #define   GET32pll_ctrl_AVDD1815_SEL(r32)                  _BFGET_(r32, 2, 2)
    #define   SET32pll_ctrl_AVDD1815_SEL(r32,v)                _BFSET_(r32, 2, 2,v)
    #define   GET16pll_ctrl_AVDD1815_SEL(r16)                  _BFGET_(r16, 2, 2)
    #define   SET16pll_ctrl_AVDD1815_SEL(r16,v)                _BFSET_(r16, 2, 2,v)

    #define   GET32pll_ctrl_REFDIV(r32)                        _BFGET_(r32,11, 3)
    #define   SET32pll_ctrl_REFDIV(r32,v)                      _BFSET_(r32,11, 3,v)
    #define   GET16pll_ctrl_REFDIV(r16)                        _BFGET_(r16,11, 3)
    #define   SET16pll_ctrl_REFDIV(r16,v)                      _BFSET_(r16,11, 3,v)

    #define   GET32pll_ctrl_FBDIV(r32)                         _BFGET_(r32,20,12)
    #define   SET32pll_ctrl_FBDIV(r32,v)                       _BFSET_(r32,20,12,v)

    #define   GET32pll_ctrl_VDDM(r32)                          _BFGET_(r32,22,21)
    #define   SET32pll_ctrl_VDDM(r32,v)                        _BFSET_(r32,22,21,v)
    #define   GET16pll_ctrl_VDDM(r16)                          _BFGET_(r16, 6, 5)
    #define   SET16pll_ctrl_VDDM(r16,v)                        _BFSET_(r16, 6, 5,v)

    #define   GET32pll_ctrl_VDDL(r32)                          _BFGET_(r32,25,23)
    #define   SET32pll_ctrl_VDDL(r32,v)                        _BFSET_(r32,25,23,v)
    #define   GET16pll_ctrl_VDDL(r16)                          _BFGET_(r16, 9, 7)
    #define   SET16pll_ctrl_VDDL(r16,v)                        _BFSET_(r16, 9, 7,v)

    #define   GET32pll_ctrl_ICP(r32)                           _BFGET_(r32,29,26)
    #define   SET32pll_ctrl_ICP(r32,v)                         _BFSET_(r32,29,26,v)
    #define   GET16pll_ctrl_ICP(r16)                           _BFGET_(r16,13,10)
    #define   SET16pll_ctrl_ICP(r16,v)                         _BFSET_(r16,13,10,v)

    #define   GET32pll_ctrl_PLL_BW_SEL(r32)                    _BFGET_(r32,30,30)
    #define   SET32pll_ctrl_PLL_BW_SEL(r32,v)                  _BFSET_(r32,30,30,v)
    #define   GET16pll_ctrl_PLL_BW_SEL(r16)                    _BFGET_(r16,14,14)
    #define   SET16pll_ctrl_PLL_BW_SEL(r16,v)                  _BFSET_(r16,14,14,v)

    #define     w32pll_ctrl                                    {\
            UNSG32 uctrl_PU                                    :  1;\
            UNSG32 uctrl_RESET                                 :  1;\
            UNSG32 uctrl_AVDD1815_SEL                          :  1;\
            UNSG32 uctrl_REFDIV                                :  9;\
            UNSG32 uctrl_FBDIV                                 :  9;\
            UNSG32 uctrl_VDDM                                  :  2;\
            UNSG32 uctrl_VDDL                                  :  3;\
            UNSG32 uctrl_ICP                                   :  4;\
            UNSG32 uctrl_PLL_BW_SEL                            :  1;\
            UNSG32 RSVDx0_b31                                  :  1;\
          }
    union { UNSG32 u32pll_ctrl;
            struct w32pll_ctrl;
          };
    #define   GET32pll_ctrl_KVCO(r32)                          _BFGET_(r32, 3, 0)
    #define   SET32pll_ctrl_KVCO(r32,v)                        _BFSET_(r32, 3, 0,v)
    #define   GET16pll_ctrl_KVCO(r16)                          _BFGET_(r16, 3, 0)
    #define   SET16pll_ctrl_KVCO(r16,v)                        _BFSET_(r16, 3, 0,v)

    #define   GET32pll_ctrl_CTUNE(r32)                         _BFGET_(r32, 5, 4)
    #define   SET32pll_ctrl_CTUNE(r32,v)                       _BFSET_(r32, 5, 4,v)
    #define   GET16pll_ctrl_CTUNE(r16)                         _BFGET_(r16, 5, 4)
    #define   SET16pll_ctrl_CTUNE(r16,v)                       _BFSET_(r16, 5, 4,v)

    #define   GET32pll_ctrl_CLKOUT_DIFF_DIV_SEL(r32)           _BFGET_(r32,14, 6)
    #define   SET32pll_ctrl_CLKOUT_DIFF_DIV_SEL(r32,v)         _BFSET_(r32,14, 6,v)
    #define   GET16pll_ctrl_CLKOUT_DIFF_DIV_SEL(r16)           _BFGET_(r16,14, 6)
    #define   SET16pll_ctrl_CLKOUT_DIFF_DIV_SEL(r16,v)         _BFSET_(r16,14, 6,v)

    #define   GET32pll_ctrl_CLKOUT_SE_DIV_SEL(r32)             _BFGET_(r32,23,15)
    #define   SET32pll_ctrl_CLKOUT_SE_DIV_SEL(r32,v)           _BFSET_(r32,23,15,v)

    #define   GET32pll_ctrl_CLKOUT_SOURCE_SEL(r32)             _BFGET_(r32,24,24)
    #define   SET32pll_ctrl_CLKOUT_SOURCE_SEL(r32,v)           _BFSET_(r32,24,24,v)
    #define   GET16pll_ctrl_CLKOUT_SOURCE_SEL(r16)             _BFGET_(r16, 8, 8)
    #define   SET16pll_ctrl_CLKOUT_SOURCE_SEL(r16,v)           _BFSET_(r16, 8, 8,v)

    #define   GET32pll_ctrl_CLKOUT_DIFF_EN(r32)                _BFGET_(r32,25,25)
    #define   SET32pll_ctrl_CLKOUT_DIFF_EN(r32,v)              _BFSET_(r32,25,25,v)
    #define   GET16pll_ctrl_CLKOUT_DIFF_EN(r16)                _BFGET_(r16, 9, 9)
    #define   SET16pll_ctrl_CLKOUT_DIFF_EN(r16,v)              _BFSET_(r16, 9, 9,v)

    #define   GET32pll_ctrl_BYPASS_EN(r32)                     _BFGET_(r32,26,26)
    #define   SET32pll_ctrl_BYPASS_EN(r32,v)                   _BFSET_(r32,26,26,v)
    #define   GET16pll_ctrl_BYPASS_EN(r16)                     _BFGET_(r16,10,10)
    #define   SET16pll_ctrl_BYPASS_EN(r16,v)                   _BFSET_(r16,10,10,v)

    #define   GET32pll_ctrl_CLKOUT_SE_GATING_EN(r32)           _BFGET_(r32,27,27)
    #define   SET32pll_ctrl_CLKOUT_SE_GATING_EN(r32,v)         _BFSET_(r32,27,27,v)
    #define   GET16pll_ctrl_CLKOUT_SE_GATING_EN(r16)           _BFGET_(r16,11,11)
    #define   SET16pll_ctrl_CLKOUT_SE_GATING_EN(r16,v)         _BFSET_(r16,11,11,v)

    #define   GET32pll_ctrl_FBCLK_EXT_SEL(r32)                 _BFGET_(r32,28,28)
    #define   SET32pll_ctrl_FBCLK_EXT_SEL(r32,v)               _BFSET_(r32,28,28,v)
    #define   GET16pll_ctrl_FBCLK_EXT_SEL(r16)                 _BFGET_(r16,12,12)
    #define   SET16pll_ctrl_FBCLK_EXT_SEL(r16,v)               _BFSET_(r16,12,12,v)

    #define     w32pll_ctrl1                                   {\
            UNSG32 uctrl_KVCO                                  :  4;\
            UNSG32 uctrl_CTUNE                                 :  2;\
            UNSG32 uctrl_CLKOUT_DIFF_DIV_SEL                   :  9;\
            UNSG32 uctrl_CLKOUT_SE_DIV_SEL                     :  9;\
            UNSG32 uctrl_CLKOUT_SOURCE_SEL                     :  1;\
            UNSG32 uctrl_CLKOUT_DIFF_EN                        :  1;\
            UNSG32 uctrl_BYPASS_EN                             :  1;\
            UNSG32 uctrl_CLKOUT_SE_GATING_EN                   :  1;\
            UNSG32 uctrl_FBCLK_EXT_SEL                         :  1;\
            UNSG32 RSVDx4_b29                                  :  3;\
          }
    union { UNSG32 u32pll_ctrl1;
            struct w32pll_ctrl1;
          };
    #define   GET32pll_ctrl_FBCDLY(r32)                        _BFGET_(r32, 5, 0)
    #define   SET32pll_ctrl_FBCDLY(r32,v)                      _BFSET_(r32, 5, 0,v)
    #define   GET16pll_ctrl_FBCDLY(r16)                        _BFGET_(r16, 5, 0)
    #define   SET16pll_ctrl_FBCDLY(r16,v)                      _BFSET_(r16, 5, 0,v)

    #define   GET32pll_ctrl_FD(r32)                            _BFGET_(r32, 8, 6)
    #define   SET32pll_ctrl_FD(r32,v)                          _BFSET_(r32, 8, 6,v)
    #define   GET16pll_ctrl_FD(r16)                            _BFGET_(r16, 8, 6)
    #define   SET16pll_ctrl_FD(r16,v)                          _BFSET_(r16, 8, 6,v)

    #define   GET32pll_ctrl_INTPI(r32)                         _BFGET_(r32,12, 9)
    #define   SET32pll_ctrl_INTPI(r32,v)                       _BFSET_(r32,12, 9,v)
    #define   GET16pll_ctrl_INTPI(r16)                         _BFGET_(r16,12, 9)
    #define   SET16pll_ctrl_INTPI(r16,v)                       _BFSET_(r16,12, 9,v)

    #define   GET32pll_ctrl_INTPR(r32)                         _BFGET_(r32,15,13)
    #define   SET32pll_ctrl_INTPR(r32,v)                       _BFSET_(r32,15,13,v)
    #define   GET16pll_ctrl_INTPR(r16)                         _BFGET_(r16,15,13)
    #define   SET16pll_ctrl_INTPR(r16,v)                       _BFSET_(r16,15,13,v)

    #define   GET32pll_ctrl_PI_EN(r32)                         _BFGET_(r32,16,16)
    #define   SET32pll_ctrl_PI_EN(r32,v)                       _BFSET_(r32,16,16,v)
    #define   GET16pll_ctrl_PI_EN(r16)                         _BFGET_(r16, 0, 0)
    #define   SET16pll_ctrl_PI_EN(r16,v)                       _BFSET_(r16, 0, 0,v)

    #define   GET32pll_ctrl_PI_LOOP_MODE(r32)                  _BFGET_(r32,17,17)
    #define   SET32pll_ctrl_PI_LOOP_MODE(r32,v)                _BFSET_(r32,17,17,v)
    #define   GET16pll_ctrl_PI_LOOP_MODE(r16)                  _BFGET_(r16, 1, 1)
    #define   SET16pll_ctrl_PI_LOOP_MODE(r16,v)                _BFSET_(r16, 1, 1,v)

    #define   GET32pll_ctrl_CLK_DET_EN(r32)                    _BFGET_(r32,18,18)
    #define   SET32pll_ctrl_CLK_DET_EN(r32,v)                  _BFSET_(r32,18,18,v)
    #define   GET16pll_ctrl_CLK_DET_EN(r16)                    _BFGET_(r16, 2, 2)
    #define   SET16pll_ctrl_CLK_DET_EN(r16,v)                  _BFSET_(r16, 2, 2,v)

    #define   GET32pll_ctrl_RESET_PI(r32)                      _BFGET_(r32,19,19)
    #define   SET32pll_ctrl_RESET_PI(r32,v)                    _BFSET_(r32,19,19,v)
    #define   GET16pll_ctrl_RESET_PI(r16)                      _BFGET_(r16, 3, 3)
    #define   SET16pll_ctrl_RESET_PI(r16,v)                    _BFSET_(r16, 3, 3,v)

    #define   GET32pll_ctrl_RESET_SSC(r32)                     _BFGET_(r32,20,20)
    #define   SET32pll_ctrl_RESET_SSC(r32,v)                   _BFSET_(r32,20,20,v)
    #define   GET16pll_ctrl_RESET_SSC(r16)                     _BFGET_(r16, 4, 4)
    #define   SET16pll_ctrl_RESET_SSC(r16,v)                   _BFSET_(r16, 4, 4,v)

    #define   GET32pll_ctrl_FREQ_OFFSET_EN(r32)                _BFGET_(r32,21,21)
    #define   SET32pll_ctrl_FREQ_OFFSET_EN(r32,v)              _BFSET_(r32,21,21,v)
    #define   GET16pll_ctrl_FREQ_OFFSET_EN(r16)                _BFGET_(r16, 5, 5)
    #define   SET16pll_ctrl_FREQ_OFFSET_EN(r16,v)              _BFSET_(r16, 5, 5,v)

    #define     w32pll_ctrl2                                   {\
            UNSG32 uctrl_FBCDLY                                :  6;\
            UNSG32 uctrl_FD                                    :  3;\
            UNSG32 uctrl_INTPI                                 :  4;\
            UNSG32 uctrl_INTPR                                 :  3;\
            UNSG32 uctrl_PI_EN                                 :  1;\
            UNSG32 uctrl_PI_LOOP_MODE                          :  1;\
            UNSG32 uctrl_CLK_DET_EN                            :  1;\
            UNSG32 uctrl_RESET_PI                              :  1;\
            UNSG32 uctrl_RESET_SSC                             :  1;\
            UNSG32 uctrl_FREQ_OFFSET_EN                        :  1;\
            UNSG32 RSVDx8_b22                                  : 10;\
          }
    union { UNSG32 u32pll_ctrl2;
            struct w32pll_ctrl2;
          };
    #define   GET32pll_ctrl_FREQ_OFFSET(r32)                   _BFGET_(r32,16, 0)
    #define   SET32pll_ctrl_FREQ_OFFSET(r32,v)                 _BFSET_(r32,16, 0,v)

    #define   GET32pll_ctrl_FREQ_OFFSET_MODE_SELECTION(r32)    _BFGET_(r32,17,17)
    #define   SET32pll_ctrl_FREQ_OFFSET_MODE_SELECTION(r32,v)  _BFSET_(r32,17,17,v)
    #define   GET16pll_ctrl_FREQ_OFFSET_MODE_SELECTION(r16)    _BFGET_(r16, 1, 1)
    #define   SET16pll_ctrl_FREQ_OFFSET_MODE_SELECTION(r16,v)  _BFSET_(r16, 1, 1,v)

    #define   GET32pll_ctrl_FREQ_OFFSET_VALID(r32)             _BFGET_(r32,18,18)
    #define   SET32pll_ctrl_FREQ_OFFSET_VALID(r32,v)           _BFSET_(r32,18,18,v)
    #define   GET16pll_ctrl_FREQ_OFFSET_VALID(r16)             _BFGET_(r16, 2, 2)
    #define   SET16pll_ctrl_FREQ_OFFSET_VALID(r16,v)           _BFSET_(r16, 2, 2,v)

    #define   GET32pll_ctrl_SSC_CLK_EN(r32)                    _BFGET_(r32,19,19)
    #define   SET32pll_ctrl_SSC_CLK_EN(r32,v)                  _BFSET_(r32,19,19,v)
    #define   GET16pll_ctrl_SSC_CLK_EN(r16)                    _BFGET_(r16, 3, 3)
    #define   SET16pll_ctrl_SSC_CLK_EN(r16,v)                  _BFSET_(r16, 3, 3,v)

    #define   GET32pll_ctrl_SSC_MODE(r32)                      _BFGET_(r32,20,20)
    #define   SET32pll_ctrl_SSC_MODE(r32,v)                    _BFSET_(r32,20,20,v)
    #define   GET16pll_ctrl_SSC_MODE(r16)                      _BFGET_(r16, 4, 4)
    #define   SET16pll_ctrl_SSC_MODE(r16,v)                    _BFSET_(r16, 4, 4,v)

    #define     w32pll_ctrl3                                   {\
            UNSG32 uctrl_FREQ_OFFSET                           : 17;\
            UNSG32 uctrl_FREQ_OFFSET_MODE_SELECTION            :  1;\
            UNSG32 uctrl_FREQ_OFFSET_VALID                     :  1;\
            UNSG32 uctrl_SSC_CLK_EN                            :  1;\
            UNSG32 uctrl_SSC_MODE                              :  1;\
            UNSG32 RSVDxC_b21                                  : 11;\
          }
    union { UNSG32 u32pll_ctrl3;
            struct w32pll_ctrl3;
          };
    #define   GET32pll_ctrl_SSC_FREQ_DIV(r32)                  _BFGET_(r32,15, 0)
    #define   SET32pll_ctrl_SSC_FREQ_DIV(r32,v)                _BFSET_(r32,15, 0,v)
    #define   GET16pll_ctrl_SSC_FREQ_DIV(r16)                  _BFGET_(r16,15, 0)
    #define   SET16pll_ctrl_SSC_FREQ_DIV(r16,v)                _BFSET_(r16,15, 0,v)

    #define   GET32pll_ctrl_SSC_RNGE(r32)                      _BFGET_(r32,26,16)
    #define   SET32pll_ctrl_SSC_RNGE(r32,v)                    _BFSET_(r32,26,16,v)
    #define   GET16pll_ctrl_SSC_RNGE(r16)                      _BFGET_(r16,10, 0)
    #define   SET16pll_ctrl_SSC_RNGE(r16,v)                    _BFSET_(r16,10, 0,v)

    #define   GET32pll_ctrl_TEST_ANA(r32)                      _BFGET_(r32,30,27)
    #define   SET32pll_ctrl_TEST_ANA(r32,v)                    _BFSET_(r32,30,27,v)
    #define   GET16pll_ctrl_TEST_ANA(r16)                      _BFGET_(r16,14,11)
    #define   SET16pll_ctrl_TEST_ANA(r16,v)                    _BFSET_(r16,14,11,v)

    #define     w32pll_ctrl4                                   {\
            UNSG32 uctrl_SSC_FREQ_DIV                          : 16;\
            UNSG32 uctrl_SSC_RNGE                              : 11;\
            UNSG32 uctrl_TEST_ANA                              :  4;\
            UNSG32 RSVDx10_b31                                 :  1;\
          }
    union { UNSG32 u32pll_ctrl4;
            struct w32pll_ctrl4;
          };
    #define   GET32pll_ctrl_RESERVE_IN(r32)                    _BFGET_(r32, 7, 0)
    #define   SET32pll_ctrl_RESERVE_IN(r32,v)                  _BFSET_(r32, 7, 0,v)
    #define   GET16pll_ctrl_RESERVE_IN(r16)                    _BFGET_(r16, 7, 0)
    #define   SET16pll_ctrl_RESERVE_IN(r16,v)                  _BFSET_(r16, 7, 0,v)

    #define     w32pll_ctrl5                                   {\
            UNSG32 uctrl_RESERVE_IN                            :  8;\
            UNSG32 RSVDx14_b8                                  : 24;\
          }
    union { UNSG32 u32pll_ctrl5;
            struct w32pll_ctrl5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32pll_status_PLL_LOCK(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32pll_status_PLL_LOCK(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16pll_status_PLL_LOCK(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16pll_status_PLL_LOCK(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32pll_status_CLK_CFMOD(r32)                   _BFGET_(r32, 1, 1)
    #define   SET32pll_status_CLK_CFMOD(r32,v)                 _BFSET_(r32, 1, 1,v)
    #define   GET16pll_status_CLK_CFMOD(r16)                   _BFGET_(r16, 1, 1)
    #define   SET16pll_status_CLK_CFMOD(r16,v)                 _BFSET_(r16, 1, 1,v)

    #define   GET32pll_status_CLK_FMOD(r32)                    _BFGET_(r32, 2, 2)
    #define   SET32pll_status_CLK_FMOD(r32,v)                  _BFSET_(r32, 2, 2,v)
    #define   GET16pll_status_CLK_FMOD(r16)                    _BFGET_(r16, 2, 2)
    #define   SET16pll_status_CLK_FMOD(r16,v)                  _BFSET_(r16, 2, 2,v)

    #define   GET32pll_status_RESERVE_OUT(r32)                 _BFGET_(r32,10, 3)
    #define   SET32pll_status_RESERVE_OUT(r32,v)               _BFSET_(r32,10, 3,v)
    #define   GET16pll_status_RESERVE_OUT(r16)                 _BFGET_(r16,10, 3)
    #define   SET16pll_status_RESERVE_OUT(r16,v)               _BFSET_(r16,10, 3,v)

    #define     w32pll_status                                  {\
            UNSG32 ustatus_PLL_LOCK                            :  1;\
            UNSG32 ustatus_CLK_CFMOD                           :  1;\
            UNSG32 ustatus_CLK_FMOD                            :  1;\
            UNSG32 ustatus_RESERVE_OUT                         :  8;\
            UNSG32 RSVDx18_b11                                 : 21;\
          }
    union { UNSG32 u32pll_status;
            struct w32pll_status;
          };
    ///////////////////////////////////////////////////////////
    } SIE_pll;

    typedef union  T32pll_ctrl
          { UNSG32 u32;
            struct w32pll_ctrl;
                 } T32pll_ctrl;
    typedef union  T32pll_ctrl1
          { UNSG32 u32;
            struct w32pll_ctrl1;
                 } T32pll_ctrl1;
    typedef union  T32pll_ctrl2
          { UNSG32 u32;
            struct w32pll_ctrl2;
                 } T32pll_ctrl2;
    typedef union  T32pll_ctrl3
          { UNSG32 u32;
            struct w32pll_ctrl3;
                 } T32pll_ctrl3;
    typedef union  T32pll_ctrl4
          { UNSG32 u32;
            struct w32pll_ctrl4;
                 } T32pll_ctrl4;
    typedef union  T32pll_ctrl5
          { UNSG32 u32;
            struct w32pll_ctrl5;
                 } T32pll_ctrl5;
    typedef union  T32pll_status
          { UNSG32 u32;
            struct w32pll_status;
                 } T32pll_status;
    ///////////////////////////////////////////////////////////

    typedef union  Tpll_ctrl
          { UNSG32 u32[6];
            struct {
            struct w32pll_ctrl;
            struct w32pll_ctrl1;
            struct w32pll_ctrl2;
            struct w32pll_ctrl3;
            struct w32pll_ctrl4;
            struct w32pll_ctrl5;
                   };
                 } Tpll_ctrl;
    typedef union  Tpll_status
          { UNSG32 u32[1];
            struct {
            struct w32pll_status;
                   };
                 } Tpll_status;

    ///////////////////////////////////////////////////////////
     SIGN32 pll_drvrd(SIE_pll *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 pll_drvwr(SIE_pll *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void pll_reset(SIE_pll *p);
     SIGN32 pll_cmp  (SIE_pll *p, SIE_pll *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define pll_check(p,pie,pfx,hLOG) pll_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define pll_print(p,    pfx,hLOG) pll_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: pll
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE pwrOff                                   (4,4)
///     ###
///     * Register for the Power domain which is OFF by default
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl                 (P-)
///               ###
///               * Power Domain Control Register
///               ###
///               %unsigned 1  iso_eN                    0x0
///                                    : enable                    0x0
///                                    : disable                   0x1
///                                                 ###
///                                                 * Isolation control bit. Active low
///                                                 * 0 : Isolation is enabled
///                                                 * 1 : Isolation is disabled (default)
///                                                 ###
///               %unsigned 2  pwrSwitchCtrl             0x0
///                                    : PWROFF                    0x0
///                                    : PWRON                     0x3
///                                                 ###
///                                                 * Power Switch control
///                                                 * Bit 1 : SLP1B
///                                                 * Bit 0 : SLP2B
///                                                 * SLP1B SLP2B
///                                                 * 0               X               Switch is turned off
///                                                 * 1               0               PMOS switch in current mirror configuration. Constant current charging to limit in-rush current
///                                                 * 1               1               PMOS switch is fully turned on to reduce Ron
///                                                 ###
///               %unsigned 1  pwrDomainRstN             0x0
///                                    : enable                    0x0
///                                    : disable                   0x1
///                                                 ###
///                                                 * Power Domain Reset. Active low.
///                                                 * 0 : Reset the power domain
///                                                 * 1:   De-assert the reset for the power domain
///                                                 ###
///               %%        28         # Stuffing bits...
///     @ 0x00004 status               (R-)
///               %unsigned 2  pwrStatus                 
///                                    ###
///                                    * Power domain Status output from the power domain module
///                                    * Bit 1 : SLP1B
///                                    * Bit 0 : SLP2B
///                                    * SLP1B SLP2B
///                                    * 0               X               Switch is turned off
///                                    * 1               0               PMOS switch in current mirror configuration. Constant current charging to limit in-rush current
///                                    * 1               1               PMOS switch is fully turned on to reduce Ron
///                                    ###
///               %%        30         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:       6b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_pwrOff
#define h_pwrOff (){}

    #define     RA_pwrOff_ctrl                                 0x0000

    #define     BA_pwrOff_ctrl_iso_eN                          0x0000
    #define     B16pwrOff_ctrl_iso_eN                          0x0000
    #define   LSb32pwrOff_ctrl_iso_eN                             0
    #define   LSb16pwrOff_ctrl_iso_eN                             0
    #define       bpwrOff_ctrl_iso_eN                          1
    #define   MSK32pwrOff_ctrl_iso_eN                             0x00000001
    #define        pwrOff_ctrl_iso_eN_enable                                0x0
    #define        pwrOff_ctrl_iso_eN_disable                               0x1

    #define     BA_pwrOff_ctrl_pwrSwitchCtrl                   0x0000
    #define     B16pwrOff_ctrl_pwrSwitchCtrl                   0x0000
    #define   LSb32pwrOff_ctrl_pwrSwitchCtrl                      1
    #define   LSb16pwrOff_ctrl_pwrSwitchCtrl                      1
    #define       bpwrOff_ctrl_pwrSwitchCtrl                   2
    #define   MSK32pwrOff_ctrl_pwrSwitchCtrl                      0x00000006
    #define        pwrOff_ctrl_pwrSwitchCtrl_PWROFF                         0x0
    #define        pwrOff_ctrl_pwrSwitchCtrl_PWRON                          0x3

    #define     BA_pwrOff_ctrl_pwrDomainRstN                   0x0000
    #define     B16pwrOff_ctrl_pwrDomainRstN                   0x0000
    #define   LSb32pwrOff_ctrl_pwrDomainRstN                      3
    #define   LSb16pwrOff_ctrl_pwrDomainRstN                      3
    #define       bpwrOff_ctrl_pwrDomainRstN                   1
    #define   MSK32pwrOff_ctrl_pwrDomainRstN                      0x00000008
    #define        pwrOff_ctrl_pwrDomainRstN_enable                         0x0
    #define        pwrOff_ctrl_pwrDomainRstN_disable                        0x1
    ///////////////////////////////////////////////////////////
    #define     RA_pwrOff_status                               0x0004

    #define     BA_pwrOff_status_pwrStatus                     0x0004
    #define     B16pwrOff_status_pwrStatus                     0x0004
    #define   LSb32pwrOff_status_pwrStatus                        0
    #define   LSb16pwrOff_status_pwrStatus                        0
    #define       bpwrOff_status_pwrStatus                     2
    #define   MSK32pwrOff_status_pwrStatus                        0x00000003
    ///////////////////////////////////////////////////////////

    typedef struct SIE_pwrOff {
    ///////////////////////////////////////////////////////////
    #define   GET32pwrOff_ctrl_iso_eN(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32pwrOff_ctrl_iso_eN(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16pwrOff_ctrl_iso_eN(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16pwrOff_ctrl_iso_eN(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define   GET32pwrOff_ctrl_pwrSwitchCtrl(r32)              _BFGET_(r32, 2, 1)
    #define   SET32pwrOff_ctrl_pwrSwitchCtrl(r32,v)            _BFSET_(r32, 2, 1,v)
    #define   GET16pwrOff_ctrl_pwrSwitchCtrl(r16)              _BFGET_(r16, 2, 1)
    #define   SET16pwrOff_ctrl_pwrSwitchCtrl(r16,v)            _BFSET_(r16, 2, 1,v)

    #define   GET32pwrOff_ctrl_pwrDomainRstN(r32)              _BFGET_(r32, 3, 3)
    #define   SET32pwrOff_ctrl_pwrDomainRstN(r32,v)            _BFSET_(r32, 3, 3,v)
    #define   GET16pwrOff_ctrl_pwrDomainRstN(r16)              _BFGET_(r16, 3, 3)
    #define   SET16pwrOff_ctrl_pwrDomainRstN(r16,v)            _BFSET_(r16, 3, 3,v)

    #define     w32pwrOff_ctrl                                 {\
            UNSG32 uctrl_iso_eN                                :  1;\
            UNSG32 uctrl_pwrSwitchCtrl                         :  2;\
            UNSG32 uctrl_pwrDomainRstN                         :  1;\
            UNSG32 RSVDx0_b4                                   : 28;\
          }
    union { UNSG32 u32pwrOff_ctrl;
            struct w32pwrOff_ctrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32pwrOff_status_pwrStatus(r32)                _BFGET_(r32, 1, 0)
    #define   SET32pwrOff_status_pwrStatus(r32,v)              _BFSET_(r32, 1, 0,v)
    #define   GET16pwrOff_status_pwrStatus(r16)                _BFGET_(r16, 1, 0)
    #define   SET16pwrOff_status_pwrStatus(r16,v)              _BFSET_(r16, 1, 0,v)

    #define     w32pwrOff_status                               {\
            UNSG32 ustatus_pwrStatus                           :  2;\
            UNSG32 RSVDx4_b2                                   : 30;\
          }
    union { UNSG32 u32pwrOff_status;
            struct w32pwrOff_status;
          };
    ///////////////////////////////////////////////////////////
    } SIE_pwrOff;

    typedef union  T32pwrOff_ctrl
          { UNSG32 u32;
            struct w32pwrOff_ctrl;
                 } T32pwrOff_ctrl;
    typedef union  T32pwrOff_status
          { UNSG32 u32;
            struct w32pwrOff_status;
                 } T32pwrOff_status;
    ///////////////////////////////////////////////////////////

    typedef union  TpwrOff_ctrl
          { UNSG32 u32[1];
            struct {
            struct w32pwrOff_ctrl;
                   };
                 } TpwrOff_ctrl;
    typedef union  TpwrOff_status
          { UNSG32 u32[1];
            struct {
            struct w32pwrOff_status;
                   };
                 } TpwrOff_status;

    ///////////////////////////////////////////////////////////
     SIGN32 pwrOff_drvrd(SIE_pwrOff *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 pwrOff_drvwr(SIE_pwrOff *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void pwrOff_reset(SIE_pwrOff *p);
     SIGN32 pwrOff_cmp  (SIE_pwrOff *p, SIE_pwrOff *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define pwrOff_check(p,pie,pfx,hLOG) pwrOff_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define pwrOff_print(p,    pfx,hLOG) pwrOff_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: pwrOff
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE pwrOn                                    (4,4)
///     ###
///     * Register for the Power domain which is ON by default
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl                 (P-)
///               ###
///               * Power Domain Control Register
///               ###
///               %unsigned 1  iso_eN                    0x1
///                                    : enable                    0x0
///                                    : disable                   0x1
///                                                 ###
///                                                 * Isolation control bit. Active low
///                                                 * 0 : Isolation is enabled
///                                                 * 1 : Isolation is disabled (default)
///                                                 ###
///               %unsigned 2  pwrSwitchCtrl             0x3
///                                    ###
///                                    * Power Switch control
///                                    * Bit 1 : SLP1B
///                                    * Bit 0 : SLP2B
///                                    * SLP1B SLP2B
///                                    * 0               X               Switch is turned off
///                                    * 1               0               PMOS switch in current mirror configuration. Constant current charging to limit in-rush current
///                                    * 1               1               PMOS switch is fully turned on to reduce Ron
///                                    ###
///               %unsigned 1  pwrDomainRstN             0x1
///                                    ###
///                                    * Power Domain Reset. Active low.
///                                    * 0 : Reset the power domain
///                                    * 1:   De-assert the reset for the power domain
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00004 status               (R-)
///               %unsigned 2  pwrStatus                 
///                                    ###
///                                    * Power domain Status output from the power domain module
///                                    * Bit 1 : SLP1B
///                                    * Bit 0 : SLP2B
///                                    * SLP1B SLP2B
///                                    * 0               X               Switch is turned off
///                                    * 1               0               PMOS switch in current mirror configuration. Constant current charging to limit in-rush current
///                                    * 1               1               PMOS switch is fully turned on to reduce Ron
///                                    ###
///               %%        30         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:       6b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_pwrOn
#define h_pwrOn (){}

    #define     RA_pwrOn_ctrl                                  0x0000

    #define     BA_pwrOn_ctrl_iso_eN                           0x0000
    #define     B16pwrOn_ctrl_iso_eN                           0x0000
    #define   LSb32pwrOn_ctrl_iso_eN                              0
    #define   LSb16pwrOn_ctrl_iso_eN                              0
    #define       bpwrOn_ctrl_iso_eN                           1
    #define   MSK32pwrOn_ctrl_iso_eN                              0x00000001
    #define        pwrOn_ctrl_iso_eN_enable                                 0x0
    #define        pwrOn_ctrl_iso_eN_disable                                0x1

    #define     BA_pwrOn_ctrl_pwrSwitchCtrl                    0x0000
    #define     B16pwrOn_ctrl_pwrSwitchCtrl                    0x0000
    #define   LSb32pwrOn_ctrl_pwrSwitchCtrl                       1
    #define   LSb16pwrOn_ctrl_pwrSwitchCtrl                       1
    #define       bpwrOn_ctrl_pwrSwitchCtrl                    2
    #define   MSK32pwrOn_ctrl_pwrSwitchCtrl                       0x00000006

    #define     BA_pwrOn_ctrl_pwrDomainRstN                    0x0000
    #define     B16pwrOn_ctrl_pwrDomainRstN                    0x0000
    #define   LSb32pwrOn_ctrl_pwrDomainRstN                       3
    #define   LSb16pwrOn_ctrl_pwrDomainRstN                       3
    #define       bpwrOn_ctrl_pwrDomainRstN                    1
    #define   MSK32pwrOn_ctrl_pwrDomainRstN                       0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_pwrOn_status                                0x0004

    #define     BA_pwrOn_status_pwrStatus                      0x0004
    #define     B16pwrOn_status_pwrStatus                      0x0004
    #define   LSb32pwrOn_status_pwrStatus                         0
    #define   LSb16pwrOn_status_pwrStatus                         0
    #define       bpwrOn_status_pwrStatus                      2
    #define   MSK32pwrOn_status_pwrStatus                         0x00000003
    ///////////////////////////////////////////////////////////

    typedef struct SIE_pwrOn {
    ///////////////////////////////////////////////////////////
    #define   GET32pwrOn_ctrl_iso_eN(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32pwrOn_ctrl_iso_eN(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16pwrOn_ctrl_iso_eN(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16pwrOn_ctrl_iso_eN(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define   GET32pwrOn_ctrl_pwrSwitchCtrl(r32)               _BFGET_(r32, 2, 1)
    #define   SET32pwrOn_ctrl_pwrSwitchCtrl(r32,v)             _BFSET_(r32, 2, 1,v)
    #define   GET16pwrOn_ctrl_pwrSwitchCtrl(r16)               _BFGET_(r16, 2, 1)
    #define   SET16pwrOn_ctrl_pwrSwitchCtrl(r16,v)             _BFSET_(r16, 2, 1,v)

    #define   GET32pwrOn_ctrl_pwrDomainRstN(r32)               _BFGET_(r32, 3, 3)
    #define   SET32pwrOn_ctrl_pwrDomainRstN(r32,v)             _BFSET_(r32, 3, 3,v)
    #define   GET16pwrOn_ctrl_pwrDomainRstN(r16)               _BFGET_(r16, 3, 3)
    #define   SET16pwrOn_ctrl_pwrDomainRstN(r16,v)             _BFSET_(r16, 3, 3,v)

    #define     w32pwrOn_ctrl                                  {\
            UNSG32 uctrl_iso_eN                                :  1;\
            UNSG32 uctrl_pwrSwitchCtrl                         :  2;\
            UNSG32 uctrl_pwrDomainRstN                         :  1;\
            UNSG32 RSVDx0_b4                                   : 28;\
          }
    union { UNSG32 u32pwrOn_ctrl;
            struct w32pwrOn_ctrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32pwrOn_status_pwrStatus(r32)                 _BFGET_(r32, 1, 0)
    #define   SET32pwrOn_status_pwrStatus(r32,v)               _BFSET_(r32, 1, 0,v)
    #define   GET16pwrOn_status_pwrStatus(r16)                 _BFGET_(r16, 1, 0)
    #define   SET16pwrOn_status_pwrStatus(r16,v)               _BFSET_(r16, 1, 0,v)

    #define     w32pwrOn_status                                {\
            UNSG32 ustatus_pwrStatus                           :  2;\
            UNSG32 RSVDx4_b2                                   : 30;\
          }
    union { UNSG32 u32pwrOn_status;
            struct w32pwrOn_status;
          };
    ///////////////////////////////////////////////////////////
    } SIE_pwrOn;

    typedef union  T32pwrOn_ctrl
          { UNSG32 u32;
            struct w32pwrOn_ctrl;
                 } T32pwrOn_ctrl;
    typedef union  T32pwrOn_status
          { UNSG32 u32;
            struct w32pwrOn_status;
                 } T32pwrOn_status;
    ///////////////////////////////////////////////////////////

    typedef union  TpwrOn_ctrl
          { UNSG32 u32[1];
            struct {
            struct w32pwrOn_ctrl;
                   };
                 } TpwrOn_ctrl;
    typedef union  TpwrOn_status
          { UNSG32 u32[1];
            struct {
            struct w32pwrOn_status;
                   };
                 } TpwrOn_status;

    ///////////////////////////////////////////////////////////
     SIGN32 pwrOn_drvrd(SIE_pwrOn *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 pwrOn_drvwr(SIE_pwrOn *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void pwrOn_reset(SIE_pwrOn *p);
     SIGN32 pwrOn_cmp  (SIE_pwrOn *p, SIE_pwrOn *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define pwrOn_check(p,pie,pfx,hLOG) pwrOn_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define pwrOn_print(p,    pfx,hLOG) pwrOn_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: pwrOn
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE pwrOn_iso                                (4,4)
///     ###
///     * Register for the Power domain which is ON by default
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl                 (P-)
///               ###
///               * Power Domain Control Register
///               ###
///               %unsigned 1  iso_eN                    0x0
///                                    : enable                    0x0
///                                    : disable                   0x1
///                                                 ###
///                                                 * Isolation control bit. Active low
///                                                 * 0 : Isolation is enabled
///                                                 * 1 : Isolation is disabled (default)
///                                                 ###
///               %unsigned 2  pwrSwitchCtrl             0x3
///                                    ###
///                                    * Power Switch control
///                                    * Bit 1 : SLP1B
///                                    * Bit 0 : SLP2B
///                                    * SLP1B SLP2B
///                                    * 0               X               Switch is turned off
///                                    * 1               0               PMOS switch in current mirror configuration. Constant current charging to limit in-rush current
///                                    * 1               1               PMOS switch is fully turned on to reduce Ron
///                                    ###
///               %unsigned 1  pwrDomainRstN             0x0
///                                    ###
///                                    * Power Domain Reset. Active low.
///                                    * 0 : Reset the power domain
///                                    * 1:   De-assert the reset for the power domain
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00004 status               (R-)
///               %unsigned 2  pwrStatus                 
///                                    ###
///                                    * Power domain Status output from the power domain module
///                                    * Bit 1 : SLP1B
///                                    * Bit 0 : SLP2B
///                                    * SLP1B SLP2B
///                                    * 0               X               Switch is turned off
///                                    * 1               0               PMOS switch in current mirror configuration. Constant current charging to limit in-rush current
///                                    * 1               1               PMOS switch is fully turned on to reduce Ron
///                                    ###
///               %unsigned 1  IP_IDLE                   
///                                    ###
///                                    * Indication from IP that it is idle and can be powered down.
///                                    * 1: Idle
///                                    * 0: Busy
///                                    ###
///               %%        29         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:       7b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_pwrOn_iso
#define h_pwrOn_iso (){}

    #define     RA_pwrOn_iso_ctrl                              0x0000

    #define     BA_pwrOn_iso_ctrl_iso_eN                       0x0000
    #define     B16pwrOn_iso_ctrl_iso_eN                       0x0000
    #define   LSb32pwrOn_iso_ctrl_iso_eN                          0
    #define   LSb16pwrOn_iso_ctrl_iso_eN                          0
    #define       bpwrOn_iso_ctrl_iso_eN                       1
    #define   MSK32pwrOn_iso_ctrl_iso_eN                          0x00000001
    #define        pwrOn_iso_ctrl_iso_eN_enable                             0x0
    #define        pwrOn_iso_ctrl_iso_eN_disable                            0x1

    #define     BA_pwrOn_iso_ctrl_pwrSwitchCtrl                0x0000
    #define     B16pwrOn_iso_ctrl_pwrSwitchCtrl                0x0000
    #define   LSb32pwrOn_iso_ctrl_pwrSwitchCtrl                   1
    #define   LSb16pwrOn_iso_ctrl_pwrSwitchCtrl                   1
    #define       bpwrOn_iso_ctrl_pwrSwitchCtrl                2
    #define   MSK32pwrOn_iso_ctrl_pwrSwitchCtrl                   0x00000006

    #define     BA_pwrOn_iso_ctrl_pwrDomainRstN                0x0000
    #define     B16pwrOn_iso_ctrl_pwrDomainRstN                0x0000
    #define   LSb32pwrOn_iso_ctrl_pwrDomainRstN                   3
    #define   LSb16pwrOn_iso_ctrl_pwrDomainRstN                   3
    #define       bpwrOn_iso_ctrl_pwrDomainRstN                1
    #define   MSK32pwrOn_iso_ctrl_pwrDomainRstN                   0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_pwrOn_iso_status                            0x0004

    #define     BA_pwrOn_iso_status_pwrStatus                  0x0004
    #define     B16pwrOn_iso_status_pwrStatus                  0x0004
    #define   LSb32pwrOn_iso_status_pwrStatus                     0
    #define   LSb16pwrOn_iso_status_pwrStatus                     0
    #define       bpwrOn_iso_status_pwrStatus                  2
    #define   MSK32pwrOn_iso_status_pwrStatus                     0x00000003

    #define     BA_pwrOn_iso_status_IP_IDLE                    0x0004
    #define     B16pwrOn_iso_status_IP_IDLE                    0x0004
    #define   LSb32pwrOn_iso_status_IP_IDLE                       2
    #define   LSb16pwrOn_iso_status_IP_IDLE                       2
    #define       bpwrOn_iso_status_IP_IDLE                    1
    #define   MSK32pwrOn_iso_status_IP_IDLE                       0x00000004
    ///////////////////////////////////////////////////////////

    typedef struct SIE_pwrOn_iso {
    ///////////////////////////////////////////////////////////
    #define   GET32pwrOn_iso_ctrl_iso_eN(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32pwrOn_iso_ctrl_iso_eN(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16pwrOn_iso_ctrl_iso_eN(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16pwrOn_iso_ctrl_iso_eN(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32pwrOn_iso_ctrl_pwrSwitchCtrl(r32)           _BFGET_(r32, 2, 1)
    #define   SET32pwrOn_iso_ctrl_pwrSwitchCtrl(r32,v)         _BFSET_(r32, 2, 1,v)
    #define   GET16pwrOn_iso_ctrl_pwrSwitchCtrl(r16)           _BFGET_(r16, 2, 1)
    #define   SET16pwrOn_iso_ctrl_pwrSwitchCtrl(r16,v)         _BFSET_(r16, 2, 1,v)

    #define   GET32pwrOn_iso_ctrl_pwrDomainRstN(r32)           _BFGET_(r32, 3, 3)
    #define   SET32pwrOn_iso_ctrl_pwrDomainRstN(r32,v)         _BFSET_(r32, 3, 3,v)
    #define   GET16pwrOn_iso_ctrl_pwrDomainRstN(r16)           _BFGET_(r16, 3, 3)
    #define   SET16pwrOn_iso_ctrl_pwrDomainRstN(r16,v)         _BFSET_(r16, 3, 3,v)

    #define     w32pwrOn_iso_ctrl                              {\
            UNSG32 uctrl_iso_eN                                :  1;\
            UNSG32 uctrl_pwrSwitchCtrl                         :  2;\
            UNSG32 uctrl_pwrDomainRstN                         :  1;\
            UNSG32 RSVDx0_b4                                   : 28;\
          }
    union { UNSG32 u32pwrOn_iso_ctrl;
            struct w32pwrOn_iso_ctrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32pwrOn_iso_status_pwrStatus(r32)             _BFGET_(r32, 1, 0)
    #define   SET32pwrOn_iso_status_pwrStatus(r32,v)           _BFSET_(r32, 1, 0,v)
    #define   GET16pwrOn_iso_status_pwrStatus(r16)             _BFGET_(r16, 1, 0)
    #define   SET16pwrOn_iso_status_pwrStatus(r16,v)           _BFSET_(r16, 1, 0,v)

    #define   GET32pwrOn_iso_status_IP_IDLE(r32)               _BFGET_(r32, 2, 2)
    #define   SET32pwrOn_iso_status_IP_IDLE(r32,v)             _BFSET_(r32, 2, 2,v)
    #define   GET16pwrOn_iso_status_IP_IDLE(r16)               _BFGET_(r16, 2, 2)
    #define   SET16pwrOn_iso_status_IP_IDLE(r16,v)             _BFSET_(r16, 2, 2,v)

    #define     w32pwrOn_iso_status                            {\
            UNSG32 ustatus_pwrStatus                           :  2;\
            UNSG32 ustatus_IP_IDLE                             :  1;\
            UNSG32 RSVDx4_b3                                   : 29;\
          }
    union { UNSG32 u32pwrOn_iso_status;
            struct w32pwrOn_iso_status;
          };
    ///////////////////////////////////////////////////////////
    } SIE_pwrOn_iso;

    typedef union  T32pwrOn_iso_ctrl
          { UNSG32 u32;
            struct w32pwrOn_iso_ctrl;
                 } T32pwrOn_iso_ctrl;
    typedef union  T32pwrOn_iso_status
          { UNSG32 u32;
            struct w32pwrOn_iso_status;
                 } T32pwrOn_iso_status;
    ///////////////////////////////////////////////////////////

    typedef union  TpwrOn_iso_ctrl
          { UNSG32 u32[1];
            struct {
            struct w32pwrOn_iso_ctrl;
                   };
                 } TpwrOn_iso_ctrl;
    typedef union  TpwrOn_iso_status
          { UNSG32 u32[1];
            struct {
            struct w32pwrOn_iso_status;
                   };
                 } TpwrOn_iso_status;

    ///////////////////////////////////////////////////////////
     SIGN32 pwrOn_iso_drvrd(SIE_pwrOn_iso *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 pwrOn_iso_drvwr(SIE_pwrOn_iso *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void pwrOn_iso_reset(SIE_pwrOn_iso *p);
     SIGN32 pwrOn_iso_cmp  (SIE_pwrOn_iso *p, SIE_pwrOn_iso *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define pwrOn_iso_check(p,pie,pfx,hLOG) pwrOn_iso_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define pwrOn_iso_print(p,    pfx,hLOG) pwrOn_iso_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: pwrOn_iso
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE AxiPCntStat                              (4,4)
///     ###
///     * AXI Performance Counters
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 TOTAL_CNT            (RNB-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Total no.of AXI clocks
///                                    ###
///     @ 0x00004 ARWAIT_CNT           (RNB-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Counts the no.of clocks aRValid = 1 & aRReady = 0
///                                    ###
///     @ 0x00008 RWAIT_CNT            (RNB-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Counts the no.of clocks rValid = 1 & rReady = 0
///                                    ###
///     @ 0x0000C RIDLE_CNT            (RNB-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Counts the no.of clocks rValid = 0 & rReady = 1
///                                    ###
///     @ 0x00010 RDATA_CNT            (RNB-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Counts the no.of clocks rValid = 1 & rReady = 1
///                                    ###
///     @ 0x00014 AWWAIT_CNT           (RNB-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Counts the no.of clocks aWValid = 1 & aWReady = 0
///                                    ###
///     @ 0x00018 WWAIT_CNT            (RNB-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Counts the no.of clocks wValid = 1 & wReady = 0
///                                    ###
///     @ 0x0001C WIDLE_CNT            (RNB-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Counts the no.of clocks wValid = 0 & wReady = 1
///                                    ###
///     @ 0x00020 WDATA_CNT            (RNB-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Counts the no.of clocks wValid = 1 & wReady = 1
///                                    ###
///     @ 0x00024 AWDATA_CNT           (RNB-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Counts no of clocks awValid & awReady
///                                    ###
///     @ 0x00028 ARDATA_CNT           (RNB-)
///               %unsigned 32 cnt                       0x0
///                                    ###
///                                    * Counts no of clocks awValid & awReady
///                                    ###
///     @ 0x0002C OF_STATUS            (RNB-)
///               %unsigned 1  total                     0x0
///               %unsigned 1  arwait                    0x0
///               %unsigned 1  rwait                     0x0
///               %unsigned 1  ridle                     0x0
///               %unsigned 1  rdata                     0x0
///               %unsigned 1  awwait                    0x0
///               %unsigned 1  wwait                     0x0
///               %unsigned 1  widle                     0x0
///               %unsigned 1  wdata                     0x0
///               %unsigned 1  awdata                    0x0
///               %unsigned 1  ardata                    0x0
///                                    ###
///                                    * Overflow status of total, wait and data counters. Clear will clear the overflow status as well.
///                                    ###
///               %%        21         # Stuffing bits...
///     @ 0x00030 READY                (R-)
///               %unsigned 1  cnt                       0x0
///                                    ###
///                                    * This bit is set by HW when counter values are latched and it's ok for SW to read the counter
///                                    ###
///               %%        31         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      52B, bits:     364b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_AxiPCntStat
#define h_AxiPCntStat (){}

    #define     RA_AxiPCntStat_TOTAL_CNT                       0x0000

    #define     BA_AxiPCntStat_TOTAL_CNT_cnt                   0x0000
    #define     B16AxiPCntStat_TOTAL_CNT_cnt                   0x0000
    #define   LSb32AxiPCntStat_TOTAL_CNT_cnt                      0
    #define   LSb16AxiPCntStat_TOTAL_CNT_cnt                      0
    #define       bAxiPCntStat_TOTAL_CNT_cnt                   32
    #define   MSK32AxiPCntStat_TOTAL_CNT_cnt                      0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCntStat_ARWAIT_CNT                      0x0004

    #define     BA_AxiPCntStat_ARWAIT_CNT_cnt                  0x0004
    #define     B16AxiPCntStat_ARWAIT_CNT_cnt                  0x0004
    #define   LSb32AxiPCntStat_ARWAIT_CNT_cnt                     0
    #define   LSb16AxiPCntStat_ARWAIT_CNT_cnt                     0
    #define       bAxiPCntStat_ARWAIT_CNT_cnt                  32
    #define   MSK32AxiPCntStat_ARWAIT_CNT_cnt                     0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCntStat_RWAIT_CNT                       0x0008

    #define     BA_AxiPCntStat_RWAIT_CNT_cnt                   0x0008
    #define     B16AxiPCntStat_RWAIT_CNT_cnt                   0x0008
    #define   LSb32AxiPCntStat_RWAIT_CNT_cnt                      0
    #define   LSb16AxiPCntStat_RWAIT_CNT_cnt                      0
    #define       bAxiPCntStat_RWAIT_CNT_cnt                   32
    #define   MSK32AxiPCntStat_RWAIT_CNT_cnt                      0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCntStat_RIDLE_CNT                       0x000C

    #define     BA_AxiPCntStat_RIDLE_CNT_cnt                   0x000C
    #define     B16AxiPCntStat_RIDLE_CNT_cnt                   0x000C
    #define   LSb32AxiPCntStat_RIDLE_CNT_cnt                      0
    #define   LSb16AxiPCntStat_RIDLE_CNT_cnt                      0
    #define       bAxiPCntStat_RIDLE_CNT_cnt                   32
    #define   MSK32AxiPCntStat_RIDLE_CNT_cnt                      0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCntStat_RDATA_CNT                       0x0010

    #define     BA_AxiPCntStat_RDATA_CNT_cnt                   0x0010
    #define     B16AxiPCntStat_RDATA_CNT_cnt                   0x0010
    #define   LSb32AxiPCntStat_RDATA_CNT_cnt                      0
    #define   LSb16AxiPCntStat_RDATA_CNT_cnt                      0
    #define       bAxiPCntStat_RDATA_CNT_cnt                   32
    #define   MSK32AxiPCntStat_RDATA_CNT_cnt                      0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCntStat_AWWAIT_CNT                      0x0014

    #define     BA_AxiPCntStat_AWWAIT_CNT_cnt                  0x0014
    #define     B16AxiPCntStat_AWWAIT_CNT_cnt                  0x0014
    #define   LSb32AxiPCntStat_AWWAIT_CNT_cnt                     0
    #define   LSb16AxiPCntStat_AWWAIT_CNT_cnt                     0
    #define       bAxiPCntStat_AWWAIT_CNT_cnt                  32
    #define   MSK32AxiPCntStat_AWWAIT_CNT_cnt                     0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCntStat_WWAIT_CNT                       0x0018

    #define     BA_AxiPCntStat_WWAIT_CNT_cnt                   0x0018
    #define     B16AxiPCntStat_WWAIT_CNT_cnt                   0x0018
    #define   LSb32AxiPCntStat_WWAIT_CNT_cnt                      0
    #define   LSb16AxiPCntStat_WWAIT_CNT_cnt                      0
    #define       bAxiPCntStat_WWAIT_CNT_cnt                   32
    #define   MSK32AxiPCntStat_WWAIT_CNT_cnt                      0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCntStat_WIDLE_CNT                       0x001C

    #define     BA_AxiPCntStat_WIDLE_CNT_cnt                   0x001C
    #define     B16AxiPCntStat_WIDLE_CNT_cnt                   0x001C
    #define   LSb32AxiPCntStat_WIDLE_CNT_cnt                      0
    #define   LSb16AxiPCntStat_WIDLE_CNT_cnt                      0
    #define       bAxiPCntStat_WIDLE_CNT_cnt                   32
    #define   MSK32AxiPCntStat_WIDLE_CNT_cnt                      0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCntStat_WDATA_CNT                       0x0020

    #define     BA_AxiPCntStat_WDATA_CNT_cnt                   0x0020
    #define     B16AxiPCntStat_WDATA_CNT_cnt                   0x0020
    #define   LSb32AxiPCntStat_WDATA_CNT_cnt                      0
    #define   LSb16AxiPCntStat_WDATA_CNT_cnt                      0
    #define       bAxiPCntStat_WDATA_CNT_cnt                   32
    #define   MSK32AxiPCntStat_WDATA_CNT_cnt                      0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCntStat_AWDATA_CNT                      0x0024

    #define     BA_AxiPCntStat_AWDATA_CNT_cnt                  0x0024
    #define     B16AxiPCntStat_AWDATA_CNT_cnt                  0x0024
    #define   LSb32AxiPCntStat_AWDATA_CNT_cnt                     0
    #define   LSb16AxiPCntStat_AWDATA_CNT_cnt                     0
    #define       bAxiPCntStat_AWDATA_CNT_cnt                  32
    #define   MSK32AxiPCntStat_AWDATA_CNT_cnt                     0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCntStat_ARDATA_CNT                      0x0028

    #define     BA_AxiPCntStat_ARDATA_CNT_cnt                  0x0028
    #define     B16AxiPCntStat_ARDATA_CNT_cnt                  0x0028
    #define   LSb32AxiPCntStat_ARDATA_CNT_cnt                     0
    #define   LSb16AxiPCntStat_ARDATA_CNT_cnt                     0
    #define       bAxiPCntStat_ARDATA_CNT_cnt                  32
    #define   MSK32AxiPCntStat_ARDATA_CNT_cnt                     0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCntStat_OF_STATUS                       0x002C

    #define     BA_AxiPCntStat_OF_STATUS_total                 0x002C
    #define     B16AxiPCntStat_OF_STATUS_total                 0x002C
    #define   LSb32AxiPCntStat_OF_STATUS_total                    0
    #define   LSb16AxiPCntStat_OF_STATUS_total                    0
    #define       bAxiPCntStat_OF_STATUS_total                 1
    #define   MSK32AxiPCntStat_OF_STATUS_total                    0x00000001

    #define     BA_AxiPCntStat_OF_STATUS_arwait                0x002C
    #define     B16AxiPCntStat_OF_STATUS_arwait                0x002C
    #define   LSb32AxiPCntStat_OF_STATUS_arwait                   1
    #define   LSb16AxiPCntStat_OF_STATUS_arwait                   1
    #define       bAxiPCntStat_OF_STATUS_arwait                1
    #define   MSK32AxiPCntStat_OF_STATUS_arwait                   0x00000002

    #define     BA_AxiPCntStat_OF_STATUS_rwait                 0x002C
    #define     B16AxiPCntStat_OF_STATUS_rwait                 0x002C
    #define   LSb32AxiPCntStat_OF_STATUS_rwait                    2
    #define   LSb16AxiPCntStat_OF_STATUS_rwait                    2
    #define       bAxiPCntStat_OF_STATUS_rwait                 1
    #define   MSK32AxiPCntStat_OF_STATUS_rwait                    0x00000004

    #define     BA_AxiPCntStat_OF_STATUS_ridle                 0x002C
    #define     B16AxiPCntStat_OF_STATUS_ridle                 0x002C
    #define   LSb32AxiPCntStat_OF_STATUS_ridle                    3
    #define   LSb16AxiPCntStat_OF_STATUS_ridle                    3
    #define       bAxiPCntStat_OF_STATUS_ridle                 1
    #define   MSK32AxiPCntStat_OF_STATUS_ridle                    0x00000008

    #define     BA_AxiPCntStat_OF_STATUS_rdata                 0x002C
    #define     B16AxiPCntStat_OF_STATUS_rdata                 0x002C
    #define   LSb32AxiPCntStat_OF_STATUS_rdata                    4
    #define   LSb16AxiPCntStat_OF_STATUS_rdata                    4
    #define       bAxiPCntStat_OF_STATUS_rdata                 1
    #define   MSK32AxiPCntStat_OF_STATUS_rdata                    0x00000010

    #define     BA_AxiPCntStat_OF_STATUS_awwait                0x002C
    #define     B16AxiPCntStat_OF_STATUS_awwait                0x002C
    #define   LSb32AxiPCntStat_OF_STATUS_awwait                   5
    #define   LSb16AxiPCntStat_OF_STATUS_awwait                   5
    #define       bAxiPCntStat_OF_STATUS_awwait                1
    #define   MSK32AxiPCntStat_OF_STATUS_awwait                   0x00000020

    #define     BA_AxiPCntStat_OF_STATUS_wwait                 0x002C
    #define     B16AxiPCntStat_OF_STATUS_wwait                 0x002C
    #define   LSb32AxiPCntStat_OF_STATUS_wwait                    6
    #define   LSb16AxiPCntStat_OF_STATUS_wwait                    6
    #define       bAxiPCntStat_OF_STATUS_wwait                 1
    #define   MSK32AxiPCntStat_OF_STATUS_wwait                    0x00000040

    #define     BA_AxiPCntStat_OF_STATUS_widle                 0x002C
    #define     B16AxiPCntStat_OF_STATUS_widle                 0x002C
    #define   LSb32AxiPCntStat_OF_STATUS_widle                    7
    #define   LSb16AxiPCntStat_OF_STATUS_widle                    7
    #define       bAxiPCntStat_OF_STATUS_widle                 1
    #define   MSK32AxiPCntStat_OF_STATUS_widle                    0x00000080

    #define     BA_AxiPCntStat_OF_STATUS_wdata                 0x002D
    #define     B16AxiPCntStat_OF_STATUS_wdata                 0x002C
    #define   LSb32AxiPCntStat_OF_STATUS_wdata                    8
    #define   LSb16AxiPCntStat_OF_STATUS_wdata                    8
    #define       bAxiPCntStat_OF_STATUS_wdata                 1
    #define   MSK32AxiPCntStat_OF_STATUS_wdata                    0x00000100

    #define     BA_AxiPCntStat_OF_STATUS_awdata                0x002D
    #define     B16AxiPCntStat_OF_STATUS_awdata                0x002C
    #define   LSb32AxiPCntStat_OF_STATUS_awdata                   9
    #define   LSb16AxiPCntStat_OF_STATUS_awdata                   9
    #define       bAxiPCntStat_OF_STATUS_awdata                1
    #define   MSK32AxiPCntStat_OF_STATUS_awdata                   0x00000200

    #define     BA_AxiPCntStat_OF_STATUS_ardata                0x002D
    #define     B16AxiPCntStat_OF_STATUS_ardata                0x002C
    #define   LSb32AxiPCntStat_OF_STATUS_ardata                   10
    #define   LSb16AxiPCntStat_OF_STATUS_ardata                   10
    #define       bAxiPCntStat_OF_STATUS_ardata                1
    #define   MSK32AxiPCntStat_OF_STATUS_ardata                   0x00000400
    ///////////////////////////////////////////////////////////
    #define     RA_AxiPCntStat_READY                           0x0030

    #define     BA_AxiPCntStat_READY_cnt                       0x0030
    #define     B16AxiPCntStat_READY_cnt                       0x0030
    #define   LSb32AxiPCntStat_READY_cnt                          0
    #define   LSb16AxiPCntStat_READY_cnt                          0
    #define       bAxiPCntStat_READY_cnt                       1
    #define   MSK32AxiPCntStat_READY_cnt                          0x00000001
    ///////////////////////////////////////////////////////////

    typedef struct SIE_AxiPCntStat {
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCntStat_TOTAL_CNT_cnt(r32)              _BFGET_(r32,31, 0)
    #define   SET32AxiPCntStat_TOTAL_CNT_cnt(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32AxiPCntStat_TOTAL_CNT                       {\
            UNSG32 uTOTAL_CNT_cnt                              : 32;\
          }
    union { UNSG32 u32AxiPCntStat_TOTAL_CNT;
            struct w32AxiPCntStat_TOTAL_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCntStat_ARWAIT_CNT_cnt(r32)             _BFGET_(r32,31, 0)
    #define   SET32AxiPCntStat_ARWAIT_CNT_cnt(r32,v)           _BFSET_(r32,31, 0,v)

    #define     w32AxiPCntStat_ARWAIT_CNT                      {\
            UNSG32 uARWAIT_CNT_cnt                             : 32;\
          }
    union { UNSG32 u32AxiPCntStat_ARWAIT_CNT;
            struct w32AxiPCntStat_ARWAIT_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCntStat_RWAIT_CNT_cnt(r32)              _BFGET_(r32,31, 0)
    #define   SET32AxiPCntStat_RWAIT_CNT_cnt(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32AxiPCntStat_RWAIT_CNT                       {\
            UNSG32 uRWAIT_CNT_cnt                              : 32;\
          }
    union { UNSG32 u32AxiPCntStat_RWAIT_CNT;
            struct w32AxiPCntStat_RWAIT_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCntStat_RIDLE_CNT_cnt(r32)              _BFGET_(r32,31, 0)
    #define   SET32AxiPCntStat_RIDLE_CNT_cnt(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32AxiPCntStat_RIDLE_CNT                       {\
            UNSG32 uRIDLE_CNT_cnt                              : 32;\
          }
    union { UNSG32 u32AxiPCntStat_RIDLE_CNT;
            struct w32AxiPCntStat_RIDLE_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCntStat_RDATA_CNT_cnt(r32)              _BFGET_(r32,31, 0)
    #define   SET32AxiPCntStat_RDATA_CNT_cnt(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32AxiPCntStat_RDATA_CNT                       {\
            UNSG32 uRDATA_CNT_cnt                              : 32;\
          }
    union { UNSG32 u32AxiPCntStat_RDATA_CNT;
            struct w32AxiPCntStat_RDATA_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCntStat_AWWAIT_CNT_cnt(r32)             _BFGET_(r32,31, 0)
    #define   SET32AxiPCntStat_AWWAIT_CNT_cnt(r32,v)           _BFSET_(r32,31, 0,v)

    #define     w32AxiPCntStat_AWWAIT_CNT                      {\
            UNSG32 uAWWAIT_CNT_cnt                             : 32;\
          }
    union { UNSG32 u32AxiPCntStat_AWWAIT_CNT;
            struct w32AxiPCntStat_AWWAIT_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCntStat_WWAIT_CNT_cnt(r32)              _BFGET_(r32,31, 0)
    #define   SET32AxiPCntStat_WWAIT_CNT_cnt(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32AxiPCntStat_WWAIT_CNT                       {\
            UNSG32 uWWAIT_CNT_cnt                              : 32;\
          }
    union { UNSG32 u32AxiPCntStat_WWAIT_CNT;
            struct w32AxiPCntStat_WWAIT_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCntStat_WIDLE_CNT_cnt(r32)              _BFGET_(r32,31, 0)
    #define   SET32AxiPCntStat_WIDLE_CNT_cnt(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32AxiPCntStat_WIDLE_CNT                       {\
            UNSG32 uWIDLE_CNT_cnt                              : 32;\
          }
    union { UNSG32 u32AxiPCntStat_WIDLE_CNT;
            struct w32AxiPCntStat_WIDLE_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCntStat_WDATA_CNT_cnt(r32)              _BFGET_(r32,31, 0)
    #define   SET32AxiPCntStat_WDATA_CNT_cnt(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32AxiPCntStat_WDATA_CNT                       {\
            UNSG32 uWDATA_CNT_cnt                              : 32;\
          }
    union { UNSG32 u32AxiPCntStat_WDATA_CNT;
            struct w32AxiPCntStat_WDATA_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCntStat_AWDATA_CNT_cnt(r32)             _BFGET_(r32,31, 0)
    #define   SET32AxiPCntStat_AWDATA_CNT_cnt(r32,v)           _BFSET_(r32,31, 0,v)

    #define     w32AxiPCntStat_AWDATA_CNT                      {\
            UNSG32 uAWDATA_CNT_cnt                             : 32;\
          }
    union { UNSG32 u32AxiPCntStat_AWDATA_CNT;
            struct w32AxiPCntStat_AWDATA_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCntStat_ARDATA_CNT_cnt(r32)             _BFGET_(r32,31, 0)
    #define   SET32AxiPCntStat_ARDATA_CNT_cnt(r32,v)           _BFSET_(r32,31, 0,v)

    #define     w32AxiPCntStat_ARDATA_CNT                      {\
            UNSG32 uARDATA_CNT_cnt                             : 32;\
          }
    union { UNSG32 u32AxiPCntStat_ARDATA_CNT;
            struct w32AxiPCntStat_ARDATA_CNT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCntStat_OF_STATUS_total(r32)            _BFGET_(r32, 0, 0)
    #define   SET32AxiPCntStat_OF_STATUS_total(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16AxiPCntStat_OF_STATUS_total(r16)            _BFGET_(r16, 0, 0)
    #define   SET16AxiPCntStat_OF_STATUS_total(r16,v)          _BFSET_(r16, 0, 0,v)

    #define   GET32AxiPCntStat_OF_STATUS_arwait(r32)           _BFGET_(r32, 1, 1)
    #define   SET32AxiPCntStat_OF_STATUS_arwait(r32,v)         _BFSET_(r32, 1, 1,v)
    #define   GET16AxiPCntStat_OF_STATUS_arwait(r16)           _BFGET_(r16, 1, 1)
    #define   SET16AxiPCntStat_OF_STATUS_arwait(r16,v)         _BFSET_(r16, 1, 1,v)

    #define   GET32AxiPCntStat_OF_STATUS_rwait(r32)            _BFGET_(r32, 2, 2)
    #define   SET32AxiPCntStat_OF_STATUS_rwait(r32,v)          _BFSET_(r32, 2, 2,v)
    #define   GET16AxiPCntStat_OF_STATUS_rwait(r16)            _BFGET_(r16, 2, 2)
    #define   SET16AxiPCntStat_OF_STATUS_rwait(r16,v)          _BFSET_(r16, 2, 2,v)

    #define   GET32AxiPCntStat_OF_STATUS_ridle(r32)            _BFGET_(r32, 3, 3)
    #define   SET32AxiPCntStat_OF_STATUS_ridle(r32,v)          _BFSET_(r32, 3, 3,v)
    #define   GET16AxiPCntStat_OF_STATUS_ridle(r16)            _BFGET_(r16, 3, 3)
    #define   SET16AxiPCntStat_OF_STATUS_ridle(r16,v)          _BFSET_(r16, 3, 3,v)

    #define   GET32AxiPCntStat_OF_STATUS_rdata(r32)            _BFGET_(r32, 4, 4)
    #define   SET32AxiPCntStat_OF_STATUS_rdata(r32,v)          _BFSET_(r32, 4, 4,v)
    #define   GET16AxiPCntStat_OF_STATUS_rdata(r16)            _BFGET_(r16, 4, 4)
    #define   SET16AxiPCntStat_OF_STATUS_rdata(r16,v)          _BFSET_(r16, 4, 4,v)

    #define   GET32AxiPCntStat_OF_STATUS_awwait(r32)           _BFGET_(r32, 5, 5)
    #define   SET32AxiPCntStat_OF_STATUS_awwait(r32,v)         _BFSET_(r32, 5, 5,v)
    #define   GET16AxiPCntStat_OF_STATUS_awwait(r16)           _BFGET_(r16, 5, 5)
    #define   SET16AxiPCntStat_OF_STATUS_awwait(r16,v)         _BFSET_(r16, 5, 5,v)

    #define   GET32AxiPCntStat_OF_STATUS_wwait(r32)            _BFGET_(r32, 6, 6)
    #define   SET32AxiPCntStat_OF_STATUS_wwait(r32,v)          _BFSET_(r32, 6, 6,v)
    #define   GET16AxiPCntStat_OF_STATUS_wwait(r16)            _BFGET_(r16, 6, 6)
    #define   SET16AxiPCntStat_OF_STATUS_wwait(r16,v)          _BFSET_(r16, 6, 6,v)

    #define   GET32AxiPCntStat_OF_STATUS_widle(r32)            _BFGET_(r32, 7, 7)
    #define   SET32AxiPCntStat_OF_STATUS_widle(r32,v)          _BFSET_(r32, 7, 7,v)
    #define   GET16AxiPCntStat_OF_STATUS_widle(r16)            _BFGET_(r16, 7, 7)
    #define   SET16AxiPCntStat_OF_STATUS_widle(r16,v)          _BFSET_(r16, 7, 7,v)

    #define   GET32AxiPCntStat_OF_STATUS_wdata(r32)            _BFGET_(r32, 8, 8)
    #define   SET32AxiPCntStat_OF_STATUS_wdata(r32,v)          _BFSET_(r32, 8, 8,v)
    #define   GET16AxiPCntStat_OF_STATUS_wdata(r16)            _BFGET_(r16, 8, 8)
    #define   SET16AxiPCntStat_OF_STATUS_wdata(r16,v)          _BFSET_(r16, 8, 8,v)

    #define   GET32AxiPCntStat_OF_STATUS_awdata(r32)           _BFGET_(r32, 9, 9)
    #define   SET32AxiPCntStat_OF_STATUS_awdata(r32,v)         _BFSET_(r32, 9, 9,v)
    #define   GET16AxiPCntStat_OF_STATUS_awdata(r16)           _BFGET_(r16, 9, 9)
    #define   SET16AxiPCntStat_OF_STATUS_awdata(r16,v)         _BFSET_(r16, 9, 9,v)

    #define   GET32AxiPCntStat_OF_STATUS_ardata(r32)           _BFGET_(r32,10,10)
    #define   SET32AxiPCntStat_OF_STATUS_ardata(r32,v)         _BFSET_(r32,10,10,v)
    #define   GET16AxiPCntStat_OF_STATUS_ardata(r16)           _BFGET_(r16,10,10)
    #define   SET16AxiPCntStat_OF_STATUS_ardata(r16,v)         _BFSET_(r16,10,10,v)

    #define     w32AxiPCntStat_OF_STATUS                       {\
            UNSG32 uOF_STATUS_total                            :  1;\
            UNSG32 uOF_STATUS_arwait                           :  1;\
            UNSG32 uOF_STATUS_rwait                            :  1;\
            UNSG32 uOF_STATUS_ridle                            :  1;\
            UNSG32 uOF_STATUS_rdata                            :  1;\
            UNSG32 uOF_STATUS_awwait                           :  1;\
            UNSG32 uOF_STATUS_wwait                            :  1;\
            UNSG32 uOF_STATUS_widle                            :  1;\
            UNSG32 uOF_STATUS_wdata                            :  1;\
            UNSG32 uOF_STATUS_awdata                           :  1;\
            UNSG32 uOF_STATUS_ardata                           :  1;\
            UNSG32 RSVDx2C_b11                                 : 21;\
          }
    union { UNSG32 u32AxiPCntStat_OF_STATUS;
            struct w32AxiPCntStat_OF_STATUS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiPCntStat_READY_cnt(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32AxiPCntStat_READY_cnt(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16AxiPCntStat_READY_cnt(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16AxiPCntStat_READY_cnt(r16,v)                _BFSET_(r16, 0, 0,v)

    #define     w32AxiPCntStat_READY                           {\
            UNSG32 uREADY_cnt                                  :  1;\
            UNSG32 RSVDx30_b1                                  : 31;\
          }
    union { UNSG32 u32AxiPCntStat_READY;
            struct w32AxiPCntStat_READY;
          };
    ///////////////////////////////////////////////////////////
    } SIE_AxiPCntStat;

    typedef union  T32AxiPCntStat_TOTAL_CNT
          { UNSG32 u32;
            struct w32AxiPCntStat_TOTAL_CNT;
                 } T32AxiPCntStat_TOTAL_CNT;
    typedef union  T32AxiPCntStat_ARWAIT_CNT
          { UNSG32 u32;
            struct w32AxiPCntStat_ARWAIT_CNT;
                 } T32AxiPCntStat_ARWAIT_CNT;
    typedef union  T32AxiPCntStat_RWAIT_CNT
          { UNSG32 u32;
            struct w32AxiPCntStat_RWAIT_CNT;
                 } T32AxiPCntStat_RWAIT_CNT;
    typedef union  T32AxiPCntStat_RIDLE_CNT
          { UNSG32 u32;
            struct w32AxiPCntStat_RIDLE_CNT;
                 } T32AxiPCntStat_RIDLE_CNT;
    typedef union  T32AxiPCntStat_RDATA_CNT
          { UNSG32 u32;
            struct w32AxiPCntStat_RDATA_CNT;
                 } T32AxiPCntStat_RDATA_CNT;
    typedef union  T32AxiPCntStat_AWWAIT_CNT
          { UNSG32 u32;
            struct w32AxiPCntStat_AWWAIT_CNT;
                 } T32AxiPCntStat_AWWAIT_CNT;
    typedef union  T32AxiPCntStat_WWAIT_CNT
          { UNSG32 u32;
            struct w32AxiPCntStat_WWAIT_CNT;
                 } T32AxiPCntStat_WWAIT_CNT;
    typedef union  T32AxiPCntStat_WIDLE_CNT
          { UNSG32 u32;
            struct w32AxiPCntStat_WIDLE_CNT;
                 } T32AxiPCntStat_WIDLE_CNT;
    typedef union  T32AxiPCntStat_WDATA_CNT
          { UNSG32 u32;
            struct w32AxiPCntStat_WDATA_CNT;
                 } T32AxiPCntStat_WDATA_CNT;
    typedef union  T32AxiPCntStat_AWDATA_CNT
          { UNSG32 u32;
            struct w32AxiPCntStat_AWDATA_CNT;
                 } T32AxiPCntStat_AWDATA_CNT;
    typedef union  T32AxiPCntStat_ARDATA_CNT
          { UNSG32 u32;
            struct w32AxiPCntStat_ARDATA_CNT;
                 } T32AxiPCntStat_ARDATA_CNT;
    typedef union  T32AxiPCntStat_OF_STATUS
          { UNSG32 u32;
            struct w32AxiPCntStat_OF_STATUS;
                 } T32AxiPCntStat_OF_STATUS;
    typedef union  T32AxiPCntStat_READY
          { UNSG32 u32;
            struct w32AxiPCntStat_READY;
                 } T32AxiPCntStat_READY;
    ///////////////////////////////////////////////////////////

    typedef union  TAxiPCntStat_TOTAL_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCntStat_TOTAL_CNT;
                   };
                 } TAxiPCntStat_TOTAL_CNT;
    typedef union  TAxiPCntStat_ARWAIT_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCntStat_ARWAIT_CNT;
                   };
                 } TAxiPCntStat_ARWAIT_CNT;
    typedef union  TAxiPCntStat_RWAIT_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCntStat_RWAIT_CNT;
                   };
                 } TAxiPCntStat_RWAIT_CNT;
    typedef union  TAxiPCntStat_RIDLE_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCntStat_RIDLE_CNT;
                   };
                 } TAxiPCntStat_RIDLE_CNT;
    typedef union  TAxiPCntStat_RDATA_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCntStat_RDATA_CNT;
                   };
                 } TAxiPCntStat_RDATA_CNT;
    typedef union  TAxiPCntStat_AWWAIT_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCntStat_AWWAIT_CNT;
                   };
                 } TAxiPCntStat_AWWAIT_CNT;
    typedef union  TAxiPCntStat_WWAIT_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCntStat_WWAIT_CNT;
                   };
                 } TAxiPCntStat_WWAIT_CNT;
    typedef union  TAxiPCntStat_WIDLE_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCntStat_WIDLE_CNT;
                   };
                 } TAxiPCntStat_WIDLE_CNT;
    typedef union  TAxiPCntStat_WDATA_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCntStat_WDATA_CNT;
                   };
                 } TAxiPCntStat_WDATA_CNT;
    typedef union  TAxiPCntStat_AWDATA_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCntStat_AWDATA_CNT;
                   };
                 } TAxiPCntStat_AWDATA_CNT;
    typedef union  TAxiPCntStat_ARDATA_CNT
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCntStat_ARDATA_CNT;
                   };
                 } TAxiPCntStat_ARDATA_CNT;
    typedef union  TAxiPCntStat_OF_STATUS
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCntStat_OF_STATUS;
                   };
                 } TAxiPCntStat_OF_STATUS;
    typedef union  TAxiPCntStat_READY
          { UNSG32 u32[1];
            struct {
            struct w32AxiPCntStat_READY;
                   };
                 } TAxiPCntStat_READY;

    ///////////////////////////////////////////////////////////
     SIGN32 AxiPCntStat_drvrd(SIE_AxiPCntStat *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 AxiPCntStat_drvwr(SIE_AxiPCntStat *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void AxiPCntStat_reset(SIE_AxiPCntStat *p);
     SIGN32 AxiPCntStat_cmp  (SIE_AxiPCntStat *p, SIE_AxiPCntStat *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define AxiPCntStat_check(p,pie,pfx,hLOG) AxiPCntStat_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define AxiPCntStat_print(p,    pfx,hLOG) AxiPCntStat_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: AxiPCntStat
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE AxiErrorMon                              (4,4)
///     ###
///     * AXI Bus Error Response Monitor
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 WriteID              (R-)
///               %unsigned 32 berrID                    0x0
///                                    ###
///                                    * ID of AXI Write Transaction that caused an error response
///                                    ###
///     @ 0x00004 WriteStat            (R-)
///               %unsigned 1  berrType                  0x0
///                                    ###
///                                    * Error Response Type
///                                    * 0: SLVERR
///                                    * 1: DECERR
///                                    ###
///               %unsigned 1  berrValid                 0x0
///                                    ###
///                                    * When asserted, an error response is detected and the information is captured into berrID and berrType. Monitoring is stopped.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00008 WriteCtrl            (RW)
///               %unsigned 1  berrClear                 0x0
///                                    ###
///                                    * Writing 1 will clear berrValid and resume the monitoring. This bit self clears.
///                                    ###
///               %unsigned 1  berrIntrEn                0x0
///                                    ###
///                                    * 1: Monitor generates an active high interrupt when berrValid = 1
///                                    * 0: Interrupt is masked
///                                    * Note: To clear interrupt, write 1 to berrClear
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x0000C ReadID               (R-)
///               %unsigned 32 rerrID                    0x0
///                                    ###
///                                    * ID of AXI Read Transaction that caused an error response
///                                    ###
///     @ 0x00010 ReadStat             (R-)
///               %unsigned 1  rerrType                  0x0
///                                    ###
///                                    * Error Response Type
///                                    * 0: SLVERR
///                                    * 1: DECERR
///                                    ###
///               %unsigned 1  rerrValid                 0x0
///                                    ###
///                                    * When asserted, an error response is detected and the information is captured into rerrID and rerrType. Monitoring is stopped.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00014 ReadCtrl             (RW)
///               %unsigned 1  rerrClear                 0x0
///                                    ###
///                                    * Writing 1 will clear rerrValid and resume the monitoring. This bit self clears.
///                                    ###
///               %unsigned 1  rerrIntrEn                0x0
///                                    ###
///                                    * 1: Monitor generates an active high interrupt when berrValid = 1
///                                    * 0: Interrupt is masked.
///                                    * Note: To clear Interrupt, write 1 to berrClear
///                                    ###
///               %%        30         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      24B, bits:      72b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_AxiErrorMon
#define h_AxiErrorMon (){}

    #define     RA_AxiErrorMon_WriteID                         0x0000

    #define     BA_AxiErrorMon_WriteID_berrID                  0x0000
    #define     B16AxiErrorMon_WriteID_berrID                  0x0000
    #define   LSb32AxiErrorMon_WriteID_berrID                     0
    #define   LSb16AxiErrorMon_WriteID_berrID                     0
    #define       bAxiErrorMon_WriteID_berrID                  32
    #define   MSK32AxiErrorMon_WriteID_berrID                     0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiErrorMon_WriteStat                       0x0004

    #define     BA_AxiErrorMon_WriteStat_berrType              0x0004
    #define     B16AxiErrorMon_WriteStat_berrType              0x0004
    #define   LSb32AxiErrorMon_WriteStat_berrType                 0
    #define   LSb16AxiErrorMon_WriteStat_berrType                 0
    #define       bAxiErrorMon_WriteStat_berrType              1
    #define   MSK32AxiErrorMon_WriteStat_berrType                 0x00000001

    #define     BA_AxiErrorMon_WriteStat_berrValid             0x0004
    #define     B16AxiErrorMon_WriteStat_berrValid             0x0004
    #define   LSb32AxiErrorMon_WriteStat_berrValid                1
    #define   LSb16AxiErrorMon_WriteStat_berrValid                1
    #define       bAxiErrorMon_WriteStat_berrValid             1
    #define   MSK32AxiErrorMon_WriteStat_berrValid                0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_AxiErrorMon_WriteCtrl                       0x0008

    #define     BA_AxiErrorMon_WriteCtrl_berrClear             0x0008
    #define     B16AxiErrorMon_WriteCtrl_berrClear             0x0008
    #define   LSb32AxiErrorMon_WriteCtrl_berrClear                0
    #define   LSb16AxiErrorMon_WriteCtrl_berrClear                0
    #define       bAxiErrorMon_WriteCtrl_berrClear             1
    #define   MSK32AxiErrorMon_WriteCtrl_berrClear                0x00000001

    #define     BA_AxiErrorMon_WriteCtrl_berrIntrEn            0x0008
    #define     B16AxiErrorMon_WriteCtrl_berrIntrEn            0x0008
    #define   LSb32AxiErrorMon_WriteCtrl_berrIntrEn               1
    #define   LSb16AxiErrorMon_WriteCtrl_berrIntrEn               1
    #define       bAxiErrorMon_WriteCtrl_berrIntrEn            1
    #define   MSK32AxiErrorMon_WriteCtrl_berrIntrEn               0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_AxiErrorMon_ReadID                          0x000C

    #define     BA_AxiErrorMon_ReadID_rerrID                   0x000C
    #define     B16AxiErrorMon_ReadID_rerrID                   0x000C
    #define   LSb32AxiErrorMon_ReadID_rerrID                      0
    #define   LSb16AxiErrorMon_ReadID_rerrID                      0
    #define       bAxiErrorMon_ReadID_rerrID                   32
    #define   MSK32AxiErrorMon_ReadID_rerrID                      0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_AxiErrorMon_ReadStat                        0x0010

    #define     BA_AxiErrorMon_ReadStat_rerrType               0x0010
    #define     B16AxiErrorMon_ReadStat_rerrType               0x0010
    #define   LSb32AxiErrorMon_ReadStat_rerrType                  0
    #define   LSb16AxiErrorMon_ReadStat_rerrType                  0
    #define       bAxiErrorMon_ReadStat_rerrType               1
    #define   MSK32AxiErrorMon_ReadStat_rerrType                  0x00000001

    #define     BA_AxiErrorMon_ReadStat_rerrValid              0x0010
    #define     B16AxiErrorMon_ReadStat_rerrValid              0x0010
    #define   LSb32AxiErrorMon_ReadStat_rerrValid                 1
    #define   LSb16AxiErrorMon_ReadStat_rerrValid                 1
    #define       bAxiErrorMon_ReadStat_rerrValid              1
    #define   MSK32AxiErrorMon_ReadStat_rerrValid                 0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_AxiErrorMon_ReadCtrl                        0x0014

    #define     BA_AxiErrorMon_ReadCtrl_rerrClear              0x0014
    #define     B16AxiErrorMon_ReadCtrl_rerrClear              0x0014
    #define   LSb32AxiErrorMon_ReadCtrl_rerrClear                 0
    #define   LSb16AxiErrorMon_ReadCtrl_rerrClear                 0
    #define       bAxiErrorMon_ReadCtrl_rerrClear              1
    #define   MSK32AxiErrorMon_ReadCtrl_rerrClear                 0x00000001

    #define     BA_AxiErrorMon_ReadCtrl_rerrIntrEn             0x0014
    #define     B16AxiErrorMon_ReadCtrl_rerrIntrEn             0x0014
    #define   LSb32AxiErrorMon_ReadCtrl_rerrIntrEn                1
    #define   LSb16AxiErrorMon_ReadCtrl_rerrIntrEn                1
    #define       bAxiErrorMon_ReadCtrl_rerrIntrEn             1
    #define   MSK32AxiErrorMon_ReadCtrl_rerrIntrEn                0x00000002
    ///////////////////////////////////////////////////////////

    typedef struct SIE_AxiErrorMon {
    ///////////////////////////////////////////////////////////
    #define   GET32AxiErrorMon_WriteID_berrID(r32)             _BFGET_(r32,31, 0)
    #define   SET32AxiErrorMon_WriteID_berrID(r32,v)           _BFSET_(r32,31, 0,v)

    #define     w32AxiErrorMon_WriteID                         {\
            UNSG32 uWriteID_berrID                             : 32;\
          }
    union { UNSG32 u32AxiErrorMon_WriteID;
            struct w32AxiErrorMon_WriteID;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiErrorMon_WriteStat_berrType(r32)         _BFGET_(r32, 0, 0)
    #define   SET32AxiErrorMon_WriteStat_berrType(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16AxiErrorMon_WriteStat_berrType(r16)         _BFGET_(r16, 0, 0)
    #define   SET16AxiErrorMon_WriteStat_berrType(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32AxiErrorMon_WriteStat_berrValid(r32)        _BFGET_(r32, 1, 1)
    #define   SET32AxiErrorMon_WriteStat_berrValid(r32,v)      _BFSET_(r32, 1, 1,v)
    #define   GET16AxiErrorMon_WriteStat_berrValid(r16)        _BFGET_(r16, 1, 1)
    #define   SET16AxiErrorMon_WriteStat_berrValid(r16,v)      _BFSET_(r16, 1, 1,v)

    #define     w32AxiErrorMon_WriteStat                       {\
            UNSG32 uWriteStat_berrType                         :  1;\
            UNSG32 uWriteStat_berrValid                        :  1;\
            UNSG32 RSVDx4_b2                                   : 30;\
          }
    union { UNSG32 u32AxiErrorMon_WriteStat;
            struct w32AxiErrorMon_WriteStat;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiErrorMon_WriteCtrl_berrClear(r32)        _BFGET_(r32, 0, 0)
    #define   SET32AxiErrorMon_WriteCtrl_berrClear(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16AxiErrorMon_WriteCtrl_berrClear(r16)        _BFGET_(r16, 0, 0)
    #define   SET16AxiErrorMon_WriteCtrl_berrClear(r16,v)      _BFSET_(r16, 0, 0,v)

    #define   GET32AxiErrorMon_WriteCtrl_berrIntrEn(r32)       _BFGET_(r32, 1, 1)
    #define   SET32AxiErrorMon_WriteCtrl_berrIntrEn(r32,v)     _BFSET_(r32, 1, 1,v)
    #define   GET16AxiErrorMon_WriteCtrl_berrIntrEn(r16)       _BFGET_(r16, 1, 1)
    #define   SET16AxiErrorMon_WriteCtrl_berrIntrEn(r16,v)     _BFSET_(r16, 1, 1,v)

    #define     w32AxiErrorMon_WriteCtrl                       {\
            UNSG32 uWriteCtrl_berrClear                        :  1;\
            UNSG32 uWriteCtrl_berrIntrEn                       :  1;\
            UNSG32 RSVDx8_b2                                   : 30;\
          }
    union { UNSG32 u32AxiErrorMon_WriteCtrl;
            struct w32AxiErrorMon_WriteCtrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiErrorMon_ReadID_rerrID(r32)              _BFGET_(r32,31, 0)
    #define   SET32AxiErrorMon_ReadID_rerrID(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32AxiErrorMon_ReadID                          {\
            UNSG32 uReadID_rerrID                              : 32;\
          }
    union { UNSG32 u32AxiErrorMon_ReadID;
            struct w32AxiErrorMon_ReadID;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiErrorMon_ReadStat_rerrType(r32)          _BFGET_(r32, 0, 0)
    #define   SET32AxiErrorMon_ReadStat_rerrType(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16AxiErrorMon_ReadStat_rerrType(r16)          _BFGET_(r16, 0, 0)
    #define   SET16AxiErrorMon_ReadStat_rerrType(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32AxiErrorMon_ReadStat_rerrValid(r32)         _BFGET_(r32, 1, 1)
    #define   SET32AxiErrorMon_ReadStat_rerrValid(r32,v)       _BFSET_(r32, 1, 1,v)
    #define   GET16AxiErrorMon_ReadStat_rerrValid(r16)         _BFGET_(r16, 1, 1)
    #define   SET16AxiErrorMon_ReadStat_rerrValid(r16,v)       _BFSET_(r16, 1, 1,v)

    #define     w32AxiErrorMon_ReadStat                        {\
            UNSG32 uReadStat_rerrType                          :  1;\
            UNSG32 uReadStat_rerrValid                         :  1;\
            UNSG32 RSVDx10_b2                                  : 30;\
          }
    union { UNSG32 u32AxiErrorMon_ReadStat;
            struct w32AxiErrorMon_ReadStat;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxiErrorMon_ReadCtrl_rerrClear(r32)         _BFGET_(r32, 0, 0)
    #define   SET32AxiErrorMon_ReadCtrl_rerrClear(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16AxiErrorMon_ReadCtrl_rerrClear(r16)         _BFGET_(r16, 0, 0)
    #define   SET16AxiErrorMon_ReadCtrl_rerrClear(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32AxiErrorMon_ReadCtrl_rerrIntrEn(r32)        _BFGET_(r32, 1, 1)
    #define   SET32AxiErrorMon_ReadCtrl_rerrIntrEn(r32,v)      _BFSET_(r32, 1, 1,v)
    #define   GET16AxiErrorMon_ReadCtrl_rerrIntrEn(r16)        _BFGET_(r16, 1, 1)
    #define   SET16AxiErrorMon_ReadCtrl_rerrIntrEn(r16,v)      _BFSET_(r16, 1, 1,v)

    #define     w32AxiErrorMon_ReadCtrl                        {\
            UNSG32 uReadCtrl_rerrClear                         :  1;\
            UNSG32 uReadCtrl_rerrIntrEn                        :  1;\
            UNSG32 RSVDx14_b2                                  : 30;\
          }
    union { UNSG32 u32AxiErrorMon_ReadCtrl;
            struct w32AxiErrorMon_ReadCtrl;
          };
    ///////////////////////////////////////////////////////////
    } SIE_AxiErrorMon;

    typedef union  T32AxiErrorMon_WriteID
          { UNSG32 u32;
            struct w32AxiErrorMon_WriteID;
                 } T32AxiErrorMon_WriteID;
    typedef union  T32AxiErrorMon_WriteStat
          { UNSG32 u32;
            struct w32AxiErrorMon_WriteStat;
                 } T32AxiErrorMon_WriteStat;
    typedef union  T32AxiErrorMon_WriteCtrl
          { UNSG32 u32;
            struct w32AxiErrorMon_WriteCtrl;
                 } T32AxiErrorMon_WriteCtrl;
    typedef union  T32AxiErrorMon_ReadID
          { UNSG32 u32;
            struct w32AxiErrorMon_ReadID;
                 } T32AxiErrorMon_ReadID;
    typedef union  T32AxiErrorMon_ReadStat
          { UNSG32 u32;
            struct w32AxiErrorMon_ReadStat;
                 } T32AxiErrorMon_ReadStat;
    typedef union  T32AxiErrorMon_ReadCtrl
          { UNSG32 u32;
            struct w32AxiErrorMon_ReadCtrl;
                 } T32AxiErrorMon_ReadCtrl;
    ///////////////////////////////////////////////////////////

    typedef union  TAxiErrorMon_WriteID
          { UNSG32 u32[1];
            struct {
            struct w32AxiErrorMon_WriteID;
                   };
                 } TAxiErrorMon_WriteID;
    typedef union  TAxiErrorMon_WriteStat
          { UNSG32 u32[1];
            struct {
            struct w32AxiErrorMon_WriteStat;
                   };
                 } TAxiErrorMon_WriteStat;
    typedef union  TAxiErrorMon_WriteCtrl
          { UNSG32 u32[1];
            struct {
            struct w32AxiErrorMon_WriteCtrl;
                   };
                 } TAxiErrorMon_WriteCtrl;
    typedef union  TAxiErrorMon_ReadID
          { UNSG32 u32[1];
            struct {
            struct w32AxiErrorMon_ReadID;
                   };
                 } TAxiErrorMon_ReadID;
    typedef union  TAxiErrorMon_ReadStat
          { UNSG32 u32[1];
            struct {
            struct w32AxiErrorMon_ReadStat;
                   };
                 } TAxiErrorMon_ReadStat;
    typedef union  TAxiErrorMon_ReadCtrl
          { UNSG32 u32[1];
            struct {
            struct w32AxiErrorMon_ReadCtrl;
                   };
                 } TAxiErrorMon_ReadCtrl;

    ///////////////////////////////////////////////////////////
     SIGN32 AxiErrorMon_drvrd(SIE_AxiErrorMon *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 AxiErrorMon_drvwr(SIE_AxiErrorMon *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void AxiErrorMon_reset(SIE_AxiErrorMon *p);
     SIGN32 AxiErrorMon_cmp  (SIE_AxiErrorMon *p, SIE_AxiErrorMon *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define AxiErrorMon_check(p,pie,pfx,hLOG) AxiErrorMon_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define AxiErrorMon_print(p,    pfx,hLOG) AxiErrorMon_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: AxiErrorMon
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE AxCacheOW                                (4,4)
///     ###
///     * AXI AxCache bit overwrite
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 AxCache              (P)
///               %unsigned 4  Write                     0xF
///                                    ###
///                                    * AWCache
///                                    ###
///               %unsigned 1  WrBypass                  0x0
///                                    ###
///                                    * Bypass AWCache
///                                    * 1: use Biu value
///                                    * 0: use master value
///                                    ###
///               %unsigned 4  Read                      0xF
///                                    ###
///                                    * ARCache
///                                    ###
///               %unsigned 1  RdBypass                  0x0
///                                    ###
///                                    * Bypass ARCache
///                                    * 1: use Biu value
///                                    * 0: use master value
///                                    * Only the lowest bit is used. The high 3 bits are reserved. Please keep them as all 0s.
///                                    ###
///               %%        22         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      10b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_AxCacheOW
#define h_AxCacheOW (){}

    #define     RA_AxCacheOW_AxCache                           0x0000

    #define     BA_AxCacheOW_AxCache_Write                     0x0000
    #define     B16AxCacheOW_AxCache_Write                     0x0000
    #define   LSb32AxCacheOW_AxCache_Write                        0
    #define   LSb16AxCacheOW_AxCache_Write                        0
    #define       bAxCacheOW_AxCache_Write                     4
    #define   MSK32AxCacheOW_AxCache_Write                        0x0000000F

    #define     BA_AxCacheOW_AxCache_WrBypass                  0x0000
    #define     B16AxCacheOW_AxCache_WrBypass                  0x0000
    #define   LSb32AxCacheOW_AxCache_WrBypass                     4
    #define   LSb16AxCacheOW_AxCache_WrBypass                     4
    #define       bAxCacheOW_AxCache_WrBypass                  1
    #define   MSK32AxCacheOW_AxCache_WrBypass                     0x00000010

    #define     BA_AxCacheOW_AxCache_Read                      0x0000
    #define     B16AxCacheOW_AxCache_Read                      0x0000
    #define   LSb32AxCacheOW_AxCache_Read                         5
    #define   LSb16AxCacheOW_AxCache_Read                         5
    #define       bAxCacheOW_AxCache_Read                      4
    #define   MSK32AxCacheOW_AxCache_Read                         0x000001E0

    #define     BA_AxCacheOW_AxCache_RdBypass                  0x0001
    #define     B16AxCacheOW_AxCache_RdBypass                  0x0000
    #define   LSb32AxCacheOW_AxCache_RdBypass                     9
    #define   LSb16AxCacheOW_AxCache_RdBypass                     9
    #define       bAxCacheOW_AxCache_RdBypass                  1
    #define   MSK32AxCacheOW_AxCache_RdBypass                     0x00000200
    ///////////////////////////////////////////////////////////

    typedef struct SIE_AxCacheOW {
    ///////////////////////////////////////////////////////////
    #define   GET32AxCacheOW_AxCache_Write(r32)                _BFGET_(r32, 3, 0)
    #define   SET32AxCacheOW_AxCache_Write(r32,v)              _BFSET_(r32, 3, 0,v)
    #define   GET16AxCacheOW_AxCache_Write(r16)                _BFGET_(r16, 3, 0)
    #define   SET16AxCacheOW_AxCache_Write(r16,v)              _BFSET_(r16, 3, 0,v)

    #define   GET32AxCacheOW_AxCache_WrBypass(r32)             _BFGET_(r32, 4, 4)
    #define   SET32AxCacheOW_AxCache_WrBypass(r32,v)           _BFSET_(r32, 4, 4,v)
    #define   GET16AxCacheOW_AxCache_WrBypass(r16)             _BFGET_(r16, 4, 4)
    #define   SET16AxCacheOW_AxCache_WrBypass(r16,v)           _BFSET_(r16, 4, 4,v)

    #define   GET32AxCacheOW_AxCache_Read(r32)                 _BFGET_(r32, 8, 5)
    #define   SET32AxCacheOW_AxCache_Read(r32,v)               _BFSET_(r32, 8, 5,v)
    #define   GET16AxCacheOW_AxCache_Read(r16)                 _BFGET_(r16, 8, 5)
    #define   SET16AxCacheOW_AxCache_Read(r16,v)               _BFSET_(r16, 8, 5,v)

    #define   GET32AxCacheOW_AxCache_RdBypass(r32)             _BFGET_(r32, 9, 9)
    #define   SET32AxCacheOW_AxCache_RdBypass(r32,v)           _BFSET_(r32, 9, 9,v)
    #define   GET16AxCacheOW_AxCache_RdBypass(r16)             _BFGET_(r16, 9, 9)
    #define   SET16AxCacheOW_AxCache_RdBypass(r16,v)           _BFSET_(r16, 9, 9,v)

    #define     w32AxCacheOW_AxCache                           {\
            UNSG32 uAxCache_Write                              :  4;\
            UNSG32 uAxCache_WrBypass                           :  1;\
            UNSG32 uAxCache_Read                               :  4;\
            UNSG32 uAxCache_RdBypass                           :  1;\
            UNSG32 RSVDx0_b10                                  : 22;\
          }
    union { UNSG32 u32AxCacheOW_AxCache;
            struct w32AxCacheOW_AxCache;
          };
    ///////////////////////////////////////////////////////////
    } SIE_AxCacheOW;

    typedef union  T32AxCacheOW_AxCache
          { UNSG32 u32;
            struct w32AxCacheOW_AxCache;
                 } T32AxCacheOW_AxCache;
    ///////////////////////////////////////////////////////////

    typedef union  TAxCacheOW_AxCache
          { UNSG32 u32[1];
            struct {
            struct w32AxCacheOW_AxCache;
                   };
                 } TAxCacheOW_AxCache;

    ///////////////////////////////////////////////////////////
     SIGN32 AxCacheOW_drvrd(SIE_AxCacheOW *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 AxCacheOW_drvwr(SIE_AxCacheOW *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void AxCacheOW_reset(SIE_AxCacheOW *p);
     SIGN32 AxCacheOW_cmp  (SIE_AxCacheOW *p, SIE_AxCacheOW *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define AxCacheOW_check(p,pie,pfx,hLOG) AxCacheOW_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define AxCacheOW_print(p,    pfx,hLOG) AxCacheOW_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: AxCacheOW
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MstQos                                   (4,4)
///     ###
///     * AXI AxQos and transaction definition
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 Qos                  (P)
///               %unsigned 4  Wr                        0x0
///                                    ###
///                                    * Write Qos
///                                    ###
///               %unsigned 4  WrClass                   0x0
///                                    ###
///                                    * Write Transaction Class
///                                    ###
///               %unsigned 4  Rd                        0x0
///                                    ###
///                                    * Read Qos
///                                    ###
///               %unsigned 4  RdClass                   0x0
///                                    ###
///                                    * Read Transaction Class
///                                    ###
///               %%        16         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      16b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MstQos
#define h_MstQos (){}

    #define     RA_MstQos_Qos                                  0x0000

    #define     BA_MstQos_Qos_Wr                               0x0000
    #define     B16MstQos_Qos_Wr                               0x0000
    #define   LSb32MstQos_Qos_Wr                                  0
    #define   LSb16MstQos_Qos_Wr                                  0
    #define       bMstQos_Qos_Wr                               4
    #define   MSK32MstQos_Qos_Wr                                  0x0000000F

    #define     BA_MstQos_Qos_WrClass                          0x0000
    #define     B16MstQos_Qos_WrClass                          0x0000
    #define   LSb32MstQos_Qos_WrClass                             4
    #define   LSb16MstQos_Qos_WrClass                             4
    #define       bMstQos_Qos_WrClass                          4
    #define   MSK32MstQos_Qos_WrClass                             0x000000F0

    #define     BA_MstQos_Qos_Rd                               0x0001
    #define     B16MstQos_Qos_Rd                               0x0000
    #define   LSb32MstQos_Qos_Rd                                  8
    #define   LSb16MstQos_Qos_Rd                                  8
    #define       bMstQos_Qos_Rd                               4
    #define   MSK32MstQos_Qos_Rd                                  0x00000F00

    #define     BA_MstQos_Qos_RdClass                          0x0001
    #define     B16MstQos_Qos_RdClass                          0x0000
    #define   LSb32MstQos_Qos_RdClass                             12
    #define   LSb16MstQos_Qos_RdClass                             12
    #define       bMstQos_Qos_RdClass                          4
    #define   MSK32MstQos_Qos_RdClass                             0x0000F000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MstQos {
    ///////////////////////////////////////////////////////////
    #define   GET32MstQos_Qos_Wr(r32)                          _BFGET_(r32, 3, 0)
    #define   SET32MstQos_Qos_Wr(r32,v)                        _BFSET_(r32, 3, 0,v)
    #define   GET16MstQos_Qos_Wr(r16)                          _BFGET_(r16, 3, 0)
    #define   SET16MstQos_Qos_Wr(r16,v)                        _BFSET_(r16, 3, 0,v)

    #define   GET32MstQos_Qos_WrClass(r32)                     _BFGET_(r32, 7, 4)
    #define   SET32MstQos_Qos_WrClass(r32,v)                   _BFSET_(r32, 7, 4,v)
    #define   GET16MstQos_Qos_WrClass(r16)                     _BFGET_(r16, 7, 4)
    #define   SET16MstQos_Qos_WrClass(r16,v)                   _BFSET_(r16, 7, 4,v)

    #define   GET32MstQos_Qos_Rd(r32)                          _BFGET_(r32,11, 8)
    #define   SET32MstQos_Qos_Rd(r32,v)                        _BFSET_(r32,11, 8,v)
    #define   GET16MstQos_Qos_Rd(r16)                          _BFGET_(r16,11, 8)
    #define   SET16MstQos_Qos_Rd(r16,v)                        _BFSET_(r16,11, 8,v)

    #define   GET32MstQos_Qos_RdClass(r32)                     _BFGET_(r32,15,12)
    #define   SET32MstQos_Qos_RdClass(r32,v)                   _BFSET_(r32,15,12,v)
    #define   GET16MstQos_Qos_RdClass(r16)                     _BFGET_(r16,15,12)
    #define   SET16MstQos_Qos_RdClass(r16,v)                   _BFSET_(r16,15,12,v)

    #define     w32MstQos_Qos                                  {\
            UNSG32 uQos_Wr                                     :  4;\
            UNSG32 uQos_WrClass                                :  4;\
            UNSG32 uQos_Rd                                     :  4;\
            UNSG32 uQos_RdClass                                :  4;\
            UNSG32 RSVDx0_b16                                  : 16;\
          }
    union { UNSG32 u32MstQos_Qos;
            struct w32MstQos_Qos;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MstQos;

    typedef union  T32MstQos_Qos
          { UNSG32 u32;
            struct w32MstQos_Qos;
                 } T32MstQos_Qos;
    ///////////////////////////////////////////////////////////

    typedef union  TMstQos_Qos
          { UNSG32 u32[1];
            struct {
            struct w32MstQos_Qos;
                   };
                 } TMstQos_Qos;

    ///////////////////////////////////////////////////////////
     SIGN32 MstQos_drvrd(SIE_MstQos *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MstQos_drvwr(SIE_MstQos *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MstQos_reset(SIE_MstQos *p);
     SIGN32 MstQos_cmp  (SIE_MstQos *p, SIE_MstQos *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MstQos_check(p,pie,pfx,hLOG) MstQos_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MstQos_print(p,    pfx,hLOG) MstQos_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MstQos
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE AxQoSOW                                  (4,4)
///     ###
///     * AXI AxQos bit overwrite control
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 AxQoS                (P)
///               %unsigned 1  WrBypass                  0x0
///                                    ###
///                                    * Bypass AWQoS
///                                    * 1 : use Biu value
///                                    * 0 : use master value
///                                    ###
///               %unsigned 1  RdBypass                  0x0
///                                    ###
///                                    * Bypass ARQoS
///                                    * 1 : use Biu value
///                                    * 0 : use master value
///                                    ###
///               %%        30         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       2b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_AxQoSOW
#define h_AxQoSOW (){}

    #define     RA_AxQoSOW_AxQoS                               0x0000

    #define     BA_AxQoSOW_AxQoS_WrBypass                      0x0000
    #define     B16AxQoSOW_AxQoS_WrBypass                      0x0000
    #define   LSb32AxQoSOW_AxQoS_WrBypass                         0
    #define   LSb16AxQoSOW_AxQoS_WrBypass                         0
    #define       bAxQoSOW_AxQoS_WrBypass                      1
    #define   MSK32AxQoSOW_AxQoS_WrBypass                         0x00000001

    #define     BA_AxQoSOW_AxQoS_RdBypass                      0x0000
    #define     B16AxQoSOW_AxQoS_RdBypass                      0x0000
    #define   LSb32AxQoSOW_AxQoS_RdBypass                         1
    #define   LSb16AxQoSOW_AxQoS_RdBypass                         1
    #define       bAxQoSOW_AxQoS_RdBypass                      1
    #define   MSK32AxQoSOW_AxQoS_RdBypass                         0x00000002
    ///////////////////////////////////////////////////////////

    typedef struct SIE_AxQoSOW {
    ///////////////////////////////////////////////////////////
    #define   GET32AxQoSOW_AxQoS_WrBypass(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32AxQoSOW_AxQoS_WrBypass(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16AxQoSOW_AxQoS_WrBypass(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16AxQoSOW_AxQoS_WrBypass(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32AxQoSOW_AxQoS_RdBypass(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32AxQoSOW_AxQoS_RdBypass(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16AxQoSOW_AxQoS_RdBypass(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16AxQoSOW_AxQoS_RdBypass(r16,v)               _BFSET_(r16, 1, 1,v)

    #define     w32AxQoSOW_AxQoS                               {\
            UNSG32 uAxQoS_WrBypass                             :  1;\
            UNSG32 uAxQoS_RdBypass                             :  1;\
            UNSG32 RSVDx0_b2                                   : 30;\
          }
    union { UNSG32 u32AxQoSOW_AxQoS;
            struct w32AxQoSOW_AxQoS;
          };
    ///////////////////////////////////////////////////////////
    } SIE_AxQoSOW;

    typedef union  T32AxQoSOW_AxQoS
          { UNSG32 u32;
            struct w32AxQoSOW_AxQoS;
                 } T32AxQoSOW_AxQoS;
    ///////////////////////////////////////////////////////////

    typedef union  TAxQoSOW_AxQoS
          { UNSG32 u32[1];
            struct {
            struct w32AxQoSOW_AxQoS;
                   };
                 } TAxQoSOW_AxQoS;

    ///////////////////////////////////////////////////////////
     SIGN32 AxQoSOW_drvrd(SIE_AxQoSOW *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 AxQoSOW_drvwr(SIE_AxQoSOW *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void AxQoSOW_reset(SIE_AxQoSOW *p);
     SIGN32 AxQoSOW_cmp  (SIE_AxQoSOW *p, SIE_AxQoSOW *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define AxQoSOW_check(p,pie,pfx,hLOG) AxQoSOW_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define AxQoSOW_print(p,    pfx,hLOG) AxQoSOW_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: AxQoSOW
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MstQos_Reg                               (4,4)
///     ###
///     * AXI AxQos
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 Qos_Rd               (P)
///               %unsigned 4  Val0                      0x0
///               %unsigned 4  Val1                      0x0
///               %unsigned 4  Val2                      0x0
///               %unsigned 4  Val3                      0x0
///               %unsigned 4  Val4                      0x0
///               %unsigned 4  Val5                      0x0
///               %unsigned 4  Val6                      0x0
///               %unsigned 4  Val7                      0x0
///     # 0x00004 Qos_Rd1              
///               %unsigned 4  Val8                      0x0
///               %unsigned 4  Val9                      0x0
///               %unsigned 4  Val10                     0x0
///               %unsigned 4  Val11                     0x0
///               %unsigned 4  Val12                     0x0
///               %unsigned 4  Val13                     0x0
///               %unsigned 4  Val14                     0x0
///               %unsigned 4  Val15                     0x0
///     @ 0x00008 Qos_Wr               (P)
///               %unsigned 4  Val0                      0x0
///               %unsigned 4  Val1                      0x0
///               %unsigned 4  Val2                      0x0
///               %unsigned 4  Val3                      0x0
///               %unsigned 4  Val4                      0x0
///               %unsigned 4  Val5                      0x0
///               %unsigned 4  Val6                      0x0
///               %unsigned 4  Val7                      0x0
///     # 0x0000C Qos_Wr1              
///               %unsigned 4  Val8                      0x0
///               %unsigned 4  Val9                      0x0
///               %unsigned 4  Val10                     0x0
///               %unsigned 4  Val11                     0x0
///               %unsigned 4  Val12                     0x0
///               %unsigned 4  Val13                     0x0
///               %unsigned 4  Val14                     0x0
///               %unsigned 4  Val15                     0x0
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:     128b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MstQos_Reg
#define h_MstQos_Reg (){}

    #define     RA_MstQos_Reg_Qos_Rd                           0x0000

    #define     BA_MstQos_Reg_Qos_Rd_Val0                      0x0000
    #define     B16MstQos_Reg_Qos_Rd_Val0                      0x0000
    #define   LSb32MstQos_Reg_Qos_Rd_Val0                         0
    #define   LSb16MstQos_Reg_Qos_Rd_Val0                         0
    #define       bMstQos_Reg_Qos_Rd_Val0                      4
    #define   MSK32MstQos_Reg_Qos_Rd_Val0                         0x0000000F

    #define     BA_MstQos_Reg_Qos_Rd_Val1                      0x0000
    #define     B16MstQos_Reg_Qos_Rd_Val1                      0x0000
    #define   LSb32MstQos_Reg_Qos_Rd_Val1                         4
    #define   LSb16MstQos_Reg_Qos_Rd_Val1                         4
    #define       bMstQos_Reg_Qos_Rd_Val1                      4
    #define   MSK32MstQos_Reg_Qos_Rd_Val1                         0x000000F0

    #define     BA_MstQos_Reg_Qos_Rd_Val2                      0x0001
    #define     B16MstQos_Reg_Qos_Rd_Val2                      0x0000
    #define   LSb32MstQos_Reg_Qos_Rd_Val2                         8
    #define   LSb16MstQos_Reg_Qos_Rd_Val2                         8
    #define       bMstQos_Reg_Qos_Rd_Val2                      4
    #define   MSK32MstQos_Reg_Qos_Rd_Val2                         0x00000F00

    #define     BA_MstQos_Reg_Qos_Rd_Val3                      0x0001
    #define     B16MstQos_Reg_Qos_Rd_Val3                      0x0000
    #define   LSb32MstQos_Reg_Qos_Rd_Val3                         12
    #define   LSb16MstQos_Reg_Qos_Rd_Val3                         12
    #define       bMstQos_Reg_Qos_Rd_Val3                      4
    #define   MSK32MstQos_Reg_Qos_Rd_Val3                         0x0000F000

    #define     BA_MstQos_Reg_Qos_Rd_Val4                      0x0002
    #define     B16MstQos_Reg_Qos_Rd_Val4                      0x0002
    #define   LSb32MstQos_Reg_Qos_Rd_Val4                         16
    #define   LSb16MstQos_Reg_Qos_Rd_Val4                         0
    #define       bMstQos_Reg_Qos_Rd_Val4                      4
    #define   MSK32MstQos_Reg_Qos_Rd_Val4                         0x000F0000

    #define     BA_MstQos_Reg_Qos_Rd_Val5                      0x0002
    #define     B16MstQos_Reg_Qos_Rd_Val5                      0x0002
    #define   LSb32MstQos_Reg_Qos_Rd_Val5                         20
    #define   LSb16MstQos_Reg_Qos_Rd_Val5                         4
    #define       bMstQos_Reg_Qos_Rd_Val5                      4
    #define   MSK32MstQos_Reg_Qos_Rd_Val5                         0x00F00000

    #define     BA_MstQos_Reg_Qos_Rd_Val6                      0x0003
    #define     B16MstQos_Reg_Qos_Rd_Val6                      0x0002
    #define   LSb32MstQos_Reg_Qos_Rd_Val6                         24
    #define   LSb16MstQos_Reg_Qos_Rd_Val6                         8
    #define       bMstQos_Reg_Qos_Rd_Val6                      4
    #define   MSK32MstQos_Reg_Qos_Rd_Val6                         0x0F000000

    #define     BA_MstQos_Reg_Qos_Rd_Val7                      0x0003
    #define     B16MstQos_Reg_Qos_Rd_Val7                      0x0002
    #define   LSb32MstQos_Reg_Qos_Rd_Val7                         28
    #define   LSb16MstQos_Reg_Qos_Rd_Val7                         12
    #define       bMstQos_Reg_Qos_Rd_Val7                      4
    #define   MSK32MstQos_Reg_Qos_Rd_Val7                         0xF0000000

    #define     RA_MstQos_Reg_Qos_Rd1                          0x0004

    #define     BA_MstQos_Reg_Qos_Rd_Val8                      0x0004
    #define     B16MstQos_Reg_Qos_Rd_Val8                      0x0004
    #define   LSb32MstQos_Reg_Qos_Rd_Val8                         0
    #define   LSb16MstQos_Reg_Qos_Rd_Val8                         0
    #define       bMstQos_Reg_Qos_Rd_Val8                      4
    #define   MSK32MstQos_Reg_Qos_Rd_Val8                         0x0000000F

    #define     BA_MstQos_Reg_Qos_Rd_Val9                      0x0004
    #define     B16MstQos_Reg_Qos_Rd_Val9                      0x0004
    #define   LSb32MstQos_Reg_Qos_Rd_Val9                         4
    #define   LSb16MstQos_Reg_Qos_Rd_Val9                         4
    #define       bMstQos_Reg_Qos_Rd_Val9                      4
    #define   MSK32MstQos_Reg_Qos_Rd_Val9                         0x000000F0

    #define     BA_MstQos_Reg_Qos_Rd_Val10                     0x0005
    #define     B16MstQos_Reg_Qos_Rd_Val10                     0x0004
    #define   LSb32MstQos_Reg_Qos_Rd_Val10                        8
    #define   LSb16MstQos_Reg_Qos_Rd_Val10                        8
    #define       bMstQos_Reg_Qos_Rd_Val10                     4
    #define   MSK32MstQos_Reg_Qos_Rd_Val10                        0x00000F00

    #define     BA_MstQos_Reg_Qos_Rd_Val11                     0x0005
    #define     B16MstQos_Reg_Qos_Rd_Val11                     0x0004
    #define   LSb32MstQos_Reg_Qos_Rd_Val11                        12
    #define   LSb16MstQos_Reg_Qos_Rd_Val11                        12
    #define       bMstQos_Reg_Qos_Rd_Val11                     4
    #define   MSK32MstQos_Reg_Qos_Rd_Val11                        0x0000F000

    #define     BA_MstQos_Reg_Qos_Rd_Val12                     0x0006
    #define     B16MstQos_Reg_Qos_Rd_Val12                     0x0006
    #define   LSb32MstQos_Reg_Qos_Rd_Val12                        16
    #define   LSb16MstQos_Reg_Qos_Rd_Val12                        0
    #define       bMstQos_Reg_Qos_Rd_Val12                     4
    #define   MSK32MstQos_Reg_Qos_Rd_Val12                        0x000F0000

    #define     BA_MstQos_Reg_Qos_Rd_Val13                     0x0006
    #define     B16MstQos_Reg_Qos_Rd_Val13                     0x0006
    #define   LSb32MstQos_Reg_Qos_Rd_Val13                        20
    #define   LSb16MstQos_Reg_Qos_Rd_Val13                        4
    #define       bMstQos_Reg_Qos_Rd_Val13                     4
    #define   MSK32MstQos_Reg_Qos_Rd_Val13                        0x00F00000

    #define     BA_MstQos_Reg_Qos_Rd_Val14                     0x0007
    #define     B16MstQos_Reg_Qos_Rd_Val14                     0x0006
    #define   LSb32MstQos_Reg_Qos_Rd_Val14                        24
    #define   LSb16MstQos_Reg_Qos_Rd_Val14                        8
    #define       bMstQos_Reg_Qos_Rd_Val14                     4
    #define   MSK32MstQos_Reg_Qos_Rd_Val14                        0x0F000000

    #define     BA_MstQos_Reg_Qos_Rd_Val15                     0x0007
    #define     B16MstQos_Reg_Qos_Rd_Val15                     0x0006
    #define   LSb32MstQos_Reg_Qos_Rd_Val15                        28
    #define   LSb16MstQos_Reg_Qos_Rd_Val15                        12
    #define       bMstQos_Reg_Qos_Rd_Val15                     4
    #define   MSK32MstQos_Reg_Qos_Rd_Val15                        0xF0000000
    ///////////////////////////////////////////////////////////
    #define     RA_MstQos_Reg_Qos_Wr                           0x0008

    #define     BA_MstQos_Reg_Qos_Wr_Val0                      0x0008
    #define     B16MstQos_Reg_Qos_Wr_Val0                      0x0008
    #define   LSb32MstQos_Reg_Qos_Wr_Val0                         0
    #define   LSb16MstQos_Reg_Qos_Wr_Val0                         0
    #define       bMstQos_Reg_Qos_Wr_Val0                      4
    #define   MSK32MstQos_Reg_Qos_Wr_Val0                         0x0000000F

    #define     BA_MstQos_Reg_Qos_Wr_Val1                      0x0008
    #define     B16MstQos_Reg_Qos_Wr_Val1                      0x0008
    #define   LSb32MstQos_Reg_Qos_Wr_Val1                         4
    #define   LSb16MstQos_Reg_Qos_Wr_Val1                         4
    #define       bMstQos_Reg_Qos_Wr_Val1                      4
    #define   MSK32MstQos_Reg_Qos_Wr_Val1                         0x000000F0

    #define     BA_MstQos_Reg_Qos_Wr_Val2                      0x0009
    #define     B16MstQos_Reg_Qos_Wr_Val2                      0x0008
    #define   LSb32MstQos_Reg_Qos_Wr_Val2                         8
    #define   LSb16MstQos_Reg_Qos_Wr_Val2                         8
    #define       bMstQos_Reg_Qos_Wr_Val2                      4
    #define   MSK32MstQos_Reg_Qos_Wr_Val2                         0x00000F00

    #define     BA_MstQos_Reg_Qos_Wr_Val3                      0x0009
    #define     B16MstQos_Reg_Qos_Wr_Val3                      0x0008
    #define   LSb32MstQos_Reg_Qos_Wr_Val3                         12
    #define   LSb16MstQos_Reg_Qos_Wr_Val3                         12
    #define       bMstQos_Reg_Qos_Wr_Val3                      4
    #define   MSK32MstQos_Reg_Qos_Wr_Val3                         0x0000F000

    #define     BA_MstQos_Reg_Qos_Wr_Val4                      0x000A
    #define     B16MstQos_Reg_Qos_Wr_Val4                      0x000A
    #define   LSb32MstQos_Reg_Qos_Wr_Val4                         16
    #define   LSb16MstQos_Reg_Qos_Wr_Val4                         0
    #define       bMstQos_Reg_Qos_Wr_Val4                      4
    #define   MSK32MstQos_Reg_Qos_Wr_Val4                         0x000F0000

    #define     BA_MstQos_Reg_Qos_Wr_Val5                      0x000A
    #define     B16MstQos_Reg_Qos_Wr_Val5                      0x000A
    #define   LSb32MstQos_Reg_Qos_Wr_Val5                         20
    #define   LSb16MstQos_Reg_Qos_Wr_Val5                         4
    #define       bMstQos_Reg_Qos_Wr_Val5                      4
    #define   MSK32MstQos_Reg_Qos_Wr_Val5                         0x00F00000

    #define     BA_MstQos_Reg_Qos_Wr_Val6                      0x000B
    #define     B16MstQos_Reg_Qos_Wr_Val6                      0x000A
    #define   LSb32MstQos_Reg_Qos_Wr_Val6                         24
    #define   LSb16MstQos_Reg_Qos_Wr_Val6                         8
    #define       bMstQos_Reg_Qos_Wr_Val6                      4
    #define   MSK32MstQos_Reg_Qos_Wr_Val6                         0x0F000000

    #define     BA_MstQos_Reg_Qos_Wr_Val7                      0x000B
    #define     B16MstQos_Reg_Qos_Wr_Val7                      0x000A
    #define   LSb32MstQos_Reg_Qos_Wr_Val7                         28
    #define   LSb16MstQos_Reg_Qos_Wr_Val7                         12
    #define       bMstQos_Reg_Qos_Wr_Val7                      4
    #define   MSK32MstQos_Reg_Qos_Wr_Val7                         0xF0000000

    #define     RA_MstQos_Reg_Qos_Wr1                          0x000C

    #define     BA_MstQos_Reg_Qos_Wr_Val8                      0x000C
    #define     B16MstQos_Reg_Qos_Wr_Val8                      0x000C
    #define   LSb32MstQos_Reg_Qos_Wr_Val8                         0
    #define   LSb16MstQos_Reg_Qos_Wr_Val8                         0
    #define       bMstQos_Reg_Qos_Wr_Val8                      4
    #define   MSK32MstQos_Reg_Qos_Wr_Val8                         0x0000000F

    #define     BA_MstQos_Reg_Qos_Wr_Val9                      0x000C
    #define     B16MstQos_Reg_Qos_Wr_Val9                      0x000C
    #define   LSb32MstQos_Reg_Qos_Wr_Val9                         4
    #define   LSb16MstQos_Reg_Qos_Wr_Val9                         4
    #define       bMstQos_Reg_Qos_Wr_Val9                      4
    #define   MSK32MstQos_Reg_Qos_Wr_Val9                         0x000000F0

    #define     BA_MstQos_Reg_Qos_Wr_Val10                     0x000D
    #define     B16MstQos_Reg_Qos_Wr_Val10                     0x000C
    #define   LSb32MstQos_Reg_Qos_Wr_Val10                        8
    #define   LSb16MstQos_Reg_Qos_Wr_Val10                        8
    #define       bMstQos_Reg_Qos_Wr_Val10                     4
    #define   MSK32MstQos_Reg_Qos_Wr_Val10                        0x00000F00

    #define     BA_MstQos_Reg_Qos_Wr_Val11                     0x000D
    #define     B16MstQos_Reg_Qos_Wr_Val11                     0x000C
    #define   LSb32MstQos_Reg_Qos_Wr_Val11                        12
    #define   LSb16MstQos_Reg_Qos_Wr_Val11                        12
    #define       bMstQos_Reg_Qos_Wr_Val11                     4
    #define   MSK32MstQos_Reg_Qos_Wr_Val11                        0x0000F000

    #define     BA_MstQos_Reg_Qos_Wr_Val12                     0x000E
    #define     B16MstQos_Reg_Qos_Wr_Val12                     0x000E
    #define   LSb32MstQos_Reg_Qos_Wr_Val12                        16
    #define   LSb16MstQos_Reg_Qos_Wr_Val12                        0
    #define       bMstQos_Reg_Qos_Wr_Val12                     4
    #define   MSK32MstQos_Reg_Qos_Wr_Val12                        0x000F0000

    #define     BA_MstQos_Reg_Qos_Wr_Val13                     0x000E
    #define     B16MstQos_Reg_Qos_Wr_Val13                     0x000E
    #define   LSb32MstQos_Reg_Qos_Wr_Val13                        20
    #define   LSb16MstQos_Reg_Qos_Wr_Val13                        4
    #define       bMstQos_Reg_Qos_Wr_Val13                     4
    #define   MSK32MstQos_Reg_Qos_Wr_Val13                        0x00F00000

    #define     BA_MstQos_Reg_Qos_Wr_Val14                     0x000F
    #define     B16MstQos_Reg_Qos_Wr_Val14                     0x000E
    #define   LSb32MstQos_Reg_Qos_Wr_Val14                        24
    #define   LSb16MstQos_Reg_Qos_Wr_Val14                        8
    #define       bMstQos_Reg_Qos_Wr_Val14                     4
    #define   MSK32MstQos_Reg_Qos_Wr_Val14                        0x0F000000

    #define     BA_MstQos_Reg_Qos_Wr_Val15                     0x000F
    #define     B16MstQos_Reg_Qos_Wr_Val15                     0x000E
    #define   LSb32MstQos_Reg_Qos_Wr_Val15                        28
    #define   LSb16MstQos_Reg_Qos_Wr_Val15                        12
    #define       bMstQos_Reg_Qos_Wr_Val15                     4
    #define   MSK32MstQos_Reg_Qos_Wr_Val15                        0xF0000000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MstQos_Reg {
    ///////////////////////////////////////////////////////////
    #define   GET32MstQos_Reg_Qos_Rd_Val0(r32)                 _BFGET_(r32, 3, 0)
    #define   SET32MstQos_Reg_Qos_Rd_Val0(r32,v)               _BFSET_(r32, 3, 0,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val0(r16)                 _BFGET_(r16, 3, 0)
    #define   SET16MstQos_Reg_Qos_Rd_Val0(r16,v)               _BFSET_(r16, 3, 0,v)

    #define   GET32MstQos_Reg_Qos_Rd_Val1(r32)                 _BFGET_(r32, 7, 4)
    #define   SET32MstQos_Reg_Qos_Rd_Val1(r32,v)               _BFSET_(r32, 7, 4,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val1(r16)                 _BFGET_(r16, 7, 4)
    #define   SET16MstQos_Reg_Qos_Rd_Val1(r16,v)               _BFSET_(r16, 7, 4,v)

    #define   GET32MstQos_Reg_Qos_Rd_Val2(r32)                 _BFGET_(r32,11, 8)
    #define   SET32MstQos_Reg_Qos_Rd_Val2(r32,v)               _BFSET_(r32,11, 8,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val2(r16)                 _BFGET_(r16,11, 8)
    #define   SET16MstQos_Reg_Qos_Rd_Val2(r16,v)               _BFSET_(r16,11, 8,v)

    #define   GET32MstQos_Reg_Qos_Rd_Val3(r32)                 _BFGET_(r32,15,12)
    #define   SET32MstQos_Reg_Qos_Rd_Val3(r32,v)               _BFSET_(r32,15,12,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val3(r16)                 _BFGET_(r16,15,12)
    #define   SET16MstQos_Reg_Qos_Rd_Val3(r16,v)               _BFSET_(r16,15,12,v)

    #define   GET32MstQos_Reg_Qos_Rd_Val4(r32)                 _BFGET_(r32,19,16)
    #define   SET32MstQos_Reg_Qos_Rd_Val4(r32,v)               _BFSET_(r32,19,16,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val4(r16)                 _BFGET_(r16, 3, 0)
    #define   SET16MstQos_Reg_Qos_Rd_Val4(r16,v)               _BFSET_(r16, 3, 0,v)

    #define   GET32MstQos_Reg_Qos_Rd_Val5(r32)                 _BFGET_(r32,23,20)
    #define   SET32MstQos_Reg_Qos_Rd_Val5(r32,v)               _BFSET_(r32,23,20,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val5(r16)                 _BFGET_(r16, 7, 4)
    #define   SET16MstQos_Reg_Qos_Rd_Val5(r16,v)               _BFSET_(r16, 7, 4,v)

    #define   GET32MstQos_Reg_Qos_Rd_Val6(r32)                 _BFGET_(r32,27,24)
    #define   SET32MstQos_Reg_Qos_Rd_Val6(r32,v)               _BFSET_(r32,27,24,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val6(r16)                 _BFGET_(r16,11, 8)
    #define   SET16MstQos_Reg_Qos_Rd_Val6(r16,v)               _BFSET_(r16,11, 8,v)

    #define   GET32MstQos_Reg_Qos_Rd_Val7(r32)                 _BFGET_(r32,31,28)
    #define   SET32MstQos_Reg_Qos_Rd_Val7(r32,v)               _BFSET_(r32,31,28,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val7(r16)                 _BFGET_(r16,15,12)
    #define   SET16MstQos_Reg_Qos_Rd_Val7(r16,v)               _BFSET_(r16,15,12,v)

    #define     w32MstQos_Reg_Qos_Rd                           {\
            UNSG32 uQos_Rd_Val0                                :  4;\
            UNSG32 uQos_Rd_Val1                                :  4;\
            UNSG32 uQos_Rd_Val2                                :  4;\
            UNSG32 uQos_Rd_Val3                                :  4;\
            UNSG32 uQos_Rd_Val4                                :  4;\
            UNSG32 uQos_Rd_Val5                                :  4;\
            UNSG32 uQos_Rd_Val6                                :  4;\
            UNSG32 uQos_Rd_Val7                                :  4;\
          }
    union { UNSG32 u32MstQos_Reg_Qos_Rd;
            struct w32MstQos_Reg_Qos_Rd;
          };
    #define   GET32MstQos_Reg_Qos_Rd_Val8(r32)                 _BFGET_(r32, 3, 0)
    #define   SET32MstQos_Reg_Qos_Rd_Val8(r32,v)               _BFSET_(r32, 3, 0,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val8(r16)                 _BFGET_(r16, 3, 0)
    #define   SET16MstQos_Reg_Qos_Rd_Val8(r16,v)               _BFSET_(r16, 3, 0,v)

    #define   GET32MstQos_Reg_Qos_Rd_Val9(r32)                 _BFGET_(r32, 7, 4)
    #define   SET32MstQos_Reg_Qos_Rd_Val9(r32,v)               _BFSET_(r32, 7, 4,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val9(r16)                 _BFGET_(r16, 7, 4)
    #define   SET16MstQos_Reg_Qos_Rd_Val9(r16,v)               _BFSET_(r16, 7, 4,v)

    #define   GET32MstQos_Reg_Qos_Rd_Val10(r32)                _BFGET_(r32,11, 8)
    #define   SET32MstQos_Reg_Qos_Rd_Val10(r32,v)              _BFSET_(r32,11, 8,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val10(r16)                _BFGET_(r16,11, 8)
    #define   SET16MstQos_Reg_Qos_Rd_Val10(r16,v)              _BFSET_(r16,11, 8,v)

    #define   GET32MstQos_Reg_Qos_Rd_Val11(r32)                _BFGET_(r32,15,12)
    #define   SET32MstQos_Reg_Qos_Rd_Val11(r32,v)              _BFSET_(r32,15,12,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val11(r16)                _BFGET_(r16,15,12)
    #define   SET16MstQos_Reg_Qos_Rd_Val11(r16,v)              _BFSET_(r16,15,12,v)

    #define   GET32MstQos_Reg_Qos_Rd_Val12(r32)                _BFGET_(r32,19,16)
    #define   SET32MstQos_Reg_Qos_Rd_Val12(r32,v)              _BFSET_(r32,19,16,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val12(r16)                _BFGET_(r16, 3, 0)
    #define   SET16MstQos_Reg_Qos_Rd_Val12(r16,v)              _BFSET_(r16, 3, 0,v)

    #define   GET32MstQos_Reg_Qos_Rd_Val13(r32)                _BFGET_(r32,23,20)
    #define   SET32MstQos_Reg_Qos_Rd_Val13(r32,v)              _BFSET_(r32,23,20,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val13(r16)                _BFGET_(r16, 7, 4)
    #define   SET16MstQos_Reg_Qos_Rd_Val13(r16,v)              _BFSET_(r16, 7, 4,v)

    #define   GET32MstQos_Reg_Qos_Rd_Val14(r32)                _BFGET_(r32,27,24)
    #define   SET32MstQos_Reg_Qos_Rd_Val14(r32,v)              _BFSET_(r32,27,24,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val14(r16)                _BFGET_(r16,11, 8)
    #define   SET16MstQos_Reg_Qos_Rd_Val14(r16,v)              _BFSET_(r16,11, 8,v)

    #define   GET32MstQos_Reg_Qos_Rd_Val15(r32)                _BFGET_(r32,31,28)
    #define   SET32MstQos_Reg_Qos_Rd_Val15(r32,v)              _BFSET_(r32,31,28,v)
    #define   GET16MstQos_Reg_Qos_Rd_Val15(r16)                _BFGET_(r16,15,12)
    #define   SET16MstQos_Reg_Qos_Rd_Val15(r16,v)              _BFSET_(r16,15,12,v)

    #define     w32MstQos_Reg_Qos_Rd1                          {\
            UNSG32 uQos_Rd_Val8                                :  4;\
            UNSG32 uQos_Rd_Val9                                :  4;\
            UNSG32 uQos_Rd_Val10                               :  4;\
            UNSG32 uQos_Rd_Val11                               :  4;\
            UNSG32 uQos_Rd_Val12                               :  4;\
            UNSG32 uQos_Rd_Val13                               :  4;\
            UNSG32 uQos_Rd_Val14                               :  4;\
            UNSG32 uQos_Rd_Val15                               :  4;\
          }
    union { UNSG32 u32MstQos_Reg_Qos_Rd1;
            struct w32MstQos_Reg_Qos_Rd1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MstQos_Reg_Qos_Wr_Val0(r32)                 _BFGET_(r32, 3, 0)
    #define   SET32MstQos_Reg_Qos_Wr_Val0(r32,v)               _BFSET_(r32, 3, 0,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val0(r16)                 _BFGET_(r16, 3, 0)
    #define   SET16MstQos_Reg_Qos_Wr_Val0(r16,v)               _BFSET_(r16, 3, 0,v)

    #define   GET32MstQos_Reg_Qos_Wr_Val1(r32)                 _BFGET_(r32, 7, 4)
    #define   SET32MstQos_Reg_Qos_Wr_Val1(r32,v)               _BFSET_(r32, 7, 4,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val1(r16)                 _BFGET_(r16, 7, 4)
    #define   SET16MstQos_Reg_Qos_Wr_Val1(r16,v)               _BFSET_(r16, 7, 4,v)

    #define   GET32MstQos_Reg_Qos_Wr_Val2(r32)                 _BFGET_(r32,11, 8)
    #define   SET32MstQos_Reg_Qos_Wr_Val2(r32,v)               _BFSET_(r32,11, 8,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val2(r16)                 _BFGET_(r16,11, 8)
    #define   SET16MstQos_Reg_Qos_Wr_Val2(r16,v)               _BFSET_(r16,11, 8,v)

    #define   GET32MstQos_Reg_Qos_Wr_Val3(r32)                 _BFGET_(r32,15,12)
    #define   SET32MstQos_Reg_Qos_Wr_Val3(r32,v)               _BFSET_(r32,15,12,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val3(r16)                 _BFGET_(r16,15,12)
    #define   SET16MstQos_Reg_Qos_Wr_Val3(r16,v)               _BFSET_(r16,15,12,v)

    #define   GET32MstQos_Reg_Qos_Wr_Val4(r32)                 _BFGET_(r32,19,16)
    #define   SET32MstQos_Reg_Qos_Wr_Val4(r32,v)               _BFSET_(r32,19,16,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val4(r16)                 _BFGET_(r16, 3, 0)
    #define   SET16MstQos_Reg_Qos_Wr_Val4(r16,v)               _BFSET_(r16, 3, 0,v)

    #define   GET32MstQos_Reg_Qos_Wr_Val5(r32)                 _BFGET_(r32,23,20)
    #define   SET32MstQos_Reg_Qos_Wr_Val5(r32,v)               _BFSET_(r32,23,20,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val5(r16)                 _BFGET_(r16, 7, 4)
    #define   SET16MstQos_Reg_Qos_Wr_Val5(r16,v)               _BFSET_(r16, 7, 4,v)

    #define   GET32MstQos_Reg_Qos_Wr_Val6(r32)                 _BFGET_(r32,27,24)
    #define   SET32MstQos_Reg_Qos_Wr_Val6(r32,v)               _BFSET_(r32,27,24,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val6(r16)                 _BFGET_(r16,11, 8)
    #define   SET16MstQos_Reg_Qos_Wr_Val6(r16,v)               _BFSET_(r16,11, 8,v)

    #define   GET32MstQos_Reg_Qos_Wr_Val7(r32)                 _BFGET_(r32,31,28)
    #define   SET32MstQos_Reg_Qos_Wr_Val7(r32,v)               _BFSET_(r32,31,28,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val7(r16)                 _BFGET_(r16,15,12)
    #define   SET16MstQos_Reg_Qos_Wr_Val7(r16,v)               _BFSET_(r16,15,12,v)

    #define     w32MstQos_Reg_Qos_Wr                           {\
            UNSG32 uQos_Wr_Val0                                :  4;\
            UNSG32 uQos_Wr_Val1                                :  4;\
            UNSG32 uQos_Wr_Val2                                :  4;\
            UNSG32 uQos_Wr_Val3                                :  4;\
            UNSG32 uQos_Wr_Val4                                :  4;\
            UNSG32 uQos_Wr_Val5                                :  4;\
            UNSG32 uQos_Wr_Val6                                :  4;\
            UNSG32 uQos_Wr_Val7                                :  4;\
          }
    union { UNSG32 u32MstQos_Reg_Qos_Wr;
            struct w32MstQos_Reg_Qos_Wr;
          };
    #define   GET32MstQos_Reg_Qos_Wr_Val8(r32)                 _BFGET_(r32, 3, 0)
    #define   SET32MstQos_Reg_Qos_Wr_Val8(r32,v)               _BFSET_(r32, 3, 0,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val8(r16)                 _BFGET_(r16, 3, 0)
    #define   SET16MstQos_Reg_Qos_Wr_Val8(r16,v)               _BFSET_(r16, 3, 0,v)

    #define   GET32MstQos_Reg_Qos_Wr_Val9(r32)                 _BFGET_(r32, 7, 4)
    #define   SET32MstQos_Reg_Qos_Wr_Val9(r32,v)               _BFSET_(r32, 7, 4,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val9(r16)                 _BFGET_(r16, 7, 4)
    #define   SET16MstQos_Reg_Qos_Wr_Val9(r16,v)               _BFSET_(r16, 7, 4,v)

    #define   GET32MstQos_Reg_Qos_Wr_Val10(r32)                _BFGET_(r32,11, 8)
    #define   SET32MstQos_Reg_Qos_Wr_Val10(r32,v)              _BFSET_(r32,11, 8,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val10(r16)                _BFGET_(r16,11, 8)
    #define   SET16MstQos_Reg_Qos_Wr_Val10(r16,v)              _BFSET_(r16,11, 8,v)

    #define   GET32MstQos_Reg_Qos_Wr_Val11(r32)                _BFGET_(r32,15,12)
    #define   SET32MstQos_Reg_Qos_Wr_Val11(r32,v)              _BFSET_(r32,15,12,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val11(r16)                _BFGET_(r16,15,12)
    #define   SET16MstQos_Reg_Qos_Wr_Val11(r16,v)              _BFSET_(r16,15,12,v)

    #define   GET32MstQos_Reg_Qos_Wr_Val12(r32)                _BFGET_(r32,19,16)
    #define   SET32MstQos_Reg_Qos_Wr_Val12(r32,v)              _BFSET_(r32,19,16,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val12(r16)                _BFGET_(r16, 3, 0)
    #define   SET16MstQos_Reg_Qos_Wr_Val12(r16,v)              _BFSET_(r16, 3, 0,v)

    #define   GET32MstQos_Reg_Qos_Wr_Val13(r32)                _BFGET_(r32,23,20)
    #define   SET32MstQos_Reg_Qos_Wr_Val13(r32,v)              _BFSET_(r32,23,20,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val13(r16)                _BFGET_(r16, 7, 4)
    #define   SET16MstQos_Reg_Qos_Wr_Val13(r16,v)              _BFSET_(r16, 7, 4,v)

    #define   GET32MstQos_Reg_Qos_Wr_Val14(r32)                _BFGET_(r32,27,24)
    #define   SET32MstQos_Reg_Qos_Wr_Val14(r32,v)              _BFSET_(r32,27,24,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val14(r16)                _BFGET_(r16,11, 8)
    #define   SET16MstQos_Reg_Qos_Wr_Val14(r16,v)              _BFSET_(r16,11, 8,v)

    #define   GET32MstQos_Reg_Qos_Wr_Val15(r32)                _BFGET_(r32,31,28)
    #define   SET32MstQos_Reg_Qos_Wr_Val15(r32,v)              _BFSET_(r32,31,28,v)
    #define   GET16MstQos_Reg_Qos_Wr_Val15(r16)                _BFGET_(r16,15,12)
    #define   SET16MstQos_Reg_Qos_Wr_Val15(r16,v)              _BFSET_(r16,15,12,v)

    #define     w32MstQos_Reg_Qos_Wr1                          {\
            UNSG32 uQos_Wr_Val8                                :  4;\
            UNSG32 uQos_Wr_Val9                                :  4;\
            UNSG32 uQos_Wr_Val10                               :  4;\
            UNSG32 uQos_Wr_Val11                               :  4;\
            UNSG32 uQos_Wr_Val12                               :  4;\
            UNSG32 uQos_Wr_Val13                               :  4;\
            UNSG32 uQos_Wr_Val14                               :  4;\
            UNSG32 uQos_Wr_Val15                               :  4;\
          }
    union { UNSG32 u32MstQos_Reg_Qos_Wr1;
            struct w32MstQos_Reg_Qos_Wr1;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MstQos_Reg;

    typedef union  T32MstQos_Reg_Qos_Rd
          { UNSG32 u32;
            struct w32MstQos_Reg_Qos_Rd;
                 } T32MstQos_Reg_Qos_Rd;
    typedef union  T32MstQos_Reg_Qos_Rd1
          { UNSG32 u32;
            struct w32MstQos_Reg_Qos_Rd1;
                 } T32MstQos_Reg_Qos_Rd1;
    typedef union  T32MstQos_Reg_Qos_Wr
          { UNSG32 u32;
            struct w32MstQos_Reg_Qos_Wr;
                 } T32MstQos_Reg_Qos_Wr;
    typedef union  T32MstQos_Reg_Qos_Wr1
          { UNSG32 u32;
            struct w32MstQos_Reg_Qos_Wr1;
                 } T32MstQos_Reg_Qos_Wr1;
    ///////////////////////////////////////////////////////////

    typedef union  TMstQos_Reg_Qos_Rd
          { UNSG32 u32[2];
            struct {
            struct w32MstQos_Reg_Qos_Rd;
            struct w32MstQos_Reg_Qos_Rd1;
                   };
                 } TMstQos_Reg_Qos_Rd;
    typedef union  TMstQos_Reg_Qos_Wr
          { UNSG32 u32[2];
            struct {
            struct w32MstQos_Reg_Qos_Wr;
            struct w32MstQos_Reg_Qos_Wr1;
                   };
                 } TMstQos_Reg_Qos_Wr;

    ///////////////////////////////////////////////////////////
     SIGN32 MstQos_Reg_drvrd(SIE_MstQos_Reg *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MstQos_Reg_drvwr(SIE_MstQos_Reg *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MstQos_Reg_reset(SIE_MstQos_Reg *p);
     SIGN32 MstQos_Reg_cmp  (SIE_MstQos_Reg *p, SIE_MstQos_Reg *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MstQos_Reg_check(p,pie,pfx,hLOG) MstQos_Reg_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MstQos_Reg_print(p,    pfx,hLOG) MstQos_Reg_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MstQos_Reg
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE AxCacheOWCPU                             (4,4)
///     ###
///     * CPU AXI AxCache bit overwrite
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 AxCache              (P)
///               %unsigned 4  Write                     0xF
///                                    ###
///                                    * AWCache
///                                    ###
///               %unsigned 1  WrBypass                  0x0
///                                    ###
///                                    * Bypass AWCache
///                                    * 1: use Biu value
///                                    * 0: use master value
///                                    ###
///               %unsigned 4  Read                      0xF
///                                    ###
///                                    * ARCache
///                                    ###
///               %unsigned 1  RdBypass                  0x0
///                                    ###
///                                    * Bypass ARCache
///                                    * 1: use Biu value
///                                    * 0: use master value
///                                    ###
///               %%        22         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      10b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_AxCacheOWCPU
#define h_AxCacheOWCPU (){}

    #define     RA_AxCacheOWCPU_AxCache                        0x0000

    #define     BA_AxCacheOWCPU_AxCache_Write                  0x0000
    #define     B16AxCacheOWCPU_AxCache_Write                  0x0000
    #define   LSb32AxCacheOWCPU_AxCache_Write                     0
    #define   LSb16AxCacheOWCPU_AxCache_Write                     0
    #define       bAxCacheOWCPU_AxCache_Write                  4
    #define   MSK32AxCacheOWCPU_AxCache_Write                     0x0000000F

    #define     BA_AxCacheOWCPU_AxCache_WrBypass               0x0000
    #define     B16AxCacheOWCPU_AxCache_WrBypass               0x0000
    #define   LSb32AxCacheOWCPU_AxCache_WrBypass                  4
    #define   LSb16AxCacheOWCPU_AxCache_WrBypass                  4
    #define       bAxCacheOWCPU_AxCache_WrBypass               1
    #define   MSK32AxCacheOWCPU_AxCache_WrBypass                  0x00000010

    #define     BA_AxCacheOWCPU_AxCache_Read                   0x0000
    #define     B16AxCacheOWCPU_AxCache_Read                   0x0000
    #define   LSb32AxCacheOWCPU_AxCache_Read                      5
    #define   LSb16AxCacheOWCPU_AxCache_Read                      5
    #define       bAxCacheOWCPU_AxCache_Read                   4
    #define   MSK32AxCacheOWCPU_AxCache_Read                      0x000001E0

    #define     BA_AxCacheOWCPU_AxCache_RdBypass               0x0001
    #define     B16AxCacheOWCPU_AxCache_RdBypass               0x0000
    #define   LSb32AxCacheOWCPU_AxCache_RdBypass                  9
    #define   LSb16AxCacheOWCPU_AxCache_RdBypass                  9
    #define       bAxCacheOWCPU_AxCache_RdBypass               1
    #define   MSK32AxCacheOWCPU_AxCache_RdBypass                  0x00000200
    ///////////////////////////////////////////////////////////

    typedef struct SIE_AxCacheOWCPU {
    ///////////////////////////////////////////////////////////
    #define   GET32AxCacheOWCPU_AxCache_Write(r32)             _BFGET_(r32, 3, 0)
    #define   SET32AxCacheOWCPU_AxCache_Write(r32,v)           _BFSET_(r32, 3, 0,v)
    #define   GET16AxCacheOWCPU_AxCache_Write(r16)             _BFGET_(r16, 3, 0)
    #define   SET16AxCacheOWCPU_AxCache_Write(r16,v)           _BFSET_(r16, 3, 0,v)

    #define   GET32AxCacheOWCPU_AxCache_WrBypass(r32)          _BFGET_(r32, 4, 4)
    #define   SET32AxCacheOWCPU_AxCache_WrBypass(r32,v)        _BFSET_(r32, 4, 4,v)
    #define   GET16AxCacheOWCPU_AxCache_WrBypass(r16)          _BFGET_(r16, 4, 4)
    #define   SET16AxCacheOWCPU_AxCache_WrBypass(r16,v)        _BFSET_(r16, 4, 4,v)

    #define   GET32AxCacheOWCPU_AxCache_Read(r32)              _BFGET_(r32, 8, 5)
    #define   SET32AxCacheOWCPU_AxCache_Read(r32,v)            _BFSET_(r32, 8, 5,v)
    #define   GET16AxCacheOWCPU_AxCache_Read(r16)              _BFGET_(r16, 8, 5)
    #define   SET16AxCacheOWCPU_AxCache_Read(r16,v)            _BFSET_(r16, 8, 5,v)

    #define   GET32AxCacheOWCPU_AxCache_RdBypass(r32)          _BFGET_(r32, 9, 9)
    #define   SET32AxCacheOWCPU_AxCache_RdBypass(r32,v)        _BFSET_(r32, 9, 9,v)
    #define   GET16AxCacheOWCPU_AxCache_RdBypass(r16)          _BFGET_(r16, 9, 9)
    #define   SET16AxCacheOWCPU_AxCache_RdBypass(r16,v)        _BFSET_(r16, 9, 9,v)

    #define     w32AxCacheOWCPU_AxCache                        {\
            UNSG32 uAxCache_Write                              :  4;\
            UNSG32 uAxCache_WrBypass                           :  1;\
            UNSG32 uAxCache_Read                               :  4;\
            UNSG32 uAxCache_RdBypass                           :  1;\
            UNSG32 RSVDx0_b10                                  : 22;\
          }
    union { UNSG32 u32AxCacheOWCPU_AxCache;
            struct w32AxCacheOWCPU_AxCache;
          };
    ///////////////////////////////////////////////////////////
    } SIE_AxCacheOWCPU;

    typedef union  T32AxCacheOWCPU_AxCache
          { UNSG32 u32;
            struct w32AxCacheOWCPU_AxCache;
                 } T32AxCacheOWCPU_AxCache;
    ///////////////////////////////////////////////////////////

    typedef union  TAxCacheOWCPU_AxCache
          { UNSG32 u32[1];
            struct {
            struct w32AxCacheOWCPU_AxCache;
                   };
                 } TAxCacheOWCPU_AxCache;

    ///////////////////////////////////////////////////////////
     SIGN32 AxCacheOWCPU_drvrd(SIE_AxCacheOWCPU *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 AxCacheOWCPU_drvwr(SIE_AxCacheOWCPU *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void AxCacheOWCPU_reset(SIE_AxCacheOWCPU *p);
     SIGN32 AxCacheOWCPU_cmp  (SIE_AxCacheOWCPU *p, SIE_AxCacheOWCPU *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define AxCacheOWCPU_check(p,pie,pfx,hLOG) AxCacheOWCPU_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define AxCacheOWCPU_print(p,    pfx,hLOG) AxCacheOWCPU_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: AxCacheOWCPU
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE AxID_4_TZC_FPID                          (4,4)
///     ###
///     * Following IDs are used for generating FPID input of TZC
///     * Provide 4 mask and match pairs per input, per AR/AW channel
///     * Equation :
///     * FPID[n] = (AxID && AxIDMask[n] == AxIDMatch[n])
///     * FPID = FPID[0] || FPID[1] || FPID[2] || FPID[3]
///     * For example, the Ids for a master that is expected to use the fast path are in the range 4'b1000 to 4'b1011, then FPID is set high by setting AxIDMask = 4'b1100 and AxIDMatch = 4'b1000
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 ARID0                (P)
///               %unsigned 16 Golden                    0x0
///               %unsigned 16 Mask                      0x0
///     @ 0x00004 AWID0                (P)
///               %unsigned 16 Golden                    0x0
///               %unsigned 16 Mask                      0x0
///     @ 0x00008 ARID1                (P)
///               %unsigned 16 Golden                    0x0
///               %unsigned 16 Mask                      0x0
///     @ 0x0000C AWID1                (P)
///               %unsigned 16 Golden                    0x0
///               %unsigned 16 Mask                      0x0
///     @ 0x00010 ARID2                (P)
///               %unsigned 16 Golden                    0x0
///               %unsigned 16 Mask                      0x0
///     @ 0x00014 AWID2                (P)
///               %unsigned 16 Golden                    0x0
///               %unsigned 16 Mask                      0x0
///     @ 0x00018 ARID3                (P)
///               %unsigned 16 Golden                    0x0
///               %unsigned 16 Mask                      0x0
///     @ 0x0001C AWID3                (P)
///               %unsigned 16 Golden                    0x0
///               %unsigned 16 Mask                      0x0
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      32B, bits:     256b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_AxID_4_TZC_FPID
#define h_AxID_4_TZC_FPID (){}

    #define     RA_AxID_4_TZC_FPID_ARID0                       0x0000

    #define     BA_AxID_4_TZC_FPID_ARID0_Golden                0x0000
    #define     B16AxID_4_TZC_FPID_ARID0_Golden                0x0000
    #define   LSb32AxID_4_TZC_FPID_ARID0_Golden                   0
    #define   LSb16AxID_4_TZC_FPID_ARID0_Golden                   0
    #define       bAxID_4_TZC_FPID_ARID0_Golden                16
    #define   MSK32AxID_4_TZC_FPID_ARID0_Golden                   0x0000FFFF

    #define     BA_AxID_4_TZC_FPID_ARID0_Mask                  0x0002
    #define     B16AxID_4_TZC_FPID_ARID0_Mask                  0x0002
    #define   LSb32AxID_4_TZC_FPID_ARID0_Mask                     16
    #define   LSb16AxID_4_TZC_FPID_ARID0_Mask                     0
    #define       bAxID_4_TZC_FPID_ARID0_Mask                  16
    #define   MSK32AxID_4_TZC_FPID_ARID0_Mask                     0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_AxID_4_TZC_FPID_AWID0                       0x0004

    #define     BA_AxID_4_TZC_FPID_AWID0_Golden                0x0004
    #define     B16AxID_4_TZC_FPID_AWID0_Golden                0x0004
    #define   LSb32AxID_4_TZC_FPID_AWID0_Golden                   0
    #define   LSb16AxID_4_TZC_FPID_AWID0_Golden                   0
    #define       bAxID_4_TZC_FPID_AWID0_Golden                16
    #define   MSK32AxID_4_TZC_FPID_AWID0_Golden                   0x0000FFFF

    #define     BA_AxID_4_TZC_FPID_AWID0_Mask                  0x0006
    #define     B16AxID_4_TZC_FPID_AWID0_Mask                  0x0006
    #define   LSb32AxID_4_TZC_FPID_AWID0_Mask                     16
    #define   LSb16AxID_4_TZC_FPID_AWID0_Mask                     0
    #define       bAxID_4_TZC_FPID_AWID0_Mask                  16
    #define   MSK32AxID_4_TZC_FPID_AWID0_Mask                     0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_AxID_4_TZC_FPID_ARID1                       0x0008

    #define     BA_AxID_4_TZC_FPID_ARID1_Golden                0x0008
    #define     B16AxID_4_TZC_FPID_ARID1_Golden                0x0008
    #define   LSb32AxID_4_TZC_FPID_ARID1_Golden                   0
    #define   LSb16AxID_4_TZC_FPID_ARID1_Golden                   0
    #define       bAxID_4_TZC_FPID_ARID1_Golden                16
    #define   MSK32AxID_4_TZC_FPID_ARID1_Golden                   0x0000FFFF

    #define     BA_AxID_4_TZC_FPID_ARID1_Mask                  0x000A
    #define     B16AxID_4_TZC_FPID_ARID1_Mask                  0x000A
    #define   LSb32AxID_4_TZC_FPID_ARID1_Mask                     16
    #define   LSb16AxID_4_TZC_FPID_ARID1_Mask                     0
    #define       bAxID_4_TZC_FPID_ARID1_Mask                  16
    #define   MSK32AxID_4_TZC_FPID_ARID1_Mask                     0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_AxID_4_TZC_FPID_AWID1                       0x000C

    #define     BA_AxID_4_TZC_FPID_AWID1_Golden                0x000C
    #define     B16AxID_4_TZC_FPID_AWID1_Golden                0x000C
    #define   LSb32AxID_4_TZC_FPID_AWID1_Golden                   0
    #define   LSb16AxID_4_TZC_FPID_AWID1_Golden                   0
    #define       bAxID_4_TZC_FPID_AWID1_Golden                16
    #define   MSK32AxID_4_TZC_FPID_AWID1_Golden                   0x0000FFFF

    #define     BA_AxID_4_TZC_FPID_AWID1_Mask                  0x000E
    #define     B16AxID_4_TZC_FPID_AWID1_Mask                  0x000E
    #define   LSb32AxID_4_TZC_FPID_AWID1_Mask                     16
    #define   LSb16AxID_4_TZC_FPID_AWID1_Mask                     0
    #define       bAxID_4_TZC_FPID_AWID1_Mask                  16
    #define   MSK32AxID_4_TZC_FPID_AWID1_Mask                     0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_AxID_4_TZC_FPID_ARID2                       0x0010

    #define     BA_AxID_4_TZC_FPID_ARID2_Golden                0x0010
    #define     B16AxID_4_TZC_FPID_ARID2_Golden                0x0010
    #define   LSb32AxID_4_TZC_FPID_ARID2_Golden                   0
    #define   LSb16AxID_4_TZC_FPID_ARID2_Golden                   0
    #define       bAxID_4_TZC_FPID_ARID2_Golden                16
    #define   MSK32AxID_4_TZC_FPID_ARID2_Golden                   0x0000FFFF

    #define     BA_AxID_4_TZC_FPID_ARID2_Mask                  0x0012
    #define     B16AxID_4_TZC_FPID_ARID2_Mask                  0x0012
    #define   LSb32AxID_4_TZC_FPID_ARID2_Mask                     16
    #define   LSb16AxID_4_TZC_FPID_ARID2_Mask                     0
    #define       bAxID_4_TZC_FPID_ARID2_Mask                  16
    #define   MSK32AxID_4_TZC_FPID_ARID2_Mask                     0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_AxID_4_TZC_FPID_AWID2                       0x0014

    #define     BA_AxID_4_TZC_FPID_AWID2_Golden                0x0014
    #define     B16AxID_4_TZC_FPID_AWID2_Golden                0x0014
    #define   LSb32AxID_4_TZC_FPID_AWID2_Golden                   0
    #define   LSb16AxID_4_TZC_FPID_AWID2_Golden                   0
    #define       bAxID_4_TZC_FPID_AWID2_Golden                16
    #define   MSK32AxID_4_TZC_FPID_AWID2_Golden                   0x0000FFFF

    #define     BA_AxID_4_TZC_FPID_AWID2_Mask                  0x0016
    #define     B16AxID_4_TZC_FPID_AWID2_Mask                  0x0016
    #define   LSb32AxID_4_TZC_FPID_AWID2_Mask                     16
    #define   LSb16AxID_4_TZC_FPID_AWID2_Mask                     0
    #define       bAxID_4_TZC_FPID_AWID2_Mask                  16
    #define   MSK32AxID_4_TZC_FPID_AWID2_Mask                     0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_AxID_4_TZC_FPID_ARID3                       0x0018

    #define     BA_AxID_4_TZC_FPID_ARID3_Golden                0x0018
    #define     B16AxID_4_TZC_FPID_ARID3_Golden                0x0018
    #define   LSb32AxID_4_TZC_FPID_ARID3_Golden                   0
    #define   LSb16AxID_4_TZC_FPID_ARID3_Golden                   0
    #define       bAxID_4_TZC_FPID_ARID3_Golden                16
    #define   MSK32AxID_4_TZC_FPID_ARID3_Golden                   0x0000FFFF

    #define     BA_AxID_4_TZC_FPID_ARID3_Mask                  0x001A
    #define     B16AxID_4_TZC_FPID_ARID3_Mask                  0x001A
    #define   LSb32AxID_4_TZC_FPID_ARID3_Mask                     16
    #define   LSb16AxID_4_TZC_FPID_ARID3_Mask                     0
    #define       bAxID_4_TZC_FPID_ARID3_Mask                  16
    #define   MSK32AxID_4_TZC_FPID_ARID3_Mask                     0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_AxID_4_TZC_FPID_AWID3                       0x001C

    #define     BA_AxID_4_TZC_FPID_AWID3_Golden                0x001C
    #define     B16AxID_4_TZC_FPID_AWID3_Golden                0x001C
    #define   LSb32AxID_4_TZC_FPID_AWID3_Golden                   0
    #define   LSb16AxID_4_TZC_FPID_AWID3_Golden                   0
    #define       bAxID_4_TZC_FPID_AWID3_Golden                16
    #define   MSK32AxID_4_TZC_FPID_AWID3_Golden                   0x0000FFFF

    #define     BA_AxID_4_TZC_FPID_AWID3_Mask                  0x001E
    #define     B16AxID_4_TZC_FPID_AWID3_Mask                  0x001E
    #define   LSb32AxID_4_TZC_FPID_AWID3_Mask                     16
    #define   LSb16AxID_4_TZC_FPID_AWID3_Mask                     0
    #define       bAxID_4_TZC_FPID_AWID3_Mask                  16
    #define   MSK32AxID_4_TZC_FPID_AWID3_Mask                     0xFFFF0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_AxID_4_TZC_FPID {
    ///////////////////////////////////////////////////////////
    #define   GET32AxID_4_TZC_FPID_ARID0_Golden(r32)           _BFGET_(r32,15, 0)
    #define   SET32AxID_4_TZC_FPID_ARID0_Golden(r32,v)         _BFSET_(r32,15, 0,v)
    #define   GET16AxID_4_TZC_FPID_ARID0_Golden(r16)           _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_ARID0_Golden(r16,v)         _BFSET_(r16,15, 0,v)

    #define   GET32AxID_4_TZC_FPID_ARID0_Mask(r32)             _BFGET_(r32,31,16)
    #define   SET32AxID_4_TZC_FPID_ARID0_Mask(r32,v)           _BFSET_(r32,31,16,v)
    #define   GET16AxID_4_TZC_FPID_ARID0_Mask(r16)             _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_ARID0_Mask(r16,v)           _BFSET_(r16,15, 0,v)

    #define     w32AxID_4_TZC_FPID_ARID0                       {\
            UNSG32 uARID0_Golden                               : 16;\
            UNSG32 uARID0_Mask                                 : 16;\
          }
    union { UNSG32 u32AxID_4_TZC_FPID_ARID0;
            struct w32AxID_4_TZC_FPID_ARID0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxID_4_TZC_FPID_AWID0_Golden(r32)           _BFGET_(r32,15, 0)
    #define   SET32AxID_4_TZC_FPID_AWID0_Golden(r32,v)         _BFSET_(r32,15, 0,v)
    #define   GET16AxID_4_TZC_FPID_AWID0_Golden(r16)           _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_AWID0_Golden(r16,v)         _BFSET_(r16,15, 0,v)

    #define   GET32AxID_4_TZC_FPID_AWID0_Mask(r32)             _BFGET_(r32,31,16)
    #define   SET32AxID_4_TZC_FPID_AWID0_Mask(r32,v)           _BFSET_(r32,31,16,v)
    #define   GET16AxID_4_TZC_FPID_AWID0_Mask(r16)             _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_AWID0_Mask(r16,v)           _BFSET_(r16,15, 0,v)

    #define     w32AxID_4_TZC_FPID_AWID0                       {\
            UNSG32 uAWID0_Golden                               : 16;\
            UNSG32 uAWID0_Mask                                 : 16;\
          }
    union { UNSG32 u32AxID_4_TZC_FPID_AWID0;
            struct w32AxID_4_TZC_FPID_AWID0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxID_4_TZC_FPID_ARID1_Golden(r32)           _BFGET_(r32,15, 0)
    #define   SET32AxID_4_TZC_FPID_ARID1_Golden(r32,v)         _BFSET_(r32,15, 0,v)
    #define   GET16AxID_4_TZC_FPID_ARID1_Golden(r16)           _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_ARID1_Golden(r16,v)         _BFSET_(r16,15, 0,v)

    #define   GET32AxID_4_TZC_FPID_ARID1_Mask(r32)             _BFGET_(r32,31,16)
    #define   SET32AxID_4_TZC_FPID_ARID1_Mask(r32,v)           _BFSET_(r32,31,16,v)
    #define   GET16AxID_4_TZC_FPID_ARID1_Mask(r16)             _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_ARID1_Mask(r16,v)           _BFSET_(r16,15, 0,v)

    #define     w32AxID_4_TZC_FPID_ARID1                       {\
            UNSG32 uARID1_Golden                               : 16;\
            UNSG32 uARID1_Mask                                 : 16;\
          }
    union { UNSG32 u32AxID_4_TZC_FPID_ARID1;
            struct w32AxID_4_TZC_FPID_ARID1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxID_4_TZC_FPID_AWID1_Golden(r32)           _BFGET_(r32,15, 0)
    #define   SET32AxID_4_TZC_FPID_AWID1_Golden(r32,v)         _BFSET_(r32,15, 0,v)
    #define   GET16AxID_4_TZC_FPID_AWID1_Golden(r16)           _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_AWID1_Golden(r16,v)         _BFSET_(r16,15, 0,v)

    #define   GET32AxID_4_TZC_FPID_AWID1_Mask(r32)             _BFGET_(r32,31,16)
    #define   SET32AxID_4_TZC_FPID_AWID1_Mask(r32,v)           _BFSET_(r32,31,16,v)
    #define   GET16AxID_4_TZC_FPID_AWID1_Mask(r16)             _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_AWID1_Mask(r16,v)           _BFSET_(r16,15, 0,v)

    #define     w32AxID_4_TZC_FPID_AWID1                       {\
            UNSG32 uAWID1_Golden                               : 16;\
            UNSG32 uAWID1_Mask                                 : 16;\
          }
    union { UNSG32 u32AxID_4_TZC_FPID_AWID1;
            struct w32AxID_4_TZC_FPID_AWID1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxID_4_TZC_FPID_ARID2_Golden(r32)           _BFGET_(r32,15, 0)
    #define   SET32AxID_4_TZC_FPID_ARID2_Golden(r32,v)         _BFSET_(r32,15, 0,v)
    #define   GET16AxID_4_TZC_FPID_ARID2_Golden(r16)           _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_ARID2_Golden(r16,v)         _BFSET_(r16,15, 0,v)

    #define   GET32AxID_4_TZC_FPID_ARID2_Mask(r32)             _BFGET_(r32,31,16)
    #define   SET32AxID_4_TZC_FPID_ARID2_Mask(r32,v)           _BFSET_(r32,31,16,v)
    #define   GET16AxID_4_TZC_FPID_ARID2_Mask(r16)             _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_ARID2_Mask(r16,v)           _BFSET_(r16,15, 0,v)

    #define     w32AxID_4_TZC_FPID_ARID2                       {\
            UNSG32 uARID2_Golden                               : 16;\
            UNSG32 uARID2_Mask                                 : 16;\
          }
    union { UNSG32 u32AxID_4_TZC_FPID_ARID2;
            struct w32AxID_4_TZC_FPID_ARID2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxID_4_TZC_FPID_AWID2_Golden(r32)           _BFGET_(r32,15, 0)
    #define   SET32AxID_4_TZC_FPID_AWID2_Golden(r32,v)         _BFSET_(r32,15, 0,v)
    #define   GET16AxID_4_TZC_FPID_AWID2_Golden(r16)           _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_AWID2_Golden(r16,v)         _BFSET_(r16,15, 0,v)

    #define   GET32AxID_4_TZC_FPID_AWID2_Mask(r32)             _BFGET_(r32,31,16)
    #define   SET32AxID_4_TZC_FPID_AWID2_Mask(r32,v)           _BFSET_(r32,31,16,v)
    #define   GET16AxID_4_TZC_FPID_AWID2_Mask(r16)             _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_AWID2_Mask(r16,v)           _BFSET_(r16,15, 0,v)

    #define     w32AxID_4_TZC_FPID_AWID2                       {\
            UNSG32 uAWID2_Golden                               : 16;\
            UNSG32 uAWID2_Mask                                 : 16;\
          }
    union { UNSG32 u32AxID_4_TZC_FPID_AWID2;
            struct w32AxID_4_TZC_FPID_AWID2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxID_4_TZC_FPID_ARID3_Golden(r32)           _BFGET_(r32,15, 0)
    #define   SET32AxID_4_TZC_FPID_ARID3_Golden(r32,v)         _BFSET_(r32,15, 0,v)
    #define   GET16AxID_4_TZC_FPID_ARID3_Golden(r16)           _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_ARID3_Golden(r16,v)         _BFSET_(r16,15, 0,v)

    #define   GET32AxID_4_TZC_FPID_ARID3_Mask(r32)             _BFGET_(r32,31,16)
    #define   SET32AxID_4_TZC_FPID_ARID3_Mask(r32,v)           _BFSET_(r32,31,16,v)
    #define   GET16AxID_4_TZC_FPID_ARID3_Mask(r16)             _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_ARID3_Mask(r16,v)           _BFSET_(r16,15, 0,v)

    #define     w32AxID_4_TZC_FPID_ARID3                       {\
            UNSG32 uARID3_Golden                               : 16;\
            UNSG32 uARID3_Mask                                 : 16;\
          }
    union { UNSG32 u32AxID_4_TZC_FPID_ARID3;
            struct w32AxID_4_TZC_FPID_ARID3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32AxID_4_TZC_FPID_AWID3_Golden(r32)           _BFGET_(r32,15, 0)
    #define   SET32AxID_4_TZC_FPID_AWID3_Golden(r32,v)         _BFSET_(r32,15, 0,v)
    #define   GET16AxID_4_TZC_FPID_AWID3_Golden(r16)           _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_AWID3_Golden(r16,v)         _BFSET_(r16,15, 0,v)

    #define   GET32AxID_4_TZC_FPID_AWID3_Mask(r32)             _BFGET_(r32,31,16)
    #define   SET32AxID_4_TZC_FPID_AWID3_Mask(r32,v)           _BFSET_(r32,31,16,v)
    #define   GET16AxID_4_TZC_FPID_AWID3_Mask(r16)             _BFGET_(r16,15, 0)
    #define   SET16AxID_4_TZC_FPID_AWID3_Mask(r16,v)           _BFSET_(r16,15, 0,v)

    #define     w32AxID_4_TZC_FPID_AWID3                       {\
            UNSG32 uAWID3_Golden                               : 16;\
            UNSG32 uAWID3_Mask                                 : 16;\
          }
    union { UNSG32 u32AxID_4_TZC_FPID_AWID3;
            struct w32AxID_4_TZC_FPID_AWID3;
          };
    ///////////////////////////////////////////////////////////
    } SIE_AxID_4_TZC_FPID;

    typedef union  T32AxID_4_TZC_FPID_ARID0
          { UNSG32 u32;
            struct w32AxID_4_TZC_FPID_ARID0;
                 } T32AxID_4_TZC_FPID_ARID0;
    typedef union  T32AxID_4_TZC_FPID_AWID0
          { UNSG32 u32;
            struct w32AxID_4_TZC_FPID_AWID0;
                 } T32AxID_4_TZC_FPID_AWID0;
    typedef union  T32AxID_4_TZC_FPID_ARID1
          { UNSG32 u32;
            struct w32AxID_4_TZC_FPID_ARID1;
                 } T32AxID_4_TZC_FPID_ARID1;
    typedef union  T32AxID_4_TZC_FPID_AWID1
          { UNSG32 u32;
            struct w32AxID_4_TZC_FPID_AWID1;
                 } T32AxID_4_TZC_FPID_AWID1;
    typedef union  T32AxID_4_TZC_FPID_ARID2
          { UNSG32 u32;
            struct w32AxID_4_TZC_FPID_ARID2;
                 } T32AxID_4_TZC_FPID_ARID2;
    typedef union  T32AxID_4_TZC_FPID_AWID2
          { UNSG32 u32;
            struct w32AxID_4_TZC_FPID_AWID2;
                 } T32AxID_4_TZC_FPID_AWID2;
    typedef union  T32AxID_4_TZC_FPID_ARID3
          { UNSG32 u32;
            struct w32AxID_4_TZC_FPID_ARID3;
                 } T32AxID_4_TZC_FPID_ARID3;
    typedef union  T32AxID_4_TZC_FPID_AWID3
          { UNSG32 u32;
            struct w32AxID_4_TZC_FPID_AWID3;
                 } T32AxID_4_TZC_FPID_AWID3;
    ///////////////////////////////////////////////////////////

    typedef union  TAxID_4_TZC_FPID_ARID0
          { UNSG32 u32[1];
            struct {
            struct w32AxID_4_TZC_FPID_ARID0;
                   };
                 } TAxID_4_TZC_FPID_ARID0;
    typedef union  TAxID_4_TZC_FPID_AWID0
          { UNSG32 u32[1];
            struct {
            struct w32AxID_4_TZC_FPID_AWID0;
                   };
                 } TAxID_4_TZC_FPID_AWID0;
    typedef union  TAxID_4_TZC_FPID_ARID1
          { UNSG32 u32[1];
            struct {
            struct w32AxID_4_TZC_FPID_ARID1;
                   };
                 } TAxID_4_TZC_FPID_ARID1;
    typedef union  TAxID_4_TZC_FPID_AWID1
          { UNSG32 u32[1];
            struct {
            struct w32AxID_4_TZC_FPID_AWID1;
                   };
                 } TAxID_4_TZC_FPID_AWID1;
    typedef union  TAxID_4_TZC_FPID_ARID2
          { UNSG32 u32[1];
            struct {
            struct w32AxID_4_TZC_FPID_ARID2;
                   };
                 } TAxID_4_TZC_FPID_ARID2;
    typedef union  TAxID_4_TZC_FPID_AWID2
          { UNSG32 u32[1];
            struct {
            struct w32AxID_4_TZC_FPID_AWID2;
                   };
                 } TAxID_4_TZC_FPID_AWID2;
    typedef union  TAxID_4_TZC_FPID_ARID3
          { UNSG32 u32[1];
            struct {
            struct w32AxID_4_TZC_FPID_ARID3;
                   };
                 } TAxID_4_TZC_FPID_ARID3;
    typedef union  TAxID_4_TZC_FPID_AWID3
          { UNSG32 u32[1];
            struct {
            struct w32AxID_4_TZC_FPID_AWID3;
                   };
                 } TAxID_4_TZC_FPID_AWID3;

    ///////////////////////////////////////////////////////////
     SIGN32 AxID_4_TZC_FPID_drvrd(SIE_AxID_4_TZC_FPID *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 AxID_4_TZC_FPID_drvwr(SIE_AxID_4_TZC_FPID *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void AxID_4_TZC_FPID_reset(SIE_AxID_4_TZC_FPID *p);
     SIGN32 AxID_4_TZC_FPID_cmp  (SIE_AxID_4_TZC_FPID *p, SIE_AxID_4_TZC_FPID *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define AxID_4_TZC_FPID_check(p,pie,pfx,hLOG) AxID_4_TZC_FPID_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define AxID_4_TZC_FPID_print(p,    pfx,hLOG) AxID_4_TZC_FPID_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: AxID_4_TZC_FPID
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE VREG                                     (4,4)
///     ###
///     * DDR Clock Regulator
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P)
///               %unsigned 1  PU                        0x0
///                                    ###
///                                    * '1' Power UP REGULATOR 0
///                                    * '0' Power down for minimum current consumption
///                                    ###
///               %unsigned 1  LP                        0x0
///                                    ###
///                                    * For hpm,hpc+ usage, set LP=0, for lp usage, set LP=1
///                                    ###
///               %unsigned 1  BYPASS                    0x1
///                                    ###
///                                    * Bypass DVDD to output, when set both BYPASS=1 and PU=1, VDDR=DVDD
///                                    ###
///               %unsigned 3  VSEL                      0x0
///                                    ###
///                                    * Choose regulator output voltage 20mV/step
///                                    * When LP=0
///                                    * 000:0.84V
///                                    * 001:0.86V
///                                    * 010:0.88V
///                                    * 011:0.90V
///                                    * 100:0.92V
///                                    * 101:0.94V
///                                    * 110:0.96V
///                                    * 111:0.98V
///                                    ###
///               %unsigned 1  TSTMON_EN                 0x0
///                                    ###
///                                    * TESTMON enable signal is not used
///                                    ###
///               %unsigned 3  TESTMON                   0x0
///                                    ###
///                                    * Analog Test Point
///                                    * If Testmon[2:0] = 000, high Z.
///                                    * 001 : master regulator output (1.0V)
///                                    * 010 : Regulator reference (0.6V to 0.85V)
///                                    * 101 : VDDA12 (1.14V to 1.65V)
///                                    * 110 : slave regulator output
///                                    ###
///               %%        22         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      10b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_VREG
#define h_VREG (){}

    #define     RA_VREG_CTRL                                   0x0000

    #define     BA_VREG_CTRL_PU                                0x0000
    #define     B16VREG_CTRL_PU                                0x0000
    #define   LSb32VREG_CTRL_PU                                   0
    #define   LSb16VREG_CTRL_PU                                   0
    #define       bVREG_CTRL_PU                                1
    #define   MSK32VREG_CTRL_PU                                   0x00000001

    #define     BA_VREG_CTRL_LP                                0x0000
    #define     B16VREG_CTRL_LP                                0x0000
    #define   LSb32VREG_CTRL_LP                                   1
    #define   LSb16VREG_CTRL_LP                                   1
    #define       bVREG_CTRL_LP                                1
    #define   MSK32VREG_CTRL_LP                                   0x00000002

    #define     BA_VREG_CTRL_BYPASS                            0x0000
    #define     B16VREG_CTRL_BYPASS                            0x0000
    #define   LSb32VREG_CTRL_BYPASS                               2
    #define   LSb16VREG_CTRL_BYPASS                               2
    #define       bVREG_CTRL_BYPASS                            1
    #define   MSK32VREG_CTRL_BYPASS                               0x00000004

    #define     BA_VREG_CTRL_VSEL                              0x0000
    #define     B16VREG_CTRL_VSEL                              0x0000
    #define   LSb32VREG_CTRL_VSEL                                 3
    #define   LSb16VREG_CTRL_VSEL                                 3
    #define       bVREG_CTRL_VSEL                              3
    #define   MSK32VREG_CTRL_VSEL                                 0x00000038

    #define     BA_VREG_CTRL_TSTMON_EN                         0x0000
    #define     B16VREG_CTRL_TSTMON_EN                         0x0000
    #define   LSb32VREG_CTRL_TSTMON_EN                            6
    #define   LSb16VREG_CTRL_TSTMON_EN                            6
    #define       bVREG_CTRL_TSTMON_EN                         1
    #define   MSK32VREG_CTRL_TSTMON_EN                            0x00000040

    #define     BA_VREG_CTRL_TESTMON                           0x0000
    #define     B16VREG_CTRL_TESTMON                           0x0000
    #define   LSb32VREG_CTRL_TESTMON                              7
    #define   LSb16VREG_CTRL_TESTMON                              7
    #define       bVREG_CTRL_TESTMON                           3
    #define   MSK32VREG_CTRL_TESTMON                              0x00000380
    ///////////////////////////////////////////////////////////

    typedef struct SIE_VREG {
    ///////////////////////////////////////////////////////////
    #define   GET32VREG_CTRL_PU(r32)                           _BFGET_(r32, 0, 0)
    #define   SET32VREG_CTRL_PU(r32,v)                         _BFSET_(r32, 0, 0,v)
    #define   GET16VREG_CTRL_PU(r16)                           _BFGET_(r16, 0, 0)
    #define   SET16VREG_CTRL_PU(r16,v)                         _BFSET_(r16, 0, 0,v)

    #define   GET32VREG_CTRL_LP(r32)                           _BFGET_(r32, 1, 1)
    #define   SET32VREG_CTRL_LP(r32,v)                         _BFSET_(r32, 1, 1,v)
    #define   GET16VREG_CTRL_LP(r16)                           _BFGET_(r16, 1, 1)
    #define   SET16VREG_CTRL_LP(r16,v)                         _BFSET_(r16, 1, 1,v)

    #define   GET32VREG_CTRL_BYPASS(r32)                       _BFGET_(r32, 2, 2)
    #define   SET32VREG_CTRL_BYPASS(r32,v)                     _BFSET_(r32, 2, 2,v)
    #define   GET16VREG_CTRL_BYPASS(r16)                       _BFGET_(r16, 2, 2)
    #define   SET16VREG_CTRL_BYPASS(r16,v)                     _BFSET_(r16, 2, 2,v)

    #define   GET32VREG_CTRL_VSEL(r32)                         _BFGET_(r32, 5, 3)
    #define   SET32VREG_CTRL_VSEL(r32,v)                       _BFSET_(r32, 5, 3,v)
    #define   GET16VREG_CTRL_VSEL(r16)                         _BFGET_(r16, 5, 3)
    #define   SET16VREG_CTRL_VSEL(r16,v)                       _BFSET_(r16, 5, 3,v)

    #define   GET32VREG_CTRL_TSTMON_EN(r32)                    _BFGET_(r32, 6, 6)
    #define   SET32VREG_CTRL_TSTMON_EN(r32,v)                  _BFSET_(r32, 6, 6,v)
    #define   GET16VREG_CTRL_TSTMON_EN(r16)                    _BFGET_(r16, 6, 6)
    #define   SET16VREG_CTRL_TSTMON_EN(r16,v)                  _BFSET_(r16, 6, 6,v)

    #define   GET32VREG_CTRL_TESTMON(r32)                      _BFGET_(r32, 9, 7)
    #define   SET32VREG_CTRL_TESTMON(r32,v)                    _BFSET_(r32, 9, 7,v)
    #define   GET16VREG_CTRL_TESTMON(r16)                      _BFGET_(r16, 9, 7)
    #define   SET16VREG_CTRL_TESTMON(r16,v)                    _BFSET_(r16, 9, 7,v)

    #define     w32VREG_CTRL                                   {\
            UNSG32 uCTRL_PU                                    :  1;\
            UNSG32 uCTRL_LP                                    :  1;\
            UNSG32 uCTRL_BYPASS                                :  1;\
            UNSG32 uCTRL_VSEL                                  :  3;\
            UNSG32 uCTRL_TSTMON_EN                             :  1;\
            UNSG32 uCTRL_TESTMON                               :  3;\
            UNSG32 RSVDx0_b10                                  : 22;\
          }
    union { UNSG32 u32VREG_CTRL;
            struct w32VREG_CTRL;
          };
    ///////////////////////////////////////////////////////////
    } SIE_VREG;

    typedef union  T32VREG_CTRL
          { UNSG32 u32;
            struct w32VREG_CTRL;
                 } T32VREG_CTRL;
    ///////////////////////////////////////////////////////////

    typedef union  TVREG_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32VREG_CTRL;
                   };
                 } TVREG_CTRL;

    ///////////////////////////////////////////////////////////
     SIGN32 VREG_drvrd(SIE_VREG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 VREG_drvwr(SIE_VREG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void VREG_reset(SIE_VREG *p);
     SIGN32 VREG_cmp  (SIE_VREG *p, SIE_VREG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define VREG_check(p,pie,pfx,hLOG) VREG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define VREG_print(p,    pfx,hLOG) VREG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: VREG
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MC6Ctrl                 biu              (4,4)
///     ###
///     * MC6
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 MC6_4TO1             (P)
///               ###
///               * Registers that selects 4:1/2:1 operation for Memory Controller
///               ###
///               %unsigned 1  enable                    0x1
///                                    ###
///                                    * This bit is no longer used to control MC 4to1 mode. MC is always in 4to1 mode in the current design. This bit is used to control the DDR scrambler power saving feature.
///                                    * 1: Scrambler is in power saving mode.
///                                    * 0: Scrambler is in normal mode.
///                                    * There is no functional difference for power saving mode and normal mode. Power saving mode can have less power consumption.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00004 DDR_PHY_CTRL         (P)
///               %unsigned 1  dll_disable               0x1
///                                    ###
///                                    * disable phy dll when in low speed. Overrides register control. This is an external disable override. Setting to 0 does NOT enable DLL
///                                    ###
///               %unsigned 1  reset_mask                0x0
///                                    ###
///                                    * 0=normal mode, 1=mask out cke/resetn,
///                                    ###
///               %unsigned 2  mc_hw_phy_dll_update_req  0x0
///                                    ###
///                                    * Held high for at least 3 dclk cycle to trigger a DLL update in the PHY, can be useful for dynamic voltage changing.
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00008 POWER_SAVING         (P)
///               %unsigned 4  poweron_dpd_state         0x0
///                                    ###
///                                    * when powering MC back on, signal MC which Chip Select was in Deep Power Down State before MC powered down
///                                    ###
///               %unsigned 4  poweron_sr_state          0x0
///                                    ###
///                                    * when powering MC back on, signal MC which Chip Select was in Self-Refresh State before MC powered down
///                                    ###
///               %unsigned 4  poweron_mpd_state         0x0
///                                    ###
///                                    * when powering MC back on, signal MC which Chip Select was in Maximum Power Down State before MC powered down (DDR4)
///                                    ###
///               %unsigned 1  poweron_cal_mode          0x0
///                                    ###
///                                    * when powering MC back on, signal MC which Channel was in Cmd/Addr Latency Mode before MC powered down (DDR4)
///                                    ###
///               %unsigned 1  poweron_par_mode          0x0
///                                    ###
///                                    * when powering MC back on, signal MC which Channel was in Partiy Enabled Mode before MC powered down (DDR4)
///                                    ###
///               %unsigned 1  poweron_crc_mode          0x0
///                                    ###
///                                    * when powering MC back on, signal MC which Channel was in CRC Enabled Mode before MC powered down (DDR4)
///                                    ###
///               %%        17         # Stuffing bits...
///     @ 0x0000C POWER_SAVING_CH1     (P)
///               %unsigned 4  poweron_dpd_state         0x0
///                                    ###
///                                    * when powering MC back on, signal MC which Chip Select was in Deep Power Down State before MC powered down
///                                    ###
///               %unsigned 4  poweron_sr_state          0x0
///                                    ###
///                                    * when powering MC back on, signal MC which Chip Select was in Self-Refresh State before MC powered down
///                                    ###
///               %unsigned 4  poweron_mpd_state         0x0
///                                    ###
///                                    * when powering MC back on, signal MC which Chip Select was in Maximum Power Down State before MC powered down (DDR4)
///                                    ###
///               %unsigned 1  poweron_cal_mode          0x0
///                                    ###
///                                    * when powering MC back on, signal MC which Channel was in Cmd/Addr Latency Mode before MC powered down (DDR4)
///                                    ###
///               %unsigned 1  poweron_par_mode          0x0
///                                    ###
///                                    * when powering MC back on, signal MC which Channel was in Partiy Enabled Mode before MC powered down (DDR4)
///                                    ###
///               %unsigned 1  poweron_crc_mode          0x0
///                                    ###
///                                    * when powering MC back on, signal MC which Channel was in CRC Enabled Mode before MC powered down (DDR4)
///                                    ###
///               %%        17         # Stuffing bits...
///     @ 0x00010 DFT_CTRL             (P)
///               %unsigned 1  mc_loop_back_test_mode    0x0
///                                    ###
///                                    * loop_back test mode enable
///                                    ###
///               %unsigned 4  loop_back_rdata_vld_dly   0x0
///                                    ###
///                                    * PHY delay value for read data in loop back test mode
///                                    ###
///               %unsigned 1  Debug_mode                0x0
///                                    ###
///                                    * Put Cache in to bypass mode to debug DDR interface
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x00014 DFC_CTRL             (P)
///               %unsigned 1  reg_table_req             0x0
///                                    ###
///                                    * HW Dynamic Frequency Change(DFC) handshake signal,
///                                    ###
///               %unsigned 7  reg_table_type            0x0
///                                    ###
///                                    * HW Dynamic Frequency Change(DFC) handshake signal,
///                                    ###
///               %unsigned 1  reg_table_wait_ack        0x0
///                                    ###
///                                    * HW Dynamic Frequency Change(DFC) handshake signal,
///                                    ###
///               %unsigned 1  sleep_req                 0x0
///                                    ###
///                                    * MC Sleep Request, sued for HW DFC
///                                    ###
///               %%        22         # Stuffing bits...
///     @ 0x00018 DFC_STS              (R-)
///               %unsigned 1  reg_table_req_ack         0x0
///                                    ###
///                                    * HW Dynamic Frequency Change(DFC) handshake signal,
///                                    ###
///               %unsigned 1  reg_table_wait_req        0x0
///                                    ###
///                                    * HW Dynamic Frequency Change(DFC) handshake signal,
///                                    ###
///               %unsigned 1  sleep_req_ack             0x0
///                                    ###
///                                    * sleep_req_ack I MC Sleep Request Acknowledge, used for HW DFC
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x0001C ddrPhyLoopBackSrc    (P)
///               ###
///               * Register to control source of DDR Phy Loopback config information (JTAG or CPU AHB)
///               ###
///               %unsigned 1  Control                   0x1
///                                    ###
///                                    * Control to select the source of DDR Phy Loopback configuration info
///                                    * 0 - through the CPU AHB bus
///                                    * 1 - via JTAG
///                                    * JTAG chosen by default
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00020 ddrPhyLoopBackConfig1 (P)
///               %unsigned 1  TST_MODE                  0x0
///                                    ###
///                                    * Loopback Mode Enable.
///                                    * 0: under normal functional mode, DDR-PHY is fed with MC4 output.
///                                    * 1: Loopback test-mode is enabled, DDR-PHY is fed with PRBS test-patterns.
///                                    ###
///               %unsigned 1  TST_START                 0x0
///                                    ###
///                                    * Loopback Test Start.
///                                    * 0->1 transition will start the loopback test. S/W shall write 0 and then 1 to start the test. Once written as 0 and then 1, H/W will not look at this bit until loopback test is indicated done through the ddrPhyLoopBackStatus2 register.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00024 ddrPhyLoopBackSts    (R-)
///               %unsigned 1  prbs_done                 0x0
///                                    ###
///                                    * 0: Loopback test is not finished.
///                                    * 1: Loopback test is finished and status is valid.
///                                    * This bit gets cleared automatically when S/W writes 1 to TST_START bit.
///                                    ###
///               %unsigned 1  prbs_fail                 0x0
///                                    ###
///                                    * Valid when DONE bit is high.
///                                    * 0: Loopback test passed.
///                                    * 1: Loopback test failed, ddrPhyLoopBackStatus1 register indicates which sub-PHY has failed.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00028 PHY_PD_CTRL          (P)
///               ###
///               * DDR PHY QS/DQ/AC/CK pull-up/pull-down control
///               ###
///               %unsigned 1  normal_mode               0x1
///                                    ###
///                                    * 0 : DDR Phy DQ/QS/AC/CK pull-up/pull-down controlled by register bit
///                                    * 1 : pull-up/pull-down controlled by memory controller
///                                    ###
///               %unsigned 1  pd_en                     0x0
///                                    ###
///                                    * This bit is used to control DDR PHY DQ/QS/AC/CK pull-up/pull-down when normal_mode is '0'
///                                    * Bit[1](pd_en)
///                                    * Bit[0](normal_mode)
///                                    * x
///                                    * 1
///                                    * pull-up/pull-down controlled by memory controller register (MC_PHY_REG10)
///                                    * 0
///                                    * 0
///                                    * pull-up/pull-down controlled by pd_en bit, DQ/QS/AC/CK pull-up/pull-down disabled as pd_en is 0
///                                    * 1
///                                    * 0
///                                    * pull-up/pull-down controlled by pd_en bit, DQ/QS/AC/CK pull-up/pull-down enabled as pd_en is 1
///                                    ###
///               %unsigned 1  pd_core                   0x0
///                                    ###
///                                    * 1'b1 : Isolation enable for DDRPHY Pads
///                                    * 1'b0 : Isolation disabled for DDRPHY Pads
///                                    ###
///               %unsigned 1  pdb_core                  0x1
///                                    ###
///                                    * 1’b0 : Isolation enable for DDRPHY Pads
///                                    * 1'b1 : Isolation disabled for DDRPHY Pads
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x0002C HW_WB_CTRL           (P)
///               %unsigned 1  drain_req                 0x0
///                                    ###
///                                    * Request to drain write buffer, can be use before power down MC to drain out any pending request
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00030 HW_WB_STS            (R-)
///               %unsigned 1  drain_ack                 0x0
///                                    ###
///                                    * Acknowledge for write buffer drain done, can be use before power down MC to drain out any pending request
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00034 Trust_zone           (RW)
///               %unsigned 1  Tz_lock                   0x0
///                                    ###
///                                    * This is to lock the Trust Zone registers via boundary pin. It can also be done via setting “trustzone_lock” bit in register MC_control_0 (0x44).
///                                    * Setting either of these to high will lock the trust zone registers.
///                                    * Setting this bit will lock itself
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00038                      (P)
///     # 0x00038 memPll               
///               $pll                 memPll            REG          
///                                    ###
///                                    * Configuration registers for memPll
///                                    ###
///     @ 0x00054 AxiPCntCTRL          (P)
///               ###
///               * 8 Performance counters are integrated in SOC. Each MCXBAR master and MC6 port has its own Performance counter.
///               * Each bit of following 3 registers is used to control one performance counter
///               * Bit0: master0, Bit1: Master1, Bit2: Master2, Bit3: Master3, Bit4: Master4, Bit5: Master5, Bit6: Master6, Bit7: MC6
///               ###
///               %unsigned 8  clear                     0x0
///                                    ###
///                                    * Clear the counters
///                                    ###
///               %unsigned 8  enable                    0x0
///                                    ###
///                                    * Enable the counter increment, SW can make enable = 0 to temporarily disable counter increment
///                                    ###
///               %unsigned 8  latch                     0x0
///                                    ###
///                                    * Counter values are latched on rising edge of this signal
///                                    * Performance Counter support ID mask function. Each performance counter has one ID register and one Mask register.
///                                    * Only the transaction satisfies following equation would be counted:
///                                    * PID & Mask = TID & Mask
///                                    * PID is the programmed ID. TID is the transaction ID.
///                                    * ID mask function can be used for these counters:
///                                    * arwait, rwait, rdata, ridle, await and wdata
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00058 AxiMst0              (P)
///               %unsigned 16 PID                       0x0
///               %unsigned 16 Mask                      0x0
///     @ 0x0005C AxiMst0DXBAR         (P)
///               %unsigned 16 PID                       0x0
///               %unsigned 16 Mask                      0x0
///     @ 0x00060 AxiMst1              (P)
///               %unsigned 16 PID                       0x0
///               %unsigned 16 Mask                      0x0
///     @ 0x00064 AxiMst2_OVP          (P)
///               %unsigned 16 PID                       0x0
///               %unsigned 16 Mask                      0x0
///     @ 0x00068 AxiMst2_V4G          (P)
///               %unsigned 16 PID                       0x0
///               %unsigned 16 Mask                      0x0
///     @ 0x0006C AxiMst2_H1           (P)
///               %unsigned 16 PID                       0x0
///               %unsigned 16 Mask                      0x0
///     @ 0x00070 AxiMst3_GFX3D        (P)
///               %unsigned 16 PID                       0x0
///               %unsigned 16 Mask                      0x0
///     @ 0x00074 AxiMst3_mtest        (P)
///               %unsigned 16 PID                       0x0
///               %unsigned 16 Mask                      0x0
///     @ 0x00078                      (P)
///     # 0x00078 Mstr0PCnt            
///               $AxiPCntStat         Mstr0PCnt         REG          
///                                    ###
///                                    * Mcxbar master0 AXI interface performance counter
///                                    ###
///     @ 0x000AC                      (P)
///     # 0x000AC Mstr0DXBARPCnt       
///               $AxiPCntStat         Mstr0DXBARPCnt    REG          
///                                    ###
///                                    * Mcxbar master0 AXI interface performance counter
///                                    ###
///     @ 0x000E0                      (P)
///     # 0x000E0 Mstr1PCnt            
///               $AxiPCntStat         Mstr1PCnt         REG          
///                                    ###
///                                    * Mcxbar master1 AXI interface performance counter
///                                    ###
///     @ 0x00114                      (P)
///     # 0x00114 Mstr2_OVP_PCnt       
///               $AxiPCntStat         Mstr2_OVP_PCnt    REG          
///                                    ###
///                                    * Mcxbar master2 AXI interface performance counter
///                                    ###
///     @ 0x00148                      (P)
///     # 0x00148 Mstr2_V4G_PCnt       
///               $AxiPCntStat         Mstr2_V4G_PCnt    REG          
///                                    ###
///                                    * Mcxbar master3 AXI interface performance counter
///                                    ###
///     @ 0x0017C                      (P)
///     # 0x0017C Mstr2_H1_PCnt        
///               $AxiPCntStat         Mstr2_H1_PCnt     REG          
///                                    ###
///                                    * Mcxbar master4 AXI interface performance counter
///                                    ###
///     @ 0x001B0                      (P)
///     # 0x001B0 Mstr3_GFX3D_PCnt     
///               $AxiPCntStat         Mstr3_GFX3D_PCnt  REG          
///                                    ###
///                                    * Mcxbar master5 AXI interface performance counter
///                                    ###
///     @ 0x001E4                      (P)
///     # 0x001E4 Mstr3_mtest_PCnt     
///               $AxiPCntStat         Mstr3_mtest_PCnt  REG          
///                                    ###
///                                    * Mcxbar master5 AXI interface performance counter
///                                    ###
///     @ 0x00218                      (P)
///     # 0x00218 VREG_0               
///               $VREG                VREG_0            REG          
///                                    ###
///                                    * DDR Voltage Regulator 0 control
///                                    ###
///     @ 0x0021C                      (P)
///     # 0x0021C VREG_1               
///               $VREG                VREG_1            REG          
///                                    ###
///                                    * DDR Voltage Regulator 1 control
///                                    ###
///     @ 0x00220                      (P)
///     # 0x00220 VREG_2               
///               $VREG                VREG_2            REG          
///                                    ###
///                                    * DDR Voltage Regulator 2 control
///                                    ###
///     @ 0x00224                      (P)
///     # 0x00224 VREG_3               
///               $VREG                VREG_3            REG          
///                                    ###
///                                    * DDR Voltage Regulator 3 control
///                                    ###
///     @ 0x00228                      (P)
///     # 0x00228 VREG_4               
///               $VREG                VREG_4            REG          
///                                    ###
///                                    * DDR Voltage Regulator 4 control
///                                    ###
///     @ 0x0022C                      (P)
///     # 0x0022C VREG_5               
///               $VREG                VREG_5            REG          
///                                    ###
///                                    * DDR Voltage Regulator 5 control
///                                    ###
///     @ 0x00230                      (P)
///     # 0x00230 VREG_6               
///               $VREG                VREG_6            REG          
///                                    ###
///                                    * DDR Voltage Regulator 6 control
///                                    ###
///     @ 0x00234                      (P)
///     # 0x00234 VREG_7               
///               $VREG                VREG_7            REG          
///                                    ###
///                                    * DDR Voltage Regulator 7 control
///                                    ###
///     @ 0x00238                      (P)
///     # 0x00238 VREG_8               
///               $VREG                VREG_8            REG          
///                                    ###
///                                    * DDR Voltage Regulator 8 control
///                                    ###
///     @ 0x0023C                      (P)
///     # 0x0023C VREG_9               
///               $VREG                VREG_9            REG          
///                                    ###
///                                    * DDR Voltage Regulator 9 control
///                                    ###
///     @ 0x00240 RWTC_31to0           (P)
///               %unsigned 32 value                     0x999955AA
///                                    ###
///                                    * RWTC[31:0] value for MC5
///                                    ###
///     @ 0x00244 RWTC_57to32          (P)
///               %unsigned 26 value                     0x1555BDE
///                                    ###
///                                    * RWTC[57:32] value for MC5
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00248                      (P)
///     # 0x00248 AxiErrorMon_Mst0     
///               $AxiErrorMon         AxiErrorMon_Mst0  REG          
///                                    ###
///                                    * Memory Controller Axi Interface error detector.
///                                    ###
///     @ 0x00260                      (P)
///     # 0x00260 AxiErrorMon_Mst1     
///               $AxiErrorMon         AxiErrorMon_Mst1  REG          
///                                    ###
///                                    * Memory Controller Axi Interface error detector.
///                                    ###
///     @ 0x00278                      (P)
///     # 0x00278 AxiErrorMon_Mst2     
///               $AxiErrorMon         AxiErrorMon_Mst2  REG          
///                                    ###
///                                    * Memory Controller Axi Interface error detector.
///                                    ###
///     @ 0x00290                      (P)
///     # 0x00290 AxiErrorMon_Mst3     
///               $AxiErrorMon         AxiErrorMon_Mst3  REG          
///                                    ###
///                                    * Memory Controller Axi Interface error detector.
///                                    ###
///     @ 0x002A8                      (P)
///     # 0x002A8 Mst0                 
///               $AxCacheOWCPU        Mst0              REG          
///                                    ###
///                                    * Master 0(CPU) AxCache control
///                                    ###
///     @ 0x002AC                      (P)
///     # 0x002AC Mst0_DXBAR           
///               $AxCacheOW           Mst0_DXBAR        REG          
///                                    ###
///                                    * Master 0(DXBAR) AxCache control
///                                    ###
///     @ 0x002B0                      (P)
///     # 0x002B0 Mst1                 
///               $AxCacheOW           Mst1              REG          
///                                    ###
///                                    * Master 1(AVIO) AxCache control
///                                    ###
///     @ 0x002B4                      (P)
///     # 0x002B4 Mst2                 
///               $AxCacheOW           Mst2              REG          
///                                    ###
///                                    * Master 2(VXBAR:V4G,H1,OVP) AxCache control
///                                    ###
///     @ 0x002B8                      (P)
///     # 0x002B8 Mst3                 
///               $AxCacheOW           Mst3              REG          
///                                    ###
///                                    * Master 3(GFX) AxCache control
///                                    ###
///     @ 0x002BC                      (P)
///     # 0x002BC Mst0Qos              
///               $MstQos              Mst0Qos           REG          
///                                    ###
///                                    * Master 0(CPU) Qos Control
///                                    ###
///     @ 0x002C0                      (P)
///     # 0x002C0 Mst0DXBARQos         
///               $MstQos              Mst0DXBARQos      REG          
///                                    ###
///                                    * Master 0(DXBAR) Qos Control
///                                    ###
///     @ 0x002C4                      (P)
///     # 0x002C4 Mst1Qos              
///               $MstQos              Mst1Qos           REG          
///                                    ###
///                                    * Master 1(AVIO) Qos0 Control
///                                    ###
///     @ 0x002C8                      (P)
///     # 0x002C8 Mst1_1Qos            
///               $MstQos              Mst1_1Qos         REG          
///                                    ###
///                                    * Master 1(AVIO) Qos1 Control
///                                    ###
///     @ 0x002CC                      (P)
///     # 0x002CC Mst2Qos_OVP          
///               $MstQos              Mst2Qos_OVP       REG          
///                                    ###
///                                    * Master 2(GFX3D) Qos Control
///                                    ###
///     @ 0x002D0                      (P)
///     # 0x002D0 Mst2Qos_V4G          
///               $MstQos              Mst2Qos_V4G       REG          
///                                    ###
///                                    * Master 2(V4G) Qos Control
///                                    ###
///     @ 0x002D4                      (P)
///     # 0x002D4 Mst2Qos_H1           
///               $MstQos              Mst2Qos_H1        REG          
///                                    ###
///                                    * Master 2(H1) Qos Control
///                                    ###
///     @ 0x002D8                      (P)
///     # 0x002D8 Mst3Qos_GFX3D        
///               $MstQos              Mst3Qos_GFX3D     REG          
///                                    ###
///                                    * Master 3(GFX) Qos Control
///                                    ###
///     @ 0x002DC                      (P)
///     # 0x002DC Mst1_QoSOW           
///               $AxQoSOW             Mst1_QoSOW        REG          
///                                    ###
///                                    * Master 1(AVIO) AXQoS OverWrite Control
///                                    ###
///     @ 0x002E0                      (P)
///     # 0x002E0 Mst2_OVP_QoSOW       
///               $AxQoSOW             Mst2_OVP_QoSOW    REG          
///                                    ###
///                                    * Master 2(OVP) Qos Control
///                                    ###
///     @ 0x002E4                      (P)
///     # 0x002E4 Mst2_V4G_QoSOW       
///               $AxQoSOW             Mst2_V4G_QoSOW    REG          
///                                    ###
///                                    * Master 2(V4G) Qos Control
///                                    ###
///     @ 0x002E8                      (P)
///     # 0x002E8 Mst2_H1_QoSOW        
///               $AxQoSOW             Mst2_H1_QoSOW     REG          
///                                    ###
///                                    * Master 2(H1) Qos Control
///                                    ###
///     @ 0x002EC                      (P)
///     # 0x002EC Mst3_GFX3D_QoSOW     
///               $AxQoSOW             Mst3_GFX3D_QoSOW  REG          
///                                    ###
///                                    * Master 3(GFX3D) Qos Control
///                                    ###
///     @ 0x002F0                      (P)
///     # 0x002F0 Mst1Qos_Reg          
///               $MstQos_Reg          Mst1Qos_Reg       REG          
///                                    ###
///                                    * Master 1(AVIO) Qos Control
///                                    ###
///     @ 0x00300                      (P)
///     # 0x00300 Mst2_OVP_QoS_Reg     
///               $MstQos_Reg          Mst2_OVP_QoS_Reg  REG          
///                                    ###
///                                    * Master 2(OVP) Qos Control
///                                    ###
///     @ 0x00310                      (P)
///     # 0x00310 Mst2_V4G_QoS_Reg     
///               $MstQos_Reg          Mst2_V4G_QoS_Reg  REG          
///                                    ###
///                                    * Master 2(V4G) Qos Control
///                                    ###
///     @ 0x00320                      (P)
///     # 0x00320 Mst2_H1_QoS_Reg      
///               $MstQos_Reg          Mst2_H1_QoS_Reg   REG          
///                                    ###
///                                    * Master 2(H1) Qos Control
///                                    ###
///     @ 0x00330                      (P)
///     # 0x00330 Mst3_GFX3D_QoS_Reg   
///               $MstQos_Reg          Mst3_GFX3D_QoS_Reg REG          
///                                    ###
///                                    * Master 3(GFX3D) Qos Control
///                                    ###
///     @ 0x00340                      (P)
///     # 0x00340 Mst0_FPID            
///               $AxID_4_TZC_FPID     Mst0_FPID         REG          
///                                    ###
///                                    * Master0 ID for FPID
///                                    ###
///     @ 0x00360                      (P)
///     # 0x00360 Mst1_FPID            
///               $AxID_4_TZC_FPID     Mst1_FPID         REG          
///                                    ###
///                                    * Master1 ID for FPID
///                                    ###
///     @ 0x00380                      (P)
///     # 0x00380 Mst2_FPID            
///               $AxID_4_TZC_FPID     Mst2_FPID         REG          
///                                    ###
///                                    * Master2 ID for FPID
///                                    ###
///     @ 0x003A0                      (P)
///     # 0x003A0 Mst3_FPID            
///               $AxID_4_TZC_FPID     Mst3_FPID         REG          
///                                    ###
///                                    * Master3 ID for FPID
///                                    ###
///     @ 0x003C0 DdrAsymCtrlCpu       (P)
///               %unsigned 8  Mode                      0x0
///                                    ###
///                                    * This register controls cpu asymmetric bridge in soc
///                                    * Operation Mode:
///                                    * 0: Symmetric
///                                    * 1: 512MB + 256MB
///                                    * 2: 1GB + 512MB
///                                    * 3: 512MB +128MB
///                                    * 4: 1GB + 256MB
///                                    * 5: 2GB + 512MB
///                                    * 6: 2GB + 1GB
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x003C4 AddrFilterCtrl       (P)
///               %unsigned 8  Mode                      0x0
///                                    ###
///                                    * This register controls asymmetric address filter in soc
///                                    * The filter will map the access to asymmetric region to another memory space.
///                                    * Operation Mode:
///                                    * 0: Symmetric(No filter)
///                                    * 1: 512MB + 256MB
///                                    * 2: 1GB + 512MB
///                                    * 3: 512MB +128MB
///                                    * 4: 1GB + 256MB
///                                    * 5: 2GB + 512MB
///                                    * 6: 2GB + 1GB
///                                    ###
///               %unsigned 20 Addr                      0x0
///                                    ###
///                                    * This address is bit[31:12] of the Addrfilter remapping location. Bit[11:0] is zero because the remapping address must be 4k aligned.
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x003C8 DdrAsymErrCpu        (R-)
///               %unsigned 32 Code                      0x0
///     @ 0x003CC memPwrCtrl           (P)
///               %unsigned 1  pdfvssm                   0x0
///               %unsigned 1  pdlvmc                    0x0
///               %unsigned 1  pdwn                      0x0
///               %%        29         # Stuffing bits...
///     @ 0x003D0 mtest_ctrl           (P)
///               %unsigned 1  sel                       0x0
///                                    ###
///                                    * 0:external axi master
///                                    * 1:mtest axi
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x003D4 mc_dclk_gating       (P)
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * This bit is used to over-write the dClk clock-gating enable from mckinley
///                                    * 0: use clock-gating enable from mckinley
///                                    * 1 : over-ride clock-gating enable from mckinley and turn on dClk
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x003D8                      (P)
///     # 0x003D8 dfc_pmu_memPll       
///               $pll                 dfc_pmu_memPll    REG          
///                                    ###
///                                    * Configuration registers for memPll using dfc_pmu block
///                                    ###
///     @ 0x003F4 DFC_PMU_CTRL         (P)
///               %unsigned 1  dfc_pmu_en                0x0
///                                    ###
///                                    * Enable DFC PMU Controller
///                                    ###
///               %unsigned 7  reg_table_type            0x0
///                                    ###
///                                    * HW DFC handshake signal
///                                    ###
///               %unsigned 16 bypen_to_rsten_time       0x0
///                                    ###
///                                    * MemPll bypass_en to reset_en time
///                                    ###
///               %%        8          # Stuffing bits...
///     # 0x003F8 DFC_PMU_CTRL1        
///               %unsigned 16 rsten_to_newset_time      0x0
///                                    ###
///                                    * MemPll reset_en to switch to new setting time
///                                    ###
///               %unsigned 16 newset_to_rstdis_time     0x0
///                                    ###
///                                    * MemPll switch to new setting time to reset disable time
///                                    ###
///     # 0x003FC DFC_PMU_CTRL2        
///               %unsigned 16 plllck_to_bypdis_time     0x0
///                                    ###
///                                    * MemPll lock to bypass disable time
///                                    ###
///               %unsigned 16 num_bp_before_sleep_dis   0x0
///                                    ###
///                                    * Number of break points before sleep disable
///                                    ###
///     # 0x00400 DFC_PMU_CTRL3        
///               %unsigned 16 plllck_wait_time          0xFFFF
///                                    ###
///                                    * MemPll lock wait time
///                                    ###
///               %unsigned 16 num_bp_after_sleep_dis    0x0
///                                    ###
///                                    * Number of break points after sleep disable
///                                    ###
///     @ 0x00404 DDR_SCR_DFI_BYPASS_CTRL (P)
///               %unsigned 8  ch0_flop_in               0x6
///                                    ###
///                                    * Slice flop between ch0 ddr scrambler and dfi_top
///                                    * 1:bypass slice flop
///                                    * 0:enable slice flop
///                                    ###
///               %unsigned 8  ch0_flop_out              0x6
///                                    ###
///                                    * Slice flop between ch0 dfi_top and ddr scrambler
///                                    * 1:bypass slice flop
///                                    * 0:enable slice flop
///                                    ###
///               %unsigned 8  ch1_flop_in               0x6
///                                    ###
///                                    * Slice flop between ch1 ddr scrambler and dfi_top
///                                    * 1:bypass slice flop
///                                    * 0:enable slice flop
///                                    ###
///               %unsigned 8  ch1_flop_out              0x6
///                                    ###
///                                    * Slice flop between ch1 dfi_top and ddr scrambler
///                                    * 1:bypass slice flop
///                                    * 0:enable slice flop
///                                    ###
///     @ 0x00408 DPHY_BRG_MON         (R-)
///               %unsigned 16 stat                      0x0
///               %%        16         # Stuffing bits...
///     @ 0x0040C                      (W-)
///     #         # Stuffing bytes...
///               %% 253856
///     @ 0x08000 DDRScramCtrl         (P)
///               %unsigned 1  En                        0x0
///                                    ###
///                                    * 1’b1: Enable scrambling
///                                    * 1’b0: Disable scrambling
///                                    ###
///               %unsigned 1  ScramCtrl_Lock            0x0
///                                    ###
///                                    * Scrambler Register Control Lock. It will lock itself, Scrambler enable, Key, Key_addr and Key_mask.
///                                    * 1’b1: Lock
///                                    * 1’b0: Not lock
///                                    ###
///               %%        30         # Stuffing bits...
///     # 0x08004 DDRScramCtrl1        
///               %unsigned 32 Key0_word0                0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 0 of key0
///                                    ###
///     # 0x08008 DDRScramCtrl2        
///               %unsigned 32 Key0_word1                0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 1 of key0
///                                    ###
///     # 0x0800C DDRScramCtrl3        
///               %unsigned 32 Key0_word2                0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 2 of key0
///                                    ###
///     # 0x08010 DDRScramCtrl4        
///               %unsigned 32 Key0_word3                0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 3 of key0
///                                    ###
///     # 0x08014 DDRScramCtrl5        
///               %unsigned 32 Key0_addr                 0x0
///                                    ###
///                                    * Key0 Physical address
///                                    ###
///     # 0x08018 DDRScramCtrl6        
///               %unsigned 32 Key0_mask                 0x0
///                                    ###
///                                    * Key0 address mask
///                                    ###
///     # 0x0801C DDRScramCtrl7        
///               %unsigned 32 Key1_word0                0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 0 of key1
///                                    ###
///     # 0x08020 DDRScramCtrl8        
///               %unsigned 32 Key1_word1                0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 1 of key1
///                                    ###
///     # 0x08024 DDRScramCtrl9        
///               %unsigned 32 Key1_word2                0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 2 of key1
///                                    ###
///     # 0x08028 DDRScramCtrl10       
///               %unsigned 32 Key1_word3                0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 3 of key1
///                                    ###
///     # 0x0802C DDRScramCtrl11       
///               %unsigned 32 Key1_addr                 0x0
///                                    ###
///                                    * Key1 Physical address
///                                    ###
///     # 0x08030 DDRScramCtrl12       
///               %unsigned 32 Key1_mask                 0x0
///                                    ###
///                                    * Key1 address mask
///                                    ###
///     # 0x08034 DDRScramCtrl13       
///               %unsigned 6  W_latency                 0x3
///                                    ###
///                                    * Used to adjust the read latency
///                                    ###
///               %unsigned 6  R_latency                 0x3
///                                    ###
///                                    * Used to adjust the read latency
///                                    ###
///               %unsigned 4  cal_latency               0x3
///                                    ###
///                                    * DDR4 CAL mode Latency setup
///                                    ###
///               %unsigned 4  num_pipeline              0x3
///                                    ###
///                                    * Number of AES pipeline stages to use
///                                    * Minimum is 3 stages, less than that will not give good security and this is set as default value of the register
///                                    * Maximum is 11 stages
///                                    * Command FIFO is implemented to hold the command for (W_latency – num_pipeline) cycles before passing to AES pipeline
///                                    ###
///               %unsigned 1  Ch1_En                    0x0
///                                    ###
///                                    * 1’b1: Enable scrambling
///                                    * 1’b0: Disable scrambling
///                                    ###
///               %%        11         # Stuffing bits...
///     # 0x08038 DDRScramCtrl14       
///               %unsigned 32 Ch1_Key0_word0            0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 0 of key0
///                                    ###
///     # 0x0803C DDRScramCtrl15       
///               %unsigned 32 Ch1_Key0_word1            0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 1 of key0
///                                    ###
///     # 0x08040 DDRScramCtrl16       
///               %unsigned 32 Ch1_Key0_word2            0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 2 of key0
///                                    ###
///     # 0x08044 DDRScramCtrl17       
///               %unsigned 32 Ch1_Key0_word3            0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 3 of key0
///                                    ###
///     # 0x08048 DDRScramCtrl18       
///               %unsigned 32 Ch1_Key0_addr             0x0
///                                    ###
///                                    * Key0 Physical address
///                                    ###
///     # 0x0804C DDRScramCtrl19       
///               %unsigned 32 Ch1_Key0_mask             0x0
///                                    ###
///                                    * Key0 address mask
///                                    ###
///     # 0x08050 DDRScramCtrl20       
///               %unsigned 32 Ch1_Key1_word0            0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 0 of key1
///                                    ###
///     # 0x08054 DDRScramCtrl21       
///               %unsigned 32 Ch1_Key1_word1            0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 1 of key1
///                                    ###
///     # 0x08058 DDRScramCtrl22       
///               %unsigned 32 Ch1_Key1_word2            0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 2 of key1
///                                    ###
///     # 0x0805C DDRScramCtrl23       
///               %unsigned 32 Ch1_Key1_word3            0x0
///                                    ###
///                                    * Key is 128 bits
///                                    * Word 3 of key1
///                                    ###
///     # 0x08060 DDRScramCtrl24       
///               %unsigned 32 Ch1_Key1_addr             0x0
///                                    ###
///                                    * Key1 Physical address
///                                    ###
///     # 0x08064 DDRScramCtrl25       
///               %unsigned 32 Ch1_Key1_mask             0x0
///                                    ###
///                                    * Key1 address mask
///                                    ###
///     # 0x08068 DDRScramCtrl26       
///               %unsigned 6  Ch1_W_latency             0x3
///                                    ###
///                                    * Used to adjust the read latency
///                                    ###
///               %unsigned 6  Ch1_R_latency             0x3
///                                    ###
///                                    * Used to adjust the read latency
///                                    ###
///               %unsigned 4  Ch1_cal_latency           0x3
///                                    ###
///                                    * DDR4 CAL mode Latency setup
///                                    ###
///               %unsigned 4  Ch1_num_pipeline          0x3
///                                    ###
///                                    * Number of AES pipeline stages to use
///                                    * Minimum is 3 stages, less than that will not give good security and this is set as default value of the register
///                                    * Maximum is 11 stages
///                                    * Command FIFO is implemented to hold the command for (W_latency – num_pipeline) cycles before passing to AES pipeline
///                                    * Scrambler latency programming details are described after this table
///                                    ###
///               %unsigned 2  Ch0_dbi_mode              0x0
///                                    ###
///                                    * Bit[0] : LPDDR4 WDBI enabled
///                                    * Bit[1] : LPDDR4 RDBI enabled
///                                    * program same value as in Ch0 DC_dr_cfg4[9:8]
///                                    ###
///               %unsigned 2  Ch1_dbi_mode              0x0
///                                    ###
///                                    * Bit[0] : LPDDR4 WDBI enabled
///                                    * Bit[1] : LPDDR4 RDBI enabled
///                                    * program same value as in Ch1 DC_dr_cfg4[9:8]
///                                    ###
///               %unsigned 1  interleave_en             0x0
///                                    ###
///                                    * Interleave enabled.
///                                    * Program same value as CH1 mmap_l[1]
///                                    ###
///               %unsigned 3  interleave_size           0x0
///                                    ###
///                                    * Interleave size
///                                    * Program same value as CH1 mmap_l[10:8]
///                                    ###
///               %unsigned 4  sdram_type                0xB
///                                    ###
///                                    * sdram type
///                                    * program same value as in mc_ctl2[7:4]
///                                    ###
///     # 0x0806C DDRScramCtrl27       
///               %unsigned 3  sdram_data_width          0x3
///                                    ###
///                                    * sdram data width
///                                    * program same value as in mc_ctl0[10:8]
///                                    ###
///               %unsigned 3  sdram_burst_length        0x4
///                                    ###
///                                    * sdram burst length
///                                    * program same value as in mc_ctl0[18:16]
///                                    ###
///               %unsigned 2  Ch0_ddr4_ph_sel           0x1
///                                    ###
///                                    * Bit[1] : ddr4 csn phase select : Program as bit[0] of Ch0 “DFI_PHY_CONTROL_1[5:0] + DFI_PHY_CONTROL_1[13:8]” XORed with Ch0 “DRAM_CONFIG_1[24]”
///                                    * bit[0] : ddr4 data phase select : Program as bit[0] of Ch0 “DFI_PHY_CONTROL_1[5:0] + DFI_PHY_CONTROL_1[13:8]”
///                                    ###
///               %unsigned 2  Ch1_ddr4_ph_sel           0x1
///                                    ###
///                                    * Bit[1] : ddr4 csn phase select : Program as bit[0] of Ch1 “DFI_PHY_CONTROL_1[5:0] + DFI_PHY_CONTROL_1[13:8]” XORed with Ch1 “DRAM_CONFIG_1[24]”
///                                    * bit[0] : ddr4 data phase select : Program as bit[0] of Ch1 “DFI_PHY_CONTROL_1[5:0] + DFI_PHY_CONTROL_1[13:8]”
///                                    ###
///               %%        22         # Stuffing bits...
///     # 0x08070 DDRScramCtrl28       
///               %unsigned 32 Ch0_sdram_pmap            0x5030532
///                                    ###
///                                    * Ch0 physical map information
///                                    * program same value as Ch0 mc_config[31:0]
///                                    ###
///     # 0x08074 DDRScramCtrl29       
///               %unsigned 32 Ch1_sdram_pmap            0x5030532
///                                    ###
///                                    * Ch1 physical map information
///                                    * program same value as Ch1 mc_config[31:0]
///                                    ###
///     @ 0x08078 DDRScramCtrl_Secure  (RW)
///               %unsigned 1  Key                       0x0
///                                    ###
///                                    * Scrambler read lock. It will lock all the reads to the scrambler registers. Also it will lock the write to itself.
///                                    * 1’b1: Lock
///                                    * 1’b0: Not lock
///                                    ###
///               %%        31         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:   32892B, bits:    7001b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MC6Ctrl
#define h_MC6Ctrl (){}

    #define     RA_MC6Ctrl_MC6_4TO1                            0x0000

    #define     BA_MC6Ctrl_MC6_4TO1_enable                     0x0000
    #define     B16MC6Ctrl_MC6_4TO1_enable                     0x0000
    #define   LSb32MC6Ctrl_MC6_4TO1_enable                        0
    #define   LSb16MC6Ctrl_MC6_4TO1_enable                        0
    #define       bMC6Ctrl_MC6_4TO1_enable                     1
    #define   MSK32MC6Ctrl_MC6_4TO1_enable                        0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_DDR_PHY_CTRL                        0x0004

    #define     BA_MC6Ctrl_DDR_PHY_CTRL_dll_disable            0x0004
    #define     B16MC6Ctrl_DDR_PHY_CTRL_dll_disable            0x0004
    #define   LSb32MC6Ctrl_DDR_PHY_CTRL_dll_disable               0
    #define   LSb16MC6Ctrl_DDR_PHY_CTRL_dll_disable               0
    #define       bMC6Ctrl_DDR_PHY_CTRL_dll_disable            1
    #define   MSK32MC6Ctrl_DDR_PHY_CTRL_dll_disable               0x00000001

    #define     BA_MC6Ctrl_DDR_PHY_CTRL_reset_mask             0x0004
    #define     B16MC6Ctrl_DDR_PHY_CTRL_reset_mask             0x0004
    #define   LSb32MC6Ctrl_DDR_PHY_CTRL_reset_mask                1
    #define   LSb16MC6Ctrl_DDR_PHY_CTRL_reset_mask                1
    #define       bMC6Ctrl_DDR_PHY_CTRL_reset_mask             1
    #define   MSK32MC6Ctrl_DDR_PHY_CTRL_reset_mask                0x00000002

    #define     BA_MC6Ctrl_DDR_PHY_CTRL_mc_hw_phy_dll_update_req 0x0004
    #define     B16MC6Ctrl_DDR_PHY_CTRL_mc_hw_phy_dll_update_req 0x0004
    #define   LSb32MC6Ctrl_DDR_PHY_CTRL_mc_hw_phy_dll_update_req    2
    #define   LSb16MC6Ctrl_DDR_PHY_CTRL_mc_hw_phy_dll_update_req    2
    #define       bMC6Ctrl_DDR_PHY_CTRL_mc_hw_phy_dll_update_req 2
    #define   MSK32MC6Ctrl_DDR_PHY_CTRL_mc_hw_phy_dll_update_req    0x0000000C
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_POWER_SAVING                        0x0008

    #define     BA_MC6Ctrl_POWER_SAVING_poweron_dpd_state      0x0008
    #define     B16MC6Ctrl_POWER_SAVING_poweron_dpd_state      0x0008
    #define   LSb32MC6Ctrl_POWER_SAVING_poweron_dpd_state         0
    #define   LSb16MC6Ctrl_POWER_SAVING_poweron_dpd_state         0
    #define       bMC6Ctrl_POWER_SAVING_poweron_dpd_state      4
    #define   MSK32MC6Ctrl_POWER_SAVING_poweron_dpd_state         0x0000000F

    #define     BA_MC6Ctrl_POWER_SAVING_poweron_sr_state       0x0008
    #define     B16MC6Ctrl_POWER_SAVING_poweron_sr_state       0x0008
    #define   LSb32MC6Ctrl_POWER_SAVING_poweron_sr_state          4
    #define   LSb16MC6Ctrl_POWER_SAVING_poweron_sr_state          4
    #define       bMC6Ctrl_POWER_SAVING_poweron_sr_state       4
    #define   MSK32MC6Ctrl_POWER_SAVING_poweron_sr_state          0x000000F0

    #define     BA_MC6Ctrl_POWER_SAVING_poweron_mpd_state      0x0009
    #define     B16MC6Ctrl_POWER_SAVING_poweron_mpd_state      0x0008
    #define   LSb32MC6Ctrl_POWER_SAVING_poweron_mpd_state         8
    #define   LSb16MC6Ctrl_POWER_SAVING_poweron_mpd_state         8
    #define       bMC6Ctrl_POWER_SAVING_poweron_mpd_state      4
    #define   MSK32MC6Ctrl_POWER_SAVING_poweron_mpd_state         0x00000F00

    #define     BA_MC6Ctrl_POWER_SAVING_poweron_cal_mode       0x0009
    #define     B16MC6Ctrl_POWER_SAVING_poweron_cal_mode       0x0008
    #define   LSb32MC6Ctrl_POWER_SAVING_poweron_cal_mode          12
    #define   LSb16MC6Ctrl_POWER_SAVING_poweron_cal_mode          12
    #define       bMC6Ctrl_POWER_SAVING_poweron_cal_mode       1
    #define   MSK32MC6Ctrl_POWER_SAVING_poweron_cal_mode          0x00001000

    #define     BA_MC6Ctrl_POWER_SAVING_poweron_par_mode       0x0009
    #define     B16MC6Ctrl_POWER_SAVING_poweron_par_mode       0x0008
    #define   LSb32MC6Ctrl_POWER_SAVING_poweron_par_mode          13
    #define   LSb16MC6Ctrl_POWER_SAVING_poweron_par_mode          13
    #define       bMC6Ctrl_POWER_SAVING_poweron_par_mode       1
    #define   MSK32MC6Ctrl_POWER_SAVING_poweron_par_mode          0x00002000

    #define     BA_MC6Ctrl_POWER_SAVING_poweron_crc_mode       0x0009
    #define     B16MC6Ctrl_POWER_SAVING_poweron_crc_mode       0x0008
    #define   LSb32MC6Ctrl_POWER_SAVING_poweron_crc_mode          14
    #define   LSb16MC6Ctrl_POWER_SAVING_poweron_crc_mode          14
    #define       bMC6Ctrl_POWER_SAVING_poweron_crc_mode       1
    #define   MSK32MC6Ctrl_POWER_SAVING_poweron_crc_mode          0x00004000
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_POWER_SAVING_CH1                    0x000C

    #define     BA_MC6Ctrl_POWER_SAVING_CH1_poweron_dpd_state  0x000C
    #define     B16MC6Ctrl_POWER_SAVING_CH1_poweron_dpd_state  0x000C
    #define   LSb32MC6Ctrl_POWER_SAVING_CH1_poweron_dpd_state     0
    #define   LSb16MC6Ctrl_POWER_SAVING_CH1_poweron_dpd_state     0
    #define       bMC6Ctrl_POWER_SAVING_CH1_poweron_dpd_state  4
    #define   MSK32MC6Ctrl_POWER_SAVING_CH1_poweron_dpd_state     0x0000000F

    #define     BA_MC6Ctrl_POWER_SAVING_CH1_poweron_sr_state   0x000C
    #define     B16MC6Ctrl_POWER_SAVING_CH1_poweron_sr_state   0x000C
    #define   LSb32MC6Ctrl_POWER_SAVING_CH1_poweron_sr_state      4
    #define   LSb16MC6Ctrl_POWER_SAVING_CH1_poweron_sr_state      4
    #define       bMC6Ctrl_POWER_SAVING_CH1_poweron_sr_state   4
    #define   MSK32MC6Ctrl_POWER_SAVING_CH1_poweron_sr_state      0x000000F0

    #define     BA_MC6Ctrl_POWER_SAVING_CH1_poweron_mpd_state  0x000D
    #define     B16MC6Ctrl_POWER_SAVING_CH1_poweron_mpd_state  0x000C
    #define   LSb32MC6Ctrl_POWER_SAVING_CH1_poweron_mpd_state     8
    #define   LSb16MC6Ctrl_POWER_SAVING_CH1_poweron_mpd_state     8
    #define       bMC6Ctrl_POWER_SAVING_CH1_poweron_mpd_state  4
    #define   MSK32MC6Ctrl_POWER_SAVING_CH1_poweron_mpd_state     0x00000F00

    #define     BA_MC6Ctrl_POWER_SAVING_CH1_poweron_cal_mode   0x000D
    #define     B16MC6Ctrl_POWER_SAVING_CH1_poweron_cal_mode   0x000C
    #define   LSb32MC6Ctrl_POWER_SAVING_CH1_poweron_cal_mode      12
    #define   LSb16MC6Ctrl_POWER_SAVING_CH1_poweron_cal_mode      12
    #define       bMC6Ctrl_POWER_SAVING_CH1_poweron_cal_mode   1
    #define   MSK32MC6Ctrl_POWER_SAVING_CH1_poweron_cal_mode      0x00001000

    #define     BA_MC6Ctrl_POWER_SAVING_CH1_poweron_par_mode   0x000D
    #define     B16MC6Ctrl_POWER_SAVING_CH1_poweron_par_mode   0x000C
    #define   LSb32MC6Ctrl_POWER_SAVING_CH1_poweron_par_mode      13
    #define   LSb16MC6Ctrl_POWER_SAVING_CH1_poweron_par_mode      13
    #define       bMC6Ctrl_POWER_SAVING_CH1_poweron_par_mode   1
    #define   MSK32MC6Ctrl_POWER_SAVING_CH1_poweron_par_mode      0x00002000

    #define     BA_MC6Ctrl_POWER_SAVING_CH1_poweron_crc_mode   0x000D
    #define     B16MC6Ctrl_POWER_SAVING_CH1_poweron_crc_mode   0x000C
    #define   LSb32MC6Ctrl_POWER_SAVING_CH1_poweron_crc_mode      14
    #define   LSb16MC6Ctrl_POWER_SAVING_CH1_poweron_crc_mode      14
    #define       bMC6Ctrl_POWER_SAVING_CH1_poweron_crc_mode   1
    #define   MSK32MC6Ctrl_POWER_SAVING_CH1_poweron_crc_mode      0x00004000
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_DFT_CTRL                            0x0010

    #define     BA_MC6Ctrl_DFT_CTRL_mc_loop_back_test_mode     0x0010
    #define     B16MC6Ctrl_DFT_CTRL_mc_loop_back_test_mode     0x0010
    #define   LSb32MC6Ctrl_DFT_CTRL_mc_loop_back_test_mode        0
    #define   LSb16MC6Ctrl_DFT_CTRL_mc_loop_back_test_mode        0
    #define       bMC6Ctrl_DFT_CTRL_mc_loop_back_test_mode     1
    #define   MSK32MC6Ctrl_DFT_CTRL_mc_loop_back_test_mode        0x00000001

    #define     BA_MC6Ctrl_DFT_CTRL_loop_back_rdata_vld_dly    0x0010
    #define     B16MC6Ctrl_DFT_CTRL_loop_back_rdata_vld_dly    0x0010
    #define   LSb32MC6Ctrl_DFT_CTRL_loop_back_rdata_vld_dly       1
    #define   LSb16MC6Ctrl_DFT_CTRL_loop_back_rdata_vld_dly       1
    #define       bMC6Ctrl_DFT_CTRL_loop_back_rdata_vld_dly    4
    #define   MSK32MC6Ctrl_DFT_CTRL_loop_back_rdata_vld_dly       0x0000001E

    #define     BA_MC6Ctrl_DFT_CTRL_Debug_mode                 0x0010
    #define     B16MC6Ctrl_DFT_CTRL_Debug_mode                 0x0010
    #define   LSb32MC6Ctrl_DFT_CTRL_Debug_mode                    5
    #define   LSb16MC6Ctrl_DFT_CTRL_Debug_mode                    5
    #define       bMC6Ctrl_DFT_CTRL_Debug_mode                 1
    #define   MSK32MC6Ctrl_DFT_CTRL_Debug_mode                    0x00000020
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_DFC_CTRL                            0x0014

    #define     BA_MC6Ctrl_DFC_CTRL_reg_table_req              0x0014
    #define     B16MC6Ctrl_DFC_CTRL_reg_table_req              0x0014
    #define   LSb32MC6Ctrl_DFC_CTRL_reg_table_req                 0
    #define   LSb16MC6Ctrl_DFC_CTRL_reg_table_req                 0
    #define       bMC6Ctrl_DFC_CTRL_reg_table_req              1
    #define   MSK32MC6Ctrl_DFC_CTRL_reg_table_req                 0x00000001

    #define     BA_MC6Ctrl_DFC_CTRL_reg_table_type             0x0014
    #define     B16MC6Ctrl_DFC_CTRL_reg_table_type             0x0014
    #define   LSb32MC6Ctrl_DFC_CTRL_reg_table_type                1
    #define   LSb16MC6Ctrl_DFC_CTRL_reg_table_type                1
    #define       bMC6Ctrl_DFC_CTRL_reg_table_type             7
    #define   MSK32MC6Ctrl_DFC_CTRL_reg_table_type                0x000000FE

    #define     BA_MC6Ctrl_DFC_CTRL_reg_table_wait_ack         0x0015
    #define     B16MC6Ctrl_DFC_CTRL_reg_table_wait_ack         0x0014
    #define   LSb32MC6Ctrl_DFC_CTRL_reg_table_wait_ack            8
    #define   LSb16MC6Ctrl_DFC_CTRL_reg_table_wait_ack            8
    #define       bMC6Ctrl_DFC_CTRL_reg_table_wait_ack         1
    #define   MSK32MC6Ctrl_DFC_CTRL_reg_table_wait_ack            0x00000100

    #define     BA_MC6Ctrl_DFC_CTRL_sleep_req                  0x0015
    #define     B16MC6Ctrl_DFC_CTRL_sleep_req                  0x0014
    #define   LSb32MC6Ctrl_DFC_CTRL_sleep_req                     9
    #define   LSb16MC6Ctrl_DFC_CTRL_sleep_req                     9
    #define       bMC6Ctrl_DFC_CTRL_sleep_req                  1
    #define   MSK32MC6Ctrl_DFC_CTRL_sleep_req                     0x00000200
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_DFC_STS                             0x0018

    #define     BA_MC6Ctrl_DFC_STS_reg_table_req_ack           0x0018
    #define     B16MC6Ctrl_DFC_STS_reg_table_req_ack           0x0018
    #define   LSb32MC6Ctrl_DFC_STS_reg_table_req_ack              0
    #define   LSb16MC6Ctrl_DFC_STS_reg_table_req_ack              0
    #define       bMC6Ctrl_DFC_STS_reg_table_req_ack           1
    #define   MSK32MC6Ctrl_DFC_STS_reg_table_req_ack              0x00000001

    #define     BA_MC6Ctrl_DFC_STS_reg_table_wait_req          0x0018
    #define     B16MC6Ctrl_DFC_STS_reg_table_wait_req          0x0018
    #define   LSb32MC6Ctrl_DFC_STS_reg_table_wait_req             1
    #define   LSb16MC6Ctrl_DFC_STS_reg_table_wait_req             1
    #define       bMC6Ctrl_DFC_STS_reg_table_wait_req          1
    #define   MSK32MC6Ctrl_DFC_STS_reg_table_wait_req             0x00000002

    #define     BA_MC6Ctrl_DFC_STS_sleep_req_ack               0x0018
    #define     B16MC6Ctrl_DFC_STS_sleep_req_ack               0x0018
    #define   LSb32MC6Ctrl_DFC_STS_sleep_req_ack                  2
    #define   LSb16MC6Ctrl_DFC_STS_sleep_req_ack                  2
    #define       bMC6Ctrl_DFC_STS_sleep_req_ack               1
    #define   MSK32MC6Ctrl_DFC_STS_sleep_req_ack                  0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_ddrPhyLoopBackSrc                   0x001C

    #define     BA_MC6Ctrl_ddrPhyLoopBackSrc_Control           0x001C
    #define     B16MC6Ctrl_ddrPhyLoopBackSrc_Control           0x001C
    #define   LSb32MC6Ctrl_ddrPhyLoopBackSrc_Control              0
    #define   LSb16MC6Ctrl_ddrPhyLoopBackSrc_Control              0
    #define       bMC6Ctrl_ddrPhyLoopBackSrc_Control           1
    #define   MSK32MC6Ctrl_ddrPhyLoopBackSrc_Control              0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_ddrPhyLoopBackConfig1               0x0020

    #define     BA_MC6Ctrl_ddrPhyLoopBackConfig1_TST_MODE      0x0020
    #define     B16MC6Ctrl_ddrPhyLoopBackConfig1_TST_MODE      0x0020
    #define   LSb32MC6Ctrl_ddrPhyLoopBackConfig1_TST_MODE         0
    #define   LSb16MC6Ctrl_ddrPhyLoopBackConfig1_TST_MODE         0
    #define       bMC6Ctrl_ddrPhyLoopBackConfig1_TST_MODE      1
    #define   MSK32MC6Ctrl_ddrPhyLoopBackConfig1_TST_MODE         0x00000001

    #define     BA_MC6Ctrl_ddrPhyLoopBackConfig1_TST_START     0x0020
    #define     B16MC6Ctrl_ddrPhyLoopBackConfig1_TST_START     0x0020
    #define   LSb32MC6Ctrl_ddrPhyLoopBackConfig1_TST_START        1
    #define   LSb16MC6Ctrl_ddrPhyLoopBackConfig1_TST_START        1
    #define       bMC6Ctrl_ddrPhyLoopBackConfig1_TST_START     1
    #define   MSK32MC6Ctrl_ddrPhyLoopBackConfig1_TST_START        0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_ddrPhyLoopBackSts                   0x0024

    #define     BA_MC6Ctrl_ddrPhyLoopBackSts_prbs_done         0x0024
    #define     B16MC6Ctrl_ddrPhyLoopBackSts_prbs_done         0x0024
    #define   LSb32MC6Ctrl_ddrPhyLoopBackSts_prbs_done            0
    #define   LSb16MC6Ctrl_ddrPhyLoopBackSts_prbs_done            0
    #define       bMC6Ctrl_ddrPhyLoopBackSts_prbs_done         1
    #define   MSK32MC6Ctrl_ddrPhyLoopBackSts_prbs_done            0x00000001

    #define     BA_MC6Ctrl_ddrPhyLoopBackSts_prbs_fail         0x0024
    #define     B16MC6Ctrl_ddrPhyLoopBackSts_prbs_fail         0x0024
    #define   LSb32MC6Ctrl_ddrPhyLoopBackSts_prbs_fail            1
    #define   LSb16MC6Ctrl_ddrPhyLoopBackSts_prbs_fail            1
    #define       bMC6Ctrl_ddrPhyLoopBackSts_prbs_fail         1
    #define   MSK32MC6Ctrl_ddrPhyLoopBackSts_prbs_fail            0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_PHY_PD_CTRL                         0x0028

    #define     BA_MC6Ctrl_PHY_PD_CTRL_normal_mode             0x0028
    #define     B16MC6Ctrl_PHY_PD_CTRL_normal_mode             0x0028
    #define   LSb32MC6Ctrl_PHY_PD_CTRL_normal_mode                0
    #define   LSb16MC6Ctrl_PHY_PD_CTRL_normal_mode                0
    #define       bMC6Ctrl_PHY_PD_CTRL_normal_mode             1
    #define   MSK32MC6Ctrl_PHY_PD_CTRL_normal_mode                0x00000001

    #define     BA_MC6Ctrl_PHY_PD_CTRL_pd_en                   0x0028
    #define     B16MC6Ctrl_PHY_PD_CTRL_pd_en                   0x0028
    #define   LSb32MC6Ctrl_PHY_PD_CTRL_pd_en                      1
    #define   LSb16MC6Ctrl_PHY_PD_CTRL_pd_en                      1
    #define       bMC6Ctrl_PHY_PD_CTRL_pd_en                   1
    #define   MSK32MC6Ctrl_PHY_PD_CTRL_pd_en                      0x00000002

    #define     BA_MC6Ctrl_PHY_PD_CTRL_pd_core                 0x0028
    #define     B16MC6Ctrl_PHY_PD_CTRL_pd_core                 0x0028
    #define   LSb32MC6Ctrl_PHY_PD_CTRL_pd_core                    2
    #define   LSb16MC6Ctrl_PHY_PD_CTRL_pd_core                    2
    #define       bMC6Ctrl_PHY_PD_CTRL_pd_core                 1
    #define   MSK32MC6Ctrl_PHY_PD_CTRL_pd_core                    0x00000004

    #define     BA_MC6Ctrl_PHY_PD_CTRL_pdb_core                0x0028
    #define     B16MC6Ctrl_PHY_PD_CTRL_pdb_core                0x0028
    #define   LSb32MC6Ctrl_PHY_PD_CTRL_pdb_core                   3
    #define   LSb16MC6Ctrl_PHY_PD_CTRL_pdb_core                   3
    #define       bMC6Ctrl_PHY_PD_CTRL_pdb_core                1
    #define   MSK32MC6Ctrl_PHY_PD_CTRL_pdb_core                   0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_HW_WB_CTRL                          0x002C

    #define     BA_MC6Ctrl_HW_WB_CTRL_drain_req                0x002C
    #define     B16MC6Ctrl_HW_WB_CTRL_drain_req                0x002C
    #define   LSb32MC6Ctrl_HW_WB_CTRL_drain_req                   0
    #define   LSb16MC6Ctrl_HW_WB_CTRL_drain_req                   0
    #define       bMC6Ctrl_HW_WB_CTRL_drain_req                1
    #define   MSK32MC6Ctrl_HW_WB_CTRL_drain_req                   0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_HW_WB_STS                           0x0030

    #define     BA_MC6Ctrl_HW_WB_STS_drain_ack                 0x0030
    #define     B16MC6Ctrl_HW_WB_STS_drain_ack                 0x0030
    #define   LSb32MC6Ctrl_HW_WB_STS_drain_ack                    0
    #define   LSb16MC6Ctrl_HW_WB_STS_drain_ack                    0
    #define       bMC6Ctrl_HW_WB_STS_drain_ack                 1
    #define   MSK32MC6Ctrl_HW_WB_STS_drain_ack                    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Trust_zone                          0x0034

    #define     BA_MC6Ctrl_Trust_zone_Tz_lock                  0x0034
    #define     B16MC6Ctrl_Trust_zone_Tz_lock                  0x0034
    #define   LSb32MC6Ctrl_Trust_zone_Tz_lock                     0
    #define   LSb16MC6Ctrl_Trust_zone_Tz_lock                     0
    #define       bMC6Ctrl_Trust_zone_Tz_lock                  1
    #define   MSK32MC6Ctrl_Trust_zone_Tz_lock                     0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_memPll                              0x0038
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_AxiPCntCTRL                         0x0054

    #define     BA_MC6Ctrl_AxiPCntCTRL_clear                   0x0054
    #define     B16MC6Ctrl_AxiPCntCTRL_clear                   0x0054
    #define   LSb32MC6Ctrl_AxiPCntCTRL_clear                      0
    #define   LSb16MC6Ctrl_AxiPCntCTRL_clear                      0
    #define       bMC6Ctrl_AxiPCntCTRL_clear                   8
    #define   MSK32MC6Ctrl_AxiPCntCTRL_clear                      0x000000FF

    #define     BA_MC6Ctrl_AxiPCntCTRL_enable                  0x0055
    #define     B16MC6Ctrl_AxiPCntCTRL_enable                  0x0054
    #define   LSb32MC6Ctrl_AxiPCntCTRL_enable                     8
    #define   LSb16MC6Ctrl_AxiPCntCTRL_enable                     8
    #define       bMC6Ctrl_AxiPCntCTRL_enable                  8
    #define   MSK32MC6Ctrl_AxiPCntCTRL_enable                     0x0000FF00

    #define     BA_MC6Ctrl_AxiPCntCTRL_latch                   0x0056
    #define     B16MC6Ctrl_AxiPCntCTRL_latch                   0x0056
    #define   LSb32MC6Ctrl_AxiPCntCTRL_latch                      16
    #define   LSb16MC6Ctrl_AxiPCntCTRL_latch                      0
    #define       bMC6Ctrl_AxiPCntCTRL_latch                   8
    #define   MSK32MC6Ctrl_AxiPCntCTRL_latch                      0x00FF0000
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_AxiMst0                             0x0058

    #define     BA_MC6Ctrl_AxiMst0_PID                         0x0058
    #define     B16MC6Ctrl_AxiMst0_PID                         0x0058
    #define   LSb32MC6Ctrl_AxiMst0_PID                            0
    #define   LSb16MC6Ctrl_AxiMst0_PID                            0
    #define       bMC6Ctrl_AxiMst0_PID                         16
    #define   MSK32MC6Ctrl_AxiMst0_PID                            0x0000FFFF

    #define     BA_MC6Ctrl_AxiMst0_Mask                        0x005A
    #define     B16MC6Ctrl_AxiMst0_Mask                        0x005A
    #define   LSb32MC6Ctrl_AxiMst0_Mask                           16
    #define   LSb16MC6Ctrl_AxiMst0_Mask                           0
    #define       bMC6Ctrl_AxiMst0_Mask                        16
    #define   MSK32MC6Ctrl_AxiMst0_Mask                           0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_AxiMst0DXBAR                        0x005C

    #define     BA_MC6Ctrl_AxiMst0DXBAR_PID                    0x005C
    #define     B16MC6Ctrl_AxiMst0DXBAR_PID                    0x005C
    #define   LSb32MC6Ctrl_AxiMst0DXBAR_PID                       0
    #define   LSb16MC6Ctrl_AxiMst0DXBAR_PID                       0
    #define       bMC6Ctrl_AxiMst0DXBAR_PID                    16
    #define   MSK32MC6Ctrl_AxiMst0DXBAR_PID                       0x0000FFFF

    #define     BA_MC6Ctrl_AxiMst0DXBAR_Mask                   0x005E
    #define     B16MC6Ctrl_AxiMst0DXBAR_Mask                   0x005E
    #define   LSb32MC6Ctrl_AxiMst0DXBAR_Mask                      16
    #define   LSb16MC6Ctrl_AxiMst0DXBAR_Mask                      0
    #define       bMC6Ctrl_AxiMst0DXBAR_Mask                   16
    #define   MSK32MC6Ctrl_AxiMst0DXBAR_Mask                      0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_AxiMst1                             0x0060

    #define     BA_MC6Ctrl_AxiMst1_PID                         0x0060
    #define     B16MC6Ctrl_AxiMst1_PID                         0x0060
    #define   LSb32MC6Ctrl_AxiMst1_PID                            0
    #define   LSb16MC6Ctrl_AxiMst1_PID                            0
    #define       bMC6Ctrl_AxiMst1_PID                         16
    #define   MSK32MC6Ctrl_AxiMst1_PID                            0x0000FFFF

    #define     BA_MC6Ctrl_AxiMst1_Mask                        0x0062
    #define     B16MC6Ctrl_AxiMst1_Mask                        0x0062
    #define   LSb32MC6Ctrl_AxiMst1_Mask                           16
    #define   LSb16MC6Ctrl_AxiMst1_Mask                           0
    #define       bMC6Ctrl_AxiMst1_Mask                        16
    #define   MSK32MC6Ctrl_AxiMst1_Mask                           0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_AxiMst2_OVP                         0x0064

    #define     BA_MC6Ctrl_AxiMst2_OVP_PID                     0x0064
    #define     B16MC6Ctrl_AxiMst2_OVP_PID                     0x0064
    #define   LSb32MC6Ctrl_AxiMst2_OVP_PID                        0
    #define   LSb16MC6Ctrl_AxiMst2_OVP_PID                        0
    #define       bMC6Ctrl_AxiMst2_OVP_PID                     16
    #define   MSK32MC6Ctrl_AxiMst2_OVP_PID                        0x0000FFFF

    #define     BA_MC6Ctrl_AxiMst2_OVP_Mask                    0x0066
    #define     B16MC6Ctrl_AxiMst2_OVP_Mask                    0x0066
    #define   LSb32MC6Ctrl_AxiMst2_OVP_Mask                       16
    #define   LSb16MC6Ctrl_AxiMst2_OVP_Mask                       0
    #define       bMC6Ctrl_AxiMst2_OVP_Mask                    16
    #define   MSK32MC6Ctrl_AxiMst2_OVP_Mask                       0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_AxiMst2_V4G                         0x0068

    #define     BA_MC6Ctrl_AxiMst2_V4G_PID                     0x0068
    #define     B16MC6Ctrl_AxiMst2_V4G_PID                     0x0068
    #define   LSb32MC6Ctrl_AxiMst2_V4G_PID                        0
    #define   LSb16MC6Ctrl_AxiMst2_V4G_PID                        0
    #define       bMC6Ctrl_AxiMst2_V4G_PID                     16
    #define   MSK32MC6Ctrl_AxiMst2_V4G_PID                        0x0000FFFF

    #define     BA_MC6Ctrl_AxiMst2_V4G_Mask                    0x006A
    #define     B16MC6Ctrl_AxiMst2_V4G_Mask                    0x006A
    #define   LSb32MC6Ctrl_AxiMst2_V4G_Mask                       16
    #define   LSb16MC6Ctrl_AxiMst2_V4G_Mask                       0
    #define       bMC6Ctrl_AxiMst2_V4G_Mask                    16
    #define   MSK32MC6Ctrl_AxiMst2_V4G_Mask                       0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_AxiMst2_H1                          0x006C

    #define     BA_MC6Ctrl_AxiMst2_H1_PID                      0x006C
    #define     B16MC6Ctrl_AxiMst2_H1_PID                      0x006C
    #define   LSb32MC6Ctrl_AxiMst2_H1_PID                         0
    #define   LSb16MC6Ctrl_AxiMst2_H1_PID                         0
    #define       bMC6Ctrl_AxiMst2_H1_PID                      16
    #define   MSK32MC6Ctrl_AxiMst2_H1_PID                         0x0000FFFF

    #define     BA_MC6Ctrl_AxiMst2_H1_Mask                     0x006E
    #define     B16MC6Ctrl_AxiMst2_H1_Mask                     0x006E
    #define   LSb32MC6Ctrl_AxiMst2_H1_Mask                        16
    #define   LSb16MC6Ctrl_AxiMst2_H1_Mask                        0
    #define       bMC6Ctrl_AxiMst2_H1_Mask                     16
    #define   MSK32MC6Ctrl_AxiMst2_H1_Mask                        0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_AxiMst3_GFX3D                       0x0070

    #define     BA_MC6Ctrl_AxiMst3_GFX3D_PID                   0x0070
    #define     B16MC6Ctrl_AxiMst3_GFX3D_PID                   0x0070
    #define   LSb32MC6Ctrl_AxiMst3_GFX3D_PID                      0
    #define   LSb16MC6Ctrl_AxiMst3_GFX3D_PID                      0
    #define       bMC6Ctrl_AxiMst3_GFX3D_PID                   16
    #define   MSK32MC6Ctrl_AxiMst3_GFX3D_PID                      0x0000FFFF

    #define     BA_MC6Ctrl_AxiMst3_GFX3D_Mask                  0x0072
    #define     B16MC6Ctrl_AxiMst3_GFX3D_Mask                  0x0072
    #define   LSb32MC6Ctrl_AxiMst3_GFX3D_Mask                     16
    #define   LSb16MC6Ctrl_AxiMst3_GFX3D_Mask                     0
    #define       bMC6Ctrl_AxiMst3_GFX3D_Mask                  16
    #define   MSK32MC6Ctrl_AxiMst3_GFX3D_Mask                     0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_AxiMst3_mtest                       0x0074

    #define     BA_MC6Ctrl_AxiMst3_mtest_PID                   0x0074
    #define     B16MC6Ctrl_AxiMst3_mtest_PID                   0x0074
    #define   LSb32MC6Ctrl_AxiMst3_mtest_PID                      0
    #define   LSb16MC6Ctrl_AxiMst3_mtest_PID                      0
    #define       bMC6Ctrl_AxiMst3_mtest_PID                   16
    #define   MSK32MC6Ctrl_AxiMst3_mtest_PID                      0x0000FFFF

    #define     BA_MC6Ctrl_AxiMst3_mtest_Mask                  0x0076
    #define     B16MC6Ctrl_AxiMst3_mtest_Mask                  0x0076
    #define   LSb32MC6Ctrl_AxiMst3_mtest_Mask                     16
    #define   LSb16MC6Ctrl_AxiMst3_mtest_Mask                     0
    #define       bMC6Ctrl_AxiMst3_mtest_Mask                  16
    #define   MSK32MC6Ctrl_AxiMst3_mtest_Mask                     0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mstr0PCnt                           0x0078
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mstr0DXBARPCnt                      0x00AC
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mstr1PCnt                           0x00E0
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mstr2_OVP_PCnt                      0x0114
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mstr2_V4G_PCnt                      0x0148
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mstr2_H1_PCnt                       0x017C
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mstr3_GFX3D_PCnt                    0x01B0
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mstr3_mtest_PCnt                    0x01E4
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_VREG_0                              0x0218
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_VREG_1                              0x021C
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_VREG_2                              0x0220
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_VREG_3                              0x0224
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_VREG_4                              0x0228
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_VREG_5                              0x022C
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_VREG_6                              0x0230
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_VREG_7                              0x0234
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_VREG_8                              0x0238
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_VREG_9                              0x023C
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_RWTC_31to0                          0x0240

    #define     BA_MC6Ctrl_RWTC_31to0_value                    0x0240
    #define     B16MC6Ctrl_RWTC_31to0_value                    0x0240
    #define   LSb32MC6Ctrl_RWTC_31to0_value                       0
    #define   LSb16MC6Ctrl_RWTC_31to0_value                       0
    #define       bMC6Ctrl_RWTC_31to0_value                    32
    #define   MSK32MC6Ctrl_RWTC_31to0_value                       0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_RWTC_57to32                         0x0244

    #define     BA_MC6Ctrl_RWTC_57to32_value                   0x0244
    #define     B16MC6Ctrl_RWTC_57to32_value                   0x0244
    #define   LSb32MC6Ctrl_RWTC_57to32_value                      0
    #define   LSb16MC6Ctrl_RWTC_57to32_value                      0
    #define       bMC6Ctrl_RWTC_57to32_value                   26
    #define   MSK32MC6Ctrl_RWTC_57to32_value                      0x03FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_AxiErrorMon_Mst0                    0x0248
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_AxiErrorMon_Mst1                    0x0260
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_AxiErrorMon_Mst2                    0x0278
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_AxiErrorMon_Mst3                    0x0290
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst0                                0x02A8
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst0_DXBAR                          0x02AC
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst1                                0x02B0
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst2                                0x02B4
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst3                                0x02B8
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst0Qos                             0x02BC
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst0DXBARQos                        0x02C0
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst1Qos                             0x02C4
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst1_1Qos                           0x02C8
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst2Qos_OVP                         0x02CC
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst2Qos_V4G                         0x02D0
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst2Qos_H1                          0x02D4
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst3Qos_GFX3D                       0x02D8
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst1_QoSOW                          0x02DC
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst2_OVP_QoSOW                      0x02E0
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst2_V4G_QoSOW                      0x02E4
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst2_H1_QoSOW                       0x02E8
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst3_GFX3D_QoSOW                    0x02EC
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst1Qos_Reg                         0x02F0
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst2_OVP_QoS_Reg                    0x0300
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst2_V4G_QoS_Reg                    0x0310
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst2_H1_QoS_Reg                     0x0320
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst3_GFX3D_QoS_Reg                  0x0330
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst0_FPID                           0x0340
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst1_FPID                           0x0360
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst2_FPID                           0x0380
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_Mst3_FPID                           0x03A0
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_DdrAsymCtrlCpu                      0x03C0

    #define     BA_MC6Ctrl_DdrAsymCtrlCpu_Mode                 0x03C0
    #define     B16MC6Ctrl_DdrAsymCtrlCpu_Mode                 0x03C0
    #define   LSb32MC6Ctrl_DdrAsymCtrlCpu_Mode                    0
    #define   LSb16MC6Ctrl_DdrAsymCtrlCpu_Mode                    0
    #define       bMC6Ctrl_DdrAsymCtrlCpu_Mode                 8
    #define   MSK32MC6Ctrl_DdrAsymCtrlCpu_Mode                    0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_AddrFilterCtrl                      0x03C4

    #define     BA_MC6Ctrl_AddrFilterCtrl_Mode                 0x03C4
    #define     B16MC6Ctrl_AddrFilterCtrl_Mode                 0x03C4
    #define   LSb32MC6Ctrl_AddrFilterCtrl_Mode                    0
    #define   LSb16MC6Ctrl_AddrFilterCtrl_Mode                    0
    #define       bMC6Ctrl_AddrFilterCtrl_Mode                 8
    #define   MSK32MC6Ctrl_AddrFilterCtrl_Mode                    0x000000FF

    #define     BA_MC6Ctrl_AddrFilterCtrl_Addr                 0x03C5
    #define     B16MC6Ctrl_AddrFilterCtrl_Addr                 0x03C4
    #define   LSb32MC6Ctrl_AddrFilterCtrl_Addr                    8
    #define   LSb16MC6Ctrl_AddrFilterCtrl_Addr                    8
    #define       bMC6Ctrl_AddrFilterCtrl_Addr                 20
    #define   MSK32MC6Ctrl_AddrFilterCtrl_Addr                    0x0FFFFF00
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_DdrAsymErrCpu                       0x03C8

    #define     BA_MC6Ctrl_DdrAsymErrCpu_Code                  0x03C8
    #define     B16MC6Ctrl_DdrAsymErrCpu_Code                  0x03C8
    #define   LSb32MC6Ctrl_DdrAsymErrCpu_Code                     0
    #define   LSb16MC6Ctrl_DdrAsymErrCpu_Code                     0
    #define       bMC6Ctrl_DdrAsymErrCpu_Code                  32
    #define   MSK32MC6Ctrl_DdrAsymErrCpu_Code                     0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_memPwrCtrl                          0x03CC

    #define     BA_MC6Ctrl_memPwrCtrl_pdfvssm                  0x03CC
    #define     B16MC6Ctrl_memPwrCtrl_pdfvssm                  0x03CC
    #define   LSb32MC6Ctrl_memPwrCtrl_pdfvssm                     0
    #define   LSb16MC6Ctrl_memPwrCtrl_pdfvssm                     0
    #define       bMC6Ctrl_memPwrCtrl_pdfvssm                  1
    #define   MSK32MC6Ctrl_memPwrCtrl_pdfvssm                     0x00000001

    #define     BA_MC6Ctrl_memPwrCtrl_pdlvmc                   0x03CC
    #define     B16MC6Ctrl_memPwrCtrl_pdlvmc                   0x03CC
    #define   LSb32MC6Ctrl_memPwrCtrl_pdlvmc                      1
    #define   LSb16MC6Ctrl_memPwrCtrl_pdlvmc                      1
    #define       bMC6Ctrl_memPwrCtrl_pdlvmc                   1
    #define   MSK32MC6Ctrl_memPwrCtrl_pdlvmc                      0x00000002

    #define     BA_MC6Ctrl_memPwrCtrl_pdwn                     0x03CC
    #define     B16MC6Ctrl_memPwrCtrl_pdwn                     0x03CC
    #define   LSb32MC6Ctrl_memPwrCtrl_pdwn                        2
    #define   LSb16MC6Ctrl_memPwrCtrl_pdwn                        2
    #define       bMC6Ctrl_memPwrCtrl_pdwn                     1
    #define   MSK32MC6Ctrl_memPwrCtrl_pdwn                        0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_mtest_ctrl                          0x03D0

    #define     BA_MC6Ctrl_mtest_ctrl_sel                      0x03D0
    #define     B16MC6Ctrl_mtest_ctrl_sel                      0x03D0
    #define   LSb32MC6Ctrl_mtest_ctrl_sel                         0
    #define   LSb16MC6Ctrl_mtest_ctrl_sel                         0
    #define       bMC6Ctrl_mtest_ctrl_sel                      1
    #define   MSK32MC6Ctrl_mtest_ctrl_sel                         0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_mc_dclk_gating                      0x03D4

    #define     BA_MC6Ctrl_mc_dclk_gating_enable               0x03D4
    #define     B16MC6Ctrl_mc_dclk_gating_enable               0x03D4
    #define   LSb32MC6Ctrl_mc_dclk_gating_enable                  0
    #define   LSb16MC6Ctrl_mc_dclk_gating_enable                  0
    #define       bMC6Ctrl_mc_dclk_gating_enable               1
    #define   MSK32MC6Ctrl_mc_dclk_gating_enable                  0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_dfc_pmu_memPll                      0x03D8
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_DFC_PMU_CTRL                        0x03F4

    #define     BA_MC6Ctrl_DFC_PMU_CTRL_dfc_pmu_en             0x03F4
    #define     B16MC6Ctrl_DFC_PMU_CTRL_dfc_pmu_en             0x03F4
    #define   LSb32MC6Ctrl_DFC_PMU_CTRL_dfc_pmu_en                0
    #define   LSb16MC6Ctrl_DFC_PMU_CTRL_dfc_pmu_en                0
    #define       bMC6Ctrl_DFC_PMU_CTRL_dfc_pmu_en             1
    #define   MSK32MC6Ctrl_DFC_PMU_CTRL_dfc_pmu_en                0x00000001

    #define     BA_MC6Ctrl_DFC_PMU_CTRL_reg_table_type         0x03F4
    #define     B16MC6Ctrl_DFC_PMU_CTRL_reg_table_type         0x03F4
    #define   LSb32MC6Ctrl_DFC_PMU_CTRL_reg_table_type            1
    #define   LSb16MC6Ctrl_DFC_PMU_CTRL_reg_table_type            1
    #define       bMC6Ctrl_DFC_PMU_CTRL_reg_table_type         7
    #define   MSK32MC6Ctrl_DFC_PMU_CTRL_reg_table_type            0x000000FE

    #define     BA_MC6Ctrl_DFC_PMU_CTRL_bypen_to_rsten_time    0x03F5
    #define     B16MC6Ctrl_DFC_PMU_CTRL_bypen_to_rsten_time    0x03F4
    #define   LSb32MC6Ctrl_DFC_PMU_CTRL_bypen_to_rsten_time       8
    #define   LSb16MC6Ctrl_DFC_PMU_CTRL_bypen_to_rsten_time       8
    #define       bMC6Ctrl_DFC_PMU_CTRL_bypen_to_rsten_time    16
    #define   MSK32MC6Ctrl_DFC_PMU_CTRL_bypen_to_rsten_time       0x00FFFF00

    #define     RA_MC6Ctrl_DFC_PMU_CTRL1                       0x03F8

    #define     BA_MC6Ctrl_DFC_PMU_CTRL_rsten_to_newset_time   0x03F8
    #define     B16MC6Ctrl_DFC_PMU_CTRL_rsten_to_newset_time   0x03F8
    #define   LSb32MC6Ctrl_DFC_PMU_CTRL_rsten_to_newset_time      0
    #define   LSb16MC6Ctrl_DFC_PMU_CTRL_rsten_to_newset_time      0
    #define       bMC6Ctrl_DFC_PMU_CTRL_rsten_to_newset_time   16
    #define   MSK32MC6Ctrl_DFC_PMU_CTRL_rsten_to_newset_time      0x0000FFFF

    #define     BA_MC6Ctrl_DFC_PMU_CTRL_newset_to_rstdis_time  0x03FA
    #define     B16MC6Ctrl_DFC_PMU_CTRL_newset_to_rstdis_time  0x03FA
    #define   LSb32MC6Ctrl_DFC_PMU_CTRL_newset_to_rstdis_time     16
    #define   LSb16MC6Ctrl_DFC_PMU_CTRL_newset_to_rstdis_time     0
    #define       bMC6Ctrl_DFC_PMU_CTRL_newset_to_rstdis_time  16
    #define   MSK32MC6Ctrl_DFC_PMU_CTRL_newset_to_rstdis_time     0xFFFF0000

    #define     RA_MC6Ctrl_DFC_PMU_CTRL2                       0x03FC

    #define     BA_MC6Ctrl_DFC_PMU_CTRL_plllck_to_bypdis_time  0x03FC
    #define     B16MC6Ctrl_DFC_PMU_CTRL_plllck_to_bypdis_time  0x03FC
    #define   LSb32MC6Ctrl_DFC_PMU_CTRL_plllck_to_bypdis_time     0
    #define   LSb16MC6Ctrl_DFC_PMU_CTRL_plllck_to_bypdis_time     0
    #define       bMC6Ctrl_DFC_PMU_CTRL_plllck_to_bypdis_time  16
    #define   MSK32MC6Ctrl_DFC_PMU_CTRL_plllck_to_bypdis_time     0x0000FFFF

    #define     BA_MC6Ctrl_DFC_PMU_CTRL_num_bp_before_sleep_dis 0x03FE
    #define     B16MC6Ctrl_DFC_PMU_CTRL_num_bp_before_sleep_dis 0x03FE
    #define   LSb32MC6Ctrl_DFC_PMU_CTRL_num_bp_before_sleep_dis    16
    #define   LSb16MC6Ctrl_DFC_PMU_CTRL_num_bp_before_sleep_dis    0
    #define       bMC6Ctrl_DFC_PMU_CTRL_num_bp_before_sleep_dis 16
    #define   MSK32MC6Ctrl_DFC_PMU_CTRL_num_bp_before_sleep_dis    0xFFFF0000

    #define     RA_MC6Ctrl_DFC_PMU_CTRL3                       0x0400

    #define     BA_MC6Ctrl_DFC_PMU_CTRL_plllck_wait_time       0x0400
    #define     B16MC6Ctrl_DFC_PMU_CTRL_plllck_wait_time       0x0400
    #define   LSb32MC6Ctrl_DFC_PMU_CTRL_plllck_wait_time          0
    #define   LSb16MC6Ctrl_DFC_PMU_CTRL_plllck_wait_time          0
    #define       bMC6Ctrl_DFC_PMU_CTRL_plllck_wait_time       16
    #define   MSK32MC6Ctrl_DFC_PMU_CTRL_plllck_wait_time          0x0000FFFF

    #define     BA_MC6Ctrl_DFC_PMU_CTRL_num_bp_after_sleep_dis 0x0402
    #define     B16MC6Ctrl_DFC_PMU_CTRL_num_bp_after_sleep_dis 0x0402
    #define   LSb32MC6Ctrl_DFC_PMU_CTRL_num_bp_after_sleep_dis    16
    #define   LSb16MC6Ctrl_DFC_PMU_CTRL_num_bp_after_sleep_dis    0
    #define       bMC6Ctrl_DFC_PMU_CTRL_num_bp_after_sleep_dis 16
    #define   MSK32MC6Ctrl_DFC_PMU_CTRL_num_bp_after_sleep_dis    0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL             0x0404

    #define     BA_MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_in 0x0404
    #define     B16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_in 0x0404
    #define   LSb32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_in    0
    #define   LSb16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_in    0
    #define       bMC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_in 8
    #define   MSK32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_in    0x000000FF

    #define     BA_MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_out 0x0405
    #define     B16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_out 0x0404
    #define   LSb32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_out    8
    #define   LSb16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_out    8
    #define       bMC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_out 8
    #define   MSK32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_out    0x0000FF00

    #define     BA_MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_in 0x0406
    #define     B16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_in 0x0406
    #define   LSb32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_in    16
    #define   LSb16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_in    0
    #define       bMC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_in 8
    #define   MSK32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_in    0x00FF0000

    #define     BA_MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_out 0x0407
    #define     B16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_out 0x0406
    #define   LSb32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_out    24
    #define   LSb16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_out    8
    #define       bMC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_out 8
    #define   MSK32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_out    0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_DPHY_BRG_MON                        0x0408

    #define     BA_MC6Ctrl_DPHY_BRG_MON_stat                   0x0408
    #define     B16MC6Ctrl_DPHY_BRG_MON_stat                   0x0408
    #define   LSb32MC6Ctrl_DPHY_BRG_MON_stat                      0
    #define   LSb16MC6Ctrl_DPHY_BRG_MON_stat                      0
    #define       bMC6Ctrl_DPHY_BRG_MON_stat                   16
    #define   MSK32MC6Ctrl_DPHY_BRG_MON_stat                      0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_DDRScramCtrl                        0x8000

    #define     BA_MC6Ctrl_DDRScramCtrl_En                     0x8000
    #define     B16MC6Ctrl_DDRScramCtrl_En                     0x8000
    #define   LSb32MC6Ctrl_DDRScramCtrl_En                        0
    #define   LSb16MC6Ctrl_DDRScramCtrl_En                        0
    #define       bMC6Ctrl_DDRScramCtrl_En                     1
    #define   MSK32MC6Ctrl_DDRScramCtrl_En                        0x00000001

    #define     BA_MC6Ctrl_DDRScramCtrl_ScramCtrl_Lock         0x8000
    #define     B16MC6Ctrl_DDRScramCtrl_ScramCtrl_Lock         0x8000
    #define   LSb32MC6Ctrl_DDRScramCtrl_ScramCtrl_Lock            1
    #define   LSb16MC6Ctrl_DDRScramCtrl_ScramCtrl_Lock            1
    #define       bMC6Ctrl_DDRScramCtrl_ScramCtrl_Lock         1
    #define   MSK32MC6Ctrl_DDRScramCtrl_ScramCtrl_Lock            0x00000002

    #define     RA_MC6Ctrl_DDRScramCtrl1                       0x8004

    #define     BA_MC6Ctrl_DDRScramCtrl_Key0_word0             0x8004
    #define     B16MC6Ctrl_DDRScramCtrl_Key0_word0             0x8004
    #define   LSb32MC6Ctrl_DDRScramCtrl_Key0_word0                0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Key0_word0                0
    #define       bMC6Ctrl_DDRScramCtrl_Key0_word0             32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Key0_word0                0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl2                       0x8008

    #define     BA_MC6Ctrl_DDRScramCtrl_Key0_word1             0x8008
    #define     B16MC6Ctrl_DDRScramCtrl_Key0_word1             0x8008
    #define   LSb32MC6Ctrl_DDRScramCtrl_Key0_word1                0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Key0_word1                0
    #define       bMC6Ctrl_DDRScramCtrl_Key0_word1             32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Key0_word1                0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl3                       0x800C

    #define     BA_MC6Ctrl_DDRScramCtrl_Key0_word2             0x800C
    #define     B16MC6Ctrl_DDRScramCtrl_Key0_word2             0x800C
    #define   LSb32MC6Ctrl_DDRScramCtrl_Key0_word2                0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Key0_word2                0
    #define       bMC6Ctrl_DDRScramCtrl_Key0_word2             32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Key0_word2                0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl4                       0x8010

    #define     BA_MC6Ctrl_DDRScramCtrl_Key0_word3             0x8010
    #define     B16MC6Ctrl_DDRScramCtrl_Key0_word3             0x8010
    #define   LSb32MC6Ctrl_DDRScramCtrl_Key0_word3                0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Key0_word3                0
    #define       bMC6Ctrl_DDRScramCtrl_Key0_word3             32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Key0_word3                0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl5                       0x8014

    #define     BA_MC6Ctrl_DDRScramCtrl_Key0_addr              0x8014
    #define     B16MC6Ctrl_DDRScramCtrl_Key0_addr              0x8014
    #define   LSb32MC6Ctrl_DDRScramCtrl_Key0_addr                 0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Key0_addr                 0
    #define       bMC6Ctrl_DDRScramCtrl_Key0_addr              32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Key0_addr                 0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl6                       0x8018

    #define     BA_MC6Ctrl_DDRScramCtrl_Key0_mask              0x8018
    #define     B16MC6Ctrl_DDRScramCtrl_Key0_mask              0x8018
    #define   LSb32MC6Ctrl_DDRScramCtrl_Key0_mask                 0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Key0_mask                 0
    #define       bMC6Ctrl_DDRScramCtrl_Key0_mask              32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Key0_mask                 0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl7                       0x801C

    #define     BA_MC6Ctrl_DDRScramCtrl_Key1_word0             0x801C
    #define     B16MC6Ctrl_DDRScramCtrl_Key1_word0             0x801C
    #define   LSb32MC6Ctrl_DDRScramCtrl_Key1_word0                0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Key1_word0                0
    #define       bMC6Ctrl_DDRScramCtrl_Key1_word0             32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Key1_word0                0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl8                       0x8020

    #define     BA_MC6Ctrl_DDRScramCtrl_Key1_word1             0x8020
    #define     B16MC6Ctrl_DDRScramCtrl_Key1_word1             0x8020
    #define   LSb32MC6Ctrl_DDRScramCtrl_Key1_word1                0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Key1_word1                0
    #define       bMC6Ctrl_DDRScramCtrl_Key1_word1             32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Key1_word1                0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl9                       0x8024

    #define     BA_MC6Ctrl_DDRScramCtrl_Key1_word2             0x8024
    #define     B16MC6Ctrl_DDRScramCtrl_Key1_word2             0x8024
    #define   LSb32MC6Ctrl_DDRScramCtrl_Key1_word2                0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Key1_word2                0
    #define       bMC6Ctrl_DDRScramCtrl_Key1_word2             32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Key1_word2                0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl10                      0x8028

    #define     BA_MC6Ctrl_DDRScramCtrl_Key1_word3             0x8028
    #define     B16MC6Ctrl_DDRScramCtrl_Key1_word3             0x8028
    #define   LSb32MC6Ctrl_DDRScramCtrl_Key1_word3                0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Key1_word3                0
    #define       bMC6Ctrl_DDRScramCtrl_Key1_word3             32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Key1_word3                0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl11                      0x802C

    #define     BA_MC6Ctrl_DDRScramCtrl_Key1_addr              0x802C
    #define     B16MC6Ctrl_DDRScramCtrl_Key1_addr              0x802C
    #define   LSb32MC6Ctrl_DDRScramCtrl_Key1_addr                 0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Key1_addr                 0
    #define       bMC6Ctrl_DDRScramCtrl_Key1_addr              32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Key1_addr                 0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl12                      0x8030

    #define     BA_MC6Ctrl_DDRScramCtrl_Key1_mask              0x8030
    #define     B16MC6Ctrl_DDRScramCtrl_Key1_mask              0x8030
    #define   LSb32MC6Ctrl_DDRScramCtrl_Key1_mask                 0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Key1_mask                 0
    #define       bMC6Ctrl_DDRScramCtrl_Key1_mask              32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Key1_mask                 0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl13                      0x8034

    #define     BA_MC6Ctrl_DDRScramCtrl_W_latency              0x8034
    #define     B16MC6Ctrl_DDRScramCtrl_W_latency              0x8034
    #define   LSb32MC6Ctrl_DDRScramCtrl_W_latency                 0
    #define   LSb16MC6Ctrl_DDRScramCtrl_W_latency                 0
    #define       bMC6Ctrl_DDRScramCtrl_W_latency              6
    #define   MSK32MC6Ctrl_DDRScramCtrl_W_latency                 0x0000003F

    #define     BA_MC6Ctrl_DDRScramCtrl_R_latency              0x8034
    #define     B16MC6Ctrl_DDRScramCtrl_R_latency              0x8034
    #define   LSb32MC6Ctrl_DDRScramCtrl_R_latency                 6
    #define   LSb16MC6Ctrl_DDRScramCtrl_R_latency                 6
    #define       bMC6Ctrl_DDRScramCtrl_R_latency              6
    #define   MSK32MC6Ctrl_DDRScramCtrl_R_latency                 0x00000FC0

    #define     BA_MC6Ctrl_DDRScramCtrl_cal_latency            0x8035
    #define     B16MC6Ctrl_DDRScramCtrl_cal_latency            0x8034
    #define   LSb32MC6Ctrl_DDRScramCtrl_cal_latency               12
    #define   LSb16MC6Ctrl_DDRScramCtrl_cal_latency               12
    #define       bMC6Ctrl_DDRScramCtrl_cal_latency            4
    #define   MSK32MC6Ctrl_DDRScramCtrl_cal_latency               0x0000F000

    #define     BA_MC6Ctrl_DDRScramCtrl_num_pipeline           0x8036
    #define     B16MC6Ctrl_DDRScramCtrl_num_pipeline           0x8036
    #define   LSb32MC6Ctrl_DDRScramCtrl_num_pipeline              16
    #define   LSb16MC6Ctrl_DDRScramCtrl_num_pipeline              0
    #define       bMC6Ctrl_DDRScramCtrl_num_pipeline           4
    #define   MSK32MC6Ctrl_DDRScramCtrl_num_pipeline              0x000F0000

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_En                 0x8036
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_En                 0x8036
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_En                    20
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_En                    4
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_En                 1
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_En                    0x00100000

    #define     RA_MC6Ctrl_DDRScramCtrl14                      0x8038

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_Key0_word0         0x8038
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_Key0_word0         0x8038
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word0            0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_Key0_word0            0
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_Key0_word0         32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word0            0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl15                      0x803C

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_Key0_word1         0x803C
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_Key0_word1         0x803C
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word1            0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_Key0_word1            0
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_Key0_word1         32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word1            0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl16                      0x8040

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_Key0_word2         0x8040
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_Key0_word2         0x8040
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word2            0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_Key0_word2            0
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_Key0_word2         32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word2            0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl17                      0x8044

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_Key0_word3         0x8044
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_Key0_word3         0x8044
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word3            0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_Key0_word3            0
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_Key0_word3         32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word3            0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl18                      0x8048

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_Key0_addr          0x8048
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_Key0_addr          0x8048
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_Key0_addr             0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_Key0_addr             0
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_Key0_addr          32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_Key0_addr             0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl19                      0x804C

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_Key0_mask          0x804C
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_Key0_mask          0x804C
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_Key0_mask             0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_Key0_mask             0
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_Key0_mask          32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_Key0_mask             0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl20                      0x8050

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_Key1_word0         0x8050
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_Key1_word0         0x8050
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word0            0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_Key1_word0            0
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_Key1_word0         32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word0            0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl21                      0x8054

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_Key1_word1         0x8054
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_Key1_word1         0x8054
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word1            0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_Key1_word1            0
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_Key1_word1         32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word1            0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl22                      0x8058

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_Key1_word2         0x8058
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_Key1_word2         0x8058
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word2            0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_Key1_word2            0
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_Key1_word2         32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word2            0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl23                      0x805C

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_Key1_word3         0x805C
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_Key1_word3         0x805C
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word3            0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_Key1_word3            0
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_Key1_word3         32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word3            0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl24                      0x8060

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_Key1_addr          0x8060
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_Key1_addr          0x8060
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_Key1_addr             0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_Key1_addr             0
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_Key1_addr          32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_Key1_addr             0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl25                      0x8064

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_Key1_mask          0x8064
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_Key1_mask          0x8064
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_Key1_mask             0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_Key1_mask             0
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_Key1_mask          32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_Key1_mask             0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl26                      0x8068

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_W_latency          0x8068
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_W_latency          0x8068
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_W_latency             0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_W_latency             0
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_W_latency          6
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_W_latency             0x0000003F

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_R_latency          0x8068
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_R_latency          0x8068
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_R_latency             6
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_R_latency             6
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_R_latency          6
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_R_latency             0x00000FC0

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_cal_latency        0x8069
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_cal_latency        0x8068
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_cal_latency           12
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_cal_latency           12
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_cal_latency        4
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_cal_latency           0x0000F000

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_num_pipeline       0x806A
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_num_pipeline       0x806A
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_num_pipeline          16
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_num_pipeline          0
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_num_pipeline       4
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_num_pipeline          0x000F0000

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch0_dbi_mode           0x806A
    #define     B16MC6Ctrl_DDRScramCtrl_Ch0_dbi_mode           0x806A
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch0_dbi_mode              20
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch0_dbi_mode              4
    #define       bMC6Ctrl_DDRScramCtrl_Ch0_dbi_mode           2
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch0_dbi_mode              0x00300000

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_dbi_mode           0x806A
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_dbi_mode           0x806A
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_dbi_mode              22
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_dbi_mode              6
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_dbi_mode           2
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_dbi_mode              0x00C00000

    #define     BA_MC6Ctrl_DDRScramCtrl_interleave_en          0x806B
    #define     B16MC6Ctrl_DDRScramCtrl_interleave_en          0x806A
    #define   LSb32MC6Ctrl_DDRScramCtrl_interleave_en             24
    #define   LSb16MC6Ctrl_DDRScramCtrl_interleave_en             8
    #define       bMC6Ctrl_DDRScramCtrl_interleave_en          1
    #define   MSK32MC6Ctrl_DDRScramCtrl_interleave_en             0x01000000

    #define     BA_MC6Ctrl_DDRScramCtrl_interleave_size        0x806B
    #define     B16MC6Ctrl_DDRScramCtrl_interleave_size        0x806A
    #define   LSb32MC6Ctrl_DDRScramCtrl_interleave_size           25
    #define   LSb16MC6Ctrl_DDRScramCtrl_interleave_size           9
    #define       bMC6Ctrl_DDRScramCtrl_interleave_size        3
    #define   MSK32MC6Ctrl_DDRScramCtrl_interleave_size           0x0E000000

    #define     BA_MC6Ctrl_DDRScramCtrl_sdram_type             0x806B
    #define     B16MC6Ctrl_DDRScramCtrl_sdram_type             0x806A
    #define   LSb32MC6Ctrl_DDRScramCtrl_sdram_type                28
    #define   LSb16MC6Ctrl_DDRScramCtrl_sdram_type                12
    #define       bMC6Ctrl_DDRScramCtrl_sdram_type             4
    #define   MSK32MC6Ctrl_DDRScramCtrl_sdram_type                0xF0000000

    #define     RA_MC6Ctrl_DDRScramCtrl27                      0x806C

    #define     BA_MC6Ctrl_DDRScramCtrl_sdram_data_width       0x806C
    #define     B16MC6Ctrl_DDRScramCtrl_sdram_data_width       0x806C
    #define   LSb32MC6Ctrl_DDRScramCtrl_sdram_data_width          0
    #define   LSb16MC6Ctrl_DDRScramCtrl_sdram_data_width          0
    #define       bMC6Ctrl_DDRScramCtrl_sdram_data_width       3
    #define   MSK32MC6Ctrl_DDRScramCtrl_sdram_data_width          0x00000007

    #define     BA_MC6Ctrl_DDRScramCtrl_sdram_burst_length     0x806C
    #define     B16MC6Ctrl_DDRScramCtrl_sdram_burst_length     0x806C
    #define   LSb32MC6Ctrl_DDRScramCtrl_sdram_burst_length        3
    #define   LSb16MC6Ctrl_DDRScramCtrl_sdram_burst_length        3
    #define       bMC6Ctrl_DDRScramCtrl_sdram_burst_length     3
    #define   MSK32MC6Ctrl_DDRScramCtrl_sdram_burst_length        0x00000038

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch0_ddr4_ph_sel        0x806C
    #define     B16MC6Ctrl_DDRScramCtrl_Ch0_ddr4_ph_sel        0x806C
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch0_ddr4_ph_sel           6
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch0_ddr4_ph_sel           6
    #define       bMC6Ctrl_DDRScramCtrl_Ch0_ddr4_ph_sel        2
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch0_ddr4_ph_sel           0x000000C0

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_ddr4_ph_sel        0x806D
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_ddr4_ph_sel        0x806C
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_ddr4_ph_sel           8
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_ddr4_ph_sel           8
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_ddr4_ph_sel        2
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_ddr4_ph_sel           0x00000300

    #define     RA_MC6Ctrl_DDRScramCtrl28                      0x8070

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch0_sdram_pmap         0x8070
    #define     B16MC6Ctrl_DDRScramCtrl_Ch0_sdram_pmap         0x8070
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch0_sdram_pmap            0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch0_sdram_pmap            0
    #define       bMC6Ctrl_DDRScramCtrl_Ch0_sdram_pmap         32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch0_sdram_pmap            0xFFFFFFFF

    #define     RA_MC6Ctrl_DDRScramCtrl29                      0x8074

    #define     BA_MC6Ctrl_DDRScramCtrl_Ch1_sdram_pmap         0x8074
    #define     B16MC6Ctrl_DDRScramCtrl_Ch1_sdram_pmap         0x8074
    #define   LSb32MC6Ctrl_DDRScramCtrl_Ch1_sdram_pmap            0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Ch1_sdram_pmap            0
    #define       bMC6Ctrl_DDRScramCtrl_Ch1_sdram_pmap         32
    #define   MSK32MC6Ctrl_DDRScramCtrl_Ch1_sdram_pmap            0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MC6Ctrl_DDRScramCtrl_Secure                 0x8078

    #define     BA_MC6Ctrl_DDRScramCtrl_Secure_Key             0x8078
    #define     B16MC6Ctrl_DDRScramCtrl_Secure_Key             0x8078
    #define   LSb32MC6Ctrl_DDRScramCtrl_Secure_Key                0
    #define   LSb16MC6Ctrl_DDRScramCtrl_Secure_Key                0
    #define       bMC6Ctrl_DDRScramCtrl_Secure_Key             1
    #define   MSK32MC6Ctrl_DDRScramCtrl_Secure_Key                0x00000001
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MC6Ctrl {
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_MC6_4TO1_enable(r32)                _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_MC6_4TO1_enable(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_MC6_4TO1_enable(r16)                _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_MC6_4TO1_enable(r16,v)              _BFSET_(r16, 0, 0,v)

    #define     w32MC6Ctrl_MC6_4TO1                            {\
            UNSG32 uMC6_4TO1_enable                            :  1;\
            UNSG32 RSVDx0_b1                                   : 31;\
          }
    union { UNSG32 u32MC6Ctrl_MC6_4TO1;
            struct w32MC6Ctrl_MC6_4TO1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_DDR_PHY_CTRL_dll_disable(r32)       _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_DDR_PHY_CTRL_dll_disable(r32,v)     _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_DDR_PHY_CTRL_dll_disable(r16)       _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_DDR_PHY_CTRL_dll_disable(r16,v)     _BFSET_(r16, 0, 0,v)

    #define   GET32MC6Ctrl_DDR_PHY_CTRL_reset_mask(r32)        _BFGET_(r32, 1, 1)
    #define   SET32MC6Ctrl_DDR_PHY_CTRL_reset_mask(r32,v)      _BFSET_(r32, 1, 1,v)
    #define   GET16MC6Ctrl_DDR_PHY_CTRL_reset_mask(r16)        _BFGET_(r16, 1, 1)
    #define   SET16MC6Ctrl_DDR_PHY_CTRL_reset_mask(r16,v)      _BFSET_(r16, 1, 1,v)

    #define   GET32MC6Ctrl_DDR_PHY_CTRL_mc_hw_phy_dll_update_req(r32) _BFGET_(r32, 3, 2)
    #define   SET32MC6Ctrl_DDR_PHY_CTRL_mc_hw_phy_dll_update_req(r32,v) _BFSET_(r32, 3, 2,v)
    #define   GET16MC6Ctrl_DDR_PHY_CTRL_mc_hw_phy_dll_update_req(r16) _BFGET_(r16, 3, 2)
    #define   SET16MC6Ctrl_DDR_PHY_CTRL_mc_hw_phy_dll_update_req(r16,v) _BFSET_(r16, 3, 2,v)

    #define     w32MC6Ctrl_DDR_PHY_CTRL                        {\
            UNSG32 uDDR_PHY_CTRL_dll_disable                   :  1;\
            UNSG32 uDDR_PHY_CTRL_reset_mask                    :  1;\
            UNSG32 uDDR_PHY_CTRL_mc_hw_phy_dll_update_req      :  2;\
            UNSG32 RSVDx4_b4                                   : 28;\
          }
    union { UNSG32 u32MC6Ctrl_DDR_PHY_CTRL;
            struct w32MC6Ctrl_DDR_PHY_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_POWER_SAVING_poweron_dpd_state(r32) _BFGET_(r32, 3, 0)
    #define   SET32MC6Ctrl_POWER_SAVING_poweron_dpd_state(r32,v) _BFSET_(r32, 3, 0,v)
    #define   GET16MC6Ctrl_POWER_SAVING_poweron_dpd_state(r16) _BFGET_(r16, 3, 0)
    #define   SET16MC6Ctrl_POWER_SAVING_poweron_dpd_state(r16,v) _BFSET_(r16, 3, 0,v)

    #define   GET32MC6Ctrl_POWER_SAVING_poweron_sr_state(r32)  _BFGET_(r32, 7, 4)
    #define   SET32MC6Ctrl_POWER_SAVING_poweron_sr_state(r32,v) _BFSET_(r32, 7, 4,v)
    #define   GET16MC6Ctrl_POWER_SAVING_poweron_sr_state(r16)  _BFGET_(r16, 7, 4)
    #define   SET16MC6Ctrl_POWER_SAVING_poweron_sr_state(r16,v) _BFSET_(r16, 7, 4,v)

    #define   GET32MC6Ctrl_POWER_SAVING_poweron_mpd_state(r32) _BFGET_(r32,11, 8)
    #define   SET32MC6Ctrl_POWER_SAVING_poweron_mpd_state(r32,v) _BFSET_(r32,11, 8,v)
    #define   GET16MC6Ctrl_POWER_SAVING_poweron_mpd_state(r16) _BFGET_(r16,11, 8)
    #define   SET16MC6Ctrl_POWER_SAVING_poweron_mpd_state(r16,v) _BFSET_(r16,11, 8,v)

    #define   GET32MC6Ctrl_POWER_SAVING_poweron_cal_mode(r32)  _BFGET_(r32,12,12)
    #define   SET32MC6Ctrl_POWER_SAVING_poweron_cal_mode(r32,v) _BFSET_(r32,12,12,v)
    #define   GET16MC6Ctrl_POWER_SAVING_poweron_cal_mode(r16)  _BFGET_(r16,12,12)
    #define   SET16MC6Ctrl_POWER_SAVING_poweron_cal_mode(r16,v) _BFSET_(r16,12,12,v)

    #define   GET32MC6Ctrl_POWER_SAVING_poweron_par_mode(r32)  _BFGET_(r32,13,13)
    #define   SET32MC6Ctrl_POWER_SAVING_poweron_par_mode(r32,v) _BFSET_(r32,13,13,v)
    #define   GET16MC6Ctrl_POWER_SAVING_poweron_par_mode(r16)  _BFGET_(r16,13,13)
    #define   SET16MC6Ctrl_POWER_SAVING_poweron_par_mode(r16,v) _BFSET_(r16,13,13,v)

    #define   GET32MC6Ctrl_POWER_SAVING_poweron_crc_mode(r32)  _BFGET_(r32,14,14)
    #define   SET32MC6Ctrl_POWER_SAVING_poweron_crc_mode(r32,v) _BFSET_(r32,14,14,v)
    #define   GET16MC6Ctrl_POWER_SAVING_poweron_crc_mode(r16)  _BFGET_(r16,14,14)
    #define   SET16MC6Ctrl_POWER_SAVING_poweron_crc_mode(r16,v) _BFSET_(r16,14,14,v)

    #define     w32MC6Ctrl_POWER_SAVING                        {\
            UNSG32 uPOWER_SAVING_poweron_dpd_state             :  4;\
            UNSG32 uPOWER_SAVING_poweron_sr_state              :  4;\
            UNSG32 uPOWER_SAVING_poweron_mpd_state             :  4;\
            UNSG32 uPOWER_SAVING_poweron_cal_mode              :  1;\
            UNSG32 uPOWER_SAVING_poweron_par_mode              :  1;\
            UNSG32 uPOWER_SAVING_poweron_crc_mode              :  1;\
            UNSG32 RSVDx8_b15                                  : 17;\
          }
    union { UNSG32 u32MC6Ctrl_POWER_SAVING;
            struct w32MC6Ctrl_POWER_SAVING;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_POWER_SAVING_CH1_poweron_dpd_state(r32) _BFGET_(r32, 3, 0)
    #define   SET32MC6Ctrl_POWER_SAVING_CH1_poweron_dpd_state(r32,v) _BFSET_(r32, 3, 0,v)
    #define   GET16MC6Ctrl_POWER_SAVING_CH1_poweron_dpd_state(r16) _BFGET_(r16, 3, 0)
    #define   SET16MC6Ctrl_POWER_SAVING_CH1_poweron_dpd_state(r16,v) _BFSET_(r16, 3, 0,v)

    #define   GET32MC6Ctrl_POWER_SAVING_CH1_poweron_sr_state(r32) _BFGET_(r32, 7, 4)
    #define   SET32MC6Ctrl_POWER_SAVING_CH1_poweron_sr_state(r32,v) _BFSET_(r32, 7, 4,v)
    #define   GET16MC6Ctrl_POWER_SAVING_CH1_poweron_sr_state(r16) _BFGET_(r16, 7, 4)
    #define   SET16MC6Ctrl_POWER_SAVING_CH1_poweron_sr_state(r16,v) _BFSET_(r16, 7, 4,v)

    #define   GET32MC6Ctrl_POWER_SAVING_CH1_poweron_mpd_state(r32) _BFGET_(r32,11, 8)
    #define   SET32MC6Ctrl_POWER_SAVING_CH1_poweron_mpd_state(r32,v) _BFSET_(r32,11, 8,v)
    #define   GET16MC6Ctrl_POWER_SAVING_CH1_poweron_mpd_state(r16) _BFGET_(r16,11, 8)
    #define   SET16MC6Ctrl_POWER_SAVING_CH1_poweron_mpd_state(r16,v) _BFSET_(r16,11, 8,v)

    #define   GET32MC6Ctrl_POWER_SAVING_CH1_poweron_cal_mode(r32) _BFGET_(r32,12,12)
    #define   SET32MC6Ctrl_POWER_SAVING_CH1_poweron_cal_mode(r32,v) _BFSET_(r32,12,12,v)
    #define   GET16MC6Ctrl_POWER_SAVING_CH1_poweron_cal_mode(r16) _BFGET_(r16,12,12)
    #define   SET16MC6Ctrl_POWER_SAVING_CH1_poweron_cal_mode(r16,v) _BFSET_(r16,12,12,v)

    #define   GET32MC6Ctrl_POWER_SAVING_CH1_poweron_par_mode(r32) _BFGET_(r32,13,13)
    #define   SET32MC6Ctrl_POWER_SAVING_CH1_poweron_par_mode(r32,v) _BFSET_(r32,13,13,v)
    #define   GET16MC6Ctrl_POWER_SAVING_CH1_poweron_par_mode(r16) _BFGET_(r16,13,13)
    #define   SET16MC6Ctrl_POWER_SAVING_CH1_poweron_par_mode(r16,v) _BFSET_(r16,13,13,v)

    #define   GET32MC6Ctrl_POWER_SAVING_CH1_poweron_crc_mode(r32) _BFGET_(r32,14,14)
    #define   SET32MC6Ctrl_POWER_SAVING_CH1_poweron_crc_mode(r32,v) _BFSET_(r32,14,14,v)
    #define   GET16MC6Ctrl_POWER_SAVING_CH1_poweron_crc_mode(r16) _BFGET_(r16,14,14)
    #define   SET16MC6Ctrl_POWER_SAVING_CH1_poweron_crc_mode(r16,v) _BFSET_(r16,14,14,v)

    #define     w32MC6Ctrl_POWER_SAVING_CH1                    {\
            UNSG32 uPOWER_SAVING_CH1_poweron_dpd_state         :  4;\
            UNSG32 uPOWER_SAVING_CH1_poweron_sr_state          :  4;\
            UNSG32 uPOWER_SAVING_CH1_poweron_mpd_state         :  4;\
            UNSG32 uPOWER_SAVING_CH1_poweron_cal_mode          :  1;\
            UNSG32 uPOWER_SAVING_CH1_poweron_par_mode          :  1;\
            UNSG32 uPOWER_SAVING_CH1_poweron_crc_mode          :  1;\
            UNSG32 RSVDxC_b15                                  : 17;\
          }
    union { UNSG32 u32MC6Ctrl_POWER_SAVING_CH1;
            struct w32MC6Ctrl_POWER_SAVING_CH1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_DFT_CTRL_mc_loop_back_test_mode(r32) _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_DFT_CTRL_mc_loop_back_test_mode(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_DFT_CTRL_mc_loop_back_test_mode(r16) _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_DFT_CTRL_mc_loop_back_test_mode(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32MC6Ctrl_DFT_CTRL_loop_back_rdata_vld_dly(r32) _BFGET_(r32, 4, 1)
    #define   SET32MC6Ctrl_DFT_CTRL_loop_back_rdata_vld_dly(r32,v) _BFSET_(r32, 4, 1,v)
    #define   GET16MC6Ctrl_DFT_CTRL_loop_back_rdata_vld_dly(r16) _BFGET_(r16, 4, 1)
    #define   SET16MC6Ctrl_DFT_CTRL_loop_back_rdata_vld_dly(r16,v) _BFSET_(r16, 4, 1,v)

    #define   GET32MC6Ctrl_DFT_CTRL_Debug_mode(r32)            _BFGET_(r32, 5, 5)
    #define   SET32MC6Ctrl_DFT_CTRL_Debug_mode(r32,v)          _BFSET_(r32, 5, 5,v)
    #define   GET16MC6Ctrl_DFT_CTRL_Debug_mode(r16)            _BFGET_(r16, 5, 5)
    #define   SET16MC6Ctrl_DFT_CTRL_Debug_mode(r16,v)          _BFSET_(r16, 5, 5,v)

    #define     w32MC6Ctrl_DFT_CTRL                            {\
            UNSG32 uDFT_CTRL_mc_loop_back_test_mode            :  1;\
            UNSG32 uDFT_CTRL_loop_back_rdata_vld_dly           :  4;\
            UNSG32 uDFT_CTRL_Debug_mode                        :  1;\
            UNSG32 RSVDx10_b6                                  : 26;\
          }
    union { UNSG32 u32MC6Ctrl_DFT_CTRL;
            struct w32MC6Ctrl_DFT_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_DFC_CTRL_reg_table_req(r32)         _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_DFC_CTRL_reg_table_req(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_DFC_CTRL_reg_table_req(r16)         _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_DFC_CTRL_reg_table_req(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32MC6Ctrl_DFC_CTRL_reg_table_type(r32)        _BFGET_(r32, 7, 1)
    #define   SET32MC6Ctrl_DFC_CTRL_reg_table_type(r32,v)      _BFSET_(r32, 7, 1,v)
    #define   GET16MC6Ctrl_DFC_CTRL_reg_table_type(r16)        _BFGET_(r16, 7, 1)
    #define   SET16MC6Ctrl_DFC_CTRL_reg_table_type(r16,v)      _BFSET_(r16, 7, 1,v)

    #define   GET32MC6Ctrl_DFC_CTRL_reg_table_wait_ack(r32)    _BFGET_(r32, 8, 8)
    #define   SET32MC6Ctrl_DFC_CTRL_reg_table_wait_ack(r32,v)  _BFSET_(r32, 8, 8,v)
    #define   GET16MC6Ctrl_DFC_CTRL_reg_table_wait_ack(r16)    _BFGET_(r16, 8, 8)
    #define   SET16MC6Ctrl_DFC_CTRL_reg_table_wait_ack(r16,v)  _BFSET_(r16, 8, 8,v)

    #define   GET32MC6Ctrl_DFC_CTRL_sleep_req(r32)             _BFGET_(r32, 9, 9)
    #define   SET32MC6Ctrl_DFC_CTRL_sleep_req(r32,v)           _BFSET_(r32, 9, 9,v)
    #define   GET16MC6Ctrl_DFC_CTRL_sleep_req(r16)             _BFGET_(r16, 9, 9)
    #define   SET16MC6Ctrl_DFC_CTRL_sleep_req(r16,v)           _BFSET_(r16, 9, 9,v)

    #define     w32MC6Ctrl_DFC_CTRL                            {\
            UNSG32 uDFC_CTRL_reg_table_req                     :  1;\
            UNSG32 uDFC_CTRL_reg_table_type                    :  7;\
            UNSG32 uDFC_CTRL_reg_table_wait_ack                :  1;\
            UNSG32 uDFC_CTRL_sleep_req                         :  1;\
            UNSG32 RSVDx14_b10                                 : 22;\
          }
    union { UNSG32 u32MC6Ctrl_DFC_CTRL;
            struct w32MC6Ctrl_DFC_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_DFC_STS_reg_table_req_ack(r32)      _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_DFC_STS_reg_table_req_ack(r32,v)    _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_DFC_STS_reg_table_req_ack(r16)      _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_DFC_STS_reg_table_req_ack(r16,v)    _BFSET_(r16, 0, 0,v)

    #define   GET32MC6Ctrl_DFC_STS_reg_table_wait_req(r32)     _BFGET_(r32, 1, 1)
    #define   SET32MC6Ctrl_DFC_STS_reg_table_wait_req(r32,v)   _BFSET_(r32, 1, 1,v)
    #define   GET16MC6Ctrl_DFC_STS_reg_table_wait_req(r16)     _BFGET_(r16, 1, 1)
    #define   SET16MC6Ctrl_DFC_STS_reg_table_wait_req(r16,v)   _BFSET_(r16, 1, 1,v)

    #define   GET32MC6Ctrl_DFC_STS_sleep_req_ack(r32)          _BFGET_(r32, 2, 2)
    #define   SET32MC6Ctrl_DFC_STS_sleep_req_ack(r32,v)        _BFSET_(r32, 2, 2,v)
    #define   GET16MC6Ctrl_DFC_STS_sleep_req_ack(r16)          _BFGET_(r16, 2, 2)
    #define   SET16MC6Ctrl_DFC_STS_sleep_req_ack(r16,v)        _BFSET_(r16, 2, 2,v)

    #define     w32MC6Ctrl_DFC_STS                             {\
            UNSG32 uDFC_STS_reg_table_req_ack                  :  1;\
            UNSG32 uDFC_STS_reg_table_wait_req                 :  1;\
            UNSG32 uDFC_STS_sleep_req_ack                      :  1;\
            UNSG32 RSVDx18_b3                                  : 29;\
          }
    union { UNSG32 u32MC6Ctrl_DFC_STS;
            struct w32MC6Ctrl_DFC_STS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_ddrPhyLoopBackSrc_Control(r32)      _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_ddrPhyLoopBackSrc_Control(r32,v)    _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_ddrPhyLoopBackSrc_Control(r16)      _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_ddrPhyLoopBackSrc_Control(r16,v)    _BFSET_(r16, 0, 0,v)

    #define     w32MC6Ctrl_ddrPhyLoopBackSrc                   {\
            UNSG32 uddrPhyLoopBackSrc_Control                  :  1;\
            UNSG32 RSVDx1C_b1                                  : 31;\
          }
    union { UNSG32 u32MC6Ctrl_ddrPhyLoopBackSrc;
            struct w32MC6Ctrl_ddrPhyLoopBackSrc;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_ddrPhyLoopBackConfig1_TST_MODE(r32) _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_ddrPhyLoopBackConfig1_TST_MODE(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_ddrPhyLoopBackConfig1_TST_MODE(r16) _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_ddrPhyLoopBackConfig1_TST_MODE(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32MC6Ctrl_ddrPhyLoopBackConfig1_TST_START(r32) _BFGET_(r32, 1, 1)
    #define   SET32MC6Ctrl_ddrPhyLoopBackConfig1_TST_START(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16MC6Ctrl_ddrPhyLoopBackConfig1_TST_START(r16) _BFGET_(r16, 1, 1)
    #define   SET16MC6Ctrl_ddrPhyLoopBackConfig1_TST_START(r16,v) _BFSET_(r16, 1, 1,v)

    #define     w32MC6Ctrl_ddrPhyLoopBackConfig1               {\
            UNSG32 uddrPhyLoopBackConfig1_TST_MODE             :  1;\
            UNSG32 uddrPhyLoopBackConfig1_TST_START            :  1;\
            UNSG32 RSVDx20_b2                                  : 30;\
          }
    union { UNSG32 u32MC6Ctrl_ddrPhyLoopBackConfig1;
            struct w32MC6Ctrl_ddrPhyLoopBackConfig1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_ddrPhyLoopBackSts_prbs_done(r32)    _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_ddrPhyLoopBackSts_prbs_done(r32,v)  _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_ddrPhyLoopBackSts_prbs_done(r16)    _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_ddrPhyLoopBackSts_prbs_done(r16,v)  _BFSET_(r16, 0, 0,v)

    #define   GET32MC6Ctrl_ddrPhyLoopBackSts_prbs_fail(r32)    _BFGET_(r32, 1, 1)
    #define   SET32MC6Ctrl_ddrPhyLoopBackSts_prbs_fail(r32,v)  _BFSET_(r32, 1, 1,v)
    #define   GET16MC6Ctrl_ddrPhyLoopBackSts_prbs_fail(r16)    _BFGET_(r16, 1, 1)
    #define   SET16MC6Ctrl_ddrPhyLoopBackSts_prbs_fail(r16,v)  _BFSET_(r16, 1, 1,v)

    #define     w32MC6Ctrl_ddrPhyLoopBackSts                   {\
            UNSG32 uddrPhyLoopBackSts_prbs_done                :  1;\
            UNSG32 uddrPhyLoopBackSts_prbs_fail                :  1;\
            UNSG32 RSVDx24_b2                                  : 30;\
          }
    union { UNSG32 u32MC6Ctrl_ddrPhyLoopBackSts;
            struct w32MC6Ctrl_ddrPhyLoopBackSts;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_PHY_PD_CTRL_normal_mode(r32)        _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_PHY_PD_CTRL_normal_mode(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_PHY_PD_CTRL_normal_mode(r16)        _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_PHY_PD_CTRL_normal_mode(r16,v)      _BFSET_(r16, 0, 0,v)

    #define   GET32MC6Ctrl_PHY_PD_CTRL_pd_en(r32)              _BFGET_(r32, 1, 1)
    #define   SET32MC6Ctrl_PHY_PD_CTRL_pd_en(r32,v)            _BFSET_(r32, 1, 1,v)
    #define   GET16MC6Ctrl_PHY_PD_CTRL_pd_en(r16)              _BFGET_(r16, 1, 1)
    #define   SET16MC6Ctrl_PHY_PD_CTRL_pd_en(r16,v)            _BFSET_(r16, 1, 1,v)

    #define   GET32MC6Ctrl_PHY_PD_CTRL_pd_core(r32)            _BFGET_(r32, 2, 2)
    #define   SET32MC6Ctrl_PHY_PD_CTRL_pd_core(r32,v)          _BFSET_(r32, 2, 2,v)
    #define   GET16MC6Ctrl_PHY_PD_CTRL_pd_core(r16)            _BFGET_(r16, 2, 2)
    #define   SET16MC6Ctrl_PHY_PD_CTRL_pd_core(r16,v)          _BFSET_(r16, 2, 2,v)

    #define   GET32MC6Ctrl_PHY_PD_CTRL_pdb_core(r32)           _BFGET_(r32, 3, 3)
    #define   SET32MC6Ctrl_PHY_PD_CTRL_pdb_core(r32,v)         _BFSET_(r32, 3, 3,v)
    #define   GET16MC6Ctrl_PHY_PD_CTRL_pdb_core(r16)           _BFGET_(r16, 3, 3)
    #define   SET16MC6Ctrl_PHY_PD_CTRL_pdb_core(r16,v)         _BFSET_(r16, 3, 3,v)

    #define     w32MC6Ctrl_PHY_PD_CTRL                         {\
            UNSG32 uPHY_PD_CTRL_normal_mode                    :  1;\
            UNSG32 uPHY_PD_CTRL_pd_en                          :  1;\
            UNSG32 uPHY_PD_CTRL_pd_core                        :  1;\
            UNSG32 uPHY_PD_CTRL_pdb_core                       :  1;\
            UNSG32 RSVDx28_b4                                  : 28;\
          }
    union { UNSG32 u32MC6Ctrl_PHY_PD_CTRL;
            struct w32MC6Ctrl_PHY_PD_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_HW_WB_CTRL_drain_req(r32)           _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_HW_WB_CTRL_drain_req(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_HW_WB_CTRL_drain_req(r16)           _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_HW_WB_CTRL_drain_req(r16,v)         _BFSET_(r16, 0, 0,v)

    #define     w32MC6Ctrl_HW_WB_CTRL                          {\
            UNSG32 uHW_WB_CTRL_drain_req                       :  1;\
            UNSG32 RSVDx2C_b1                                  : 31;\
          }
    union { UNSG32 u32MC6Ctrl_HW_WB_CTRL;
            struct w32MC6Ctrl_HW_WB_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_HW_WB_STS_drain_ack(r32)            _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_HW_WB_STS_drain_ack(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_HW_WB_STS_drain_ack(r16)            _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_HW_WB_STS_drain_ack(r16,v)          _BFSET_(r16, 0, 0,v)

    #define     w32MC6Ctrl_HW_WB_STS                           {\
            UNSG32 uHW_WB_STS_drain_ack                        :  1;\
            UNSG32 RSVDx30_b1                                  : 31;\
          }
    union { UNSG32 u32MC6Ctrl_HW_WB_STS;
            struct w32MC6Ctrl_HW_WB_STS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_Trust_zone_Tz_lock(r32)             _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_Trust_zone_Tz_lock(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_Trust_zone_Tz_lock(r16)             _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_Trust_zone_Tz_lock(r16,v)           _BFSET_(r16, 0, 0,v)

    #define     w32MC6Ctrl_Trust_zone                          {\
            UNSG32 uTrust_zone_Tz_lock                         :  1;\
            UNSG32 RSVDx34_b1                                  : 31;\
          }
    union { UNSG32 u32MC6Ctrl_Trust_zone;
            struct w32MC6Ctrl_Trust_zone;
          };
    ///////////////////////////////////////////////////////////
              SIE_pll                                          ie_memPll;
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_AxiPCntCTRL_clear(r32)              _BFGET_(r32, 7, 0)
    #define   SET32MC6Ctrl_AxiPCntCTRL_clear(r32,v)            _BFSET_(r32, 7, 0,v)
    #define   GET16MC6Ctrl_AxiPCntCTRL_clear(r16)              _BFGET_(r16, 7, 0)
    #define   SET16MC6Ctrl_AxiPCntCTRL_clear(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32MC6Ctrl_AxiPCntCTRL_enable(r32)             _BFGET_(r32,15, 8)
    #define   SET32MC6Ctrl_AxiPCntCTRL_enable(r32,v)           _BFSET_(r32,15, 8,v)
    #define   GET16MC6Ctrl_AxiPCntCTRL_enable(r16)             _BFGET_(r16,15, 8)
    #define   SET16MC6Ctrl_AxiPCntCTRL_enable(r16,v)           _BFSET_(r16,15, 8,v)

    #define   GET32MC6Ctrl_AxiPCntCTRL_latch(r32)              _BFGET_(r32,23,16)
    #define   SET32MC6Ctrl_AxiPCntCTRL_latch(r32,v)            _BFSET_(r32,23,16,v)
    #define   GET16MC6Ctrl_AxiPCntCTRL_latch(r16)              _BFGET_(r16, 7, 0)
    #define   SET16MC6Ctrl_AxiPCntCTRL_latch(r16,v)            _BFSET_(r16, 7, 0,v)

    #define     w32MC6Ctrl_AxiPCntCTRL                         {\
            UNSG32 uAxiPCntCTRL_clear                          :  8;\
            UNSG32 uAxiPCntCTRL_enable                         :  8;\
            UNSG32 uAxiPCntCTRL_latch                          :  8;\
            UNSG32 RSVDx54_b24                                 :  8;\
          }
    union { UNSG32 u32MC6Ctrl_AxiPCntCTRL;
            struct w32MC6Ctrl_AxiPCntCTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_AxiMst0_PID(r32)                    _BFGET_(r32,15, 0)
    #define   SET32MC6Ctrl_AxiMst0_PID(r32,v)                  _BFSET_(r32,15, 0,v)
    #define   GET16MC6Ctrl_AxiMst0_PID(r16)                    _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst0_PID(r16,v)                  _BFSET_(r16,15, 0,v)

    #define   GET32MC6Ctrl_AxiMst0_Mask(r32)                   _BFGET_(r32,31,16)
    #define   SET32MC6Ctrl_AxiMst0_Mask(r32,v)                 _BFSET_(r32,31,16,v)
    #define   GET16MC6Ctrl_AxiMst0_Mask(r16)                   _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst0_Mask(r16,v)                 _BFSET_(r16,15, 0,v)

    #define     w32MC6Ctrl_AxiMst0                             {\
            UNSG32 uAxiMst0_PID                                : 16;\
            UNSG32 uAxiMst0_Mask                               : 16;\
          }
    union { UNSG32 u32MC6Ctrl_AxiMst0;
            struct w32MC6Ctrl_AxiMst0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_AxiMst0DXBAR_PID(r32)               _BFGET_(r32,15, 0)
    #define   SET32MC6Ctrl_AxiMst0DXBAR_PID(r32,v)             _BFSET_(r32,15, 0,v)
    #define   GET16MC6Ctrl_AxiMst0DXBAR_PID(r16)               _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst0DXBAR_PID(r16,v)             _BFSET_(r16,15, 0,v)

    #define   GET32MC6Ctrl_AxiMst0DXBAR_Mask(r32)              _BFGET_(r32,31,16)
    #define   SET32MC6Ctrl_AxiMst0DXBAR_Mask(r32,v)            _BFSET_(r32,31,16,v)
    #define   GET16MC6Ctrl_AxiMst0DXBAR_Mask(r16)              _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst0DXBAR_Mask(r16,v)            _BFSET_(r16,15, 0,v)

    #define     w32MC6Ctrl_AxiMst0DXBAR                        {\
            UNSG32 uAxiMst0DXBAR_PID                           : 16;\
            UNSG32 uAxiMst0DXBAR_Mask                          : 16;\
          }
    union { UNSG32 u32MC6Ctrl_AxiMst0DXBAR;
            struct w32MC6Ctrl_AxiMst0DXBAR;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_AxiMst1_PID(r32)                    _BFGET_(r32,15, 0)
    #define   SET32MC6Ctrl_AxiMst1_PID(r32,v)                  _BFSET_(r32,15, 0,v)
    #define   GET16MC6Ctrl_AxiMst1_PID(r16)                    _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst1_PID(r16,v)                  _BFSET_(r16,15, 0,v)

    #define   GET32MC6Ctrl_AxiMst1_Mask(r32)                   _BFGET_(r32,31,16)
    #define   SET32MC6Ctrl_AxiMst1_Mask(r32,v)                 _BFSET_(r32,31,16,v)
    #define   GET16MC6Ctrl_AxiMst1_Mask(r16)                   _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst1_Mask(r16,v)                 _BFSET_(r16,15, 0,v)

    #define     w32MC6Ctrl_AxiMst1                             {\
            UNSG32 uAxiMst1_PID                                : 16;\
            UNSG32 uAxiMst1_Mask                               : 16;\
          }
    union { UNSG32 u32MC6Ctrl_AxiMst1;
            struct w32MC6Ctrl_AxiMst1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_AxiMst2_OVP_PID(r32)                _BFGET_(r32,15, 0)
    #define   SET32MC6Ctrl_AxiMst2_OVP_PID(r32,v)              _BFSET_(r32,15, 0,v)
    #define   GET16MC6Ctrl_AxiMst2_OVP_PID(r16)                _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst2_OVP_PID(r16,v)              _BFSET_(r16,15, 0,v)

    #define   GET32MC6Ctrl_AxiMst2_OVP_Mask(r32)               _BFGET_(r32,31,16)
    #define   SET32MC6Ctrl_AxiMst2_OVP_Mask(r32,v)             _BFSET_(r32,31,16,v)
    #define   GET16MC6Ctrl_AxiMst2_OVP_Mask(r16)               _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst2_OVP_Mask(r16,v)             _BFSET_(r16,15, 0,v)

    #define     w32MC6Ctrl_AxiMst2_OVP                         {\
            UNSG32 uAxiMst2_OVP_PID                            : 16;\
            UNSG32 uAxiMst2_OVP_Mask                           : 16;\
          }
    union { UNSG32 u32MC6Ctrl_AxiMst2_OVP;
            struct w32MC6Ctrl_AxiMst2_OVP;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_AxiMst2_V4G_PID(r32)                _BFGET_(r32,15, 0)
    #define   SET32MC6Ctrl_AxiMst2_V4G_PID(r32,v)              _BFSET_(r32,15, 0,v)
    #define   GET16MC6Ctrl_AxiMst2_V4G_PID(r16)                _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst2_V4G_PID(r16,v)              _BFSET_(r16,15, 0,v)

    #define   GET32MC6Ctrl_AxiMst2_V4G_Mask(r32)               _BFGET_(r32,31,16)
    #define   SET32MC6Ctrl_AxiMst2_V4G_Mask(r32,v)             _BFSET_(r32,31,16,v)
    #define   GET16MC6Ctrl_AxiMst2_V4G_Mask(r16)               _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst2_V4G_Mask(r16,v)             _BFSET_(r16,15, 0,v)

    #define     w32MC6Ctrl_AxiMst2_V4G                         {\
            UNSG32 uAxiMst2_V4G_PID                            : 16;\
            UNSG32 uAxiMst2_V4G_Mask                           : 16;\
          }
    union { UNSG32 u32MC6Ctrl_AxiMst2_V4G;
            struct w32MC6Ctrl_AxiMst2_V4G;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_AxiMst2_H1_PID(r32)                 _BFGET_(r32,15, 0)
    #define   SET32MC6Ctrl_AxiMst2_H1_PID(r32,v)               _BFSET_(r32,15, 0,v)
    #define   GET16MC6Ctrl_AxiMst2_H1_PID(r16)                 _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst2_H1_PID(r16,v)               _BFSET_(r16,15, 0,v)

    #define   GET32MC6Ctrl_AxiMst2_H1_Mask(r32)                _BFGET_(r32,31,16)
    #define   SET32MC6Ctrl_AxiMst2_H1_Mask(r32,v)              _BFSET_(r32,31,16,v)
    #define   GET16MC6Ctrl_AxiMst2_H1_Mask(r16)                _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst2_H1_Mask(r16,v)              _BFSET_(r16,15, 0,v)

    #define     w32MC6Ctrl_AxiMst2_H1                          {\
            UNSG32 uAxiMst2_H1_PID                             : 16;\
            UNSG32 uAxiMst2_H1_Mask                            : 16;\
          }
    union { UNSG32 u32MC6Ctrl_AxiMst2_H1;
            struct w32MC6Ctrl_AxiMst2_H1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_AxiMst3_GFX3D_PID(r32)              _BFGET_(r32,15, 0)
    #define   SET32MC6Ctrl_AxiMst3_GFX3D_PID(r32,v)            _BFSET_(r32,15, 0,v)
    #define   GET16MC6Ctrl_AxiMst3_GFX3D_PID(r16)              _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst3_GFX3D_PID(r16,v)            _BFSET_(r16,15, 0,v)

    #define   GET32MC6Ctrl_AxiMst3_GFX3D_Mask(r32)             _BFGET_(r32,31,16)
    #define   SET32MC6Ctrl_AxiMst3_GFX3D_Mask(r32,v)           _BFSET_(r32,31,16,v)
    #define   GET16MC6Ctrl_AxiMst3_GFX3D_Mask(r16)             _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst3_GFX3D_Mask(r16,v)           _BFSET_(r16,15, 0,v)

    #define     w32MC6Ctrl_AxiMst3_GFX3D                       {\
            UNSG32 uAxiMst3_GFX3D_PID                          : 16;\
            UNSG32 uAxiMst3_GFX3D_Mask                         : 16;\
          }
    union { UNSG32 u32MC6Ctrl_AxiMst3_GFX3D;
            struct w32MC6Ctrl_AxiMst3_GFX3D;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_AxiMst3_mtest_PID(r32)              _BFGET_(r32,15, 0)
    #define   SET32MC6Ctrl_AxiMst3_mtest_PID(r32,v)            _BFSET_(r32,15, 0,v)
    #define   GET16MC6Ctrl_AxiMst3_mtest_PID(r16)              _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst3_mtest_PID(r16,v)            _BFSET_(r16,15, 0,v)

    #define   GET32MC6Ctrl_AxiMst3_mtest_Mask(r32)             _BFGET_(r32,31,16)
    #define   SET32MC6Ctrl_AxiMst3_mtest_Mask(r32,v)           _BFSET_(r32,31,16,v)
    #define   GET16MC6Ctrl_AxiMst3_mtest_Mask(r16)             _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_AxiMst3_mtest_Mask(r16,v)           _BFSET_(r16,15, 0,v)

    #define     w32MC6Ctrl_AxiMst3_mtest                       {\
            UNSG32 uAxiMst3_mtest_PID                          : 16;\
            UNSG32 uAxiMst3_mtest_Mask                         : 16;\
          }
    union { UNSG32 u32MC6Ctrl_AxiMst3_mtest;
            struct w32MC6Ctrl_AxiMst3_mtest;
          };
    ///////////////////////////////////////////////////////////
              SIE_AxiPCntStat                                  ie_Mstr0PCnt;
    ///////////////////////////////////////////////////////////
              SIE_AxiPCntStat                                  ie_Mstr0DXBARPCnt;
    ///////////////////////////////////////////////////////////
              SIE_AxiPCntStat                                  ie_Mstr1PCnt;
    ///////////////////////////////////////////////////////////
              SIE_AxiPCntStat                                  ie_Mstr2_OVP_PCnt;
    ///////////////////////////////////////////////////////////
              SIE_AxiPCntStat                                  ie_Mstr2_V4G_PCnt;
    ///////////////////////////////////////////////////////////
              SIE_AxiPCntStat                                  ie_Mstr2_H1_PCnt;
    ///////////////////////////////////////////////////////////
              SIE_AxiPCntStat                                  ie_Mstr3_GFX3D_PCnt;
    ///////////////////////////////////////////////////////////
              SIE_AxiPCntStat                                  ie_Mstr3_mtest_PCnt;
    ///////////////////////////////////////////////////////////
              SIE_VREG                                         ie_VREG_0;
    ///////////////////////////////////////////////////////////
              SIE_VREG                                         ie_VREG_1;
    ///////////////////////////////////////////////////////////
              SIE_VREG                                         ie_VREG_2;
    ///////////////////////////////////////////////////////////
              SIE_VREG                                         ie_VREG_3;
    ///////////////////////////////////////////////////////////
              SIE_VREG                                         ie_VREG_4;
    ///////////////////////////////////////////////////////////
              SIE_VREG                                         ie_VREG_5;
    ///////////////////////////////////////////////////////////
              SIE_VREG                                         ie_VREG_6;
    ///////////////////////////////////////////////////////////
              SIE_VREG                                         ie_VREG_7;
    ///////////////////////////////////////////////////////////
              SIE_VREG                                         ie_VREG_8;
    ///////////////////////////////////////////////////////////
              SIE_VREG                                         ie_VREG_9;
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_RWTC_31to0_value(r32)               _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_RWTC_31to0_value(r32,v)             _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_RWTC_31to0                          {\
            UNSG32 uRWTC_31to0_value                           : 32;\
          }
    union { UNSG32 u32MC6Ctrl_RWTC_31to0;
            struct w32MC6Ctrl_RWTC_31to0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_RWTC_57to32_value(r32)              _BFGET_(r32,25, 0)
    #define   SET32MC6Ctrl_RWTC_57to32_value(r32,v)            _BFSET_(r32,25, 0,v)

    #define     w32MC6Ctrl_RWTC_57to32                         {\
            UNSG32 uRWTC_57to32_value                          : 26;\
            UNSG32 RSVDx244_b26                                :  6;\
          }
    union { UNSG32 u32MC6Ctrl_RWTC_57to32;
            struct w32MC6Ctrl_RWTC_57to32;
          };
    ///////////////////////////////////////////////////////////
              SIE_AxiErrorMon                                  ie_AxiErrorMon_Mst0;
    ///////////////////////////////////////////////////////////
              SIE_AxiErrorMon                                  ie_AxiErrorMon_Mst1;
    ///////////////////////////////////////////////////////////
              SIE_AxiErrorMon                                  ie_AxiErrorMon_Mst2;
    ///////////////////////////////////////////////////////////
              SIE_AxiErrorMon                                  ie_AxiErrorMon_Mst3;
    ///////////////////////////////////////////////////////////
              SIE_AxCacheOWCPU                                 ie_Mst0;
    ///////////////////////////////////////////////////////////
              SIE_AxCacheOW                                    ie_Mst0_DXBAR;
    ///////////////////////////////////////////////////////////
              SIE_AxCacheOW                                    ie_Mst1;
    ///////////////////////////////////////////////////////////
              SIE_AxCacheOW                                    ie_Mst2;
    ///////////////////////////////////////////////////////////
              SIE_AxCacheOW                                    ie_Mst3;
    ///////////////////////////////////////////////////////////
              SIE_MstQos                                       ie_Mst0Qos;
    ///////////////////////////////////////////////////////////
              SIE_MstQos                                       ie_Mst0DXBARQos;
    ///////////////////////////////////////////////////////////
              SIE_MstQos                                       ie_Mst1Qos;
    ///////////////////////////////////////////////////////////
              SIE_MstQos                                       ie_Mst1_1Qos;
    ///////////////////////////////////////////////////////////
              SIE_MstQos                                       ie_Mst2Qos_OVP;
    ///////////////////////////////////////////////////////////
              SIE_MstQos                                       ie_Mst2Qos_V4G;
    ///////////////////////////////////////////////////////////
              SIE_MstQos                                       ie_Mst2Qos_H1;
    ///////////////////////////////////////////////////////////
              SIE_MstQos                                       ie_Mst3Qos_GFX3D;
    ///////////////////////////////////////////////////////////
              SIE_AxQoSOW                                      ie_Mst1_QoSOW;
    ///////////////////////////////////////////////////////////
              SIE_AxQoSOW                                      ie_Mst2_OVP_QoSOW;
    ///////////////////////////////////////////////////////////
              SIE_AxQoSOW                                      ie_Mst2_V4G_QoSOW;
    ///////////////////////////////////////////////////////////
              SIE_AxQoSOW                                      ie_Mst2_H1_QoSOW;
    ///////////////////////////////////////////////////////////
              SIE_AxQoSOW                                      ie_Mst3_GFX3D_QoSOW;
    ///////////////////////////////////////////////////////////
              SIE_MstQos_Reg                                   ie_Mst1Qos_Reg;
    ///////////////////////////////////////////////////////////
              SIE_MstQos_Reg                                   ie_Mst2_OVP_QoS_Reg;
    ///////////////////////////////////////////////////////////
              SIE_MstQos_Reg                                   ie_Mst2_V4G_QoS_Reg;
    ///////////////////////////////////////////////////////////
              SIE_MstQos_Reg                                   ie_Mst2_H1_QoS_Reg;
    ///////////////////////////////////////////////////////////
              SIE_MstQos_Reg                                   ie_Mst3_GFX3D_QoS_Reg;
    ///////////////////////////////////////////////////////////
              SIE_AxID_4_TZC_FPID                              ie_Mst0_FPID;
    ///////////////////////////////////////////////////////////
              SIE_AxID_4_TZC_FPID                              ie_Mst1_FPID;
    ///////////////////////////////////////////////////////////
              SIE_AxID_4_TZC_FPID                              ie_Mst2_FPID;
    ///////////////////////////////////////////////////////////
              SIE_AxID_4_TZC_FPID                              ie_Mst3_FPID;
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_DdrAsymCtrlCpu_Mode(r32)            _BFGET_(r32, 7, 0)
    #define   SET32MC6Ctrl_DdrAsymCtrlCpu_Mode(r32,v)          _BFSET_(r32, 7, 0,v)
    #define   GET16MC6Ctrl_DdrAsymCtrlCpu_Mode(r16)            _BFGET_(r16, 7, 0)
    #define   SET16MC6Ctrl_DdrAsymCtrlCpu_Mode(r16,v)          _BFSET_(r16, 7, 0,v)

    #define     w32MC6Ctrl_DdrAsymCtrlCpu                      {\
            UNSG32 uDdrAsymCtrlCpu_Mode                        :  8;\
            UNSG32 RSVDx3C0_b8                                 : 24;\
          }
    union { UNSG32 u32MC6Ctrl_DdrAsymCtrlCpu;
            struct w32MC6Ctrl_DdrAsymCtrlCpu;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_AddrFilterCtrl_Mode(r32)            _BFGET_(r32, 7, 0)
    #define   SET32MC6Ctrl_AddrFilterCtrl_Mode(r32,v)          _BFSET_(r32, 7, 0,v)
    #define   GET16MC6Ctrl_AddrFilterCtrl_Mode(r16)            _BFGET_(r16, 7, 0)
    #define   SET16MC6Ctrl_AddrFilterCtrl_Mode(r16,v)          _BFSET_(r16, 7, 0,v)

    #define   GET32MC6Ctrl_AddrFilterCtrl_Addr(r32)            _BFGET_(r32,27, 8)
    #define   SET32MC6Ctrl_AddrFilterCtrl_Addr(r32,v)          _BFSET_(r32,27, 8,v)

    #define     w32MC6Ctrl_AddrFilterCtrl                      {\
            UNSG32 uAddrFilterCtrl_Mode                        :  8;\
            UNSG32 uAddrFilterCtrl_Addr                        : 20;\
            UNSG32 RSVDx3C4_b28                                :  4;\
          }
    union { UNSG32 u32MC6Ctrl_AddrFilterCtrl;
            struct w32MC6Ctrl_AddrFilterCtrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_DdrAsymErrCpu_Code(r32)             _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DdrAsymErrCpu_Code(r32,v)           _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DdrAsymErrCpu                       {\
            UNSG32 uDdrAsymErrCpu_Code                         : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DdrAsymErrCpu;
            struct w32MC6Ctrl_DdrAsymErrCpu;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_memPwrCtrl_pdfvssm(r32)             _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_memPwrCtrl_pdfvssm(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_memPwrCtrl_pdfvssm(r16)             _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_memPwrCtrl_pdfvssm(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32MC6Ctrl_memPwrCtrl_pdlvmc(r32)              _BFGET_(r32, 1, 1)
    #define   SET32MC6Ctrl_memPwrCtrl_pdlvmc(r32,v)            _BFSET_(r32, 1, 1,v)
    #define   GET16MC6Ctrl_memPwrCtrl_pdlvmc(r16)              _BFGET_(r16, 1, 1)
    #define   SET16MC6Ctrl_memPwrCtrl_pdlvmc(r16,v)            _BFSET_(r16, 1, 1,v)

    #define   GET32MC6Ctrl_memPwrCtrl_pdwn(r32)                _BFGET_(r32, 2, 2)
    #define   SET32MC6Ctrl_memPwrCtrl_pdwn(r32,v)              _BFSET_(r32, 2, 2,v)
    #define   GET16MC6Ctrl_memPwrCtrl_pdwn(r16)                _BFGET_(r16, 2, 2)
    #define   SET16MC6Ctrl_memPwrCtrl_pdwn(r16,v)              _BFSET_(r16, 2, 2,v)

    #define     w32MC6Ctrl_memPwrCtrl                          {\
            UNSG32 umemPwrCtrl_pdfvssm                         :  1;\
            UNSG32 umemPwrCtrl_pdlvmc                          :  1;\
            UNSG32 umemPwrCtrl_pdwn                            :  1;\
            UNSG32 RSVDx3CC_b3                                 : 29;\
          }
    union { UNSG32 u32MC6Ctrl_memPwrCtrl;
            struct w32MC6Ctrl_memPwrCtrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_mtest_ctrl_sel(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_mtest_ctrl_sel(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_mtest_ctrl_sel(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_mtest_ctrl_sel(r16,v)               _BFSET_(r16, 0, 0,v)

    #define     w32MC6Ctrl_mtest_ctrl                          {\
            UNSG32 umtest_ctrl_sel                             :  1;\
            UNSG32 RSVDx3D0_b1                                 : 31;\
          }
    union { UNSG32 u32MC6Ctrl_mtest_ctrl;
            struct w32MC6Ctrl_mtest_ctrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_mc_dclk_gating_enable(r32)          _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_mc_dclk_gating_enable(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_mc_dclk_gating_enable(r16)          _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_mc_dclk_gating_enable(r16,v)        _BFSET_(r16, 0, 0,v)

    #define     w32MC6Ctrl_mc_dclk_gating                      {\
            UNSG32 umc_dclk_gating_enable                      :  1;\
            UNSG32 RSVDx3D4_b1                                 : 31;\
          }
    union { UNSG32 u32MC6Ctrl_mc_dclk_gating;
            struct w32MC6Ctrl_mc_dclk_gating;
          };
    ///////////////////////////////////////////////////////////
              SIE_pll                                          ie_dfc_pmu_memPll;
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_DFC_PMU_CTRL_dfc_pmu_en(r32)        _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_DFC_PMU_CTRL_dfc_pmu_en(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_DFC_PMU_CTRL_dfc_pmu_en(r16)        _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_DFC_PMU_CTRL_dfc_pmu_en(r16,v)      _BFSET_(r16, 0, 0,v)

    #define   GET32MC6Ctrl_DFC_PMU_CTRL_reg_table_type(r32)    _BFGET_(r32, 7, 1)
    #define   SET32MC6Ctrl_DFC_PMU_CTRL_reg_table_type(r32,v)  _BFSET_(r32, 7, 1,v)
    #define   GET16MC6Ctrl_DFC_PMU_CTRL_reg_table_type(r16)    _BFGET_(r16, 7, 1)
    #define   SET16MC6Ctrl_DFC_PMU_CTRL_reg_table_type(r16,v)  _BFSET_(r16, 7, 1,v)

    #define   GET32MC6Ctrl_DFC_PMU_CTRL_bypen_to_rsten_time(r32) _BFGET_(r32,23, 8)
    #define   SET32MC6Ctrl_DFC_PMU_CTRL_bypen_to_rsten_time(r32,v) _BFSET_(r32,23, 8,v)

    #define     w32MC6Ctrl_DFC_PMU_CTRL                        {\
            UNSG32 uDFC_PMU_CTRL_dfc_pmu_en                    :  1;\
            UNSG32 uDFC_PMU_CTRL_reg_table_type                :  7;\
            UNSG32 uDFC_PMU_CTRL_bypen_to_rsten_time           : 16;\
            UNSG32 RSVDx3F4_b24                                :  8;\
          }
    union { UNSG32 u32MC6Ctrl_DFC_PMU_CTRL;
            struct w32MC6Ctrl_DFC_PMU_CTRL;
          };
    #define   GET32MC6Ctrl_DFC_PMU_CTRL_rsten_to_newset_time(r32) _BFGET_(r32,15, 0)
    #define   SET32MC6Ctrl_DFC_PMU_CTRL_rsten_to_newset_time(r32,v) _BFSET_(r32,15, 0,v)
    #define   GET16MC6Ctrl_DFC_PMU_CTRL_rsten_to_newset_time(r16) _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_DFC_PMU_CTRL_rsten_to_newset_time(r16,v) _BFSET_(r16,15, 0,v)

    #define   GET32MC6Ctrl_DFC_PMU_CTRL_newset_to_rstdis_time(r32) _BFGET_(r32,31,16)
    #define   SET32MC6Ctrl_DFC_PMU_CTRL_newset_to_rstdis_time(r32,v) _BFSET_(r32,31,16,v)
    #define   GET16MC6Ctrl_DFC_PMU_CTRL_newset_to_rstdis_time(r16) _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_DFC_PMU_CTRL_newset_to_rstdis_time(r16,v) _BFSET_(r16,15, 0,v)

    #define     w32MC6Ctrl_DFC_PMU_CTRL1                       {\
            UNSG32 uDFC_PMU_CTRL_rsten_to_newset_time          : 16;\
            UNSG32 uDFC_PMU_CTRL_newset_to_rstdis_time         : 16;\
          }
    union { UNSG32 u32MC6Ctrl_DFC_PMU_CTRL1;
            struct w32MC6Ctrl_DFC_PMU_CTRL1;
          };
    #define   GET32MC6Ctrl_DFC_PMU_CTRL_plllck_to_bypdis_time(r32) _BFGET_(r32,15, 0)
    #define   SET32MC6Ctrl_DFC_PMU_CTRL_plllck_to_bypdis_time(r32,v) _BFSET_(r32,15, 0,v)
    #define   GET16MC6Ctrl_DFC_PMU_CTRL_plllck_to_bypdis_time(r16) _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_DFC_PMU_CTRL_plllck_to_bypdis_time(r16,v) _BFSET_(r16,15, 0,v)

    #define   GET32MC6Ctrl_DFC_PMU_CTRL_num_bp_before_sleep_dis(r32) _BFGET_(r32,31,16)
    #define   SET32MC6Ctrl_DFC_PMU_CTRL_num_bp_before_sleep_dis(r32,v) _BFSET_(r32,31,16,v)
    #define   GET16MC6Ctrl_DFC_PMU_CTRL_num_bp_before_sleep_dis(r16) _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_DFC_PMU_CTRL_num_bp_before_sleep_dis(r16,v) _BFSET_(r16,15, 0,v)

    #define     w32MC6Ctrl_DFC_PMU_CTRL2                       {\
            UNSG32 uDFC_PMU_CTRL_plllck_to_bypdis_time         : 16;\
            UNSG32 uDFC_PMU_CTRL_num_bp_before_sleep_dis       : 16;\
          }
    union { UNSG32 u32MC6Ctrl_DFC_PMU_CTRL2;
            struct w32MC6Ctrl_DFC_PMU_CTRL2;
          };
    #define   GET32MC6Ctrl_DFC_PMU_CTRL_plllck_wait_time(r32)  _BFGET_(r32,15, 0)
    #define   SET32MC6Ctrl_DFC_PMU_CTRL_plllck_wait_time(r32,v) _BFSET_(r32,15, 0,v)
    #define   GET16MC6Ctrl_DFC_PMU_CTRL_plllck_wait_time(r16)  _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_DFC_PMU_CTRL_plllck_wait_time(r16,v) _BFSET_(r16,15, 0,v)

    #define   GET32MC6Ctrl_DFC_PMU_CTRL_num_bp_after_sleep_dis(r32) _BFGET_(r32,31,16)
    #define   SET32MC6Ctrl_DFC_PMU_CTRL_num_bp_after_sleep_dis(r32,v) _BFSET_(r32,31,16,v)
    #define   GET16MC6Ctrl_DFC_PMU_CTRL_num_bp_after_sleep_dis(r16) _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_DFC_PMU_CTRL_num_bp_after_sleep_dis(r16,v) _BFSET_(r16,15, 0,v)

    #define     w32MC6Ctrl_DFC_PMU_CTRL3                       {\
            UNSG32 uDFC_PMU_CTRL_plllck_wait_time              : 16;\
            UNSG32 uDFC_PMU_CTRL_num_bp_after_sleep_dis        : 16;\
          }
    union { UNSG32 u32MC6Ctrl_DFC_PMU_CTRL3;
            struct w32MC6Ctrl_DFC_PMU_CTRL3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_in(r32) _BFGET_(r32, 7, 0)
    #define   SET32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_in(r32,v) _BFSET_(r32, 7, 0,v)
    #define   GET16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_in(r16) _BFGET_(r16, 7, 0)
    #define   SET16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_in(r16,v) _BFSET_(r16, 7, 0,v)

    #define   GET32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_out(r32) _BFGET_(r32,15, 8)
    #define   SET32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_out(r32,v) _BFSET_(r32,15, 8,v)
    #define   GET16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_out(r16) _BFGET_(r16,15, 8)
    #define   SET16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch0_flop_out(r16,v) _BFSET_(r16,15, 8,v)

    #define   GET32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_in(r32) _BFGET_(r32,23,16)
    #define   SET32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_in(r32,v) _BFSET_(r32,23,16,v)
    #define   GET16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_in(r16) _BFGET_(r16, 7, 0)
    #define   SET16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_in(r16,v) _BFSET_(r16, 7, 0,v)

    #define   GET32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_out(r32) _BFGET_(r32,31,24)
    #define   SET32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_out(r32,v) _BFSET_(r32,31,24,v)
    #define   GET16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_out(r16) _BFGET_(r16,15, 8)
    #define   SET16MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL_ch1_flop_out(r16,v) _BFSET_(r16,15, 8,v)

    #define     w32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL             {\
            UNSG32 uDDR_SCR_DFI_BYPASS_CTRL_ch0_flop_in        :  8;\
            UNSG32 uDDR_SCR_DFI_BYPASS_CTRL_ch0_flop_out       :  8;\
            UNSG32 uDDR_SCR_DFI_BYPASS_CTRL_ch1_flop_in        :  8;\
            UNSG32 uDDR_SCR_DFI_BYPASS_CTRL_ch1_flop_out       :  8;\
          }
    union { UNSG32 u32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL;
            struct w32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_DPHY_BRG_MON_stat(r32)              _BFGET_(r32,15, 0)
    #define   SET32MC6Ctrl_DPHY_BRG_MON_stat(r32,v)            _BFSET_(r32,15, 0,v)
    #define   GET16MC6Ctrl_DPHY_BRG_MON_stat(r16)              _BFGET_(r16,15, 0)
    #define   SET16MC6Ctrl_DPHY_BRG_MON_stat(r16,v)            _BFSET_(r16,15, 0,v)

    #define     w32MC6Ctrl_DPHY_BRG_MON                        {\
            UNSG32 uDPHY_BRG_MON_stat                          : 16;\
            UNSG32 RSVDx408_b16                                : 16;\
          }
    union { UNSG32 u32MC6Ctrl_DPHY_BRG_MON;
            struct w32MC6Ctrl_DPHY_BRG_MON;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx40C                                    [31732];
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_DDRScramCtrl_En(r32)                _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_En(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_En(r16)                _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_DDRScramCtrl_En(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_ScramCtrl_Lock(r32)    _BFGET_(r32, 1, 1)
    #define   SET32MC6Ctrl_DDRScramCtrl_ScramCtrl_Lock(r32,v)  _BFSET_(r32, 1, 1,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_ScramCtrl_Lock(r16)    _BFGET_(r16, 1, 1)
    #define   SET16MC6Ctrl_DDRScramCtrl_ScramCtrl_Lock(r16,v)  _BFSET_(r16, 1, 1,v)

    #define     w32MC6Ctrl_DDRScramCtrl                        {\
            UNSG32 uDDRScramCtrl_En                            :  1;\
            UNSG32 uDDRScramCtrl_ScramCtrl_Lock                :  1;\
            UNSG32 RSVDx8000_b2                                : 30;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl;
            struct w32MC6Ctrl_DDRScramCtrl;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Key0_word0(r32)        _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Key0_word0(r32,v)      _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl1                       {\
            UNSG32 uDDRScramCtrl_Key0_word0                    : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl1;
            struct w32MC6Ctrl_DDRScramCtrl1;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Key0_word1(r32)        _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Key0_word1(r32,v)      _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl2                       {\
            UNSG32 uDDRScramCtrl_Key0_word1                    : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl2;
            struct w32MC6Ctrl_DDRScramCtrl2;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Key0_word2(r32)        _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Key0_word2(r32,v)      _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl3                       {\
            UNSG32 uDDRScramCtrl_Key0_word2                    : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl3;
            struct w32MC6Ctrl_DDRScramCtrl3;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Key0_word3(r32)        _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Key0_word3(r32,v)      _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl4                       {\
            UNSG32 uDDRScramCtrl_Key0_word3                    : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl4;
            struct w32MC6Ctrl_DDRScramCtrl4;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Key0_addr(r32)         _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Key0_addr(r32,v)       _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl5                       {\
            UNSG32 uDDRScramCtrl_Key0_addr                     : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl5;
            struct w32MC6Ctrl_DDRScramCtrl5;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Key0_mask(r32)         _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Key0_mask(r32,v)       _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl6                       {\
            UNSG32 uDDRScramCtrl_Key0_mask                     : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl6;
            struct w32MC6Ctrl_DDRScramCtrl6;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Key1_word0(r32)        _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Key1_word0(r32,v)      _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl7                       {\
            UNSG32 uDDRScramCtrl_Key1_word0                    : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl7;
            struct w32MC6Ctrl_DDRScramCtrl7;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Key1_word1(r32)        _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Key1_word1(r32,v)      _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl8                       {\
            UNSG32 uDDRScramCtrl_Key1_word1                    : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl8;
            struct w32MC6Ctrl_DDRScramCtrl8;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Key1_word2(r32)        _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Key1_word2(r32,v)      _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl9                       {\
            UNSG32 uDDRScramCtrl_Key1_word2                    : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl9;
            struct w32MC6Ctrl_DDRScramCtrl9;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Key1_word3(r32)        _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Key1_word3(r32,v)      _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl10                      {\
            UNSG32 uDDRScramCtrl_Key1_word3                    : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl10;
            struct w32MC6Ctrl_DDRScramCtrl10;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Key1_addr(r32)         _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Key1_addr(r32,v)       _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl11                      {\
            UNSG32 uDDRScramCtrl_Key1_addr                     : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl11;
            struct w32MC6Ctrl_DDRScramCtrl11;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Key1_mask(r32)         _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Key1_mask(r32,v)       _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl12                      {\
            UNSG32 uDDRScramCtrl_Key1_mask                     : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl12;
            struct w32MC6Ctrl_DDRScramCtrl12;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_W_latency(r32)         _BFGET_(r32, 5, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_W_latency(r32,v)       _BFSET_(r32, 5, 0,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_W_latency(r16)         _BFGET_(r16, 5, 0)
    #define   SET16MC6Ctrl_DDRScramCtrl_W_latency(r16,v)       _BFSET_(r16, 5, 0,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_R_latency(r32)         _BFGET_(r32,11, 6)
    #define   SET32MC6Ctrl_DDRScramCtrl_R_latency(r32,v)       _BFSET_(r32,11, 6,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_R_latency(r16)         _BFGET_(r16,11, 6)
    #define   SET16MC6Ctrl_DDRScramCtrl_R_latency(r16,v)       _BFSET_(r16,11, 6,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_cal_latency(r32)       _BFGET_(r32,15,12)
    #define   SET32MC6Ctrl_DDRScramCtrl_cal_latency(r32,v)     _BFSET_(r32,15,12,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_cal_latency(r16)       _BFGET_(r16,15,12)
    #define   SET16MC6Ctrl_DDRScramCtrl_cal_latency(r16,v)     _BFSET_(r16,15,12,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_num_pipeline(r32)      _BFGET_(r32,19,16)
    #define   SET32MC6Ctrl_DDRScramCtrl_num_pipeline(r32,v)    _BFSET_(r32,19,16,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_num_pipeline(r16)      _BFGET_(r16, 3, 0)
    #define   SET16MC6Ctrl_DDRScramCtrl_num_pipeline(r16,v)    _BFSET_(r16, 3, 0,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_En(r32)            _BFGET_(r32,20,20)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_En(r32,v)          _BFSET_(r32,20,20,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_Ch1_En(r16)            _BFGET_(r16, 4, 4)
    #define   SET16MC6Ctrl_DDRScramCtrl_Ch1_En(r16,v)          _BFSET_(r16, 4, 4,v)

    #define     w32MC6Ctrl_DDRScramCtrl13                      {\
            UNSG32 uDDRScramCtrl_W_latency                     :  6;\
            UNSG32 uDDRScramCtrl_R_latency                     :  6;\
            UNSG32 uDDRScramCtrl_cal_latency                   :  4;\
            UNSG32 uDDRScramCtrl_num_pipeline                  :  4;\
            UNSG32 uDDRScramCtrl_Ch1_En                        :  1;\
            UNSG32 RSVDx8034_b21                               : 11;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl13;
            struct w32MC6Ctrl_DDRScramCtrl13;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word0(r32)    _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word0(r32,v)  _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl14                      {\
            UNSG32 uDDRScramCtrl_Ch1_Key0_word0                : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl14;
            struct w32MC6Ctrl_DDRScramCtrl14;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word1(r32)    _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word1(r32,v)  _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl15                      {\
            UNSG32 uDDRScramCtrl_Ch1_Key0_word1                : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl15;
            struct w32MC6Ctrl_DDRScramCtrl15;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word2(r32)    _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word2(r32,v)  _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl16                      {\
            UNSG32 uDDRScramCtrl_Ch1_Key0_word2                : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl16;
            struct w32MC6Ctrl_DDRScramCtrl16;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word3(r32)    _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_Key0_word3(r32,v)  _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl17                      {\
            UNSG32 uDDRScramCtrl_Ch1_Key0_word3                : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl17;
            struct w32MC6Ctrl_DDRScramCtrl17;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_Key0_addr(r32)     _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_Key0_addr(r32,v)   _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl18                      {\
            UNSG32 uDDRScramCtrl_Ch1_Key0_addr                 : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl18;
            struct w32MC6Ctrl_DDRScramCtrl18;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_Key0_mask(r32)     _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_Key0_mask(r32,v)   _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl19                      {\
            UNSG32 uDDRScramCtrl_Ch1_Key0_mask                 : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl19;
            struct w32MC6Ctrl_DDRScramCtrl19;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word0(r32)    _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word0(r32,v)  _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl20                      {\
            UNSG32 uDDRScramCtrl_Ch1_Key1_word0                : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl20;
            struct w32MC6Ctrl_DDRScramCtrl20;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word1(r32)    _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word1(r32,v)  _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl21                      {\
            UNSG32 uDDRScramCtrl_Ch1_Key1_word1                : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl21;
            struct w32MC6Ctrl_DDRScramCtrl21;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word2(r32)    _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word2(r32,v)  _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl22                      {\
            UNSG32 uDDRScramCtrl_Ch1_Key1_word2                : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl22;
            struct w32MC6Ctrl_DDRScramCtrl22;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word3(r32)    _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_Key1_word3(r32,v)  _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl23                      {\
            UNSG32 uDDRScramCtrl_Ch1_Key1_word3                : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl23;
            struct w32MC6Ctrl_DDRScramCtrl23;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_Key1_addr(r32)     _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_Key1_addr(r32,v)   _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl24                      {\
            UNSG32 uDDRScramCtrl_Ch1_Key1_addr                 : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl24;
            struct w32MC6Ctrl_DDRScramCtrl24;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_Key1_mask(r32)     _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_Key1_mask(r32,v)   _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl25                      {\
            UNSG32 uDDRScramCtrl_Ch1_Key1_mask                 : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl25;
            struct w32MC6Ctrl_DDRScramCtrl25;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_W_latency(r32)     _BFGET_(r32, 5, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_W_latency(r32,v)   _BFSET_(r32, 5, 0,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_Ch1_W_latency(r16)     _BFGET_(r16, 5, 0)
    #define   SET16MC6Ctrl_DDRScramCtrl_Ch1_W_latency(r16,v)   _BFSET_(r16, 5, 0,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_R_latency(r32)     _BFGET_(r32,11, 6)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_R_latency(r32,v)   _BFSET_(r32,11, 6,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_Ch1_R_latency(r16)     _BFGET_(r16,11, 6)
    #define   SET16MC6Ctrl_DDRScramCtrl_Ch1_R_latency(r16,v)   _BFSET_(r16,11, 6,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_cal_latency(r32)   _BFGET_(r32,15,12)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_cal_latency(r32,v) _BFSET_(r32,15,12,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_Ch1_cal_latency(r16)   _BFGET_(r16,15,12)
    #define   SET16MC6Ctrl_DDRScramCtrl_Ch1_cal_latency(r16,v) _BFSET_(r16,15,12,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_num_pipeline(r32)  _BFGET_(r32,19,16)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_num_pipeline(r32,v) _BFSET_(r32,19,16,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_Ch1_num_pipeline(r16)  _BFGET_(r16, 3, 0)
    #define   SET16MC6Ctrl_DDRScramCtrl_Ch1_num_pipeline(r16,v) _BFSET_(r16, 3, 0,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_Ch0_dbi_mode(r32)      _BFGET_(r32,21,20)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch0_dbi_mode(r32,v)    _BFSET_(r32,21,20,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_Ch0_dbi_mode(r16)      _BFGET_(r16, 5, 4)
    #define   SET16MC6Ctrl_DDRScramCtrl_Ch0_dbi_mode(r16,v)    _BFSET_(r16, 5, 4,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_dbi_mode(r32)      _BFGET_(r32,23,22)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_dbi_mode(r32,v)    _BFSET_(r32,23,22,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_Ch1_dbi_mode(r16)      _BFGET_(r16, 7, 6)
    #define   SET16MC6Ctrl_DDRScramCtrl_Ch1_dbi_mode(r16,v)    _BFSET_(r16, 7, 6,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_interleave_en(r32)     _BFGET_(r32,24,24)
    #define   SET32MC6Ctrl_DDRScramCtrl_interleave_en(r32,v)   _BFSET_(r32,24,24,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_interleave_en(r16)     _BFGET_(r16, 8, 8)
    #define   SET16MC6Ctrl_DDRScramCtrl_interleave_en(r16,v)   _BFSET_(r16, 8, 8,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_interleave_size(r32)   _BFGET_(r32,27,25)
    #define   SET32MC6Ctrl_DDRScramCtrl_interleave_size(r32,v) _BFSET_(r32,27,25,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_interleave_size(r16)   _BFGET_(r16,11, 9)
    #define   SET16MC6Ctrl_DDRScramCtrl_interleave_size(r16,v) _BFSET_(r16,11, 9,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_sdram_type(r32)        _BFGET_(r32,31,28)
    #define   SET32MC6Ctrl_DDRScramCtrl_sdram_type(r32,v)      _BFSET_(r32,31,28,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_sdram_type(r16)        _BFGET_(r16,15,12)
    #define   SET16MC6Ctrl_DDRScramCtrl_sdram_type(r16,v)      _BFSET_(r16,15,12,v)

    #define     w32MC6Ctrl_DDRScramCtrl26                      {\
            UNSG32 uDDRScramCtrl_Ch1_W_latency                 :  6;\
            UNSG32 uDDRScramCtrl_Ch1_R_latency                 :  6;\
            UNSG32 uDDRScramCtrl_Ch1_cal_latency               :  4;\
            UNSG32 uDDRScramCtrl_Ch1_num_pipeline              :  4;\
            UNSG32 uDDRScramCtrl_Ch0_dbi_mode                  :  2;\
            UNSG32 uDDRScramCtrl_Ch1_dbi_mode                  :  2;\
            UNSG32 uDDRScramCtrl_interleave_en                 :  1;\
            UNSG32 uDDRScramCtrl_interleave_size               :  3;\
            UNSG32 uDDRScramCtrl_sdram_type                    :  4;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl26;
            struct w32MC6Ctrl_DDRScramCtrl26;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_sdram_data_width(r32)  _BFGET_(r32, 2, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_sdram_data_width(r32,v) _BFSET_(r32, 2, 0,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_sdram_data_width(r16)  _BFGET_(r16, 2, 0)
    #define   SET16MC6Ctrl_DDRScramCtrl_sdram_data_width(r16,v) _BFSET_(r16, 2, 0,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_sdram_burst_length(r32) _BFGET_(r32, 5, 3)
    #define   SET32MC6Ctrl_DDRScramCtrl_sdram_burst_length(r32,v) _BFSET_(r32, 5, 3,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_sdram_burst_length(r16) _BFGET_(r16, 5, 3)
    #define   SET16MC6Ctrl_DDRScramCtrl_sdram_burst_length(r16,v) _BFSET_(r16, 5, 3,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_Ch0_ddr4_ph_sel(r32)   _BFGET_(r32, 7, 6)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch0_ddr4_ph_sel(r32,v) _BFSET_(r32, 7, 6,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_Ch0_ddr4_ph_sel(r16)   _BFGET_(r16, 7, 6)
    #define   SET16MC6Ctrl_DDRScramCtrl_Ch0_ddr4_ph_sel(r16,v) _BFSET_(r16, 7, 6,v)

    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_ddr4_ph_sel(r32)   _BFGET_(r32, 9, 8)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_ddr4_ph_sel(r32,v) _BFSET_(r32, 9, 8,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_Ch1_ddr4_ph_sel(r16)   _BFGET_(r16, 9, 8)
    #define   SET16MC6Ctrl_DDRScramCtrl_Ch1_ddr4_ph_sel(r16,v) _BFSET_(r16, 9, 8,v)

    #define     w32MC6Ctrl_DDRScramCtrl27                      {\
            UNSG32 uDDRScramCtrl_sdram_data_width              :  3;\
            UNSG32 uDDRScramCtrl_sdram_burst_length            :  3;\
            UNSG32 uDDRScramCtrl_Ch0_ddr4_ph_sel               :  2;\
            UNSG32 uDDRScramCtrl_Ch1_ddr4_ph_sel               :  2;\
            UNSG32 RSVDx806C_b10                               : 22;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl27;
            struct w32MC6Ctrl_DDRScramCtrl27;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Ch0_sdram_pmap(r32)    _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch0_sdram_pmap(r32,v)  _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl28                      {\
            UNSG32 uDDRScramCtrl_Ch0_sdram_pmap                : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl28;
            struct w32MC6Ctrl_DDRScramCtrl28;
          };
    #define   GET32MC6Ctrl_DDRScramCtrl_Ch1_sdram_pmap(r32)    _BFGET_(r32,31, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Ch1_sdram_pmap(r32,v)  _BFSET_(r32,31, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl29                      {\
            UNSG32 uDDRScramCtrl_Ch1_sdram_pmap                : 32;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl29;
            struct w32MC6Ctrl_DDRScramCtrl29;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MC6Ctrl_DDRScramCtrl_Secure_Key(r32)        _BFGET_(r32, 0, 0)
    #define   SET32MC6Ctrl_DDRScramCtrl_Secure_Key(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16MC6Ctrl_DDRScramCtrl_Secure_Key(r16)        _BFGET_(r16, 0, 0)
    #define   SET16MC6Ctrl_DDRScramCtrl_Secure_Key(r16,v)      _BFSET_(r16, 0, 0,v)

    #define     w32MC6Ctrl_DDRScramCtrl_Secure                 {\
            UNSG32 uDDRScramCtrl_Secure_Key                    :  1;\
            UNSG32 RSVDx8078_b1                                : 31;\
          }
    union { UNSG32 u32MC6Ctrl_DDRScramCtrl_Secure;
            struct w32MC6Ctrl_DDRScramCtrl_Secure;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MC6Ctrl;

    typedef union  T32MC6Ctrl_MC6_4TO1
          { UNSG32 u32;
            struct w32MC6Ctrl_MC6_4TO1;
                 } T32MC6Ctrl_MC6_4TO1;
    typedef union  T32MC6Ctrl_DDR_PHY_CTRL
          { UNSG32 u32;
            struct w32MC6Ctrl_DDR_PHY_CTRL;
                 } T32MC6Ctrl_DDR_PHY_CTRL;
    typedef union  T32MC6Ctrl_POWER_SAVING
          { UNSG32 u32;
            struct w32MC6Ctrl_POWER_SAVING;
                 } T32MC6Ctrl_POWER_SAVING;
    typedef union  T32MC6Ctrl_POWER_SAVING_CH1
          { UNSG32 u32;
            struct w32MC6Ctrl_POWER_SAVING_CH1;
                 } T32MC6Ctrl_POWER_SAVING_CH1;
    typedef union  T32MC6Ctrl_DFT_CTRL
          { UNSG32 u32;
            struct w32MC6Ctrl_DFT_CTRL;
                 } T32MC6Ctrl_DFT_CTRL;
    typedef union  T32MC6Ctrl_DFC_CTRL
          { UNSG32 u32;
            struct w32MC6Ctrl_DFC_CTRL;
                 } T32MC6Ctrl_DFC_CTRL;
    typedef union  T32MC6Ctrl_DFC_STS
          { UNSG32 u32;
            struct w32MC6Ctrl_DFC_STS;
                 } T32MC6Ctrl_DFC_STS;
    typedef union  T32MC6Ctrl_ddrPhyLoopBackSrc
          { UNSG32 u32;
            struct w32MC6Ctrl_ddrPhyLoopBackSrc;
                 } T32MC6Ctrl_ddrPhyLoopBackSrc;
    typedef union  T32MC6Ctrl_ddrPhyLoopBackConfig1
          { UNSG32 u32;
            struct w32MC6Ctrl_ddrPhyLoopBackConfig1;
                 } T32MC6Ctrl_ddrPhyLoopBackConfig1;
    typedef union  T32MC6Ctrl_ddrPhyLoopBackSts
          { UNSG32 u32;
            struct w32MC6Ctrl_ddrPhyLoopBackSts;
                 } T32MC6Ctrl_ddrPhyLoopBackSts;
    typedef union  T32MC6Ctrl_PHY_PD_CTRL
          { UNSG32 u32;
            struct w32MC6Ctrl_PHY_PD_CTRL;
                 } T32MC6Ctrl_PHY_PD_CTRL;
    typedef union  T32MC6Ctrl_HW_WB_CTRL
          { UNSG32 u32;
            struct w32MC6Ctrl_HW_WB_CTRL;
                 } T32MC6Ctrl_HW_WB_CTRL;
    typedef union  T32MC6Ctrl_HW_WB_STS
          { UNSG32 u32;
            struct w32MC6Ctrl_HW_WB_STS;
                 } T32MC6Ctrl_HW_WB_STS;
    typedef union  T32MC6Ctrl_Trust_zone
          { UNSG32 u32;
            struct w32MC6Ctrl_Trust_zone;
                 } T32MC6Ctrl_Trust_zone;
    typedef union  T32MC6Ctrl_AxiPCntCTRL
          { UNSG32 u32;
            struct w32MC6Ctrl_AxiPCntCTRL;
                 } T32MC6Ctrl_AxiPCntCTRL;
    typedef union  T32MC6Ctrl_AxiMst0
          { UNSG32 u32;
            struct w32MC6Ctrl_AxiMst0;
                 } T32MC6Ctrl_AxiMst0;
    typedef union  T32MC6Ctrl_AxiMst0DXBAR
          { UNSG32 u32;
            struct w32MC6Ctrl_AxiMst0DXBAR;
                 } T32MC6Ctrl_AxiMst0DXBAR;
    typedef union  T32MC6Ctrl_AxiMst1
          { UNSG32 u32;
            struct w32MC6Ctrl_AxiMst1;
                 } T32MC6Ctrl_AxiMst1;
    typedef union  T32MC6Ctrl_AxiMst2_OVP
          { UNSG32 u32;
            struct w32MC6Ctrl_AxiMst2_OVP;
                 } T32MC6Ctrl_AxiMst2_OVP;
    typedef union  T32MC6Ctrl_AxiMst2_V4G
          { UNSG32 u32;
            struct w32MC6Ctrl_AxiMst2_V4G;
                 } T32MC6Ctrl_AxiMst2_V4G;
    typedef union  T32MC6Ctrl_AxiMst2_H1
          { UNSG32 u32;
            struct w32MC6Ctrl_AxiMst2_H1;
                 } T32MC6Ctrl_AxiMst2_H1;
    typedef union  T32MC6Ctrl_AxiMst3_GFX3D
          { UNSG32 u32;
            struct w32MC6Ctrl_AxiMst3_GFX3D;
                 } T32MC6Ctrl_AxiMst3_GFX3D;
    typedef union  T32MC6Ctrl_AxiMst3_mtest
          { UNSG32 u32;
            struct w32MC6Ctrl_AxiMst3_mtest;
                 } T32MC6Ctrl_AxiMst3_mtest;
    typedef union  T32MC6Ctrl_RWTC_31to0
          { UNSG32 u32;
            struct w32MC6Ctrl_RWTC_31to0;
                 } T32MC6Ctrl_RWTC_31to0;
    typedef union  T32MC6Ctrl_RWTC_57to32
          { UNSG32 u32;
            struct w32MC6Ctrl_RWTC_57to32;
                 } T32MC6Ctrl_RWTC_57to32;
    typedef union  T32MC6Ctrl_DdrAsymCtrlCpu
          { UNSG32 u32;
            struct w32MC6Ctrl_DdrAsymCtrlCpu;
                 } T32MC6Ctrl_DdrAsymCtrlCpu;
    typedef union  T32MC6Ctrl_AddrFilterCtrl
          { UNSG32 u32;
            struct w32MC6Ctrl_AddrFilterCtrl;
                 } T32MC6Ctrl_AddrFilterCtrl;
    typedef union  T32MC6Ctrl_DdrAsymErrCpu
          { UNSG32 u32;
            struct w32MC6Ctrl_DdrAsymErrCpu;
                 } T32MC6Ctrl_DdrAsymErrCpu;
    typedef union  T32MC6Ctrl_memPwrCtrl
          { UNSG32 u32;
            struct w32MC6Ctrl_memPwrCtrl;
                 } T32MC6Ctrl_memPwrCtrl;
    typedef union  T32MC6Ctrl_mtest_ctrl
          { UNSG32 u32;
            struct w32MC6Ctrl_mtest_ctrl;
                 } T32MC6Ctrl_mtest_ctrl;
    typedef union  T32MC6Ctrl_mc_dclk_gating
          { UNSG32 u32;
            struct w32MC6Ctrl_mc_dclk_gating;
                 } T32MC6Ctrl_mc_dclk_gating;
    typedef union  T32MC6Ctrl_DFC_PMU_CTRL
          { UNSG32 u32;
            struct w32MC6Ctrl_DFC_PMU_CTRL;
                 } T32MC6Ctrl_DFC_PMU_CTRL;
    typedef union  T32MC6Ctrl_DFC_PMU_CTRL1
          { UNSG32 u32;
            struct w32MC6Ctrl_DFC_PMU_CTRL1;
                 } T32MC6Ctrl_DFC_PMU_CTRL1;
    typedef union  T32MC6Ctrl_DFC_PMU_CTRL2
          { UNSG32 u32;
            struct w32MC6Ctrl_DFC_PMU_CTRL2;
                 } T32MC6Ctrl_DFC_PMU_CTRL2;
    typedef union  T32MC6Ctrl_DFC_PMU_CTRL3
          { UNSG32 u32;
            struct w32MC6Ctrl_DFC_PMU_CTRL3;
                 } T32MC6Ctrl_DFC_PMU_CTRL3;
    typedef union  T32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL
          { UNSG32 u32;
            struct w32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL;
                 } T32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL;
    typedef union  T32MC6Ctrl_DPHY_BRG_MON
          { UNSG32 u32;
            struct w32MC6Ctrl_DPHY_BRG_MON;
                 } T32MC6Ctrl_DPHY_BRG_MON;
    typedef union  T32MC6Ctrl_DDRScramCtrl
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl;
                 } T32MC6Ctrl_DDRScramCtrl;
    typedef union  T32MC6Ctrl_DDRScramCtrl1
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl1;
                 } T32MC6Ctrl_DDRScramCtrl1;
    typedef union  T32MC6Ctrl_DDRScramCtrl2
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl2;
                 } T32MC6Ctrl_DDRScramCtrl2;
    typedef union  T32MC6Ctrl_DDRScramCtrl3
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl3;
                 } T32MC6Ctrl_DDRScramCtrl3;
    typedef union  T32MC6Ctrl_DDRScramCtrl4
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl4;
                 } T32MC6Ctrl_DDRScramCtrl4;
    typedef union  T32MC6Ctrl_DDRScramCtrl5
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl5;
                 } T32MC6Ctrl_DDRScramCtrl5;
    typedef union  T32MC6Ctrl_DDRScramCtrl6
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl6;
                 } T32MC6Ctrl_DDRScramCtrl6;
    typedef union  T32MC6Ctrl_DDRScramCtrl7
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl7;
                 } T32MC6Ctrl_DDRScramCtrl7;
    typedef union  T32MC6Ctrl_DDRScramCtrl8
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl8;
                 } T32MC6Ctrl_DDRScramCtrl8;
    typedef union  T32MC6Ctrl_DDRScramCtrl9
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl9;
                 } T32MC6Ctrl_DDRScramCtrl9;
    typedef union  T32MC6Ctrl_DDRScramCtrl10
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl10;
                 } T32MC6Ctrl_DDRScramCtrl10;
    typedef union  T32MC6Ctrl_DDRScramCtrl11
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl11;
                 } T32MC6Ctrl_DDRScramCtrl11;
    typedef union  T32MC6Ctrl_DDRScramCtrl12
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl12;
                 } T32MC6Ctrl_DDRScramCtrl12;
    typedef union  T32MC6Ctrl_DDRScramCtrl13
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl13;
                 } T32MC6Ctrl_DDRScramCtrl13;
    typedef union  T32MC6Ctrl_DDRScramCtrl14
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl14;
                 } T32MC6Ctrl_DDRScramCtrl14;
    typedef union  T32MC6Ctrl_DDRScramCtrl15
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl15;
                 } T32MC6Ctrl_DDRScramCtrl15;
    typedef union  T32MC6Ctrl_DDRScramCtrl16
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl16;
                 } T32MC6Ctrl_DDRScramCtrl16;
    typedef union  T32MC6Ctrl_DDRScramCtrl17
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl17;
                 } T32MC6Ctrl_DDRScramCtrl17;
    typedef union  T32MC6Ctrl_DDRScramCtrl18
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl18;
                 } T32MC6Ctrl_DDRScramCtrl18;
    typedef union  T32MC6Ctrl_DDRScramCtrl19
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl19;
                 } T32MC6Ctrl_DDRScramCtrl19;
    typedef union  T32MC6Ctrl_DDRScramCtrl20
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl20;
                 } T32MC6Ctrl_DDRScramCtrl20;
    typedef union  T32MC6Ctrl_DDRScramCtrl21
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl21;
                 } T32MC6Ctrl_DDRScramCtrl21;
    typedef union  T32MC6Ctrl_DDRScramCtrl22
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl22;
                 } T32MC6Ctrl_DDRScramCtrl22;
    typedef union  T32MC6Ctrl_DDRScramCtrl23
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl23;
                 } T32MC6Ctrl_DDRScramCtrl23;
    typedef union  T32MC6Ctrl_DDRScramCtrl24
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl24;
                 } T32MC6Ctrl_DDRScramCtrl24;
    typedef union  T32MC6Ctrl_DDRScramCtrl25
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl25;
                 } T32MC6Ctrl_DDRScramCtrl25;
    typedef union  T32MC6Ctrl_DDRScramCtrl26
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl26;
                 } T32MC6Ctrl_DDRScramCtrl26;
    typedef union  T32MC6Ctrl_DDRScramCtrl27
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl27;
                 } T32MC6Ctrl_DDRScramCtrl27;
    typedef union  T32MC6Ctrl_DDRScramCtrl28
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl28;
                 } T32MC6Ctrl_DDRScramCtrl28;
    typedef union  T32MC6Ctrl_DDRScramCtrl29
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl29;
                 } T32MC6Ctrl_DDRScramCtrl29;
    typedef union  T32MC6Ctrl_DDRScramCtrl_Secure
          { UNSG32 u32;
            struct w32MC6Ctrl_DDRScramCtrl_Secure;
                 } T32MC6Ctrl_DDRScramCtrl_Secure;
    ///////////////////////////////////////////////////////////

    typedef union  TMC6Ctrl_MC6_4TO1
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_MC6_4TO1;
                   };
                 } TMC6Ctrl_MC6_4TO1;
    typedef union  TMC6Ctrl_DDR_PHY_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_DDR_PHY_CTRL;
                   };
                 } TMC6Ctrl_DDR_PHY_CTRL;
    typedef union  TMC6Ctrl_POWER_SAVING
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_POWER_SAVING;
                   };
                 } TMC6Ctrl_POWER_SAVING;
    typedef union  TMC6Ctrl_POWER_SAVING_CH1
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_POWER_SAVING_CH1;
                   };
                 } TMC6Ctrl_POWER_SAVING_CH1;
    typedef union  TMC6Ctrl_DFT_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_DFT_CTRL;
                   };
                 } TMC6Ctrl_DFT_CTRL;
    typedef union  TMC6Ctrl_DFC_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_DFC_CTRL;
                   };
                 } TMC6Ctrl_DFC_CTRL;
    typedef union  TMC6Ctrl_DFC_STS
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_DFC_STS;
                   };
                 } TMC6Ctrl_DFC_STS;
    typedef union  TMC6Ctrl_ddrPhyLoopBackSrc
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_ddrPhyLoopBackSrc;
                   };
                 } TMC6Ctrl_ddrPhyLoopBackSrc;
    typedef union  TMC6Ctrl_ddrPhyLoopBackConfig1
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_ddrPhyLoopBackConfig1;
                   };
                 } TMC6Ctrl_ddrPhyLoopBackConfig1;
    typedef union  TMC6Ctrl_ddrPhyLoopBackSts
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_ddrPhyLoopBackSts;
                   };
                 } TMC6Ctrl_ddrPhyLoopBackSts;
    typedef union  TMC6Ctrl_PHY_PD_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_PHY_PD_CTRL;
                   };
                 } TMC6Ctrl_PHY_PD_CTRL;
    typedef union  TMC6Ctrl_HW_WB_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_HW_WB_CTRL;
                   };
                 } TMC6Ctrl_HW_WB_CTRL;
    typedef union  TMC6Ctrl_HW_WB_STS
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_HW_WB_STS;
                   };
                 } TMC6Ctrl_HW_WB_STS;
    typedef union  TMC6Ctrl_Trust_zone
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_Trust_zone;
                   };
                 } TMC6Ctrl_Trust_zone;
    typedef union  TMC6Ctrl_AxiPCntCTRL
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_AxiPCntCTRL;
                   };
                 } TMC6Ctrl_AxiPCntCTRL;
    typedef union  TMC6Ctrl_AxiMst0
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_AxiMst0;
                   };
                 } TMC6Ctrl_AxiMst0;
    typedef union  TMC6Ctrl_AxiMst0DXBAR
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_AxiMst0DXBAR;
                   };
                 } TMC6Ctrl_AxiMst0DXBAR;
    typedef union  TMC6Ctrl_AxiMst1
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_AxiMst1;
                   };
                 } TMC6Ctrl_AxiMst1;
    typedef union  TMC6Ctrl_AxiMst2_OVP
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_AxiMst2_OVP;
                   };
                 } TMC6Ctrl_AxiMst2_OVP;
    typedef union  TMC6Ctrl_AxiMst2_V4G
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_AxiMst2_V4G;
                   };
                 } TMC6Ctrl_AxiMst2_V4G;
    typedef union  TMC6Ctrl_AxiMst2_H1
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_AxiMst2_H1;
                   };
                 } TMC6Ctrl_AxiMst2_H1;
    typedef union  TMC6Ctrl_AxiMst3_GFX3D
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_AxiMst3_GFX3D;
                   };
                 } TMC6Ctrl_AxiMst3_GFX3D;
    typedef union  TMC6Ctrl_AxiMst3_mtest
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_AxiMst3_mtest;
                   };
                 } TMC6Ctrl_AxiMst3_mtest;
    typedef union  TMC6Ctrl_RWTC_31to0
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_RWTC_31to0;
                   };
                 } TMC6Ctrl_RWTC_31to0;
    typedef union  TMC6Ctrl_RWTC_57to32
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_RWTC_57to32;
                   };
                 } TMC6Ctrl_RWTC_57to32;
    typedef union  TMC6Ctrl_DdrAsymCtrlCpu
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_DdrAsymCtrlCpu;
                   };
                 } TMC6Ctrl_DdrAsymCtrlCpu;
    typedef union  TMC6Ctrl_AddrFilterCtrl
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_AddrFilterCtrl;
                   };
                 } TMC6Ctrl_AddrFilterCtrl;
    typedef union  TMC6Ctrl_DdrAsymErrCpu
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_DdrAsymErrCpu;
                   };
                 } TMC6Ctrl_DdrAsymErrCpu;
    typedef union  TMC6Ctrl_memPwrCtrl
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_memPwrCtrl;
                   };
                 } TMC6Ctrl_memPwrCtrl;
    typedef union  TMC6Ctrl_mtest_ctrl
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_mtest_ctrl;
                   };
                 } TMC6Ctrl_mtest_ctrl;
    typedef union  TMC6Ctrl_mc_dclk_gating
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_mc_dclk_gating;
                   };
                 } TMC6Ctrl_mc_dclk_gating;
    typedef union  TMC6Ctrl_DFC_PMU_CTRL
          { UNSG32 u32[4];
            struct {
            struct w32MC6Ctrl_DFC_PMU_CTRL;
            struct w32MC6Ctrl_DFC_PMU_CTRL1;
            struct w32MC6Ctrl_DFC_PMU_CTRL2;
            struct w32MC6Ctrl_DFC_PMU_CTRL3;
                   };
                 } TMC6Ctrl_DFC_PMU_CTRL;
    typedef union  TMC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL;
                   };
                 } TMC6Ctrl_DDR_SCR_DFI_BYPASS_CTRL;
    typedef union  TMC6Ctrl_DPHY_BRG_MON
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_DPHY_BRG_MON;
                   };
                 } TMC6Ctrl_DPHY_BRG_MON;
    typedef union  TMC6Ctrl_DDRScramCtrl
          { UNSG32 u32[30];
            struct {
            struct w32MC6Ctrl_DDRScramCtrl;
            struct w32MC6Ctrl_DDRScramCtrl1;
            struct w32MC6Ctrl_DDRScramCtrl2;
            struct w32MC6Ctrl_DDRScramCtrl3;
            struct w32MC6Ctrl_DDRScramCtrl4;
            struct w32MC6Ctrl_DDRScramCtrl5;
            struct w32MC6Ctrl_DDRScramCtrl6;
            struct w32MC6Ctrl_DDRScramCtrl7;
            struct w32MC6Ctrl_DDRScramCtrl8;
            struct w32MC6Ctrl_DDRScramCtrl9;
            struct w32MC6Ctrl_DDRScramCtrl10;
            struct w32MC6Ctrl_DDRScramCtrl11;
            struct w32MC6Ctrl_DDRScramCtrl12;
            struct w32MC6Ctrl_DDRScramCtrl13;
            struct w32MC6Ctrl_DDRScramCtrl14;
            struct w32MC6Ctrl_DDRScramCtrl15;
            struct w32MC6Ctrl_DDRScramCtrl16;
            struct w32MC6Ctrl_DDRScramCtrl17;
            struct w32MC6Ctrl_DDRScramCtrl18;
            struct w32MC6Ctrl_DDRScramCtrl19;
            struct w32MC6Ctrl_DDRScramCtrl20;
            struct w32MC6Ctrl_DDRScramCtrl21;
            struct w32MC6Ctrl_DDRScramCtrl22;
            struct w32MC6Ctrl_DDRScramCtrl23;
            struct w32MC6Ctrl_DDRScramCtrl24;
            struct w32MC6Ctrl_DDRScramCtrl25;
            struct w32MC6Ctrl_DDRScramCtrl26;
            struct w32MC6Ctrl_DDRScramCtrl27;
            struct w32MC6Ctrl_DDRScramCtrl28;
            struct w32MC6Ctrl_DDRScramCtrl29;
                   };
                 } TMC6Ctrl_DDRScramCtrl;
    typedef union  TMC6Ctrl_DDRScramCtrl_Secure
          { UNSG32 u32[1];
            struct {
            struct w32MC6Ctrl_DDRScramCtrl_Secure;
                   };
                 } TMC6Ctrl_DDRScramCtrl_Secure;

    ///////////////////////////////////////////////////////////
     SIGN32 MC6Ctrl_drvrd(SIE_MC6Ctrl *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MC6Ctrl_drvwr(SIE_MC6Ctrl *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MC6Ctrl_reset(SIE_MC6Ctrl *p);
     SIGN32 MC6Ctrl_cmp  (SIE_MC6Ctrl *p, SIE_MC6Ctrl *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MC6Ctrl_check(p,pie,pfx,hLOG) MC6Ctrl_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MC6Ctrl_print(p,    pfx,hLOG) MC6Ctrl_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MC6Ctrl
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: MC6Ctrl.h
////////////////////////////////////////////////////////////

