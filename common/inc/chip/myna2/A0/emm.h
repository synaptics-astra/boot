//////
/// don't edit! auto-generated by docc: emm.h
////////////////////////////////////////////////////////////
#ifndef emm_h
#define emm_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE EMM_BUFF                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 EMM                  (R-)
///               %unsigned 32 BUFF                      0x0
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      32b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_EMM_BUFF
#define h_EMM_BUFF (){}

    #define     RA_EMM_BUFF_EMM                                0x0000

    #define     BA_EMM_BUFF_EMM_BUFF                           0x0000
    #define     B16EMM_BUFF_EMM_BUFF                           0x0000
    #define   LSb32EMM_BUFF_EMM_BUFF                              0
    #define   LSb16EMM_BUFF_EMM_BUFF                              0
    #define       bEMM_BUFF_EMM_BUFF                           32
    #define   MSK32EMM_BUFF_EMM_BUFF                              0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_EMM_BUFF {
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_BUFF_EMM_BUFF(r32)                      _BFGET_(r32,31, 0)
    #define   SET32EMM_BUFF_EMM_BUFF(r32,v)                    _BFSET_(r32,31, 0,v)

    #define     w32EMM_BUFF_EMM                                {\
            UNSG32 uEMM_BUFF                                   : 32;\
          }
    union { UNSG32 u32EMM_BUFF_EMM;
            struct w32EMM_BUFF_EMM;
          };
    ///////////////////////////////////////////////////////////
    } SIE_EMM_BUFF;

    typedef union  T32EMM_BUFF_EMM
          { UNSG32 u32;
            struct w32EMM_BUFF_EMM;
                 } T32EMM_BUFF_EMM;
    ///////////////////////////////////////////////////////////

    typedef union  TEMM_BUFF_EMM
          { UNSG32 u32[1];
            struct {
            struct w32EMM_BUFF_EMM;
                   };
                 } TEMM_BUFF_EMM;

    ///////////////////////////////////////////////////////////
     SIGN32 EMM_BUFF_drvrd(SIE_EMM_BUFF *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 EMM_BUFF_drvwr(SIE_EMM_BUFF *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void EMM_BUFF_reset(SIE_EMM_BUFF *p);
     SIGN32 EMM_BUFF_cmp  (SIE_EMM_BUFF *p, SIE_EMM_BUFF *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define EMM_BUFF_check(p,pie,pfx,hLOG) EMM_BUFF_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define EMM_BUFF_print(p,    pfx,hLOG) EMM_BUFF_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: EMM_BUFF
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE EMM_BUFF_SRAM                            (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 dummy                
///               $EMM_BUFF            dummy             REG    [1024]
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    4096B, bits:   32768b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_EMM_BUFF_SRAM
#define h_EMM_BUFF_SRAM (){}

    #define     RA_EMM_BUFF_SRAM_dummy                         0x0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_EMM_BUFF_SRAM {
    ///////////////////////////////////////////////////////////
              SIE_EMM_BUFF                                     ie_dummy[1024];
    ///////////////////////////////////////////////////////////
    } SIE_EMM_BUFF_SRAM;

    ///////////////////////////////////////////////////////////
     SIGN32 EMM_BUFF_SRAM_drvrd(SIE_EMM_BUFF_SRAM *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 EMM_BUFF_SRAM_drvwr(SIE_EMM_BUFF_SRAM *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void EMM_BUFF_SRAM_reset(SIE_EMM_BUFF_SRAM *p);
     SIGN32 EMM_BUFF_SRAM_cmp  (SIE_EMM_BUFF_SRAM *p, SIE_EMM_BUFF_SRAM *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define EMM_BUFF_SRAM_check(p,pie,pfx,hLOG) EMM_BUFF_SRAM_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define EMM_BUFF_SRAM_print(p,    pfx,hLOG) EMM_BUFF_SRAM_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: EMM_BUFF_SRAM
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE EMM_REG                 biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (W-)
///     #         # Stuffing bytes...
///               %% 229376
///     @ 0x07000                      (P)
///     # 0x07000 EMM_BUFFERS          
///               $EMM_BUFF_SRAM       EMM_BUFFERS       MEM          
///     @ 0x08000                      (W-)
///     #         # Stuffing bytes...
///               %% 260096
///     @ 0x0FF00 TID                  (P)
///               %unsigned 32 MODE                      0x0
///                                    ###
///                                    * A detailed description of the registers required to implement the EMM filter algorithms
///                                    ###
///     @ 0x0FF04 DATA_ID1             (P)
///               %unsigned 32 data1                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering used to compare against incoming EMM CA addresses.
///                                    ###
///     @ 0x0FF08 DATA_ID2             (P)
///               %unsigned 32 data2                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering used to compare against incoming EMM CA addresses.
///                                    ###
///     @ 0x0FF0C DATA_ID3             (P)
///               %unsigned 32 data3                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering used to compare against incoming EMM CA addresses.
///                                    ###
///     @ 0x0FF10                      (W-)
///     #         # Stuffing bytes...
///               %% 32
///     @ 0x0FF14 MASK_ID1             (P)
///               %unsigned 32 mask1                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering. Used to mask the EMM address comparison when performing ID mode address filtering.
///                                    ###
///     @ 0x0FF18 MASK_ID2             (P)
///               %unsigned 32 mask2                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering. Used to mask the EMM address comparison when performing ID mode address filtering.
///                                    ###
///     @ 0x0FF1C MASK_ID3             (P)
///               %unsigned 32 mask3                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering. Used to mask the EMM address comparison when performing ID mode address filtering.
///                                    ###
///     @ 0x0FF20 CAM                  (P)
///               %unsigned 13 PID                       0x0
///                                    ###
///                                    * Register holding a 13-bit PID value used to identify the EMM packet to buffer.
///                                    ###
///               %unsigned 1  RESERVED                  0x0
///               %unsigned 1  TID_FIL_EN                0x0
///                                    ###
///                                    * 1'b1: Enable TID Filter
///                                    * 1'b0: Disable TID Filter
///                                    ###
///               %unsigned 1  EMM_FIL_EN                0x0
///                                    ###
///                                    * 1'b1: Enable EMM Filter
///                                    * 1'b0: Disable EMM Filter
///                                    ###
///               %unsigned 8  TID                       0x80
///                                    ###
///                                    * Register holding Table ID value used to identify the EMM packets to buffer. Only the most significant 4-bits are used, providing sixteen simultaneous table Ids used for filtering.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x0FF24                      (W-)
///     #         # Stuffing bytes...
///               %% 96
///     @ 0x0FF30 INT                  (RW-)
///               %unsigned 1  RESERVED                  0x0
///               %unsigned 1  PKT_ARRIVE                0x0
///                                    ###
///                                    * Indicate EMM packet arrived
///                                    ###
///               %unsigned 1  OVERFLOW                  0x0
///                                    ###
///                                    * Indicate EMM buffer overflow
///                                    ###
///               %unsigned 4  SPARE                     0x0
///                                    ###
///                                    * Not used
///                                    ###
///               %unsigned 1  MASK_RESET                0x0
///                                    ###
///                                    * 1'b0:Interrupt Mask. Each interrupt bit is enabled by setting the corresponding mask bit to 1.
///                                    * 1'b1:Reset Interrupt Bit. The Overflow interrupt status bit is reset by setting the corresponding bit to 1.
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x0FF34 INT_STAT             (RW-)
///               %unsigned 8  R_ADDR                    0x0
///                                    ###
///                                    * Start address of next packet to be read
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x0FF38                      (W-)
///     #         # Stuffing bytes...
///               %% 448
///     @ 0x0FF70 DATA_ID4             (P)
///               %unsigned 32 data4                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering used to compare against incoming EMM CA addresses.
///                                    ###
///     @ 0x0FF74 DATA_ID5             (P)
///               %unsigned 32 data5                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering used to compare against incoming EMM CA addresses.
///                                    ###
///     @ 0x0FF78 DATA_ID6             (P)
///               %unsigned 32 data6                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering used to compare against incoming EMM CA addresses.
///                                    ###
///     @ 0x0FF7C DATA_ID7             (P)
///               %unsigned 32 data7                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering used to compare against incoming EMM CA addresses.
///                                    ###
///     @ 0x0FF80 DATA_ID8             (P)
///               %unsigned 32 data8                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering used to compare against incoming EMM CA addresses.
///                                    ###
///     @ 0x0FF84 MASK_ID4             (P)
///               %unsigned 32 mask4                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering. Used to mask the EMM address comparison when performing ID mode address filtering.
///                                    ###
///     @ 0x0FF88 MASK_ID5             (P)
///               %unsigned 32 mask5                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering. Used to mask the EMM address comparison when performing ID mode address filtering.
///                                    ###
///     @ 0x0FF8C MASK_ID6             (P)
///               %unsigned 32 mask6                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering. Used to mask the EMM address comparison when performing ID mode address filtering.
///                                    ###
///     @ 0x0FF90 MASK_ID7             (P)
///               %unsigned 32 mask7                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering. Used to mask the EMM address comparison when performing ID mode address filtering.
///                                    ###
///     @ 0x0FF94 MASK_ID8             (P)
///               %unsigned 32 mask8                     0x0
///                                    ###
///                                    * 32-bit data used for EMM CA address filtering. Used to mask the EMM address comparison when performing ID mode address filtering.
///                                    ###
///     @ 0x0FF98 CTRL_ID              (P)
///               %unsigned 2  IRD1                      0x1
///                                    ###
///                                    * Number/Label associated with IRD register 1
///                                    ###
///               %unsigned 2  IRD2                      0x2
///                                    ###
///                                    * Number/Label associated with IRD register 2
///                                    ###
///               %unsigned 2  IRD3                      0x3
///                                    ###
///                                    * Number/Label associated with IRD register 3
///                                    ###
///               %unsigned 2  IRD4                      0x0
///                                    ###
///                                    * Number/Label associated with IRD register 4
///                                    ###
///               %unsigned 2  IRD5                      0x0
///                                    ###
///                                    * Number/Label associated with IRD register 5
///                                    ###
///               %unsigned 2  IRD6                      0x0
///                                    ###
///                                    * Number/Label associated with IRD register 6
///                                    ###
///               %unsigned 2  IRD7                      0x0
///                                    ###
///                                    * Number/Label associated with IRD register 7
///                                    ###
///               %unsigned 2  IRD8                      0x0
///                                    ###
///                                    * Number/Label associated with IRD register 8
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x0FF9C                      (W-)
///     #         # Stuffing bytes...
///               %% 672
///     @ 0x0FFF0 EMM_TS               (P)
///               %unsigned 8  SELECT                    0x0
///                                    ###
///                                    * This register defines which TS interface should be used as input source of EMM filter
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x0FFF4                      (W-)
///     #         # Stuffing bytes...
///               %% 96
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:   65536B, bits:     640b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_EMM_REG
#define h_EMM_REG (){}

    #define     RA_EMM_REG_EMM_BUFFERS                         0x7000
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_TID                                 0xFF00

    #define     BA_EMM_REG_TID_MODE                            0xFF00
    #define     B16EMM_REG_TID_MODE                            0xFF00
    #define   LSb32EMM_REG_TID_MODE                               0
    #define   LSb16EMM_REG_TID_MODE                               0
    #define       bEMM_REG_TID_MODE                            32
    #define   MSK32EMM_REG_TID_MODE                               0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_DATA_ID1                            0xFF04

    #define     BA_EMM_REG_DATA_ID1_data1                      0xFF04
    #define     B16EMM_REG_DATA_ID1_data1                      0xFF04
    #define   LSb32EMM_REG_DATA_ID1_data1                         0
    #define   LSb16EMM_REG_DATA_ID1_data1                         0
    #define       bEMM_REG_DATA_ID1_data1                      32
    #define   MSK32EMM_REG_DATA_ID1_data1                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_DATA_ID2                            0xFF08

    #define     BA_EMM_REG_DATA_ID2_data2                      0xFF08
    #define     B16EMM_REG_DATA_ID2_data2                      0xFF08
    #define   LSb32EMM_REG_DATA_ID2_data2                         0
    #define   LSb16EMM_REG_DATA_ID2_data2                         0
    #define       bEMM_REG_DATA_ID2_data2                      32
    #define   MSK32EMM_REG_DATA_ID2_data2                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_DATA_ID3                            0xFF0C

    #define     BA_EMM_REG_DATA_ID3_data3                      0xFF0C
    #define     B16EMM_REG_DATA_ID3_data3                      0xFF0C
    #define   LSb32EMM_REG_DATA_ID3_data3                         0
    #define   LSb16EMM_REG_DATA_ID3_data3                         0
    #define       bEMM_REG_DATA_ID3_data3                      32
    #define   MSK32EMM_REG_DATA_ID3_data3                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_MASK_ID1                            0xFF14

    #define     BA_EMM_REG_MASK_ID1_mask1                      0xFF14
    #define     B16EMM_REG_MASK_ID1_mask1                      0xFF14
    #define   LSb32EMM_REG_MASK_ID1_mask1                         0
    #define   LSb16EMM_REG_MASK_ID1_mask1                         0
    #define       bEMM_REG_MASK_ID1_mask1                      32
    #define   MSK32EMM_REG_MASK_ID1_mask1                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_MASK_ID2                            0xFF18

    #define     BA_EMM_REG_MASK_ID2_mask2                      0xFF18
    #define     B16EMM_REG_MASK_ID2_mask2                      0xFF18
    #define   LSb32EMM_REG_MASK_ID2_mask2                         0
    #define   LSb16EMM_REG_MASK_ID2_mask2                         0
    #define       bEMM_REG_MASK_ID2_mask2                      32
    #define   MSK32EMM_REG_MASK_ID2_mask2                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_MASK_ID3                            0xFF1C

    #define     BA_EMM_REG_MASK_ID3_mask3                      0xFF1C
    #define     B16EMM_REG_MASK_ID3_mask3                      0xFF1C
    #define   LSb32EMM_REG_MASK_ID3_mask3                         0
    #define   LSb16EMM_REG_MASK_ID3_mask3                         0
    #define       bEMM_REG_MASK_ID3_mask3                      32
    #define   MSK32EMM_REG_MASK_ID3_mask3                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_CAM                                 0xFF20

    #define     BA_EMM_REG_CAM_PID                             0xFF20
    #define     B16EMM_REG_CAM_PID                             0xFF20
    #define   LSb32EMM_REG_CAM_PID                                0
    #define   LSb16EMM_REG_CAM_PID                                0
    #define       bEMM_REG_CAM_PID                             13
    #define   MSK32EMM_REG_CAM_PID                                0x00001FFF

    #define     BA_EMM_REG_CAM_RESERVED                        0xFF21
    #define     B16EMM_REG_CAM_RESERVED                        0xFF20
    #define   LSb32EMM_REG_CAM_RESERVED                           13
    #define   LSb16EMM_REG_CAM_RESERVED                           13
    #define       bEMM_REG_CAM_RESERVED                        1
    #define   MSK32EMM_REG_CAM_RESERVED                           0x00002000

    #define     BA_EMM_REG_CAM_TID_FIL_EN                      0xFF21
    #define     B16EMM_REG_CAM_TID_FIL_EN                      0xFF20
    #define   LSb32EMM_REG_CAM_TID_FIL_EN                         14
    #define   LSb16EMM_REG_CAM_TID_FIL_EN                         14
    #define       bEMM_REG_CAM_TID_FIL_EN                      1
    #define   MSK32EMM_REG_CAM_TID_FIL_EN                         0x00004000

    #define     BA_EMM_REG_CAM_EMM_FIL_EN                      0xFF21
    #define     B16EMM_REG_CAM_EMM_FIL_EN                      0xFF20
    #define   LSb32EMM_REG_CAM_EMM_FIL_EN                         15
    #define   LSb16EMM_REG_CAM_EMM_FIL_EN                         15
    #define       bEMM_REG_CAM_EMM_FIL_EN                      1
    #define   MSK32EMM_REG_CAM_EMM_FIL_EN                         0x00008000

    #define     BA_EMM_REG_CAM_TID                             0xFF22
    #define     B16EMM_REG_CAM_TID                             0xFF22
    #define   LSb32EMM_REG_CAM_TID                                16
    #define   LSb16EMM_REG_CAM_TID                                0
    #define       bEMM_REG_CAM_TID                             8
    #define   MSK32EMM_REG_CAM_TID                                0x00FF0000
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_INT                                 0xFF30

    #define     BA_EMM_REG_INT_RESERVED                        0xFF30
    #define     B16EMM_REG_INT_RESERVED                        0xFF30
    #define   LSb32EMM_REG_INT_RESERVED                           0
    #define   LSb16EMM_REG_INT_RESERVED                           0
    #define       bEMM_REG_INT_RESERVED                        1
    #define   MSK32EMM_REG_INT_RESERVED                           0x00000001

    #define     BA_EMM_REG_INT_PKT_ARRIVE                      0xFF30
    #define     B16EMM_REG_INT_PKT_ARRIVE                      0xFF30
    #define   LSb32EMM_REG_INT_PKT_ARRIVE                         1
    #define   LSb16EMM_REG_INT_PKT_ARRIVE                         1
    #define       bEMM_REG_INT_PKT_ARRIVE                      1
    #define   MSK32EMM_REG_INT_PKT_ARRIVE                         0x00000002

    #define     BA_EMM_REG_INT_OVERFLOW                        0xFF30
    #define     B16EMM_REG_INT_OVERFLOW                        0xFF30
    #define   LSb32EMM_REG_INT_OVERFLOW                           2
    #define   LSb16EMM_REG_INT_OVERFLOW                           2
    #define       bEMM_REG_INT_OVERFLOW                        1
    #define   MSK32EMM_REG_INT_OVERFLOW                           0x00000004

    #define     BA_EMM_REG_INT_SPARE                           0xFF30
    #define     B16EMM_REG_INT_SPARE                           0xFF30
    #define   LSb32EMM_REG_INT_SPARE                              3
    #define   LSb16EMM_REG_INT_SPARE                              3
    #define       bEMM_REG_INT_SPARE                           4
    #define   MSK32EMM_REG_INT_SPARE                              0x00000078

    #define     BA_EMM_REG_INT_MASK_RESET                      0xFF30
    #define     B16EMM_REG_INT_MASK_RESET                      0xFF30
    #define   LSb32EMM_REG_INT_MASK_RESET                         7
    #define   LSb16EMM_REG_INT_MASK_RESET                         7
    #define       bEMM_REG_INT_MASK_RESET                      1
    #define   MSK32EMM_REG_INT_MASK_RESET                         0x00000080
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_INT_STAT                            0xFF34

    #define     BA_EMM_REG_INT_STAT_R_ADDR                     0xFF34
    #define     B16EMM_REG_INT_STAT_R_ADDR                     0xFF34
    #define   LSb32EMM_REG_INT_STAT_R_ADDR                        0
    #define   LSb16EMM_REG_INT_STAT_R_ADDR                        0
    #define       bEMM_REG_INT_STAT_R_ADDR                     8
    #define   MSK32EMM_REG_INT_STAT_R_ADDR                        0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_DATA_ID4                            0xFF70

    #define     BA_EMM_REG_DATA_ID4_data4                      0xFF70
    #define     B16EMM_REG_DATA_ID4_data4                      0xFF70
    #define   LSb32EMM_REG_DATA_ID4_data4                         0
    #define   LSb16EMM_REG_DATA_ID4_data4                         0
    #define       bEMM_REG_DATA_ID4_data4                      32
    #define   MSK32EMM_REG_DATA_ID4_data4                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_DATA_ID5                            0xFF74

    #define     BA_EMM_REG_DATA_ID5_data5                      0xFF74
    #define     B16EMM_REG_DATA_ID5_data5                      0xFF74
    #define   LSb32EMM_REG_DATA_ID5_data5                         0
    #define   LSb16EMM_REG_DATA_ID5_data5                         0
    #define       bEMM_REG_DATA_ID5_data5                      32
    #define   MSK32EMM_REG_DATA_ID5_data5                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_DATA_ID6                            0xFF78

    #define     BA_EMM_REG_DATA_ID6_data6                      0xFF78
    #define     B16EMM_REG_DATA_ID6_data6                      0xFF78
    #define   LSb32EMM_REG_DATA_ID6_data6                         0
    #define   LSb16EMM_REG_DATA_ID6_data6                         0
    #define       bEMM_REG_DATA_ID6_data6                      32
    #define   MSK32EMM_REG_DATA_ID6_data6                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_DATA_ID7                            0xFF7C

    #define     BA_EMM_REG_DATA_ID7_data7                      0xFF7C
    #define     B16EMM_REG_DATA_ID7_data7                      0xFF7C
    #define   LSb32EMM_REG_DATA_ID7_data7                         0
    #define   LSb16EMM_REG_DATA_ID7_data7                         0
    #define       bEMM_REG_DATA_ID7_data7                      32
    #define   MSK32EMM_REG_DATA_ID7_data7                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_DATA_ID8                            0xFF80

    #define     BA_EMM_REG_DATA_ID8_data8                      0xFF80
    #define     B16EMM_REG_DATA_ID8_data8                      0xFF80
    #define   LSb32EMM_REG_DATA_ID8_data8                         0
    #define   LSb16EMM_REG_DATA_ID8_data8                         0
    #define       bEMM_REG_DATA_ID8_data8                      32
    #define   MSK32EMM_REG_DATA_ID8_data8                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_MASK_ID4                            0xFF84

    #define     BA_EMM_REG_MASK_ID4_mask4                      0xFF84
    #define     B16EMM_REG_MASK_ID4_mask4                      0xFF84
    #define   LSb32EMM_REG_MASK_ID4_mask4                         0
    #define   LSb16EMM_REG_MASK_ID4_mask4                         0
    #define       bEMM_REG_MASK_ID4_mask4                      32
    #define   MSK32EMM_REG_MASK_ID4_mask4                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_MASK_ID5                            0xFF88

    #define     BA_EMM_REG_MASK_ID5_mask5                      0xFF88
    #define     B16EMM_REG_MASK_ID5_mask5                      0xFF88
    #define   LSb32EMM_REG_MASK_ID5_mask5                         0
    #define   LSb16EMM_REG_MASK_ID5_mask5                         0
    #define       bEMM_REG_MASK_ID5_mask5                      32
    #define   MSK32EMM_REG_MASK_ID5_mask5                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_MASK_ID6                            0xFF8C

    #define     BA_EMM_REG_MASK_ID6_mask6                      0xFF8C
    #define     B16EMM_REG_MASK_ID6_mask6                      0xFF8C
    #define   LSb32EMM_REG_MASK_ID6_mask6                         0
    #define   LSb16EMM_REG_MASK_ID6_mask6                         0
    #define       bEMM_REG_MASK_ID6_mask6                      32
    #define   MSK32EMM_REG_MASK_ID6_mask6                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_MASK_ID7                            0xFF90

    #define     BA_EMM_REG_MASK_ID7_mask7                      0xFF90
    #define     B16EMM_REG_MASK_ID7_mask7                      0xFF90
    #define   LSb32EMM_REG_MASK_ID7_mask7                         0
    #define   LSb16EMM_REG_MASK_ID7_mask7                         0
    #define       bEMM_REG_MASK_ID7_mask7                      32
    #define   MSK32EMM_REG_MASK_ID7_mask7                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_MASK_ID8                            0xFF94

    #define     BA_EMM_REG_MASK_ID8_mask8                      0xFF94
    #define     B16EMM_REG_MASK_ID8_mask8                      0xFF94
    #define   LSb32EMM_REG_MASK_ID8_mask8                         0
    #define   LSb16EMM_REG_MASK_ID8_mask8                         0
    #define       bEMM_REG_MASK_ID8_mask8                      32
    #define   MSK32EMM_REG_MASK_ID8_mask8                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_CTRL_ID                             0xFF98

    #define     BA_EMM_REG_CTRL_ID_IRD1                        0xFF98
    #define     B16EMM_REG_CTRL_ID_IRD1                        0xFF98
    #define   LSb32EMM_REG_CTRL_ID_IRD1                           0
    #define   LSb16EMM_REG_CTRL_ID_IRD1                           0
    #define       bEMM_REG_CTRL_ID_IRD1                        2
    #define   MSK32EMM_REG_CTRL_ID_IRD1                           0x00000003

    #define     BA_EMM_REG_CTRL_ID_IRD2                        0xFF98
    #define     B16EMM_REG_CTRL_ID_IRD2                        0xFF98
    #define   LSb32EMM_REG_CTRL_ID_IRD2                           2
    #define   LSb16EMM_REG_CTRL_ID_IRD2                           2
    #define       bEMM_REG_CTRL_ID_IRD2                        2
    #define   MSK32EMM_REG_CTRL_ID_IRD2                           0x0000000C

    #define     BA_EMM_REG_CTRL_ID_IRD3                        0xFF98
    #define     B16EMM_REG_CTRL_ID_IRD3                        0xFF98
    #define   LSb32EMM_REG_CTRL_ID_IRD3                           4
    #define   LSb16EMM_REG_CTRL_ID_IRD3                           4
    #define       bEMM_REG_CTRL_ID_IRD3                        2
    #define   MSK32EMM_REG_CTRL_ID_IRD3                           0x00000030

    #define     BA_EMM_REG_CTRL_ID_IRD4                        0xFF98
    #define     B16EMM_REG_CTRL_ID_IRD4                        0xFF98
    #define   LSb32EMM_REG_CTRL_ID_IRD4                           6
    #define   LSb16EMM_REG_CTRL_ID_IRD4                           6
    #define       bEMM_REG_CTRL_ID_IRD4                        2
    #define   MSK32EMM_REG_CTRL_ID_IRD4                           0x000000C0

    #define     BA_EMM_REG_CTRL_ID_IRD5                        0xFF99
    #define     B16EMM_REG_CTRL_ID_IRD5                        0xFF98
    #define   LSb32EMM_REG_CTRL_ID_IRD5                           8
    #define   LSb16EMM_REG_CTRL_ID_IRD5                           8
    #define       bEMM_REG_CTRL_ID_IRD5                        2
    #define   MSK32EMM_REG_CTRL_ID_IRD5                           0x00000300

    #define     BA_EMM_REG_CTRL_ID_IRD6                        0xFF99
    #define     B16EMM_REG_CTRL_ID_IRD6                        0xFF98
    #define   LSb32EMM_REG_CTRL_ID_IRD6                           10
    #define   LSb16EMM_REG_CTRL_ID_IRD6                           10
    #define       bEMM_REG_CTRL_ID_IRD6                        2
    #define   MSK32EMM_REG_CTRL_ID_IRD6                           0x00000C00

    #define     BA_EMM_REG_CTRL_ID_IRD7                        0xFF99
    #define     B16EMM_REG_CTRL_ID_IRD7                        0xFF98
    #define   LSb32EMM_REG_CTRL_ID_IRD7                           12
    #define   LSb16EMM_REG_CTRL_ID_IRD7                           12
    #define       bEMM_REG_CTRL_ID_IRD7                        2
    #define   MSK32EMM_REG_CTRL_ID_IRD7                           0x00003000

    #define     BA_EMM_REG_CTRL_ID_IRD8                        0xFF99
    #define     B16EMM_REG_CTRL_ID_IRD8                        0xFF98
    #define   LSb32EMM_REG_CTRL_ID_IRD8                           14
    #define   LSb16EMM_REG_CTRL_ID_IRD8                           14
    #define       bEMM_REG_CTRL_ID_IRD8                        2
    #define   MSK32EMM_REG_CTRL_ID_IRD8                           0x0000C000
    ///////////////////////////////////////////////////////////
    #define     RA_EMM_REG_EMM_TS                              0xFFF0

    #define     BA_EMM_REG_EMM_TS_SELECT                       0xFFF0
    #define     B16EMM_REG_EMM_TS_SELECT                       0xFFF0
    #define   LSb32EMM_REG_EMM_TS_SELECT                          0
    #define   LSb16EMM_REG_EMM_TS_SELECT                          0
    #define       bEMM_REG_EMM_TS_SELECT                       8
    #define   MSK32EMM_REG_EMM_TS_SELECT                          0x000000FF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_EMM_REG {
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx0                                      [28672];
    ///////////////////////////////////////////////////////////
              SIE_EMM_BUFF_SRAM                                ie_EMM_BUFFERS;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx8000                                   [32512];
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_TID_MODE(r32)                       _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_TID_MODE(r32,v)                     _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_TID                                 {\
            UNSG32 uTID_MODE                                   : 32;\
          }
    union { UNSG32 u32EMM_REG_TID;
            struct w32EMM_REG_TID;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_DATA_ID1_data1(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_DATA_ID1_data1(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_DATA_ID1                            {\
            UNSG32 uDATA_ID1_data1                             : 32;\
          }
    union { UNSG32 u32EMM_REG_DATA_ID1;
            struct w32EMM_REG_DATA_ID1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_DATA_ID2_data2(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_DATA_ID2_data2(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_DATA_ID2                            {\
            UNSG32 uDATA_ID2_data2                             : 32;\
          }
    union { UNSG32 u32EMM_REG_DATA_ID2;
            struct w32EMM_REG_DATA_ID2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_DATA_ID3_data3(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_DATA_ID3_data3(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_DATA_ID3                            {\
            UNSG32 uDATA_ID3_data3                             : 32;\
          }
    union { UNSG32 u32EMM_REG_DATA_ID3;
            struct w32EMM_REG_DATA_ID3;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDxFF10                                   [4];
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_MASK_ID1_mask1(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_MASK_ID1_mask1(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_MASK_ID1                            {\
            UNSG32 uMASK_ID1_mask1                             : 32;\
          }
    union { UNSG32 u32EMM_REG_MASK_ID1;
            struct w32EMM_REG_MASK_ID1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_MASK_ID2_mask2(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_MASK_ID2_mask2(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_MASK_ID2                            {\
            UNSG32 uMASK_ID2_mask2                             : 32;\
          }
    union { UNSG32 u32EMM_REG_MASK_ID2;
            struct w32EMM_REG_MASK_ID2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_MASK_ID3_mask3(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_MASK_ID3_mask3(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_MASK_ID3                            {\
            UNSG32 uMASK_ID3_mask3                             : 32;\
          }
    union { UNSG32 u32EMM_REG_MASK_ID3;
            struct w32EMM_REG_MASK_ID3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_CAM_PID(r32)                        _BFGET_(r32,12, 0)
    #define   SET32EMM_REG_CAM_PID(r32,v)                      _BFSET_(r32,12, 0,v)
    #define   GET16EMM_REG_CAM_PID(r16)                        _BFGET_(r16,12, 0)
    #define   SET16EMM_REG_CAM_PID(r16,v)                      _BFSET_(r16,12, 0,v)

    #define   GET32EMM_REG_CAM_RESERVED(r32)                   _BFGET_(r32,13,13)
    #define   SET32EMM_REG_CAM_RESERVED(r32,v)                 _BFSET_(r32,13,13,v)
    #define   GET16EMM_REG_CAM_RESERVED(r16)                   _BFGET_(r16,13,13)
    #define   SET16EMM_REG_CAM_RESERVED(r16,v)                 _BFSET_(r16,13,13,v)

    #define   GET32EMM_REG_CAM_TID_FIL_EN(r32)                 _BFGET_(r32,14,14)
    #define   SET32EMM_REG_CAM_TID_FIL_EN(r32,v)               _BFSET_(r32,14,14,v)
    #define   GET16EMM_REG_CAM_TID_FIL_EN(r16)                 _BFGET_(r16,14,14)
    #define   SET16EMM_REG_CAM_TID_FIL_EN(r16,v)               _BFSET_(r16,14,14,v)

    #define   GET32EMM_REG_CAM_EMM_FIL_EN(r32)                 _BFGET_(r32,15,15)
    #define   SET32EMM_REG_CAM_EMM_FIL_EN(r32,v)               _BFSET_(r32,15,15,v)
    #define   GET16EMM_REG_CAM_EMM_FIL_EN(r16)                 _BFGET_(r16,15,15)
    #define   SET16EMM_REG_CAM_EMM_FIL_EN(r16,v)               _BFSET_(r16,15,15,v)

    #define   GET32EMM_REG_CAM_TID(r32)                        _BFGET_(r32,23,16)
    #define   SET32EMM_REG_CAM_TID(r32,v)                      _BFSET_(r32,23,16,v)
    #define   GET16EMM_REG_CAM_TID(r16)                        _BFGET_(r16, 7, 0)
    #define   SET16EMM_REG_CAM_TID(r16,v)                      _BFSET_(r16, 7, 0,v)

    #define     w32EMM_REG_CAM                                 {\
            UNSG32 uCAM_PID                                    : 13;\
            UNSG32 uCAM_RESERVED                               :  1;\
            UNSG32 uCAM_TID_FIL_EN                             :  1;\
            UNSG32 uCAM_EMM_FIL_EN                             :  1;\
            UNSG32 uCAM_TID                                    :  8;\
            UNSG32 RSVDxFF20_b24                               :  8;\
          }
    union { UNSG32 u32EMM_REG_CAM;
            struct w32EMM_REG_CAM;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDxFF24                                   [12];
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_INT_RESERVED(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32EMM_REG_INT_RESERVED(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16EMM_REG_INT_RESERVED(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16EMM_REG_INT_RESERVED(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define   GET32EMM_REG_INT_PKT_ARRIVE(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32EMM_REG_INT_PKT_ARRIVE(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16EMM_REG_INT_PKT_ARRIVE(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16EMM_REG_INT_PKT_ARRIVE(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32EMM_REG_INT_OVERFLOW(r32)                   _BFGET_(r32, 2, 2)
    #define   SET32EMM_REG_INT_OVERFLOW(r32,v)                 _BFSET_(r32, 2, 2,v)
    #define   GET16EMM_REG_INT_OVERFLOW(r16)                   _BFGET_(r16, 2, 2)
    #define   SET16EMM_REG_INT_OVERFLOW(r16,v)                 _BFSET_(r16, 2, 2,v)

    #define   GET32EMM_REG_INT_SPARE(r32)                      _BFGET_(r32, 6, 3)
    #define   SET32EMM_REG_INT_SPARE(r32,v)                    _BFSET_(r32, 6, 3,v)
    #define   GET16EMM_REG_INT_SPARE(r16)                      _BFGET_(r16, 6, 3)
    #define   SET16EMM_REG_INT_SPARE(r16,v)                    _BFSET_(r16, 6, 3,v)

    #define   GET32EMM_REG_INT_MASK_RESET(r32)                 _BFGET_(r32, 7, 7)
    #define   SET32EMM_REG_INT_MASK_RESET(r32,v)               _BFSET_(r32, 7, 7,v)
    #define   GET16EMM_REG_INT_MASK_RESET(r16)                 _BFGET_(r16, 7, 7)
    #define   SET16EMM_REG_INT_MASK_RESET(r16,v)               _BFSET_(r16, 7, 7,v)

    #define     w32EMM_REG_INT                                 {\
            UNSG32 uINT_RESERVED                               :  1;\
            UNSG32 uINT_PKT_ARRIVE                             :  1;\
            UNSG32 uINT_OVERFLOW                               :  1;\
            UNSG32 uINT_SPARE                                  :  4;\
            UNSG32 uINT_MASK_RESET                             :  1;\
            UNSG32 RSVDxFF30_b8                                : 24;\
          }
    union { UNSG32 u32EMM_REG_INT;
            struct w32EMM_REG_INT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_INT_STAT_R_ADDR(r32)                _BFGET_(r32, 7, 0)
    #define   SET32EMM_REG_INT_STAT_R_ADDR(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16EMM_REG_INT_STAT_R_ADDR(r16)                _BFGET_(r16, 7, 0)
    #define   SET16EMM_REG_INT_STAT_R_ADDR(r16,v)              _BFSET_(r16, 7, 0,v)

    #define     w32EMM_REG_INT_STAT                            {\
            UNSG32 uINT_STAT_R_ADDR                            :  8;\
            UNSG32 RSVDxFF34_b8                                : 24;\
          }
    union { UNSG32 u32EMM_REG_INT_STAT;
            struct w32EMM_REG_INT_STAT;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDxFF38                                   [56];
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_DATA_ID4_data4(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_DATA_ID4_data4(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_DATA_ID4                            {\
            UNSG32 uDATA_ID4_data4                             : 32;\
          }
    union { UNSG32 u32EMM_REG_DATA_ID4;
            struct w32EMM_REG_DATA_ID4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_DATA_ID5_data5(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_DATA_ID5_data5(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_DATA_ID5                            {\
            UNSG32 uDATA_ID5_data5                             : 32;\
          }
    union { UNSG32 u32EMM_REG_DATA_ID5;
            struct w32EMM_REG_DATA_ID5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_DATA_ID6_data6(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_DATA_ID6_data6(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_DATA_ID6                            {\
            UNSG32 uDATA_ID6_data6                             : 32;\
          }
    union { UNSG32 u32EMM_REG_DATA_ID6;
            struct w32EMM_REG_DATA_ID6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_DATA_ID7_data7(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_DATA_ID7_data7(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_DATA_ID7                            {\
            UNSG32 uDATA_ID7_data7                             : 32;\
          }
    union { UNSG32 u32EMM_REG_DATA_ID7;
            struct w32EMM_REG_DATA_ID7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_DATA_ID8_data8(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_DATA_ID8_data8(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_DATA_ID8                            {\
            UNSG32 uDATA_ID8_data8                             : 32;\
          }
    union { UNSG32 u32EMM_REG_DATA_ID8;
            struct w32EMM_REG_DATA_ID8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_MASK_ID4_mask4(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_MASK_ID4_mask4(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_MASK_ID4                            {\
            UNSG32 uMASK_ID4_mask4                             : 32;\
          }
    union { UNSG32 u32EMM_REG_MASK_ID4;
            struct w32EMM_REG_MASK_ID4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_MASK_ID5_mask5(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_MASK_ID5_mask5(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_MASK_ID5                            {\
            UNSG32 uMASK_ID5_mask5                             : 32;\
          }
    union { UNSG32 u32EMM_REG_MASK_ID5;
            struct w32EMM_REG_MASK_ID5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_MASK_ID6_mask6(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_MASK_ID6_mask6(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_MASK_ID6                            {\
            UNSG32 uMASK_ID6_mask6                             : 32;\
          }
    union { UNSG32 u32EMM_REG_MASK_ID6;
            struct w32EMM_REG_MASK_ID6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_MASK_ID7_mask7(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_MASK_ID7_mask7(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_MASK_ID7                            {\
            UNSG32 uMASK_ID7_mask7                             : 32;\
          }
    union { UNSG32 u32EMM_REG_MASK_ID7;
            struct w32EMM_REG_MASK_ID7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_MASK_ID8_mask8(r32)                 _BFGET_(r32,31, 0)
    #define   SET32EMM_REG_MASK_ID8_mask8(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32EMM_REG_MASK_ID8                            {\
            UNSG32 uMASK_ID8_mask8                             : 32;\
          }
    union { UNSG32 u32EMM_REG_MASK_ID8;
            struct w32EMM_REG_MASK_ID8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_CTRL_ID_IRD1(r32)                   _BFGET_(r32, 1, 0)
    #define   SET32EMM_REG_CTRL_ID_IRD1(r32,v)                 _BFSET_(r32, 1, 0,v)
    #define   GET16EMM_REG_CTRL_ID_IRD1(r16)                   _BFGET_(r16, 1, 0)
    #define   SET16EMM_REG_CTRL_ID_IRD1(r16,v)                 _BFSET_(r16, 1, 0,v)

    #define   GET32EMM_REG_CTRL_ID_IRD2(r32)                   _BFGET_(r32, 3, 2)
    #define   SET32EMM_REG_CTRL_ID_IRD2(r32,v)                 _BFSET_(r32, 3, 2,v)
    #define   GET16EMM_REG_CTRL_ID_IRD2(r16)                   _BFGET_(r16, 3, 2)
    #define   SET16EMM_REG_CTRL_ID_IRD2(r16,v)                 _BFSET_(r16, 3, 2,v)

    #define   GET32EMM_REG_CTRL_ID_IRD3(r32)                   _BFGET_(r32, 5, 4)
    #define   SET32EMM_REG_CTRL_ID_IRD3(r32,v)                 _BFSET_(r32, 5, 4,v)
    #define   GET16EMM_REG_CTRL_ID_IRD3(r16)                   _BFGET_(r16, 5, 4)
    #define   SET16EMM_REG_CTRL_ID_IRD3(r16,v)                 _BFSET_(r16, 5, 4,v)

    #define   GET32EMM_REG_CTRL_ID_IRD4(r32)                   _BFGET_(r32, 7, 6)
    #define   SET32EMM_REG_CTRL_ID_IRD4(r32,v)                 _BFSET_(r32, 7, 6,v)
    #define   GET16EMM_REG_CTRL_ID_IRD4(r16)                   _BFGET_(r16, 7, 6)
    #define   SET16EMM_REG_CTRL_ID_IRD4(r16,v)                 _BFSET_(r16, 7, 6,v)

    #define   GET32EMM_REG_CTRL_ID_IRD5(r32)                   _BFGET_(r32, 9, 8)
    #define   SET32EMM_REG_CTRL_ID_IRD5(r32,v)                 _BFSET_(r32, 9, 8,v)
    #define   GET16EMM_REG_CTRL_ID_IRD5(r16)                   _BFGET_(r16, 9, 8)
    #define   SET16EMM_REG_CTRL_ID_IRD5(r16,v)                 _BFSET_(r16, 9, 8,v)

    #define   GET32EMM_REG_CTRL_ID_IRD6(r32)                   _BFGET_(r32,11,10)
    #define   SET32EMM_REG_CTRL_ID_IRD6(r32,v)                 _BFSET_(r32,11,10,v)
    #define   GET16EMM_REG_CTRL_ID_IRD6(r16)                   _BFGET_(r16,11,10)
    #define   SET16EMM_REG_CTRL_ID_IRD6(r16,v)                 _BFSET_(r16,11,10,v)

    #define   GET32EMM_REG_CTRL_ID_IRD7(r32)                   _BFGET_(r32,13,12)
    #define   SET32EMM_REG_CTRL_ID_IRD7(r32,v)                 _BFSET_(r32,13,12,v)
    #define   GET16EMM_REG_CTRL_ID_IRD7(r16)                   _BFGET_(r16,13,12)
    #define   SET16EMM_REG_CTRL_ID_IRD7(r16,v)                 _BFSET_(r16,13,12,v)

    #define   GET32EMM_REG_CTRL_ID_IRD8(r32)                   _BFGET_(r32,15,14)
    #define   SET32EMM_REG_CTRL_ID_IRD8(r32,v)                 _BFSET_(r32,15,14,v)
    #define   GET16EMM_REG_CTRL_ID_IRD8(r16)                   _BFGET_(r16,15,14)
    #define   SET16EMM_REG_CTRL_ID_IRD8(r16,v)                 _BFSET_(r16,15,14,v)

    #define     w32EMM_REG_CTRL_ID                             {\
            UNSG32 uCTRL_ID_IRD1                               :  2;\
            UNSG32 uCTRL_ID_IRD2                               :  2;\
            UNSG32 uCTRL_ID_IRD3                               :  2;\
            UNSG32 uCTRL_ID_IRD4                               :  2;\
            UNSG32 uCTRL_ID_IRD5                               :  2;\
            UNSG32 uCTRL_ID_IRD6                               :  2;\
            UNSG32 uCTRL_ID_IRD7                               :  2;\
            UNSG32 uCTRL_ID_IRD8                               :  2;\
            UNSG32 RSVDxFF98_b16                               : 16;\
          }
    union { UNSG32 u32EMM_REG_CTRL_ID;
            struct w32EMM_REG_CTRL_ID;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDxFF9C                                   [84];
    ///////////////////////////////////////////////////////////
    #define   GET32EMM_REG_EMM_TS_SELECT(r32)                  _BFGET_(r32, 7, 0)
    #define   SET32EMM_REG_EMM_TS_SELECT(r32,v)                _BFSET_(r32, 7, 0,v)
    #define   GET16EMM_REG_EMM_TS_SELECT(r16)                  _BFGET_(r16, 7, 0)
    #define   SET16EMM_REG_EMM_TS_SELECT(r16,v)                _BFSET_(r16, 7, 0,v)

    #define     w32EMM_REG_EMM_TS                              {\
            UNSG32 uEMM_TS_SELECT                              :  8;\
            UNSG32 RSVDxFFF0_b8                                : 24;\
          }
    union { UNSG32 u32EMM_REG_EMM_TS;
            struct w32EMM_REG_EMM_TS;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDxFFF4                                   [12];
    ///////////////////////////////////////////////////////////
    } SIE_EMM_REG;

    typedef union  T32EMM_REG_TID
          { UNSG32 u32;
            struct w32EMM_REG_TID;
                 } T32EMM_REG_TID;
    typedef union  T32EMM_REG_DATA_ID1
          { UNSG32 u32;
            struct w32EMM_REG_DATA_ID1;
                 } T32EMM_REG_DATA_ID1;
    typedef union  T32EMM_REG_DATA_ID2
          { UNSG32 u32;
            struct w32EMM_REG_DATA_ID2;
                 } T32EMM_REG_DATA_ID2;
    typedef union  T32EMM_REG_DATA_ID3
          { UNSG32 u32;
            struct w32EMM_REG_DATA_ID3;
                 } T32EMM_REG_DATA_ID3;
    typedef union  T32EMM_REG_MASK_ID1
          { UNSG32 u32;
            struct w32EMM_REG_MASK_ID1;
                 } T32EMM_REG_MASK_ID1;
    typedef union  T32EMM_REG_MASK_ID2
          { UNSG32 u32;
            struct w32EMM_REG_MASK_ID2;
                 } T32EMM_REG_MASK_ID2;
    typedef union  T32EMM_REG_MASK_ID3
          { UNSG32 u32;
            struct w32EMM_REG_MASK_ID3;
                 } T32EMM_REG_MASK_ID3;
    typedef union  T32EMM_REG_CAM
          { UNSG32 u32;
            struct w32EMM_REG_CAM;
                 } T32EMM_REG_CAM;
    typedef union  T32EMM_REG_INT
          { UNSG32 u32;
            struct w32EMM_REG_INT;
                 } T32EMM_REG_INT;
    typedef union  T32EMM_REG_INT_STAT
          { UNSG32 u32;
            struct w32EMM_REG_INT_STAT;
                 } T32EMM_REG_INT_STAT;
    typedef union  T32EMM_REG_DATA_ID4
          { UNSG32 u32;
            struct w32EMM_REG_DATA_ID4;
                 } T32EMM_REG_DATA_ID4;
    typedef union  T32EMM_REG_DATA_ID5
          { UNSG32 u32;
            struct w32EMM_REG_DATA_ID5;
                 } T32EMM_REG_DATA_ID5;
    typedef union  T32EMM_REG_DATA_ID6
          { UNSG32 u32;
            struct w32EMM_REG_DATA_ID6;
                 } T32EMM_REG_DATA_ID6;
    typedef union  T32EMM_REG_DATA_ID7
          { UNSG32 u32;
            struct w32EMM_REG_DATA_ID7;
                 } T32EMM_REG_DATA_ID7;
    typedef union  T32EMM_REG_DATA_ID8
          { UNSG32 u32;
            struct w32EMM_REG_DATA_ID8;
                 } T32EMM_REG_DATA_ID8;
    typedef union  T32EMM_REG_MASK_ID4
          { UNSG32 u32;
            struct w32EMM_REG_MASK_ID4;
                 } T32EMM_REG_MASK_ID4;
    typedef union  T32EMM_REG_MASK_ID5
          { UNSG32 u32;
            struct w32EMM_REG_MASK_ID5;
                 } T32EMM_REG_MASK_ID5;
    typedef union  T32EMM_REG_MASK_ID6
          { UNSG32 u32;
            struct w32EMM_REG_MASK_ID6;
                 } T32EMM_REG_MASK_ID6;
    typedef union  T32EMM_REG_MASK_ID7
          { UNSG32 u32;
            struct w32EMM_REG_MASK_ID7;
                 } T32EMM_REG_MASK_ID7;
    typedef union  T32EMM_REG_MASK_ID8
          { UNSG32 u32;
            struct w32EMM_REG_MASK_ID8;
                 } T32EMM_REG_MASK_ID8;
    typedef union  T32EMM_REG_CTRL_ID
          { UNSG32 u32;
            struct w32EMM_REG_CTRL_ID;
                 } T32EMM_REG_CTRL_ID;
    typedef union  T32EMM_REG_EMM_TS
          { UNSG32 u32;
            struct w32EMM_REG_EMM_TS;
                 } T32EMM_REG_EMM_TS;
    ///////////////////////////////////////////////////////////

    typedef union  TEMM_REG_TID
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_TID;
                   };
                 } TEMM_REG_TID;
    typedef union  TEMM_REG_DATA_ID1
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_DATA_ID1;
                   };
                 } TEMM_REG_DATA_ID1;
    typedef union  TEMM_REG_DATA_ID2
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_DATA_ID2;
                   };
                 } TEMM_REG_DATA_ID2;
    typedef union  TEMM_REG_DATA_ID3
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_DATA_ID3;
                   };
                 } TEMM_REG_DATA_ID3;
    typedef union  TEMM_REG_MASK_ID1
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_MASK_ID1;
                   };
                 } TEMM_REG_MASK_ID1;
    typedef union  TEMM_REG_MASK_ID2
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_MASK_ID2;
                   };
                 } TEMM_REG_MASK_ID2;
    typedef union  TEMM_REG_MASK_ID3
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_MASK_ID3;
                   };
                 } TEMM_REG_MASK_ID3;
    typedef union  TEMM_REG_CAM
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_CAM;
                   };
                 } TEMM_REG_CAM;
    typedef union  TEMM_REG_INT
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_INT;
                   };
                 } TEMM_REG_INT;
    typedef union  TEMM_REG_INT_STAT
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_INT_STAT;
                   };
                 } TEMM_REG_INT_STAT;
    typedef union  TEMM_REG_DATA_ID4
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_DATA_ID4;
                   };
                 } TEMM_REG_DATA_ID4;
    typedef union  TEMM_REG_DATA_ID5
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_DATA_ID5;
                   };
                 } TEMM_REG_DATA_ID5;
    typedef union  TEMM_REG_DATA_ID6
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_DATA_ID6;
                   };
                 } TEMM_REG_DATA_ID6;
    typedef union  TEMM_REG_DATA_ID7
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_DATA_ID7;
                   };
                 } TEMM_REG_DATA_ID7;
    typedef union  TEMM_REG_DATA_ID8
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_DATA_ID8;
                   };
                 } TEMM_REG_DATA_ID8;
    typedef union  TEMM_REG_MASK_ID4
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_MASK_ID4;
                   };
                 } TEMM_REG_MASK_ID4;
    typedef union  TEMM_REG_MASK_ID5
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_MASK_ID5;
                   };
                 } TEMM_REG_MASK_ID5;
    typedef union  TEMM_REG_MASK_ID6
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_MASK_ID6;
                   };
                 } TEMM_REG_MASK_ID6;
    typedef union  TEMM_REG_MASK_ID7
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_MASK_ID7;
                   };
                 } TEMM_REG_MASK_ID7;
    typedef union  TEMM_REG_MASK_ID8
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_MASK_ID8;
                   };
                 } TEMM_REG_MASK_ID8;
    typedef union  TEMM_REG_CTRL_ID
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_CTRL_ID;
                   };
                 } TEMM_REG_CTRL_ID;
    typedef union  TEMM_REG_EMM_TS
          { UNSG32 u32[1];
            struct {
            struct w32EMM_REG_EMM_TS;
                   };
                 } TEMM_REG_EMM_TS;

    ///////////////////////////////////////////////////////////
     SIGN32 EMM_REG_drvrd(SIE_EMM_REG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 EMM_REG_drvwr(SIE_EMM_REG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void EMM_REG_reset(SIE_EMM_REG *p);
     SIGN32 EMM_REG_cmp  (SIE_EMM_REG *p, SIE_EMM_REG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define EMM_REG_check(p,pie,pfx,hLOG) EMM_REG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define EMM_REG_print(p,    pfx,hLOG) EMM_REG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: EMM_REG
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: emm.h
////////////////////////////////////////////////////////////

