//////
/// don't edit! auto-generated by docc: hifiWrap.h
////////////////////////////////////////////////////////////
#ifndef hifiWrap_h
#define hifiWrap_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE HIFI4_TCM_MAPPING                        (4,4)
///     ###
///     * DTCM0 memory space
///     ###
///     # # ----------------------------------------------------------
///               : DTCM0_BASE         0x3FC00000
///               : DTCM0_SIZE         0x80000
///               : DTCM0_DEC_BIT      0x13
///                            ###
///                            * DTCM1 memory space
///                            ###
///               : DTCM1_BASE         0x3FC80000
///               : DTCM1_SIZE         0x40000
///               : DTCM1_DEC_BIT      0x12
///                            ###
///                            * ITCM0 memory space
///                            ###
///               : ITCM0_BASE         0x3FCC0000
///               : ITCM0_SIZE         0x10000
///               : ITCM0_DEC_BIT      0x10
///                            ###
///                            * ITCM1 memory space
///                            ###
///               : ITCM1_BASE         0x3FCD0000
///               : ITCM1_SIZE         0x10000
///               : ITCM1_DEC_BIT      0x10
///                            ###
///                            * Dummy word for automatically generates header file
///                            ###
///     @ 0x00000 tcmmap               (R-)
///               %signed   32 dummy                     0
///                                    ###
///                                    * Dummy word for automatically generates header file
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      32b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_HIFI4_TCM_MAPPING
#define h_HIFI4_TCM_MAPPING (){}

    #define        HIFI4_TCM_MAPPING_DTCM0_BASE                0x3FC00000
    #define        HIFI4_TCM_MAPPING_DTCM0_SIZE                0x80000
    #define        HIFI4_TCM_MAPPING_DTCM0_DEC_BIT             0x13
    #define        HIFI4_TCM_MAPPING_DTCM1_BASE                0x3FC80000
    #define        HIFI4_TCM_MAPPING_DTCM1_SIZE                0x40000
    #define        HIFI4_TCM_MAPPING_DTCM1_DEC_BIT             0x12
    #define        HIFI4_TCM_MAPPING_ITCM0_BASE                0x3FCC0000
    #define        HIFI4_TCM_MAPPING_ITCM0_SIZE                0x10000
    #define        HIFI4_TCM_MAPPING_ITCM0_DEC_BIT             0x10
    #define        HIFI4_TCM_MAPPING_ITCM1_BASE                0x3FCD0000
    #define        HIFI4_TCM_MAPPING_ITCM1_SIZE                0x10000
    #define        HIFI4_TCM_MAPPING_ITCM1_DEC_BIT             0x10
    ///////////////////////////////////////////////////////////
    #define     RA_HIFI4_TCM_MAPPING_tcmmap                    0x0000

    #define     BA_HIFI4_TCM_MAPPING_tcmmap_dummy              0x0000
    #define     B16HIFI4_TCM_MAPPING_tcmmap_dummy              0x0000
    #define   LSb32HIFI4_TCM_MAPPING_tcmmap_dummy                 0
    #define   LSb16HIFI4_TCM_MAPPING_tcmmap_dummy                 0
    #define       bHIFI4_TCM_MAPPING_tcmmap_dummy              32
    #define   MSK32HIFI4_TCM_MAPPING_tcmmap_dummy                 0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_HIFI4_TCM_MAPPING {
    ///////////////////////////////////////////////////////////
    #define   GET32HIFI4_TCM_MAPPING_tcmmap_dummy(r32)         _BFGET_(r32,31, 0)
    #define   SET32HIFI4_TCM_MAPPING_tcmmap_dummy(r32,v)       _BFSET_(r32,31, 0,v)

    #define     w32HIFI4_TCM_MAPPING_tcmmap                    {\
            UNSG32 stcmmap_dummy                               : 32;\
          }
    union { UNSG32 u32HIFI4_TCM_MAPPING_tcmmap;
            struct w32HIFI4_TCM_MAPPING_tcmmap;
          };
    ///////////////////////////////////////////////////////////
    } SIE_HIFI4_TCM_MAPPING;

    typedef union  T32HIFI4_TCM_MAPPING_tcmmap
          { UNSG32 u32;
            struct w32HIFI4_TCM_MAPPING_tcmmap;
                 } T32HIFI4_TCM_MAPPING_tcmmap;
    ///////////////////////////////////////////////////////////

    typedef union  THIFI4_TCM_MAPPING_tcmmap
          { UNSG32 u32[1];
            struct {
            struct w32HIFI4_TCM_MAPPING_tcmmap;
                   };
                 } THIFI4_TCM_MAPPING_tcmmap;

    ///////////////////////////////////////////////////////////
     SIGN32 HIFI4_TCM_MAPPING_drvrd(SIE_HIFI4_TCM_MAPPING *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 HIFI4_TCM_MAPPING_drvwr(SIE_HIFI4_TCM_MAPPING *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void HIFI4_TCM_MAPPING_reset(SIE_HIFI4_TCM_MAPPING *p);
     SIGN32 HIFI4_TCM_MAPPING_cmp  (SIE_HIFI4_TCM_MAPPING *p, SIE_HIFI4_TCM_MAPPING *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define HIFI4_TCM_MAPPING_check(p,pie,pfx,hLOG) HIFI4_TCM_MAPPING_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define HIFI4_TCM_MAPPING_print(p,    pfx,hLOG) HIFI4_TCM_MAPPING_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: HIFI4_TCM_MAPPING
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE hifiWrapper             biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 Ctrl                 (P)
///               %unsigned 1  OCDHaltOnReset            0x0
///                                    ###
///                                    * Enters OCDHaltMode if this signal is sampled asserted on reset
///                                    ###
///               %unsigned 1  DoubleExceptionErrorClr   0x0
///                                    ###
///                                    * 1: clear;
///                                    ###
///               %unsigned 1  PFaultInfoClr             0x0
///                                    ###
///                                    * 1:clear
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x00004 PFatalInfo           (R-)
///               %unsigned 32 PFaultInfo                
///                                    ###
///                                    * Fault information signal. This signal mirrors the processorâ€™sinternal FIR, using the same bit encoding to provide the sourceand severity of the fault. Thissignal is set to the encoding of the most recent and most severefault. The PFaultInfo signal is cleared by core reset
///                                    * Uses PFaultInfoValid to capture.
///                                    ###
///     @ 0x00008 Status               (R-)
///               %unsigned 1  PFaultError               
///                                    ###
///                                    * Sticky fatal error notification signal that is asserted when a fatalerror condition occurs (e.g., parity error on AXI handshakesignal, or core trapped in the double exception vector). It isexpected that the system will use the information presented onthe PFaultInfo register and decide whether to reset the core or thewhole system. The PFatalError signal is cleared by core reset.
///                                    ###
///               %unsigned 1  DebugMode                 
///                                    ###
///                                    * Same as XOCDMode but not maskable by software
///                                    ###
///               %unsigned 1  XOCDMode                  
///                                    ###
///                                    * Indicates that the processor is in OCD halt mode
///                                    ###
///               %unsigned 1  DoubleExceptionError      
///                                    ###
///                                    * Single cycle assertion every time a double exception fault occurs. Unlike PfatalError, this signal is not sticky.
///                                    * This bit is latched into the register
///                                    ###
///               %unsigned 1  PWaitMode                 
///                                    ###
///                                    * Serves as an early warning indicator that the processor isabout to begin its shutdown procedure and should no longerbe interacted with. Once this signal and PWaitMode are bothdriven high, the PCM module will begin the shutdownsequence for the Core domain. Once the processor hascompleted its wakeup sequence, this signal is driven logiclow again
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x0000C IPC_int_to_acpu      (P)
///               %unsigned 1  INT                       0x0
///               %%        31         # Stuffing bits...
///     @ 0x00010 IPC_int_to_another_dsp (P)
///               %unsigned 1  INT                       0x0
///               %%        31         # Stuffing bits...
///     @ 0x00014 IPC_int_from_acpu    (P)
///               %unsigned 1  INT                       0x0
///               %%        31         # Stuffing bits...
///     @ 0x00018 IPC_data0            (P)
///               %unsigned 32 data                      0x0
///     @ 0x0001C IPC_data1            (P)
///               %unsigned 32 data                      0x0
///     @ 0x00020 IPC_data2            (P)
///               %unsigned 32 data                      0x0
///     @ 0x00024 IPC_data3            (P)
///               %unsigned 32 data                      0x0
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      40B, bits:     171b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_hifiWrapper
#define h_hifiWrapper (){}

    #define     RA_hifiWrapper_Ctrl                            0x0000

    #define     BA_hifiWrapper_Ctrl_OCDHaltOnReset             0x0000
    #define     B16hifiWrapper_Ctrl_OCDHaltOnReset             0x0000
    #define   LSb32hifiWrapper_Ctrl_OCDHaltOnReset                0
    #define   LSb16hifiWrapper_Ctrl_OCDHaltOnReset                0
    #define       bhifiWrapper_Ctrl_OCDHaltOnReset             1
    #define   MSK32hifiWrapper_Ctrl_OCDHaltOnReset                0x00000001

    #define     BA_hifiWrapper_Ctrl_DoubleExceptionErrorClr    0x0000
    #define     B16hifiWrapper_Ctrl_DoubleExceptionErrorClr    0x0000
    #define   LSb32hifiWrapper_Ctrl_DoubleExceptionErrorClr       1
    #define   LSb16hifiWrapper_Ctrl_DoubleExceptionErrorClr       1
    #define       bhifiWrapper_Ctrl_DoubleExceptionErrorClr    1
    #define   MSK32hifiWrapper_Ctrl_DoubleExceptionErrorClr       0x00000002

    #define     BA_hifiWrapper_Ctrl_PFaultInfoClr              0x0000
    #define     B16hifiWrapper_Ctrl_PFaultInfoClr              0x0000
    #define   LSb32hifiWrapper_Ctrl_PFaultInfoClr                 2
    #define   LSb16hifiWrapper_Ctrl_PFaultInfoClr                 2
    #define       bhifiWrapper_Ctrl_PFaultInfoClr              1
    #define   MSK32hifiWrapper_Ctrl_PFaultInfoClr                 0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_hifiWrapper_PFatalInfo                      0x0004

    #define     BA_hifiWrapper_PFatalInfo_PFaultInfo           0x0004
    #define     B16hifiWrapper_PFatalInfo_PFaultInfo           0x0004
    #define   LSb32hifiWrapper_PFatalInfo_PFaultInfo              0
    #define   LSb16hifiWrapper_PFatalInfo_PFaultInfo              0
    #define       bhifiWrapper_PFatalInfo_PFaultInfo           32
    #define   MSK32hifiWrapper_PFatalInfo_PFaultInfo              0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_hifiWrapper_Status                          0x0008

    #define     BA_hifiWrapper_Status_PFaultError              0x0008
    #define     B16hifiWrapper_Status_PFaultError              0x0008
    #define   LSb32hifiWrapper_Status_PFaultError                 0
    #define   LSb16hifiWrapper_Status_PFaultError                 0
    #define       bhifiWrapper_Status_PFaultError              1
    #define   MSK32hifiWrapper_Status_PFaultError                 0x00000001

    #define     BA_hifiWrapper_Status_DebugMode                0x0008
    #define     B16hifiWrapper_Status_DebugMode                0x0008
    #define   LSb32hifiWrapper_Status_DebugMode                   1
    #define   LSb16hifiWrapper_Status_DebugMode                   1
    #define       bhifiWrapper_Status_DebugMode                1
    #define   MSK32hifiWrapper_Status_DebugMode                   0x00000002

    #define     BA_hifiWrapper_Status_XOCDMode                 0x0008
    #define     B16hifiWrapper_Status_XOCDMode                 0x0008
    #define   LSb32hifiWrapper_Status_XOCDMode                    2
    #define   LSb16hifiWrapper_Status_XOCDMode                    2
    #define       bhifiWrapper_Status_XOCDMode                 1
    #define   MSK32hifiWrapper_Status_XOCDMode                    0x00000004

    #define     BA_hifiWrapper_Status_DoubleExceptionError     0x0008
    #define     B16hifiWrapper_Status_DoubleExceptionError     0x0008
    #define   LSb32hifiWrapper_Status_DoubleExceptionError        3
    #define   LSb16hifiWrapper_Status_DoubleExceptionError        3
    #define       bhifiWrapper_Status_DoubleExceptionError     1
    #define   MSK32hifiWrapper_Status_DoubleExceptionError        0x00000008

    #define     BA_hifiWrapper_Status_PWaitMode                0x0008
    #define     B16hifiWrapper_Status_PWaitMode                0x0008
    #define   LSb32hifiWrapper_Status_PWaitMode                   4
    #define   LSb16hifiWrapper_Status_PWaitMode                   4
    #define       bhifiWrapper_Status_PWaitMode                1
    #define   MSK32hifiWrapper_Status_PWaitMode                   0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_hifiWrapper_IPC_int_to_acpu                 0x000C

    #define     BA_hifiWrapper_IPC_int_to_acpu_INT             0x000C
    #define     B16hifiWrapper_IPC_int_to_acpu_INT             0x000C
    #define   LSb32hifiWrapper_IPC_int_to_acpu_INT                0
    #define   LSb16hifiWrapper_IPC_int_to_acpu_INT                0
    #define       bhifiWrapper_IPC_int_to_acpu_INT             1
    #define   MSK32hifiWrapper_IPC_int_to_acpu_INT                0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_hifiWrapper_IPC_int_to_another_dsp          0x0010

    #define     BA_hifiWrapper_IPC_int_to_another_dsp_INT      0x0010
    #define     B16hifiWrapper_IPC_int_to_another_dsp_INT      0x0010
    #define   LSb32hifiWrapper_IPC_int_to_another_dsp_INT         0
    #define   LSb16hifiWrapper_IPC_int_to_another_dsp_INT         0
    #define       bhifiWrapper_IPC_int_to_another_dsp_INT      1
    #define   MSK32hifiWrapper_IPC_int_to_another_dsp_INT         0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_hifiWrapper_IPC_int_from_acpu               0x0014

    #define     BA_hifiWrapper_IPC_int_from_acpu_INT           0x0014
    #define     B16hifiWrapper_IPC_int_from_acpu_INT           0x0014
    #define   LSb32hifiWrapper_IPC_int_from_acpu_INT              0
    #define   LSb16hifiWrapper_IPC_int_from_acpu_INT              0
    #define       bhifiWrapper_IPC_int_from_acpu_INT           1
    #define   MSK32hifiWrapper_IPC_int_from_acpu_INT              0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_hifiWrapper_IPC_data0                       0x0018

    #define     BA_hifiWrapper_IPC_data0_data                  0x0018
    #define     B16hifiWrapper_IPC_data0_data                  0x0018
    #define   LSb32hifiWrapper_IPC_data0_data                     0
    #define   LSb16hifiWrapper_IPC_data0_data                     0
    #define       bhifiWrapper_IPC_data0_data                  32
    #define   MSK32hifiWrapper_IPC_data0_data                     0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_hifiWrapper_IPC_data1                       0x001C

    #define     BA_hifiWrapper_IPC_data1_data                  0x001C
    #define     B16hifiWrapper_IPC_data1_data                  0x001C
    #define   LSb32hifiWrapper_IPC_data1_data                     0
    #define   LSb16hifiWrapper_IPC_data1_data                     0
    #define       bhifiWrapper_IPC_data1_data                  32
    #define   MSK32hifiWrapper_IPC_data1_data                     0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_hifiWrapper_IPC_data2                       0x0020

    #define     BA_hifiWrapper_IPC_data2_data                  0x0020
    #define     B16hifiWrapper_IPC_data2_data                  0x0020
    #define   LSb32hifiWrapper_IPC_data2_data                     0
    #define   LSb16hifiWrapper_IPC_data2_data                     0
    #define       bhifiWrapper_IPC_data2_data                  32
    #define   MSK32hifiWrapper_IPC_data2_data                     0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_hifiWrapper_IPC_data3                       0x0024

    #define     BA_hifiWrapper_IPC_data3_data                  0x0024
    #define     B16hifiWrapper_IPC_data3_data                  0x0024
    #define   LSb32hifiWrapper_IPC_data3_data                     0
    #define   LSb16hifiWrapper_IPC_data3_data                     0
    #define       bhifiWrapper_IPC_data3_data                  32
    #define   MSK32hifiWrapper_IPC_data3_data                     0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_hifiWrapper {
    ///////////////////////////////////////////////////////////
    #define   GET32hifiWrapper_Ctrl_OCDHaltOnReset(r32)        _BFGET_(r32, 0, 0)
    #define   SET32hifiWrapper_Ctrl_OCDHaltOnReset(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16hifiWrapper_Ctrl_OCDHaltOnReset(r16)        _BFGET_(r16, 0, 0)
    #define   SET16hifiWrapper_Ctrl_OCDHaltOnReset(r16,v)      _BFSET_(r16, 0, 0,v)

    #define   GET32hifiWrapper_Ctrl_DoubleExceptionErrorClr(r32) _BFGET_(r32, 1, 1)
    #define   SET32hifiWrapper_Ctrl_DoubleExceptionErrorClr(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16hifiWrapper_Ctrl_DoubleExceptionErrorClr(r16) _BFGET_(r16, 1, 1)
    #define   SET16hifiWrapper_Ctrl_DoubleExceptionErrorClr(r16,v) _BFSET_(r16, 1, 1,v)

    #define   GET32hifiWrapper_Ctrl_PFaultInfoClr(r32)         _BFGET_(r32, 2, 2)
    #define   SET32hifiWrapper_Ctrl_PFaultInfoClr(r32,v)       _BFSET_(r32, 2, 2,v)
    #define   GET16hifiWrapper_Ctrl_PFaultInfoClr(r16)         _BFGET_(r16, 2, 2)
    #define   SET16hifiWrapper_Ctrl_PFaultInfoClr(r16,v)       _BFSET_(r16, 2, 2,v)

    #define     w32hifiWrapper_Ctrl                            {\
            UNSG32 uCtrl_OCDHaltOnReset                        :  1;\
            UNSG32 uCtrl_DoubleExceptionErrorClr               :  1;\
            UNSG32 uCtrl_PFaultInfoClr                         :  1;\
            UNSG32 RSVDx0_b3                                   : 29;\
          }
    union { UNSG32 u32hifiWrapper_Ctrl;
            struct w32hifiWrapper_Ctrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32hifiWrapper_PFatalInfo_PFaultInfo(r32)      _BFGET_(r32,31, 0)
    #define   SET32hifiWrapper_PFatalInfo_PFaultInfo(r32,v)    _BFSET_(r32,31, 0,v)

    #define     w32hifiWrapper_PFatalInfo                      {\
            UNSG32 uPFatalInfo_PFaultInfo                      : 32;\
          }
    union { UNSG32 u32hifiWrapper_PFatalInfo;
            struct w32hifiWrapper_PFatalInfo;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32hifiWrapper_Status_PFaultError(r32)         _BFGET_(r32, 0, 0)
    #define   SET32hifiWrapper_Status_PFaultError(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16hifiWrapper_Status_PFaultError(r16)         _BFGET_(r16, 0, 0)
    #define   SET16hifiWrapper_Status_PFaultError(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32hifiWrapper_Status_DebugMode(r32)           _BFGET_(r32, 1, 1)
    #define   SET32hifiWrapper_Status_DebugMode(r32,v)         _BFSET_(r32, 1, 1,v)
    #define   GET16hifiWrapper_Status_DebugMode(r16)           _BFGET_(r16, 1, 1)
    #define   SET16hifiWrapper_Status_DebugMode(r16,v)         _BFSET_(r16, 1, 1,v)

    #define   GET32hifiWrapper_Status_XOCDMode(r32)            _BFGET_(r32, 2, 2)
    #define   SET32hifiWrapper_Status_XOCDMode(r32,v)          _BFSET_(r32, 2, 2,v)
    #define   GET16hifiWrapper_Status_XOCDMode(r16)            _BFGET_(r16, 2, 2)
    #define   SET16hifiWrapper_Status_XOCDMode(r16,v)          _BFSET_(r16, 2, 2,v)

    #define   GET32hifiWrapper_Status_DoubleExceptionError(r32) _BFGET_(r32, 3, 3)
    #define   SET32hifiWrapper_Status_DoubleExceptionError(r32,v) _BFSET_(r32, 3, 3,v)
    #define   GET16hifiWrapper_Status_DoubleExceptionError(r16) _BFGET_(r16, 3, 3)
    #define   SET16hifiWrapper_Status_DoubleExceptionError(r16,v) _BFSET_(r16, 3, 3,v)

    #define   GET32hifiWrapper_Status_PWaitMode(r32)           _BFGET_(r32, 4, 4)
    #define   SET32hifiWrapper_Status_PWaitMode(r32,v)         _BFSET_(r32, 4, 4,v)
    #define   GET16hifiWrapper_Status_PWaitMode(r16)           _BFGET_(r16, 4, 4)
    #define   SET16hifiWrapper_Status_PWaitMode(r16,v)         _BFSET_(r16, 4, 4,v)

    #define     w32hifiWrapper_Status                          {\
            UNSG32 uStatus_PFaultError                         :  1;\
            UNSG32 uStatus_DebugMode                           :  1;\
            UNSG32 uStatus_XOCDMode                            :  1;\
            UNSG32 uStatus_DoubleExceptionError                :  1;\
            UNSG32 uStatus_PWaitMode                           :  1;\
            UNSG32 RSVDx8_b5                                   : 27;\
          }
    union { UNSG32 u32hifiWrapper_Status;
            struct w32hifiWrapper_Status;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32hifiWrapper_IPC_int_to_acpu_INT(r32)        _BFGET_(r32, 0, 0)
    #define   SET32hifiWrapper_IPC_int_to_acpu_INT(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16hifiWrapper_IPC_int_to_acpu_INT(r16)        _BFGET_(r16, 0, 0)
    #define   SET16hifiWrapper_IPC_int_to_acpu_INT(r16,v)      _BFSET_(r16, 0, 0,v)

    #define     w32hifiWrapper_IPC_int_to_acpu                 {\
            UNSG32 uIPC_int_to_acpu_INT                        :  1;\
            UNSG32 RSVDxC_b1                                   : 31;\
          }
    union { UNSG32 u32hifiWrapper_IPC_int_to_acpu;
            struct w32hifiWrapper_IPC_int_to_acpu;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32hifiWrapper_IPC_int_to_another_dsp_INT(r32) _BFGET_(r32, 0, 0)
    #define   SET32hifiWrapper_IPC_int_to_another_dsp_INT(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16hifiWrapper_IPC_int_to_another_dsp_INT(r16) _BFGET_(r16, 0, 0)
    #define   SET16hifiWrapper_IPC_int_to_another_dsp_INT(r16,v) _BFSET_(r16, 0, 0,v)

    #define     w32hifiWrapper_IPC_int_to_another_dsp          {\
            UNSG32 uIPC_int_to_another_dsp_INT                 :  1;\
            UNSG32 RSVDx10_b1                                  : 31;\
          }
    union { UNSG32 u32hifiWrapper_IPC_int_to_another_dsp;
            struct w32hifiWrapper_IPC_int_to_another_dsp;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32hifiWrapper_IPC_int_from_acpu_INT(r32)      _BFGET_(r32, 0, 0)
    #define   SET32hifiWrapper_IPC_int_from_acpu_INT(r32,v)    _BFSET_(r32, 0, 0,v)
    #define   GET16hifiWrapper_IPC_int_from_acpu_INT(r16)      _BFGET_(r16, 0, 0)
    #define   SET16hifiWrapper_IPC_int_from_acpu_INT(r16,v)    _BFSET_(r16, 0, 0,v)

    #define     w32hifiWrapper_IPC_int_from_acpu               {\
            UNSG32 uIPC_int_from_acpu_INT                      :  1;\
            UNSG32 RSVDx14_b1                                  : 31;\
          }
    union { UNSG32 u32hifiWrapper_IPC_int_from_acpu;
            struct w32hifiWrapper_IPC_int_from_acpu;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32hifiWrapper_IPC_data0_data(r32)             _BFGET_(r32,31, 0)
    #define   SET32hifiWrapper_IPC_data0_data(r32,v)           _BFSET_(r32,31, 0,v)

    #define     w32hifiWrapper_IPC_data0                       {\
            UNSG32 uIPC_data0_data                             : 32;\
          }
    union { UNSG32 u32hifiWrapper_IPC_data0;
            struct w32hifiWrapper_IPC_data0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32hifiWrapper_IPC_data1_data(r32)             _BFGET_(r32,31, 0)
    #define   SET32hifiWrapper_IPC_data1_data(r32,v)           _BFSET_(r32,31, 0,v)

    #define     w32hifiWrapper_IPC_data1                       {\
            UNSG32 uIPC_data1_data                             : 32;\
          }
    union { UNSG32 u32hifiWrapper_IPC_data1;
            struct w32hifiWrapper_IPC_data1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32hifiWrapper_IPC_data2_data(r32)             _BFGET_(r32,31, 0)
    #define   SET32hifiWrapper_IPC_data2_data(r32,v)           _BFSET_(r32,31, 0,v)

    #define     w32hifiWrapper_IPC_data2                       {\
            UNSG32 uIPC_data2_data                             : 32;\
          }
    union { UNSG32 u32hifiWrapper_IPC_data2;
            struct w32hifiWrapper_IPC_data2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32hifiWrapper_IPC_data3_data(r32)             _BFGET_(r32,31, 0)
    #define   SET32hifiWrapper_IPC_data3_data(r32,v)           _BFSET_(r32,31, 0,v)

    #define     w32hifiWrapper_IPC_data3                       {\
            UNSG32 uIPC_data3_data                             : 32;\
          }
    union { UNSG32 u32hifiWrapper_IPC_data3;
            struct w32hifiWrapper_IPC_data3;
          };
    ///////////////////////////////////////////////////////////
    } SIE_hifiWrapper;

    typedef union  T32hifiWrapper_Ctrl
          { UNSG32 u32;
            struct w32hifiWrapper_Ctrl;
                 } T32hifiWrapper_Ctrl;
    typedef union  T32hifiWrapper_PFatalInfo
          { UNSG32 u32;
            struct w32hifiWrapper_PFatalInfo;
                 } T32hifiWrapper_PFatalInfo;
    typedef union  T32hifiWrapper_Status
          { UNSG32 u32;
            struct w32hifiWrapper_Status;
                 } T32hifiWrapper_Status;
    typedef union  T32hifiWrapper_IPC_int_to_acpu
          { UNSG32 u32;
            struct w32hifiWrapper_IPC_int_to_acpu;
                 } T32hifiWrapper_IPC_int_to_acpu;
    typedef union  T32hifiWrapper_IPC_int_to_another_dsp
          { UNSG32 u32;
            struct w32hifiWrapper_IPC_int_to_another_dsp;
                 } T32hifiWrapper_IPC_int_to_another_dsp;
    typedef union  T32hifiWrapper_IPC_int_from_acpu
          { UNSG32 u32;
            struct w32hifiWrapper_IPC_int_from_acpu;
                 } T32hifiWrapper_IPC_int_from_acpu;
    typedef union  T32hifiWrapper_IPC_data0
          { UNSG32 u32;
            struct w32hifiWrapper_IPC_data0;
                 } T32hifiWrapper_IPC_data0;
    typedef union  T32hifiWrapper_IPC_data1
          { UNSG32 u32;
            struct w32hifiWrapper_IPC_data1;
                 } T32hifiWrapper_IPC_data1;
    typedef union  T32hifiWrapper_IPC_data2
          { UNSG32 u32;
            struct w32hifiWrapper_IPC_data2;
                 } T32hifiWrapper_IPC_data2;
    typedef union  T32hifiWrapper_IPC_data3
          { UNSG32 u32;
            struct w32hifiWrapper_IPC_data3;
                 } T32hifiWrapper_IPC_data3;
    ///////////////////////////////////////////////////////////

    typedef union  ThifiWrapper_Ctrl
          { UNSG32 u32[1];
            struct {
            struct w32hifiWrapper_Ctrl;
                   };
                 } ThifiWrapper_Ctrl;
    typedef union  ThifiWrapper_PFatalInfo
          { UNSG32 u32[1];
            struct {
            struct w32hifiWrapper_PFatalInfo;
                   };
                 } ThifiWrapper_PFatalInfo;
    typedef union  ThifiWrapper_Status
          { UNSG32 u32[1];
            struct {
            struct w32hifiWrapper_Status;
                   };
                 } ThifiWrapper_Status;
    typedef union  ThifiWrapper_IPC_int_to_acpu
          { UNSG32 u32[1];
            struct {
            struct w32hifiWrapper_IPC_int_to_acpu;
                   };
                 } ThifiWrapper_IPC_int_to_acpu;
    typedef union  ThifiWrapper_IPC_int_to_another_dsp
          { UNSG32 u32[1];
            struct {
            struct w32hifiWrapper_IPC_int_to_another_dsp;
                   };
                 } ThifiWrapper_IPC_int_to_another_dsp;
    typedef union  ThifiWrapper_IPC_int_from_acpu
          { UNSG32 u32[1];
            struct {
            struct w32hifiWrapper_IPC_int_from_acpu;
                   };
                 } ThifiWrapper_IPC_int_from_acpu;
    typedef union  ThifiWrapper_IPC_data0
          { UNSG32 u32[1];
            struct {
            struct w32hifiWrapper_IPC_data0;
                   };
                 } ThifiWrapper_IPC_data0;
    typedef union  ThifiWrapper_IPC_data1
          { UNSG32 u32[1];
            struct {
            struct w32hifiWrapper_IPC_data1;
                   };
                 } ThifiWrapper_IPC_data1;
    typedef union  ThifiWrapper_IPC_data2
          { UNSG32 u32[1];
            struct {
            struct w32hifiWrapper_IPC_data2;
                   };
                 } ThifiWrapper_IPC_data2;
    typedef union  ThifiWrapper_IPC_data3
          { UNSG32 u32[1];
            struct {
            struct w32hifiWrapper_IPC_data3;
                   };
                 } ThifiWrapper_IPC_data3;

    ///////////////////////////////////////////////////////////
     SIGN32 hifiWrapper_drvrd(SIE_hifiWrapper *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 hifiWrapper_drvwr(SIE_hifiWrapper *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void hifiWrapper_reset(SIE_hifiWrapper *p);
     SIGN32 hifiWrapper_cmp  (SIE_hifiWrapper *p, SIE_hifiWrapper *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define hifiWrapper_check(p,pie,pfx,hLOG) hifiWrapper_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define hifiWrapper_print(p,    pfx,hLOG) hifiWrapper_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: hifiWrapper
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: hifiWrap.h
////////////////////////////////////////////////////////////

