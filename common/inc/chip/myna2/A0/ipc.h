//////
/// don't edit! auto-generated by docc: ipc.h
////////////////////////////////////////////////////////////
#ifndef ipc_h
#define ipc_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE IPC_CSR                                  (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 IPC_INT_STATUS       (WOC-)
///               %unsigned 1  ipc_mbx0_intr             0x0
///                                    ###
///                                    * When set, indicates that IPC_MBX0 has generated an interrupt event. Writing a 1 to this bit will clear it. Writing a 0 to this bit will have no effect.
///                                    * [0]
///                                    ###
///               %unsigned 1  ipc_mbx1_intr             0x0
///                                    ###
///                                    * When set, indicates that IPC_MBX1 has generated an interrupt event. Writing a 1 to this bit will clear it. Writing a 0 to this bit will have no effect.
///                                    * [1]
///                                    ###
///               %unsigned 1  ipc_mbx2_intr             0x0
///                                    ###
///                                    * When set, indicates that IPC_MBX2 has generated an interrupt event. Writing a 1 to this bit will clear it. Writing a 0 to this bit will have no effect.
///                                    * [2]
///                                    ###
///               %unsigned 1  ipc_mbx3_intr             0x0
///                                    ###
///                                    * When set, indicates that IPC_MBX3 has generated an interrupt event. Writing a 1 to this bit will clear it. Writing a 0 to this bit will have no effect.
///                                    * [3]
///                                    ###
///               %unsigned 1  ipc_lock_intr             0x0
///                                    ###
///                                    * When set, indicates that a bit in the IPC_LOCK_STATUS register, which has been enabled to generate an interrupt, has transitioned from 1 to 0.
///                                    * Writing a 1 to this bit will clear it. Writing a 0 to this bit will have no effect
///                                    * [4]
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00004 IPC_INT_MASK         (RW)
///               %unsigned 1  ipc_mbx0_intr_msk         0x0
///                                    ###
///                                    * When set, allows the corresponding bit in the Interrupt Status register generate an interrupt.
///                                    * [0]
///                                    ###
///               %unsigned 1  ipc_mbx1_intr_msk         0x0
///                                    ###
///                                    * When set, allows the corresponding bit in the Interrupt Status register generate an interrupt.
///                                    * [1]
///                                    ###
///               %unsigned 1  ipc_mbx2_intr_msk         0x0
///                                    ###
///                                    * When set, allows the corresponding bit in the Interrupt Status register generate an interrupt.
///                                    * [2]
///                                    ###
///               %unsigned 1  ipc_mbx3_intr_msk         0x0
///                                    ###
///                                    * When set, allows the corresponding bit in the Interrupt Status register generate an interrupt.
///                                    * [3]
///                                    ###
///               %unsigned 1  ipc_lock_intr_msk         0x0
///                                    ###
///                                    * When set, allows the corresponding bit in the Interrupt Status register generate an interrupt.
///                                    * [4]
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00008 IPC_MASK_INT         (R-)
///               %unsigned 1  ipc_mbx0_msk_intr         0x0
///                                    ###
///                                    * Masked interrupt, when it is set, it causes an interrupt.
///                                    * [0]
///                                    ###
///               %unsigned 1  ipc_mbx1_msk_intr         0x0
///                                    ###
///                                    * Masked interrupt, when it is set, it causes an interrupt.
///                                    * [1]
///                                    ###
///               %unsigned 1  ipc_mbx2_msk_intr         0x0
///                                    ###
///                                    * Masked interrupt, when it is set, it causes an interrupt.
///                                    * [2]
///                                    ###
///               %unsigned 1  ipc_mbx3_msk_intr         0x0
///                                    ###
///                                    * Masked interrupt, when it is set, it causes an interrupt.
///                                    * [3]
///                                    ###
///               %unsigned 1  ipc_lock_msk_intr         0x0
///                                    ###
///                                    * Masked interrupt, when it is set, it causes an interrupt.
///                                    * [4]
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x0000C IPC_LOCK_INT_ENABLE  (RW)
///               %unsigned 32 ipc_lock_intr_en          0x0
///                                    ###
///                                    * A set bit in this register allows the corresponding bit in the IPC_LOCK_STATUS register to generate an interrupt, by setting the Lock bit in the Interrupt_Status register, whenever the corresponding Lock_Status register bit transitions from 1 to 0.
///                                    * [31:0]
///                                    ###
///     @ 0x00010 IPC_LOCK_STATUS      (R-)
///               %unsigned 32 ipc_lock_status           0x0
///                                    ###
///                                    * A 1 in a bit of this register indicates that the corresponding resource is locked by the core. A 0 indicates that the resource is not locked by the Processor.
///                                    * Bits in this register are set/cleared through the IPC_LOCK_SET/IPC_LOCK_CLR register and cannot be written to directly. (This register is read-only.)
///                                    * [31:0]
///                                    ###
///     @ 0x00014 IPC_LOCK_SET         (WOC-)
///               %unsigned 32 ipc_lock_set              0x0
///                                    ###
///                                    * Writing a 1 to a bit in this register will cause the
///                                    * corresponding bit in the IPC_LOCK_STATUS register to be set 1, if the corresponding bit in all of the other IPC_LOCK_STATUS registers are clear (0).
///                                    * Writing a 0 to any bit in this register will have no effect.
///                                    * [31:0]
///                                    ###
///     @ 0x00018 IPC_LOCK_CLR         (WOC-)
///               %unsigned 32 ipc_lock_clr              0x0
///                                    ###
///                                    * Writing a 1 to a bit in this register will cause the corresponding bit in the IPC_LOCK_STATUS register to be cleared.
///                                    * Writing a 0 to any bit in this register will have no effect.
///                                    * [31:0]
///                                    ###
///     @ 0x0001C IPC_MBX_INT_ENABLE   (RW)
///               %unsigned 1  ipc_mbx0_write_intr_en    0x0
///                                    ###
///                                    * When set, allows IPC_MBX0 to generate an interrupt whenever it is written to.
///                                    * [0]
///                                    ###
///               %unsigned 1  ipc_mbx1_write_intr_en    0x0
///                                    ###
///                                    * When set, allows IPC_MBX1 to generate an interrupt whenever it is written to.
///                                    * [1]
///                                    ###
///               %unsigned 1  ipc_mbx2_write_intr_en    0x0
///                                    ###
///                                    * When set, allows IPC_MBX2 to generate an interrupt whenever it is written to.
///                                    * [2]
///                                    ###
///               %unsigned 1  ipc_mbx3_write_intr_en    0x0
///                                    ###
///                                    * When set, allows IPC_MBX3 to generate an interrupt whenever it is written to.
///                                    * [3]
///                                    ###
///               %unsigned 1  ipc_mbx0_chg_intr_en      0x0
///                                    ###
///                                    * When set, allows IPC_MBX0 to generate an interrupt whenever its value changes.
///                                    * [4]
///                                    ###
///               %unsigned 1  ipc_mbx1_chg_intr_en      0x0
///                                    ###
///                                    * When set, allows IPC_MBX1 to generate an interrupt whenever its value changes.
///                                    * [5]
///                                    ###
///               %unsigned 1  ipc_mbx2_chg_intr_en      0x0
///                                    ###
///                                    * When set, allows IPC_MBX2 to generate an interrupt whenever its value changes.
///                                    * [6]
///                                    ###
///               %unsigned 1  ipc_mbx3_chg_intr_en      0x0
///                                    ###
///                                    * When set, allows IPC_MBX3 to generate an interrupt whenever its value changes.
///                                    * [7]
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00020 IPC_MBX0             (RW)
///               %unsigned 32 ipc_mbx0                  0x0
///                                    ###
///                                    * The register will retain the last value written to it.
///                                    * If enabled to do so in the IPC_MBX_INT_ENABLE register, this register will generate an interrupt to the Processor whenever it is written to, or whenever its value changes.
///                                    * [31:0]
///                                    ###
///     @ 0x00024 IPC_MBX1             (RW)
///               %unsigned 32 ipc_mbx1                  0x0
///                                    ###
///                                    * The register will retain the last value written to it.
///                                    * If enabled to do so in the IPC_MBX_INT_ENABLE register, this register will generate an interrupt to the Processor whenever it is written to, or whenever its value changes.
///                                    * [31:0]
///                                    ###
///     @ 0x00028 IPC_MBX2             (RW)
///               %unsigned 32 ipc_mbx2                  0x0
///                                    ###
///                                    * The register will retain the last value written to it.
///                                    * If enabled to do so in the IPC_MBX_INT_ENABLE register, this register will generate an interrupt to the Processor whenever it is written to, or whenever its value changes.
///                                    * [31:0]
///                                    ###
///     @ 0x0002C IPC_MBX3             (RW)
///               %unsigned 32 ipc_mbx3                  0x0
///                                    ###
///                                    * The register will retain the last value written to it.
///                                    * If enabled to do so in the IPC_MBX_INT_ENABLE register, this register will generate an interrupt to the Processor whenever it is written to, or whenever its value changes.
///                                    * [31:0]
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      48B, bits:     279b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_IPC_CSR
#define h_IPC_CSR (){}

    #define     RA_IPC_CSR_IPC_INT_STATUS                      0x0000

    #define     BA_IPC_CSR_IPC_INT_STATUS_ipc_mbx0_intr        0x0000
    #define     B16IPC_CSR_IPC_INT_STATUS_ipc_mbx0_intr        0x0000
    #define   LSb32IPC_CSR_IPC_INT_STATUS_ipc_mbx0_intr           0
    #define   LSb16IPC_CSR_IPC_INT_STATUS_ipc_mbx0_intr           0
    #define       bIPC_CSR_IPC_INT_STATUS_ipc_mbx0_intr        1
    #define   MSK32IPC_CSR_IPC_INT_STATUS_ipc_mbx0_intr           0x00000001

    #define     BA_IPC_CSR_IPC_INT_STATUS_ipc_mbx1_intr        0x0000
    #define     B16IPC_CSR_IPC_INT_STATUS_ipc_mbx1_intr        0x0000
    #define   LSb32IPC_CSR_IPC_INT_STATUS_ipc_mbx1_intr           1
    #define   LSb16IPC_CSR_IPC_INT_STATUS_ipc_mbx1_intr           1
    #define       bIPC_CSR_IPC_INT_STATUS_ipc_mbx1_intr        1
    #define   MSK32IPC_CSR_IPC_INT_STATUS_ipc_mbx1_intr           0x00000002

    #define     BA_IPC_CSR_IPC_INT_STATUS_ipc_mbx2_intr        0x0000
    #define     B16IPC_CSR_IPC_INT_STATUS_ipc_mbx2_intr        0x0000
    #define   LSb32IPC_CSR_IPC_INT_STATUS_ipc_mbx2_intr           2
    #define   LSb16IPC_CSR_IPC_INT_STATUS_ipc_mbx2_intr           2
    #define       bIPC_CSR_IPC_INT_STATUS_ipc_mbx2_intr        1
    #define   MSK32IPC_CSR_IPC_INT_STATUS_ipc_mbx2_intr           0x00000004

    #define     BA_IPC_CSR_IPC_INT_STATUS_ipc_mbx3_intr        0x0000
    #define     B16IPC_CSR_IPC_INT_STATUS_ipc_mbx3_intr        0x0000
    #define   LSb32IPC_CSR_IPC_INT_STATUS_ipc_mbx3_intr           3
    #define   LSb16IPC_CSR_IPC_INT_STATUS_ipc_mbx3_intr           3
    #define       bIPC_CSR_IPC_INT_STATUS_ipc_mbx3_intr        1
    #define   MSK32IPC_CSR_IPC_INT_STATUS_ipc_mbx3_intr           0x00000008

    #define     BA_IPC_CSR_IPC_INT_STATUS_ipc_lock_intr        0x0000
    #define     B16IPC_CSR_IPC_INT_STATUS_ipc_lock_intr        0x0000
    #define   LSb32IPC_CSR_IPC_INT_STATUS_ipc_lock_intr           4
    #define   LSb16IPC_CSR_IPC_INT_STATUS_ipc_lock_intr           4
    #define       bIPC_CSR_IPC_INT_STATUS_ipc_lock_intr        1
    #define   MSK32IPC_CSR_IPC_INT_STATUS_ipc_lock_intr           0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_IPC_CSR_IPC_INT_MASK                        0x0004

    #define     BA_IPC_CSR_IPC_INT_MASK_ipc_mbx0_intr_msk      0x0004
    #define     B16IPC_CSR_IPC_INT_MASK_ipc_mbx0_intr_msk      0x0004
    #define   LSb32IPC_CSR_IPC_INT_MASK_ipc_mbx0_intr_msk         0
    #define   LSb16IPC_CSR_IPC_INT_MASK_ipc_mbx0_intr_msk         0
    #define       bIPC_CSR_IPC_INT_MASK_ipc_mbx0_intr_msk      1
    #define   MSK32IPC_CSR_IPC_INT_MASK_ipc_mbx0_intr_msk         0x00000001

    #define     BA_IPC_CSR_IPC_INT_MASK_ipc_mbx1_intr_msk      0x0004
    #define     B16IPC_CSR_IPC_INT_MASK_ipc_mbx1_intr_msk      0x0004
    #define   LSb32IPC_CSR_IPC_INT_MASK_ipc_mbx1_intr_msk         1
    #define   LSb16IPC_CSR_IPC_INT_MASK_ipc_mbx1_intr_msk         1
    #define       bIPC_CSR_IPC_INT_MASK_ipc_mbx1_intr_msk      1
    #define   MSK32IPC_CSR_IPC_INT_MASK_ipc_mbx1_intr_msk         0x00000002

    #define     BA_IPC_CSR_IPC_INT_MASK_ipc_mbx2_intr_msk      0x0004
    #define     B16IPC_CSR_IPC_INT_MASK_ipc_mbx2_intr_msk      0x0004
    #define   LSb32IPC_CSR_IPC_INT_MASK_ipc_mbx2_intr_msk         2
    #define   LSb16IPC_CSR_IPC_INT_MASK_ipc_mbx2_intr_msk         2
    #define       bIPC_CSR_IPC_INT_MASK_ipc_mbx2_intr_msk      1
    #define   MSK32IPC_CSR_IPC_INT_MASK_ipc_mbx2_intr_msk         0x00000004

    #define     BA_IPC_CSR_IPC_INT_MASK_ipc_mbx3_intr_msk      0x0004
    #define     B16IPC_CSR_IPC_INT_MASK_ipc_mbx3_intr_msk      0x0004
    #define   LSb32IPC_CSR_IPC_INT_MASK_ipc_mbx3_intr_msk         3
    #define   LSb16IPC_CSR_IPC_INT_MASK_ipc_mbx3_intr_msk         3
    #define       bIPC_CSR_IPC_INT_MASK_ipc_mbx3_intr_msk      1
    #define   MSK32IPC_CSR_IPC_INT_MASK_ipc_mbx3_intr_msk         0x00000008

    #define     BA_IPC_CSR_IPC_INT_MASK_ipc_lock_intr_msk      0x0004
    #define     B16IPC_CSR_IPC_INT_MASK_ipc_lock_intr_msk      0x0004
    #define   LSb32IPC_CSR_IPC_INT_MASK_ipc_lock_intr_msk         4
    #define   LSb16IPC_CSR_IPC_INT_MASK_ipc_lock_intr_msk         4
    #define       bIPC_CSR_IPC_INT_MASK_ipc_lock_intr_msk      1
    #define   MSK32IPC_CSR_IPC_INT_MASK_ipc_lock_intr_msk         0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_IPC_CSR_IPC_MASK_INT                        0x0008

    #define     BA_IPC_CSR_IPC_MASK_INT_ipc_mbx0_msk_intr      0x0008
    #define     B16IPC_CSR_IPC_MASK_INT_ipc_mbx0_msk_intr      0x0008
    #define   LSb32IPC_CSR_IPC_MASK_INT_ipc_mbx0_msk_intr         0
    #define   LSb16IPC_CSR_IPC_MASK_INT_ipc_mbx0_msk_intr         0
    #define       bIPC_CSR_IPC_MASK_INT_ipc_mbx0_msk_intr      1
    #define   MSK32IPC_CSR_IPC_MASK_INT_ipc_mbx0_msk_intr         0x00000001

    #define     BA_IPC_CSR_IPC_MASK_INT_ipc_mbx1_msk_intr      0x0008
    #define     B16IPC_CSR_IPC_MASK_INT_ipc_mbx1_msk_intr      0x0008
    #define   LSb32IPC_CSR_IPC_MASK_INT_ipc_mbx1_msk_intr         1
    #define   LSb16IPC_CSR_IPC_MASK_INT_ipc_mbx1_msk_intr         1
    #define       bIPC_CSR_IPC_MASK_INT_ipc_mbx1_msk_intr      1
    #define   MSK32IPC_CSR_IPC_MASK_INT_ipc_mbx1_msk_intr         0x00000002

    #define     BA_IPC_CSR_IPC_MASK_INT_ipc_mbx2_msk_intr      0x0008
    #define     B16IPC_CSR_IPC_MASK_INT_ipc_mbx2_msk_intr      0x0008
    #define   LSb32IPC_CSR_IPC_MASK_INT_ipc_mbx2_msk_intr         2
    #define   LSb16IPC_CSR_IPC_MASK_INT_ipc_mbx2_msk_intr         2
    #define       bIPC_CSR_IPC_MASK_INT_ipc_mbx2_msk_intr      1
    #define   MSK32IPC_CSR_IPC_MASK_INT_ipc_mbx2_msk_intr         0x00000004

    #define     BA_IPC_CSR_IPC_MASK_INT_ipc_mbx3_msk_intr      0x0008
    #define     B16IPC_CSR_IPC_MASK_INT_ipc_mbx3_msk_intr      0x0008
    #define   LSb32IPC_CSR_IPC_MASK_INT_ipc_mbx3_msk_intr         3
    #define   LSb16IPC_CSR_IPC_MASK_INT_ipc_mbx3_msk_intr         3
    #define       bIPC_CSR_IPC_MASK_INT_ipc_mbx3_msk_intr      1
    #define   MSK32IPC_CSR_IPC_MASK_INT_ipc_mbx3_msk_intr         0x00000008

    #define     BA_IPC_CSR_IPC_MASK_INT_ipc_lock_msk_intr      0x0008
    #define     B16IPC_CSR_IPC_MASK_INT_ipc_lock_msk_intr      0x0008
    #define   LSb32IPC_CSR_IPC_MASK_INT_ipc_lock_msk_intr         4
    #define   LSb16IPC_CSR_IPC_MASK_INT_ipc_lock_msk_intr         4
    #define       bIPC_CSR_IPC_MASK_INT_ipc_lock_msk_intr      1
    #define   MSK32IPC_CSR_IPC_MASK_INT_ipc_lock_msk_intr         0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_IPC_CSR_IPC_LOCK_INT_ENABLE                 0x000C

    #define     BA_IPC_CSR_IPC_LOCK_INT_ENABLE_ipc_lock_intr_en 0x000C
    #define     B16IPC_CSR_IPC_LOCK_INT_ENABLE_ipc_lock_intr_en 0x000C
    #define   LSb32IPC_CSR_IPC_LOCK_INT_ENABLE_ipc_lock_intr_en    0
    #define   LSb16IPC_CSR_IPC_LOCK_INT_ENABLE_ipc_lock_intr_en    0
    #define       bIPC_CSR_IPC_LOCK_INT_ENABLE_ipc_lock_intr_en 32
    #define   MSK32IPC_CSR_IPC_LOCK_INT_ENABLE_ipc_lock_intr_en    0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_IPC_CSR_IPC_LOCK_STATUS                     0x0010

    #define     BA_IPC_CSR_IPC_LOCK_STATUS_ipc_lock_status     0x0010
    #define     B16IPC_CSR_IPC_LOCK_STATUS_ipc_lock_status     0x0010
    #define   LSb32IPC_CSR_IPC_LOCK_STATUS_ipc_lock_status        0
    #define   LSb16IPC_CSR_IPC_LOCK_STATUS_ipc_lock_status        0
    #define       bIPC_CSR_IPC_LOCK_STATUS_ipc_lock_status     32
    #define   MSK32IPC_CSR_IPC_LOCK_STATUS_ipc_lock_status        0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_IPC_CSR_IPC_LOCK_SET                        0x0014

    #define     BA_IPC_CSR_IPC_LOCK_SET_ipc_lock_set           0x0014
    #define     B16IPC_CSR_IPC_LOCK_SET_ipc_lock_set           0x0014
    #define   LSb32IPC_CSR_IPC_LOCK_SET_ipc_lock_set              0
    #define   LSb16IPC_CSR_IPC_LOCK_SET_ipc_lock_set              0
    #define       bIPC_CSR_IPC_LOCK_SET_ipc_lock_set           32
    #define   MSK32IPC_CSR_IPC_LOCK_SET_ipc_lock_set              0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_IPC_CSR_IPC_LOCK_CLR                        0x0018

    #define     BA_IPC_CSR_IPC_LOCK_CLR_ipc_lock_clr           0x0018
    #define     B16IPC_CSR_IPC_LOCK_CLR_ipc_lock_clr           0x0018
    #define   LSb32IPC_CSR_IPC_LOCK_CLR_ipc_lock_clr              0
    #define   LSb16IPC_CSR_IPC_LOCK_CLR_ipc_lock_clr              0
    #define       bIPC_CSR_IPC_LOCK_CLR_ipc_lock_clr           32
    #define   MSK32IPC_CSR_IPC_LOCK_CLR_ipc_lock_clr              0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_IPC_CSR_IPC_MBX_INT_ENABLE                  0x001C

    #define     BA_IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_write_intr_en 0x001C
    #define     B16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_write_intr_en 0x001C
    #define   LSb32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_write_intr_en    0
    #define   LSb16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_write_intr_en    0
    #define       bIPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_write_intr_en 1
    #define   MSK32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_write_intr_en    0x00000001

    #define     BA_IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_write_intr_en 0x001C
    #define     B16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_write_intr_en 0x001C
    #define   LSb32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_write_intr_en    1
    #define   LSb16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_write_intr_en    1
    #define       bIPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_write_intr_en 1
    #define   MSK32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_write_intr_en    0x00000002

    #define     BA_IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_write_intr_en 0x001C
    #define     B16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_write_intr_en 0x001C
    #define   LSb32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_write_intr_en    2
    #define   LSb16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_write_intr_en    2
    #define       bIPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_write_intr_en 1
    #define   MSK32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_write_intr_en    0x00000004

    #define     BA_IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_write_intr_en 0x001C
    #define     B16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_write_intr_en 0x001C
    #define   LSb32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_write_intr_en    3
    #define   LSb16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_write_intr_en    3
    #define       bIPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_write_intr_en 1
    #define   MSK32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_write_intr_en    0x00000008

    #define     BA_IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_chg_intr_en 0x001C
    #define     B16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_chg_intr_en 0x001C
    #define   LSb32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_chg_intr_en    4
    #define   LSb16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_chg_intr_en    4
    #define       bIPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_chg_intr_en 1
    #define   MSK32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_chg_intr_en    0x00000010

    #define     BA_IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_chg_intr_en 0x001C
    #define     B16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_chg_intr_en 0x001C
    #define   LSb32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_chg_intr_en    5
    #define   LSb16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_chg_intr_en    5
    #define       bIPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_chg_intr_en 1
    #define   MSK32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_chg_intr_en    0x00000020

    #define     BA_IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_chg_intr_en 0x001C
    #define     B16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_chg_intr_en 0x001C
    #define   LSb32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_chg_intr_en    6
    #define   LSb16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_chg_intr_en    6
    #define       bIPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_chg_intr_en 1
    #define   MSK32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_chg_intr_en    0x00000040

    #define     BA_IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_chg_intr_en 0x001C
    #define     B16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_chg_intr_en 0x001C
    #define   LSb32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_chg_intr_en    7
    #define   LSb16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_chg_intr_en    7
    #define       bIPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_chg_intr_en 1
    #define   MSK32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_chg_intr_en    0x00000080
    ///////////////////////////////////////////////////////////
    #define     RA_IPC_CSR_IPC_MBX0                            0x0020

    #define     BA_IPC_CSR_IPC_MBX0_ipc_mbx0                   0x0020
    #define     B16IPC_CSR_IPC_MBX0_ipc_mbx0                   0x0020
    #define   LSb32IPC_CSR_IPC_MBX0_ipc_mbx0                      0
    #define   LSb16IPC_CSR_IPC_MBX0_ipc_mbx0                      0
    #define       bIPC_CSR_IPC_MBX0_ipc_mbx0                   32
    #define   MSK32IPC_CSR_IPC_MBX0_ipc_mbx0                      0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_IPC_CSR_IPC_MBX1                            0x0024

    #define     BA_IPC_CSR_IPC_MBX1_ipc_mbx1                   0x0024
    #define     B16IPC_CSR_IPC_MBX1_ipc_mbx1                   0x0024
    #define   LSb32IPC_CSR_IPC_MBX1_ipc_mbx1                      0
    #define   LSb16IPC_CSR_IPC_MBX1_ipc_mbx1                      0
    #define       bIPC_CSR_IPC_MBX1_ipc_mbx1                   32
    #define   MSK32IPC_CSR_IPC_MBX1_ipc_mbx1                      0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_IPC_CSR_IPC_MBX2                            0x0028

    #define     BA_IPC_CSR_IPC_MBX2_ipc_mbx2                   0x0028
    #define     B16IPC_CSR_IPC_MBX2_ipc_mbx2                   0x0028
    #define   LSb32IPC_CSR_IPC_MBX2_ipc_mbx2                      0
    #define   LSb16IPC_CSR_IPC_MBX2_ipc_mbx2                      0
    #define       bIPC_CSR_IPC_MBX2_ipc_mbx2                   32
    #define   MSK32IPC_CSR_IPC_MBX2_ipc_mbx2                      0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_IPC_CSR_IPC_MBX3                            0x002C

    #define     BA_IPC_CSR_IPC_MBX3_ipc_mbx3                   0x002C
    #define     B16IPC_CSR_IPC_MBX3_ipc_mbx3                   0x002C
    #define   LSb32IPC_CSR_IPC_MBX3_ipc_mbx3                      0
    #define   LSb16IPC_CSR_IPC_MBX3_ipc_mbx3                      0
    #define       bIPC_CSR_IPC_MBX3_ipc_mbx3                   32
    #define   MSK32IPC_CSR_IPC_MBX3_ipc_mbx3                      0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_IPC_CSR {
    ///////////////////////////////////////////////////////////
    #define   GET32IPC_CSR_IPC_INT_STATUS_ipc_mbx0_intr(r32)   _BFGET_(r32, 0, 0)
    #define   SET32IPC_CSR_IPC_INT_STATUS_ipc_mbx0_intr(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16IPC_CSR_IPC_INT_STATUS_ipc_mbx0_intr(r16)   _BFGET_(r16, 0, 0)
    #define   SET16IPC_CSR_IPC_INT_STATUS_ipc_mbx0_intr(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32IPC_CSR_IPC_INT_STATUS_ipc_mbx1_intr(r32)   _BFGET_(r32, 1, 1)
    #define   SET32IPC_CSR_IPC_INT_STATUS_ipc_mbx1_intr(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16IPC_CSR_IPC_INT_STATUS_ipc_mbx1_intr(r16)   _BFGET_(r16, 1, 1)
    #define   SET16IPC_CSR_IPC_INT_STATUS_ipc_mbx1_intr(r16,v) _BFSET_(r16, 1, 1,v)

    #define   GET32IPC_CSR_IPC_INT_STATUS_ipc_mbx2_intr(r32)   _BFGET_(r32, 2, 2)
    #define   SET32IPC_CSR_IPC_INT_STATUS_ipc_mbx2_intr(r32,v) _BFSET_(r32, 2, 2,v)
    #define   GET16IPC_CSR_IPC_INT_STATUS_ipc_mbx2_intr(r16)   _BFGET_(r16, 2, 2)
    #define   SET16IPC_CSR_IPC_INT_STATUS_ipc_mbx2_intr(r16,v) _BFSET_(r16, 2, 2,v)

    #define   GET32IPC_CSR_IPC_INT_STATUS_ipc_mbx3_intr(r32)   _BFGET_(r32, 3, 3)
    #define   SET32IPC_CSR_IPC_INT_STATUS_ipc_mbx3_intr(r32,v) _BFSET_(r32, 3, 3,v)
    #define   GET16IPC_CSR_IPC_INT_STATUS_ipc_mbx3_intr(r16)   _BFGET_(r16, 3, 3)
    #define   SET16IPC_CSR_IPC_INT_STATUS_ipc_mbx3_intr(r16,v) _BFSET_(r16, 3, 3,v)

    #define   GET32IPC_CSR_IPC_INT_STATUS_ipc_lock_intr(r32)   _BFGET_(r32, 4, 4)
    #define   SET32IPC_CSR_IPC_INT_STATUS_ipc_lock_intr(r32,v) _BFSET_(r32, 4, 4,v)
    #define   GET16IPC_CSR_IPC_INT_STATUS_ipc_lock_intr(r16)   _BFGET_(r16, 4, 4)
    #define   SET16IPC_CSR_IPC_INT_STATUS_ipc_lock_intr(r16,v) _BFSET_(r16, 4, 4,v)

    #define     w32IPC_CSR_IPC_INT_STATUS                      {\
            UNSG32 uIPC_INT_STATUS_ipc_mbx0_intr               :  1;\
            UNSG32 uIPC_INT_STATUS_ipc_mbx1_intr               :  1;\
            UNSG32 uIPC_INT_STATUS_ipc_mbx2_intr               :  1;\
            UNSG32 uIPC_INT_STATUS_ipc_mbx3_intr               :  1;\
            UNSG32 uIPC_INT_STATUS_ipc_lock_intr               :  1;\
            UNSG32 RSVDx0_b5                                   : 27;\
          }
    union { UNSG32 u32IPC_CSR_IPC_INT_STATUS;
            struct w32IPC_CSR_IPC_INT_STATUS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IPC_CSR_IPC_INT_MASK_ipc_mbx0_intr_msk(r32) _BFGET_(r32, 0, 0)
    #define   SET32IPC_CSR_IPC_INT_MASK_ipc_mbx0_intr_msk(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16IPC_CSR_IPC_INT_MASK_ipc_mbx0_intr_msk(r16) _BFGET_(r16, 0, 0)
    #define   SET16IPC_CSR_IPC_INT_MASK_ipc_mbx0_intr_msk(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32IPC_CSR_IPC_INT_MASK_ipc_mbx1_intr_msk(r32) _BFGET_(r32, 1, 1)
    #define   SET32IPC_CSR_IPC_INT_MASK_ipc_mbx1_intr_msk(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16IPC_CSR_IPC_INT_MASK_ipc_mbx1_intr_msk(r16) _BFGET_(r16, 1, 1)
    #define   SET16IPC_CSR_IPC_INT_MASK_ipc_mbx1_intr_msk(r16,v) _BFSET_(r16, 1, 1,v)

    #define   GET32IPC_CSR_IPC_INT_MASK_ipc_mbx2_intr_msk(r32) _BFGET_(r32, 2, 2)
    #define   SET32IPC_CSR_IPC_INT_MASK_ipc_mbx2_intr_msk(r32,v) _BFSET_(r32, 2, 2,v)
    #define   GET16IPC_CSR_IPC_INT_MASK_ipc_mbx2_intr_msk(r16) _BFGET_(r16, 2, 2)
    #define   SET16IPC_CSR_IPC_INT_MASK_ipc_mbx2_intr_msk(r16,v) _BFSET_(r16, 2, 2,v)

    #define   GET32IPC_CSR_IPC_INT_MASK_ipc_mbx3_intr_msk(r32) _BFGET_(r32, 3, 3)
    #define   SET32IPC_CSR_IPC_INT_MASK_ipc_mbx3_intr_msk(r32,v) _BFSET_(r32, 3, 3,v)
    #define   GET16IPC_CSR_IPC_INT_MASK_ipc_mbx3_intr_msk(r16) _BFGET_(r16, 3, 3)
    #define   SET16IPC_CSR_IPC_INT_MASK_ipc_mbx3_intr_msk(r16,v) _BFSET_(r16, 3, 3,v)

    #define   GET32IPC_CSR_IPC_INT_MASK_ipc_lock_intr_msk(r32) _BFGET_(r32, 4, 4)
    #define   SET32IPC_CSR_IPC_INT_MASK_ipc_lock_intr_msk(r32,v) _BFSET_(r32, 4, 4,v)
    #define   GET16IPC_CSR_IPC_INT_MASK_ipc_lock_intr_msk(r16) _BFGET_(r16, 4, 4)
    #define   SET16IPC_CSR_IPC_INT_MASK_ipc_lock_intr_msk(r16,v) _BFSET_(r16, 4, 4,v)

    #define     w32IPC_CSR_IPC_INT_MASK                        {\
            UNSG32 uIPC_INT_MASK_ipc_mbx0_intr_msk             :  1;\
            UNSG32 uIPC_INT_MASK_ipc_mbx1_intr_msk             :  1;\
            UNSG32 uIPC_INT_MASK_ipc_mbx2_intr_msk             :  1;\
            UNSG32 uIPC_INT_MASK_ipc_mbx3_intr_msk             :  1;\
            UNSG32 uIPC_INT_MASK_ipc_lock_intr_msk             :  1;\
            UNSG32 RSVDx4_b5                                   : 27;\
          }
    union { UNSG32 u32IPC_CSR_IPC_INT_MASK;
            struct w32IPC_CSR_IPC_INT_MASK;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IPC_CSR_IPC_MASK_INT_ipc_mbx0_msk_intr(r32) _BFGET_(r32, 0, 0)
    #define   SET32IPC_CSR_IPC_MASK_INT_ipc_mbx0_msk_intr(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16IPC_CSR_IPC_MASK_INT_ipc_mbx0_msk_intr(r16) _BFGET_(r16, 0, 0)
    #define   SET16IPC_CSR_IPC_MASK_INT_ipc_mbx0_msk_intr(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32IPC_CSR_IPC_MASK_INT_ipc_mbx1_msk_intr(r32) _BFGET_(r32, 1, 1)
    #define   SET32IPC_CSR_IPC_MASK_INT_ipc_mbx1_msk_intr(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16IPC_CSR_IPC_MASK_INT_ipc_mbx1_msk_intr(r16) _BFGET_(r16, 1, 1)
    #define   SET16IPC_CSR_IPC_MASK_INT_ipc_mbx1_msk_intr(r16,v) _BFSET_(r16, 1, 1,v)

    #define   GET32IPC_CSR_IPC_MASK_INT_ipc_mbx2_msk_intr(r32) _BFGET_(r32, 2, 2)
    #define   SET32IPC_CSR_IPC_MASK_INT_ipc_mbx2_msk_intr(r32,v) _BFSET_(r32, 2, 2,v)
    #define   GET16IPC_CSR_IPC_MASK_INT_ipc_mbx2_msk_intr(r16) _BFGET_(r16, 2, 2)
    #define   SET16IPC_CSR_IPC_MASK_INT_ipc_mbx2_msk_intr(r16,v) _BFSET_(r16, 2, 2,v)

    #define   GET32IPC_CSR_IPC_MASK_INT_ipc_mbx3_msk_intr(r32) _BFGET_(r32, 3, 3)
    #define   SET32IPC_CSR_IPC_MASK_INT_ipc_mbx3_msk_intr(r32,v) _BFSET_(r32, 3, 3,v)
    #define   GET16IPC_CSR_IPC_MASK_INT_ipc_mbx3_msk_intr(r16) _BFGET_(r16, 3, 3)
    #define   SET16IPC_CSR_IPC_MASK_INT_ipc_mbx3_msk_intr(r16,v) _BFSET_(r16, 3, 3,v)

    #define   GET32IPC_CSR_IPC_MASK_INT_ipc_lock_msk_intr(r32) _BFGET_(r32, 4, 4)
    #define   SET32IPC_CSR_IPC_MASK_INT_ipc_lock_msk_intr(r32,v) _BFSET_(r32, 4, 4,v)
    #define   GET16IPC_CSR_IPC_MASK_INT_ipc_lock_msk_intr(r16) _BFGET_(r16, 4, 4)
    #define   SET16IPC_CSR_IPC_MASK_INT_ipc_lock_msk_intr(r16,v) _BFSET_(r16, 4, 4,v)

    #define     w32IPC_CSR_IPC_MASK_INT                        {\
            UNSG32 uIPC_MASK_INT_ipc_mbx0_msk_intr             :  1;\
            UNSG32 uIPC_MASK_INT_ipc_mbx1_msk_intr             :  1;\
            UNSG32 uIPC_MASK_INT_ipc_mbx2_msk_intr             :  1;\
            UNSG32 uIPC_MASK_INT_ipc_mbx3_msk_intr             :  1;\
            UNSG32 uIPC_MASK_INT_ipc_lock_msk_intr             :  1;\
            UNSG32 RSVDx8_b5                                   : 27;\
          }
    union { UNSG32 u32IPC_CSR_IPC_MASK_INT;
            struct w32IPC_CSR_IPC_MASK_INT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IPC_CSR_IPC_LOCK_INT_ENABLE_ipc_lock_intr_en(r32) _BFGET_(r32,31, 0)
    #define   SET32IPC_CSR_IPC_LOCK_INT_ENABLE_ipc_lock_intr_en(r32,v) _BFSET_(r32,31, 0,v)

    #define     w32IPC_CSR_IPC_LOCK_INT_ENABLE                 {\
            UNSG32 uIPC_LOCK_INT_ENABLE_ipc_lock_intr_en       : 32;\
          }
    union { UNSG32 u32IPC_CSR_IPC_LOCK_INT_ENABLE;
            struct w32IPC_CSR_IPC_LOCK_INT_ENABLE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IPC_CSR_IPC_LOCK_STATUS_ipc_lock_status(r32) _BFGET_(r32,31, 0)
    #define   SET32IPC_CSR_IPC_LOCK_STATUS_ipc_lock_status(r32,v) _BFSET_(r32,31, 0,v)

    #define     w32IPC_CSR_IPC_LOCK_STATUS                     {\
            UNSG32 uIPC_LOCK_STATUS_ipc_lock_status            : 32;\
          }
    union { UNSG32 u32IPC_CSR_IPC_LOCK_STATUS;
            struct w32IPC_CSR_IPC_LOCK_STATUS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IPC_CSR_IPC_LOCK_SET_ipc_lock_set(r32)      _BFGET_(r32,31, 0)
    #define   SET32IPC_CSR_IPC_LOCK_SET_ipc_lock_set(r32,v)    _BFSET_(r32,31, 0,v)

    #define     w32IPC_CSR_IPC_LOCK_SET                        {\
            UNSG32 uIPC_LOCK_SET_ipc_lock_set                  : 32;\
          }
    union { UNSG32 u32IPC_CSR_IPC_LOCK_SET;
            struct w32IPC_CSR_IPC_LOCK_SET;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IPC_CSR_IPC_LOCK_CLR_ipc_lock_clr(r32)      _BFGET_(r32,31, 0)
    #define   SET32IPC_CSR_IPC_LOCK_CLR_ipc_lock_clr(r32,v)    _BFSET_(r32,31, 0,v)

    #define     w32IPC_CSR_IPC_LOCK_CLR                        {\
            UNSG32 uIPC_LOCK_CLR_ipc_lock_clr                  : 32;\
          }
    union { UNSG32 u32IPC_CSR_IPC_LOCK_CLR;
            struct w32IPC_CSR_IPC_LOCK_CLR;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_write_intr_en(r32) _BFGET_(r32, 0, 0)
    #define   SET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_write_intr_en(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_write_intr_en(r16) _BFGET_(r16, 0, 0)
    #define   SET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_write_intr_en(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_write_intr_en(r32) _BFGET_(r32, 1, 1)
    #define   SET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_write_intr_en(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_write_intr_en(r16) _BFGET_(r16, 1, 1)
    #define   SET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_write_intr_en(r16,v) _BFSET_(r16, 1, 1,v)

    #define   GET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_write_intr_en(r32) _BFGET_(r32, 2, 2)
    #define   SET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_write_intr_en(r32,v) _BFSET_(r32, 2, 2,v)
    #define   GET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_write_intr_en(r16) _BFGET_(r16, 2, 2)
    #define   SET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_write_intr_en(r16,v) _BFSET_(r16, 2, 2,v)

    #define   GET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_write_intr_en(r32) _BFGET_(r32, 3, 3)
    #define   SET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_write_intr_en(r32,v) _BFSET_(r32, 3, 3,v)
    #define   GET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_write_intr_en(r16) _BFGET_(r16, 3, 3)
    #define   SET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_write_intr_en(r16,v) _BFSET_(r16, 3, 3,v)

    #define   GET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_chg_intr_en(r32) _BFGET_(r32, 4, 4)
    #define   SET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_chg_intr_en(r32,v) _BFSET_(r32, 4, 4,v)
    #define   GET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_chg_intr_en(r16) _BFGET_(r16, 4, 4)
    #define   SET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx0_chg_intr_en(r16,v) _BFSET_(r16, 4, 4,v)

    #define   GET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_chg_intr_en(r32) _BFGET_(r32, 5, 5)
    #define   SET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_chg_intr_en(r32,v) _BFSET_(r32, 5, 5,v)
    #define   GET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_chg_intr_en(r16) _BFGET_(r16, 5, 5)
    #define   SET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx1_chg_intr_en(r16,v) _BFSET_(r16, 5, 5,v)

    #define   GET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_chg_intr_en(r32) _BFGET_(r32, 6, 6)
    #define   SET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_chg_intr_en(r32,v) _BFSET_(r32, 6, 6,v)
    #define   GET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_chg_intr_en(r16) _BFGET_(r16, 6, 6)
    #define   SET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx2_chg_intr_en(r16,v) _BFSET_(r16, 6, 6,v)

    #define   GET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_chg_intr_en(r32) _BFGET_(r32, 7, 7)
    #define   SET32IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_chg_intr_en(r32,v) _BFSET_(r32, 7, 7,v)
    #define   GET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_chg_intr_en(r16) _BFGET_(r16, 7, 7)
    #define   SET16IPC_CSR_IPC_MBX_INT_ENABLE_ipc_mbx3_chg_intr_en(r16,v) _BFSET_(r16, 7, 7,v)

    #define     w32IPC_CSR_IPC_MBX_INT_ENABLE                  {\
            UNSG32 uIPC_MBX_INT_ENABLE_ipc_mbx0_write_intr_en  :  1;\
            UNSG32 uIPC_MBX_INT_ENABLE_ipc_mbx1_write_intr_en  :  1;\
            UNSG32 uIPC_MBX_INT_ENABLE_ipc_mbx2_write_intr_en  :  1;\
            UNSG32 uIPC_MBX_INT_ENABLE_ipc_mbx3_write_intr_en  :  1;\
            UNSG32 uIPC_MBX_INT_ENABLE_ipc_mbx0_chg_intr_en    :  1;\
            UNSG32 uIPC_MBX_INT_ENABLE_ipc_mbx1_chg_intr_en    :  1;\
            UNSG32 uIPC_MBX_INT_ENABLE_ipc_mbx2_chg_intr_en    :  1;\
            UNSG32 uIPC_MBX_INT_ENABLE_ipc_mbx3_chg_intr_en    :  1;\
            UNSG32 RSVDx1C_b8                                  : 24;\
          }
    union { UNSG32 u32IPC_CSR_IPC_MBX_INT_ENABLE;
            struct w32IPC_CSR_IPC_MBX_INT_ENABLE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IPC_CSR_IPC_MBX0_ipc_mbx0(r32)              _BFGET_(r32,31, 0)
    #define   SET32IPC_CSR_IPC_MBX0_ipc_mbx0(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32IPC_CSR_IPC_MBX0                            {\
            UNSG32 uIPC_MBX0_ipc_mbx0                          : 32;\
          }
    union { UNSG32 u32IPC_CSR_IPC_MBX0;
            struct w32IPC_CSR_IPC_MBX0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IPC_CSR_IPC_MBX1_ipc_mbx1(r32)              _BFGET_(r32,31, 0)
    #define   SET32IPC_CSR_IPC_MBX1_ipc_mbx1(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32IPC_CSR_IPC_MBX1                            {\
            UNSG32 uIPC_MBX1_ipc_mbx1                          : 32;\
          }
    union { UNSG32 u32IPC_CSR_IPC_MBX1;
            struct w32IPC_CSR_IPC_MBX1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IPC_CSR_IPC_MBX2_ipc_mbx2(r32)              _BFGET_(r32,31, 0)
    #define   SET32IPC_CSR_IPC_MBX2_ipc_mbx2(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32IPC_CSR_IPC_MBX2                            {\
            UNSG32 uIPC_MBX2_ipc_mbx2                          : 32;\
          }
    union { UNSG32 u32IPC_CSR_IPC_MBX2;
            struct w32IPC_CSR_IPC_MBX2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32IPC_CSR_IPC_MBX3_ipc_mbx3(r32)              _BFGET_(r32,31, 0)
    #define   SET32IPC_CSR_IPC_MBX3_ipc_mbx3(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32IPC_CSR_IPC_MBX3                            {\
            UNSG32 uIPC_MBX3_ipc_mbx3                          : 32;\
          }
    union { UNSG32 u32IPC_CSR_IPC_MBX3;
            struct w32IPC_CSR_IPC_MBX3;
          };
    ///////////////////////////////////////////////////////////
    } SIE_IPC_CSR;

    typedef union  T32IPC_CSR_IPC_INT_STATUS
          { UNSG32 u32;
            struct w32IPC_CSR_IPC_INT_STATUS;
                 } T32IPC_CSR_IPC_INT_STATUS;
    typedef union  T32IPC_CSR_IPC_INT_MASK
          { UNSG32 u32;
            struct w32IPC_CSR_IPC_INT_MASK;
                 } T32IPC_CSR_IPC_INT_MASK;
    typedef union  T32IPC_CSR_IPC_MASK_INT
          { UNSG32 u32;
            struct w32IPC_CSR_IPC_MASK_INT;
                 } T32IPC_CSR_IPC_MASK_INT;
    typedef union  T32IPC_CSR_IPC_LOCK_INT_ENABLE
          { UNSG32 u32;
            struct w32IPC_CSR_IPC_LOCK_INT_ENABLE;
                 } T32IPC_CSR_IPC_LOCK_INT_ENABLE;
    typedef union  T32IPC_CSR_IPC_LOCK_STATUS
          { UNSG32 u32;
            struct w32IPC_CSR_IPC_LOCK_STATUS;
                 } T32IPC_CSR_IPC_LOCK_STATUS;
    typedef union  T32IPC_CSR_IPC_LOCK_SET
          { UNSG32 u32;
            struct w32IPC_CSR_IPC_LOCK_SET;
                 } T32IPC_CSR_IPC_LOCK_SET;
    typedef union  T32IPC_CSR_IPC_LOCK_CLR
          { UNSG32 u32;
            struct w32IPC_CSR_IPC_LOCK_CLR;
                 } T32IPC_CSR_IPC_LOCK_CLR;
    typedef union  T32IPC_CSR_IPC_MBX_INT_ENABLE
          { UNSG32 u32;
            struct w32IPC_CSR_IPC_MBX_INT_ENABLE;
                 } T32IPC_CSR_IPC_MBX_INT_ENABLE;
    typedef union  T32IPC_CSR_IPC_MBX0
          { UNSG32 u32;
            struct w32IPC_CSR_IPC_MBX0;
                 } T32IPC_CSR_IPC_MBX0;
    typedef union  T32IPC_CSR_IPC_MBX1
          { UNSG32 u32;
            struct w32IPC_CSR_IPC_MBX1;
                 } T32IPC_CSR_IPC_MBX1;
    typedef union  T32IPC_CSR_IPC_MBX2
          { UNSG32 u32;
            struct w32IPC_CSR_IPC_MBX2;
                 } T32IPC_CSR_IPC_MBX2;
    typedef union  T32IPC_CSR_IPC_MBX3
          { UNSG32 u32;
            struct w32IPC_CSR_IPC_MBX3;
                 } T32IPC_CSR_IPC_MBX3;
    ///////////////////////////////////////////////////////////

    typedef union  TIPC_CSR_IPC_INT_STATUS
          { UNSG32 u32[1];
            struct {
            struct w32IPC_CSR_IPC_INT_STATUS;
                   };
                 } TIPC_CSR_IPC_INT_STATUS;
    typedef union  TIPC_CSR_IPC_INT_MASK
          { UNSG32 u32[1];
            struct {
            struct w32IPC_CSR_IPC_INT_MASK;
                   };
                 } TIPC_CSR_IPC_INT_MASK;
    typedef union  TIPC_CSR_IPC_MASK_INT
          { UNSG32 u32[1];
            struct {
            struct w32IPC_CSR_IPC_MASK_INT;
                   };
                 } TIPC_CSR_IPC_MASK_INT;
    typedef union  TIPC_CSR_IPC_LOCK_INT_ENABLE
          { UNSG32 u32[1];
            struct {
            struct w32IPC_CSR_IPC_LOCK_INT_ENABLE;
                   };
                 } TIPC_CSR_IPC_LOCK_INT_ENABLE;
    typedef union  TIPC_CSR_IPC_LOCK_STATUS
          { UNSG32 u32[1];
            struct {
            struct w32IPC_CSR_IPC_LOCK_STATUS;
                   };
                 } TIPC_CSR_IPC_LOCK_STATUS;
    typedef union  TIPC_CSR_IPC_LOCK_SET
          { UNSG32 u32[1];
            struct {
            struct w32IPC_CSR_IPC_LOCK_SET;
                   };
                 } TIPC_CSR_IPC_LOCK_SET;
    typedef union  TIPC_CSR_IPC_LOCK_CLR
          { UNSG32 u32[1];
            struct {
            struct w32IPC_CSR_IPC_LOCK_CLR;
                   };
                 } TIPC_CSR_IPC_LOCK_CLR;
    typedef union  TIPC_CSR_IPC_MBX_INT_ENABLE
          { UNSG32 u32[1];
            struct {
            struct w32IPC_CSR_IPC_MBX_INT_ENABLE;
                   };
                 } TIPC_CSR_IPC_MBX_INT_ENABLE;
    typedef union  TIPC_CSR_IPC_MBX0
          { UNSG32 u32[1];
            struct {
            struct w32IPC_CSR_IPC_MBX0;
                   };
                 } TIPC_CSR_IPC_MBX0;
    typedef union  TIPC_CSR_IPC_MBX1
          { UNSG32 u32[1];
            struct {
            struct w32IPC_CSR_IPC_MBX1;
                   };
                 } TIPC_CSR_IPC_MBX1;
    typedef union  TIPC_CSR_IPC_MBX2
          { UNSG32 u32[1];
            struct {
            struct w32IPC_CSR_IPC_MBX2;
                   };
                 } TIPC_CSR_IPC_MBX2;
    typedef union  TIPC_CSR_IPC_MBX3
          { UNSG32 u32[1];
            struct {
            struct w32IPC_CSR_IPC_MBX3;
                   };
                 } TIPC_CSR_IPC_MBX3;

    ///////////////////////////////////////////////////////////
     SIGN32 IPC_CSR_drvrd(SIE_IPC_CSR *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 IPC_CSR_drvwr(SIE_IPC_CSR *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void IPC_CSR_reset(SIE_IPC_CSR *p);
     SIGN32 IPC_CSR_cmp  (SIE_IPC_CSR *p, SIE_IPC_CSR *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define IPC_CSR_check(p,pie,pfx,hLOG) IPC_CSR_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define IPC_CSR_print(p,    pfx,hLOG) IPC_CSR_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: IPC_CSR
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE IPC                     biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 IPC_CSR_P0           
///               $IPC_CSR             IPC_CSR_P0        REG          
///                                    ###
///                                    * IPC for ACPU
///                                    ###
///     @ 0x00030                      (P)
///     # 0x00030 IPC_CSR_P1           
///               $IPC_CSR             IPC_CSR_P1        REG          
///                                    ###
///                                    * IPC for DSP (HiFi4)
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      96B, bits:     558b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_IPC
#define h_IPC (){}

    #define     RA_IPC_IPC_CSR_P0                              0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_IPC_IPC_CSR_P1                              0x0030
    ///////////////////////////////////////////////////////////

    typedef struct SIE_IPC {
    ///////////////////////////////////////////////////////////
              SIE_IPC_CSR                                      ie_IPC_CSR_P0;
    ///////////////////////////////////////////////////////////
              SIE_IPC_CSR                                      ie_IPC_CSR_P1;
    ///////////////////////////////////////////////////////////
    } SIE_IPC;

    ///////////////////////////////////////////////////////////
     SIGN32 IPC_drvrd(SIE_IPC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 IPC_drvwr(SIE_IPC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void IPC_reset(SIE_IPC *p);
     SIGN32 IPC_cmp  (SIE_IPC *p, SIE_IPC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define IPC_check(p,pie,pfx,hLOG) IPC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define IPC_print(p,    pfx,hLOG) IPC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: IPC
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: ipc.h
////////////////////////////////////////////////////////////

