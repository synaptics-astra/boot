//////
/// don't edit! auto-generated by docc: BC.h
////////////////////////////////////////////////////////////
#ifndef BC_h
#define BC_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
///
/// $INTERFACE OneReg                                   (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 OneReg               (RW)
///               %unsigned 8  Byte0                     0x0
///               %unsigned 8  Byte1                     0x0
///               %unsigned 8  Byte2                     0x0
///               %unsigned 8  Byte3                     0x0
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      32b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_OneReg
#define h_OneReg (){}

    #define     RA_OneReg_OneReg                               0x0000

    #define     BA_OneReg_OneReg_Byte0                         0x0000
    #define     B16OneReg_OneReg_Byte0                         0x0000
    #define   LSb32OneReg_OneReg_Byte0                            0
    #define   LSb16OneReg_OneReg_Byte0                            0
    #define       bOneReg_OneReg_Byte0                         8
    #define   MSK32OneReg_OneReg_Byte0                            0x000000FF

    #define     BA_OneReg_OneReg_Byte1                         0x0001
    #define     B16OneReg_OneReg_Byte1                         0x0000
    #define   LSb32OneReg_OneReg_Byte1                            8
    #define   LSb16OneReg_OneReg_Byte1                            8
    #define       bOneReg_OneReg_Byte1                         8
    #define   MSK32OneReg_OneReg_Byte1                            0x0000FF00

    #define     BA_OneReg_OneReg_Byte2                         0x0002
    #define     B16OneReg_OneReg_Byte2                         0x0002
    #define   LSb32OneReg_OneReg_Byte2                            16
    #define   LSb16OneReg_OneReg_Byte2                            0
    #define       bOneReg_OneReg_Byte2                         8
    #define   MSK32OneReg_OneReg_Byte2                            0x00FF0000

    #define     BA_OneReg_OneReg_Byte3                         0x0003
    #define     B16OneReg_OneReg_Byte3                         0x0002
    #define   LSb32OneReg_OneReg_Byte3                            24
    #define   LSb16OneReg_OneReg_Byte3                            8
    #define       bOneReg_OneReg_Byte3                         8
    #define   MSK32OneReg_OneReg_Byte3                            0xFF000000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_OneReg {
    ///////////////////////////////////////////////////////////
    #define   GET32OneReg_OneReg_Byte0(r32)                    _BFGET_(r32, 7, 0)
    #define   SET32OneReg_OneReg_Byte0(r32,v)                  _BFSET_(r32, 7, 0,v)
    #define   GET16OneReg_OneReg_Byte0(r16)                    _BFGET_(r16, 7, 0)
    #define   SET16OneReg_OneReg_Byte0(r16,v)                  _BFSET_(r16, 7, 0,v)

    #define   GET32OneReg_OneReg_Byte1(r32)                    _BFGET_(r32,15, 8)
    #define   SET32OneReg_OneReg_Byte1(r32,v)                  _BFSET_(r32,15, 8,v)
    #define   GET16OneReg_OneReg_Byte1(r16)                    _BFGET_(r16,15, 8)
    #define   SET16OneReg_OneReg_Byte1(r16,v)                  _BFSET_(r16,15, 8,v)

    #define   GET32OneReg_OneReg_Byte2(r32)                    _BFGET_(r32,23,16)
    #define   SET32OneReg_OneReg_Byte2(r32,v)                  _BFSET_(r32,23,16,v)
    #define   GET16OneReg_OneReg_Byte2(r16)                    _BFGET_(r16, 7, 0)
    #define   SET16OneReg_OneReg_Byte2(r16,v)                  _BFSET_(r16, 7, 0,v)

    #define   GET32OneReg_OneReg_Byte3(r32)                    _BFGET_(r32,31,24)
    #define   SET32OneReg_OneReg_Byte3(r32,v)                  _BFSET_(r32,31,24,v)
    #define   GET16OneReg_OneReg_Byte3(r16)                    _BFGET_(r16,15, 8)
    #define   SET16OneReg_OneReg_Byte3(r16,v)                  _BFSET_(r16,15, 8,v)

    #define     w32OneReg_OneReg                               {\
            UNSG32 uOneReg_Byte0                               :  8;\
            UNSG32 uOneReg_Byte1                               :  8;\
            UNSG32 uOneReg_Byte2                               :  8;\
            UNSG32 uOneReg_Byte3                               :  8;\
          }
    union { UNSG32 u32OneReg_OneReg;
            struct w32OneReg_OneReg;
          };
    ///////////////////////////////////////////////////////////
    } SIE_OneReg;

    typedef union  T32OneReg_OneReg
          { UNSG32 u32;
            struct w32OneReg_OneReg;
                 } T32OneReg_OneReg;
    ///////////////////////////////////////////////////////////

    typedef union  TOneReg_OneReg
          { UNSG32 u32[1];
            struct {
            struct w32OneReg_OneReg;
                   };
                 } TOneReg_OneReg;

    ///////////////////////////////////////////////////////////
     SIGN32 OneReg_drvrd(SIE_OneReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 OneReg_drvwr(SIE_OneReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void OneReg_reset(SIE_OneReg *p);
     SIGN32 OneReg_cmp  (SIE_OneReg *p, SIE_OneReg *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define OneReg_check(p,pie,pfx,hLOG) OneReg_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define OneReg_print(p,    pfx,hLOG) OneReg_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: OneReg
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE OneReg_RO                                (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 OneReg_RO            (R-)
///               %unsigned 8  Byte0                     0x0
///               %unsigned 8  Byte1                     0x0
///               %unsigned 8  Byte2                     0x0
///               %unsigned 8  Byte3                     0x0
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      32b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_OneReg_RO
#define h_OneReg_RO (){}

    #define     RA_OneReg_RO_OneReg_RO                         0x0000

    #define     BA_OneReg_RO_OneReg_RO_Byte0                   0x0000
    #define     B16OneReg_RO_OneReg_RO_Byte0                   0x0000
    #define   LSb32OneReg_RO_OneReg_RO_Byte0                      0
    #define   LSb16OneReg_RO_OneReg_RO_Byte0                      0
    #define       bOneReg_RO_OneReg_RO_Byte0                   8
    #define   MSK32OneReg_RO_OneReg_RO_Byte0                      0x000000FF

    #define     BA_OneReg_RO_OneReg_RO_Byte1                   0x0001
    #define     B16OneReg_RO_OneReg_RO_Byte1                   0x0000
    #define   LSb32OneReg_RO_OneReg_RO_Byte1                      8
    #define   LSb16OneReg_RO_OneReg_RO_Byte1                      8
    #define       bOneReg_RO_OneReg_RO_Byte1                   8
    #define   MSK32OneReg_RO_OneReg_RO_Byte1                      0x0000FF00

    #define     BA_OneReg_RO_OneReg_RO_Byte2                   0x0002
    #define     B16OneReg_RO_OneReg_RO_Byte2                   0x0002
    #define   LSb32OneReg_RO_OneReg_RO_Byte2                      16
    #define   LSb16OneReg_RO_OneReg_RO_Byte2                      0
    #define       bOneReg_RO_OneReg_RO_Byte2                   8
    #define   MSK32OneReg_RO_OneReg_RO_Byte2                      0x00FF0000

    #define     BA_OneReg_RO_OneReg_RO_Byte3                   0x0003
    #define     B16OneReg_RO_OneReg_RO_Byte3                   0x0002
    #define   LSb32OneReg_RO_OneReg_RO_Byte3                      24
    #define   LSb16OneReg_RO_OneReg_RO_Byte3                      8
    #define       bOneReg_RO_OneReg_RO_Byte3                   8
    #define   MSK32OneReg_RO_OneReg_RO_Byte3                      0xFF000000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_OneReg_RO {
    ///////////////////////////////////////////////////////////
    #define   GET32OneReg_RO_OneReg_RO_Byte0(r32)              _BFGET_(r32, 7, 0)
    #define   SET32OneReg_RO_OneReg_RO_Byte0(r32,v)            _BFSET_(r32, 7, 0,v)
    #define   GET16OneReg_RO_OneReg_RO_Byte0(r16)              _BFGET_(r16, 7, 0)
    #define   SET16OneReg_RO_OneReg_RO_Byte0(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32OneReg_RO_OneReg_RO_Byte1(r32)              _BFGET_(r32,15, 8)
    #define   SET32OneReg_RO_OneReg_RO_Byte1(r32,v)            _BFSET_(r32,15, 8,v)
    #define   GET16OneReg_RO_OneReg_RO_Byte1(r16)              _BFGET_(r16,15, 8)
    #define   SET16OneReg_RO_OneReg_RO_Byte1(r16,v)            _BFSET_(r16,15, 8,v)

    #define   GET32OneReg_RO_OneReg_RO_Byte2(r32)              _BFGET_(r32,23,16)
    #define   SET32OneReg_RO_OneReg_RO_Byte2(r32,v)            _BFSET_(r32,23,16,v)
    #define   GET16OneReg_RO_OneReg_RO_Byte2(r16)              _BFGET_(r16, 7, 0)
    #define   SET16OneReg_RO_OneReg_RO_Byte2(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32OneReg_RO_OneReg_RO_Byte3(r32)              _BFGET_(r32,31,24)
    #define   SET32OneReg_RO_OneReg_RO_Byte3(r32,v)            _BFSET_(r32,31,24,v)
    #define   GET16OneReg_RO_OneReg_RO_Byte3(r16)              _BFGET_(r16,15, 8)
    #define   SET16OneReg_RO_OneReg_RO_Byte3(r16,v)            _BFSET_(r16,15, 8,v)

    #define     w32OneReg_RO_OneReg_RO                         {\
            UNSG32 uOneReg_RO_Byte0                            :  8;\
            UNSG32 uOneReg_RO_Byte1                            :  8;\
            UNSG32 uOneReg_RO_Byte2                            :  8;\
            UNSG32 uOneReg_RO_Byte3                            :  8;\
          }
    union { UNSG32 u32OneReg_RO_OneReg_RO;
            struct w32OneReg_RO_OneReg_RO;
          };
    ///////////////////////////////////////////////////////////
    } SIE_OneReg_RO;

    typedef union  T32OneReg_RO_OneReg_RO
          { UNSG32 u32;
            struct w32OneReg_RO_OneReg_RO;
                 } T32OneReg_RO_OneReg_RO;
    ///////////////////////////////////////////////////////////

    typedef union  TOneReg_RO_OneReg_RO
          { UNSG32 u32[1];
            struct {
            struct w32OneReg_RO_OneReg_RO;
                   };
                 } TOneReg_RO_OneReg_RO;

    ///////////////////////////////////////////////////////////
     SIGN32 OneReg_RO_drvrd(SIE_OneReg_RO *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 OneReg_RO_drvwr(SIE_OneReg_RO *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void OneReg_RO_reset(SIE_OneReg_RO *p);
     SIGN32 OneReg_RO_cmp  (SIE_OneReg_RO *p, SIE_OneReg_RO *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define OneReg_RO_check(p,pie,pfx,hLOG) OneReg_RO_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define OneReg_RO_print(p,    pfx,hLOG) OneReg_RO_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: OneReg_RO
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE BC_Descriptor                            (4,4)
///     ###
///     * Each chunk is 8byte minimal
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 Start_Addr           (P)
///               %unsigned 32 Start_Addr                0x0
///                                    ###
///                                    * Start address of a region
///                                    * 8byte aligned
///                                    ###
///     @ 0x00004 Length               (P)
///               %unsigned 32 Length                    0x0
///                                    ###
///                                    * Number of 64-bit data
///                                    ###
///     @ 0x00008 CRC                  (P)
///               %unsigned 32 CRC_LSB                   0x0
///                                    ###
///                                    * CRC
///                                    ###
///     # 0x0000C CRC1
///               %unsigned 32 CRC_MSB                   0x0
///                                    ###
///                                    * CRC
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:     128b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_BC_Descriptor
#define h_BC_Descriptor (){}

    #define     RA_BC_Descriptor_Start_Addr                    0x0000

    #define     BA_BC_Descriptor_Start_Addr_Start_Addr         0x0000
    #define     B16BC_Descriptor_Start_Addr_Start_Addr         0x0000
    #define   LSb32BC_Descriptor_Start_Addr_Start_Addr            0
    #define   LSb16BC_Descriptor_Start_Addr_Start_Addr            0
    #define       bBC_Descriptor_Start_Addr_Start_Addr         32
    #define   MSK32BC_Descriptor_Start_Addr_Start_Addr            0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_BC_Descriptor_Length                        0x0004

    #define     BA_BC_Descriptor_Length_Length                 0x0004
    #define     B16BC_Descriptor_Length_Length                 0x0004
    #define   LSb32BC_Descriptor_Length_Length                    0
    #define   LSb16BC_Descriptor_Length_Length                    0
    #define       bBC_Descriptor_Length_Length                 32
    #define   MSK32BC_Descriptor_Length_Length                    0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_BC_Descriptor_CRC                           0x0008

    #define     BA_BC_Descriptor_CRC_CRC_LSB                   0x0008
    #define     B16BC_Descriptor_CRC_CRC_LSB                   0x0008
    #define   LSb32BC_Descriptor_CRC_CRC_LSB                      0
    #define   LSb16BC_Descriptor_CRC_CRC_LSB                      0
    #define       bBC_Descriptor_CRC_CRC_LSB                   32
    #define   MSK32BC_Descriptor_CRC_CRC_LSB                      0xFFFFFFFF

    #define     RA_BC_Descriptor_CRC1                          0x000C

    #define     BA_BC_Descriptor_CRC_CRC_MSB                   0x000C
    #define     B16BC_Descriptor_CRC_CRC_MSB                   0x000C
    #define   LSb32BC_Descriptor_CRC_CRC_MSB                      0
    #define   LSb16BC_Descriptor_CRC_CRC_MSB                      0
    #define       bBC_Descriptor_CRC_CRC_MSB                   32
    #define   MSK32BC_Descriptor_CRC_CRC_MSB                      0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_BC_Descriptor {
    ///////////////////////////////////////////////////////////
    #define   GET32BC_Descriptor_Start_Addr_Start_Addr(r32)    _BFGET_(r32,31, 0)
    #define   SET32BC_Descriptor_Start_Addr_Start_Addr(r32,v)  _BFSET_(r32,31, 0,v)

    #define     w32BC_Descriptor_Start_Addr                    {\
            UNSG32 uStart_Addr_Start_Addr                      : 32;\
          }
    union { UNSG32 u32BC_Descriptor_Start_Addr;
            struct w32BC_Descriptor_Start_Addr;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32BC_Descriptor_Length_Length(r32)            _BFGET_(r32,31, 0)
    #define   SET32BC_Descriptor_Length_Length(r32,v)          _BFSET_(r32,31, 0,v)

    #define     w32BC_Descriptor_Length                        {\
            UNSG32 uLength_Length                              : 32;\
          }
    union { UNSG32 u32BC_Descriptor_Length;
            struct w32BC_Descriptor_Length;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32BC_Descriptor_CRC_CRC_LSB(r32)              _BFGET_(r32,31, 0)
    #define   SET32BC_Descriptor_CRC_CRC_LSB(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32BC_Descriptor_CRC                           {\
            UNSG32 uCRC_CRC_LSB                                : 32;\
          }
    union { UNSG32 u32BC_Descriptor_CRC;
            struct w32BC_Descriptor_CRC;
          };
    #define   GET32BC_Descriptor_CRC_CRC_MSB(r32)              _BFGET_(r32,31, 0)
    #define   SET32BC_Descriptor_CRC_CRC_MSB(r32,v)            _BFSET_(r32,31, 0,v)

    #define     w32BC_Descriptor_CRC1                          {\
            UNSG32 uCRC_CRC_MSB                                : 32;\
          }
    union { UNSG32 u32BC_Descriptor_CRC1;
            struct w32BC_Descriptor_CRC1;
          };
    ///////////////////////////////////////////////////////////
    } SIE_BC_Descriptor;

    typedef union  T32BC_Descriptor_Start_Addr
          { UNSG32 u32;
            struct w32BC_Descriptor_Start_Addr;
                 } T32BC_Descriptor_Start_Addr;
    typedef union  T32BC_Descriptor_Length
          { UNSG32 u32;
            struct w32BC_Descriptor_Length;
                 } T32BC_Descriptor_Length;
    typedef union  T32BC_Descriptor_CRC
          { UNSG32 u32;
            struct w32BC_Descriptor_CRC;
                 } T32BC_Descriptor_CRC;
    typedef union  T32BC_Descriptor_CRC1
          { UNSG32 u32;
            struct w32BC_Descriptor_CRC1;
                 } T32BC_Descriptor_CRC1;
    ///////////////////////////////////////////////////////////

    typedef union  TBC_Descriptor_Start_Addr
          { UNSG32 u32[1];
            struct {
            struct w32BC_Descriptor_Start_Addr;
                   };
                 } TBC_Descriptor_Start_Addr;
    typedef union  TBC_Descriptor_Length
          { UNSG32 u32[1];
            struct {
            struct w32BC_Descriptor_Length;
                   };
                 } TBC_Descriptor_Length;
    typedef union  TBC_Descriptor_CRC
          { UNSG32 u32[2];
            struct {
            struct w32BC_Descriptor_CRC;
            struct w32BC_Descriptor_CRC1;
                   };
                 } TBC_Descriptor_CRC;

    ///////////////////////////////////////////////////////////
     SIGN32 BC_Descriptor_drvrd(SIE_BC_Descriptor *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 BC_Descriptor_drvwr(SIE_BC_Descriptor *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void BC_Descriptor_reset(SIE_BC_Descriptor *p);
     SIGN32 BC_Descriptor_cmp  (SIE_BC_Descriptor *p, SIE_BC_Descriptor *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define BC_Descriptor_check(p,pie,pfx,hLOG) BC_Descriptor_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define BC_Descriptor_print(p,    pfx,hLOG) BC_Descriptor_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: BC_Descriptor
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE BC                      biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 BC_00                (P)
///     # 0x00000 BC_00
///               $BC_Descriptor       BC_00             REG
///     @ 0x00010 BC_01                (P)
///     # 0x00010 BC_01
///               $BC_Descriptor       BC_01             REG
///     @ 0x00020 BC_02                (P)
///     # 0x00020 BC_02
///               $BC_Descriptor       BC_02             REG
///     @ 0x00030 BC_03                (P)
///     # 0x00030 BC_03
///               $BC_Descriptor       BC_03             REG
///     @ 0x00040 BC_04                (P)
///     # 0x00040 BC_04
///               $BC_Descriptor       BC_04             REG
///     @ 0x00050 BC_05                (P)
///     # 0x00050 BC_05
///               $BC_Descriptor       BC_05             REG
///     @ 0x00060 BC_06                (P)
///     # 0x00060 BC_06
///               $BC_Descriptor       BC_06             REG
///     @ 0x00070 BC_07                (P)
///     # 0x00070 BC_07
///               $BC_Descriptor       BC_07             REG
///     @ 0x00080 BC_08                (P)
///     # 0x00080 BC_08
///               $BC_Descriptor       BC_08             REG
///     @ 0x00090 BC_09                (P)
///     # 0x00090 BC_09
///               $BC_Descriptor       BC_09             REG
///     @ 0x000A0 BC_10                (P)
///     # 0x000A0 BC_10
///               $BC_Descriptor       BC_10             REG
///     @ 0x000B0 BC_11                (P)
///     # 0x000B0 BC_11
///               $BC_Descriptor       BC_11             REG
///     @ 0x000C0 BC_12                (P)
///     # 0x000C0 BC_12
///               $BC_Descriptor       BC_12             REG
///     @ 0x000D0 BC_13                (P)
///     # 0x000D0 BC_13
///               $BC_Descriptor       BC_13             REG
///     @ 0x000E0 BC_14                (P)
///     # 0x000E0 BC_14
///               $BC_Descriptor       BC_14             REG
///     @ 0x000F0 BC_15                (P)
///     # 0x000F0 BC_15
///               $BC_Descriptor       BC_15             REG
///     @ 0x00100 Start                (RW)
///               %unsigned 16 Start                     0x0
///                                    ###
///                                    * Kick off the BC
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00104 Interrupt            (WOC-)
///               %unsigned 1  Status                    0x0
///                                    ###
///                                    * When all regions are done
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00108 Error_Status         (WOC-)
///               %unsigned 16 Error                     0x0
///                                    ###
///                                    * When command is done (all chunks are calculated, this field Indicate which region’s CRC is wrong
///                                    ###
///               %%        16         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     268B, bits:    2081b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_BC
#define h_BC (){}

    #define     RA_BC_BC_00                                    0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_BC_BC_01                                    0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_BC_BC_02                                    0x0020
    ///////////////////////////////////////////////////////////
    #define     RA_BC_BC_03                                    0x0030
    ///////////////////////////////////////////////////////////
    #define     RA_BC_BC_04                                    0x0040
    ///////////////////////////////////////////////////////////
    #define     RA_BC_BC_05                                    0x0050
    ///////////////////////////////////////////////////////////
    #define     RA_BC_BC_06                                    0x0060
    ///////////////////////////////////////////////////////////
    #define     RA_BC_BC_07                                    0x0070
    ///////////////////////////////////////////////////////////
    #define     RA_BC_BC_08                                    0x0080
    ///////////////////////////////////////////////////////////
    #define     RA_BC_BC_09                                    0x0090
    ///////////////////////////////////////////////////////////
    #define     RA_BC_BC_10                                    0x00A0
    ///////////////////////////////////////////////////////////
    #define     RA_BC_BC_11                                    0x00B0
    ///////////////////////////////////////////////////////////
    #define     RA_BC_BC_12                                    0x00C0
    ///////////////////////////////////////////////////////////
    #define     RA_BC_BC_13                                    0x00D0
    ///////////////////////////////////////////////////////////
    #define     RA_BC_BC_14                                    0x00E0
    ///////////////////////////////////////////////////////////
    #define     RA_BC_BC_15                                    0x00F0
    ///////////////////////////////////////////////////////////
    #define     RA_BC_Start                                    0x0100

    #define     BA_BC_Start_Start                              0x0100
    #define     B16BC_Start_Start                              0x0100
    #define   LSb32BC_Start_Start                                 0
    #define   LSb16BC_Start_Start                                 0
    #define       bBC_Start_Start                              16
    #define   MSK32BC_Start_Start                                 0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_BC_Interrupt                                0x0104

    #define     BA_BC_Interrupt_Status                         0x0104
    #define     B16BC_Interrupt_Status                         0x0104
    #define   LSb32BC_Interrupt_Status                            0
    #define   LSb16BC_Interrupt_Status                            0
    #define       bBC_Interrupt_Status                         1
    #define   MSK32BC_Interrupt_Status                            0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_BC_Error_Status                             0x0108

    #define     BA_BC_Error_Status_Error                       0x0108
    #define     B16BC_Error_Status_Error                       0x0108
    #define   LSb32BC_Error_Status_Error                          0
    #define   LSb16BC_Error_Status_Error                          0
    #define       bBC_Error_Status_Error                       16
    #define   MSK32BC_Error_Status_Error                          0x0000FFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_BC {
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_00;
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_01;
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_02;
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_03;
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_04;
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_05;
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_06;
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_07;
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_08;
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_09;
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_10;
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_11;
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_12;
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_13;
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_14;
    ///////////////////////////////////////////////////////////
              SIE_BC_Descriptor                                ie_BC_15;
    ///////////////////////////////////////////////////////////
    #define   GET32BC_Start_Start(r32)                         _BFGET_(r32,15, 0)
    #define   SET32BC_Start_Start(r32,v)                       _BFSET_(r32,15, 0,v)
    #define   GET16BC_Start_Start(r16)                         _BFGET_(r16,15, 0)
    #define   SET16BC_Start_Start(r16,v)                       _BFSET_(r16,15, 0,v)

    #define     w32BC_Start                                    {\
            UNSG32 uStart_Start                                : 16;\
            UNSG32 RSVDx100_b16                                : 16;\
          }
    union { UNSG32 u32BC_Start;
            struct w32BC_Start;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32BC_Interrupt_Status(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32BC_Interrupt_Status(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16BC_Interrupt_Status(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16BC_Interrupt_Status(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define     w32BC_Interrupt                                {\
            UNSG32 uInterrupt_Status                           :  1;\
            UNSG32 RSVDx104_b1                                 : 31;\
          }
    union { UNSG32 u32BC_Interrupt;
            struct w32BC_Interrupt;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32BC_Error_Status_Error(r32)                  _BFGET_(r32,15, 0)
    #define   SET32BC_Error_Status_Error(r32,v)                _BFSET_(r32,15, 0,v)
    #define   GET16BC_Error_Status_Error(r16)                  _BFGET_(r16,15, 0)
    #define   SET16BC_Error_Status_Error(r16,v)                _BFSET_(r16,15, 0,v)

    #define     w32BC_Error_Status                             {\
            UNSG32 uError_Status_Error                         : 16;\
            UNSG32 RSVDx108_b16                                : 16;\
          }
    union { UNSG32 u32BC_Error_Status;
            struct w32BC_Error_Status;
          };
    ///////////////////////////////////////////////////////////
    } SIE_BC;

    typedef union  T32BC_Start
          { UNSG32 u32;
            struct w32BC_Start;
                 } T32BC_Start;
    typedef union  T32BC_Interrupt
          { UNSG32 u32;
            struct w32BC_Interrupt;
                 } T32BC_Interrupt;
    typedef union  T32BC_Error_Status
          { UNSG32 u32;
            struct w32BC_Error_Status;
                 } T32BC_Error_Status;
    ///////////////////////////////////////////////////////////

    typedef union  TBC_Start
          { UNSG32 u32[1];
            struct {
            struct w32BC_Start;
                   };
                 } TBC_Start;
    typedef union  TBC_Interrupt
          { UNSG32 u32[1];
            struct {
            struct w32BC_Interrupt;
                   };
                 } TBC_Interrupt;
    typedef union  TBC_Error_Status
          { UNSG32 u32[1];
            struct {
            struct w32BC_Error_Status;
                   };
                 } TBC_Error_Status;

    ///////////////////////////////////////////////////////////
     SIGN32 BC_drvrd(SIE_BC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 BC_drvwr(SIE_BC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void BC_reset(SIE_BC *p);
     SIGN32 BC_cmp  (SIE_BC *p, SIE_BC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define BC_check(p,pie,pfx,hLOG) BC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define BC_print(p,    pfx,hLOG) BC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: BC
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: BC.h
////////////////////////////////////////////////////////////

