//////
/// don't edit! auto-generated by docc: adc.h
////////////////////////////////////////////////////////////
#ifndef adc_h
#define adc_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
///
/// $INTERFACE ADC                                      (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P-)
///               %unsigned 3  ADC_ENCTR                 0x0
///                                    ###
///                                    * ADC Test Modes
///                                    ###
///               %unsigned 3  ADC_SELIN                 0x0
///                                    ###
///                                    * ADC input selection
///                                    * 4'h0: ADC_IN[0]
///                                    * 4'h1: ADC_IN[1]
///                                    * 4'h2: ADC_IN[2]
///                                    * 4'h3: ADC_IN[3]
///                                    * 4'h4: ADC_IN[4]
///                                    * 4'h5: ADC_IN[5]
///                                    * 4'h6: ADC_IN[6]
///                                    * 4'h7: ADC_IN[7]
///                                    ###
///               %unsigned 1  ADC_EN                    0x0
///                                    ###
///                                    * ADC power control
///                                    * 0: ADC in power-down/stand-by mode
///                                    * 1: normal operation.
///                                    ###
///               %unsigned 1  ADC_SEL_VREF              0x0
///                                    ###
///                                    * Selects if internal reference voltage is used
///                                    * 0: Use external voltage reference. Not applicable for Dolphin. Program 0 to reduce leakage during ADC shut-down.
///                                    * 1: Use internal voltage reference. Normal operation.
///                                    * 0
///                                    ###
///               %unsigned 1  ADC_SELBG                 0x0
///                                    ###
///                                    * Enable internal bandgap voltage generator
///                                    * 0: internal band-gap is in power-down. Reduces leakage.
///                                    * 1: internal bandgap is active. Normal operation.
///                                    ###
///               %unsigned 1  ADC_SELDIFF               0x0
///                                    ###
///                                    * Select ADC input mode
///                                    * 0: single-ended input
///                                    * 1: differential inpu
///                                    ###
///               %unsigned 2  ADC_SELRES                0x3
///                                    ###
///                                    * Select ADC resolution
///                                    * 2'b00: 6-bit mode
///                                    * 2'b01: 8-bit mode
///                                    * 2'b10: 10-bit mode
///                                    * 2'b11: 12-bit mode
///                                    ###
///               %unsigned 1  ADC_START                 0x0
///                                    ###
///                                    * Start ADC digitalization process, write 1 to start ADC digitalization. This bit automatically clear after receiving ADC done signal
///                                    * 0: no effect
///                                    * 1: Start ADC digitalization, clear automatically.
///                                    ###
///               %unsigned 1  ADC_RESET                 0x1
///                                    ###
///                                    * ADC reset control input, active high.
///                                    * 1: the digital circuitry is held in reset .
///                                    * 0: the digital circuitry is enabled.
///                                    ###
///               %unsigned 1  ADC_CONT                  0x0
///                                    ###
///                                    * continuous mode vs. single-shot mode
///                                    * 0: ADC is in single-shot conversion operating mode.
///                                    * 1: ADC is in continuous conversion operating mode.
///                                    ###
///               %unsigned 5  ADC_DAT_LT                0x0
///                                    ###
///                                    * Delay interms of pclk after data ready at which the data is to be latched
///                                    ###
///               %unsigned 1  INT_EN                    0x0
///                                    ###
///                                    * ADC End of conversion interrupt enable
///                                    * 0: disable
///                                    * 1: enable
///                                    ###
///               %unsigned 1  OUT_OF_RANGE_INT_EN       0x1
///                                    ###
///                                    * ADC out of range interrupt enable
///                                    * 0: disable
///                                    * 1: enable
///                                    ###
///               %%        10         # Stuffing bits...
///     @ 0x00004 STATUS               (RW)
///               %unsigned 1  DATA_RDY                  0x0
///                                    ###
///                                    * ADC data ready, write 0 to clear interrupt, write 1 won't effect anything
///                                    * 0: no valid data
///                                    * 1: data ready to read
///                                    ###
///               %unsigned 1  ADC_TEST_FAIL             0x0
///                                    ###
///                                    * ADC Test result bit
///                                    * 1: ADC data is not in the valid window
///                                    ###
///               %unsigned 1  ADC_MAX_FAIL              0x0
///                                    ###
///                                    * 0: ADC_DATA <= ADC_DATA_MAX
///                                    * 1: ADC_DATA > ADC_DATA_MAX
///                                    ###
///               %unsigned 1  ADC_MIN_FAIL              0x0
///                                    ###
///                                    * 0: ADC_DATA >= ADC_DATA_MIN
///                                    * 1: ADC_DATA < ADC_DATA_MIN
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00008 DATA                 (R-)
///               %unsigned 12 ADC_DATA                  0x0
///                                    ###
///                                    * ADC sampled data
///                                    ###
///               %%        20         # Stuffing bits...
///     @ 0x0000C ADC_DATA_CHK_CTRL    (P-)
///               %unsigned 12 ADC_DATA_HIGH             0x0
///                                    ###
///                                    * ADC test data upper boundary
///                                    ###
///               %unsigned 12 ADC_DATA_LOW              0x0
///                                    ###
///                                    * ADC test data Lower boundary
///                                    ###
///               %%        8          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:      62b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ADC
#define h_ADC (){}

    #define     RA_ADC_CTRL                                    0x0000

    #define     BA_ADC_CTRL_ADC_ENCTR                          0x0000
    #define     B16ADC_CTRL_ADC_ENCTR                          0x0000
    #define   LSb32ADC_CTRL_ADC_ENCTR                             0
    #define   LSb16ADC_CTRL_ADC_ENCTR                             0
    #define       bADC_CTRL_ADC_ENCTR                          3
    #define   MSK32ADC_CTRL_ADC_ENCTR                             0x00000007

    #define     BA_ADC_CTRL_ADC_SELIN                          0x0000
    #define     B16ADC_CTRL_ADC_SELIN                          0x0000
    #define   LSb32ADC_CTRL_ADC_SELIN                             3
    #define   LSb16ADC_CTRL_ADC_SELIN                             3
    #define       bADC_CTRL_ADC_SELIN                          3
    #define   MSK32ADC_CTRL_ADC_SELIN                             0x00000038

    #define     BA_ADC_CTRL_ADC_EN                             0x0000
    #define     B16ADC_CTRL_ADC_EN                             0x0000
    #define   LSb32ADC_CTRL_ADC_EN                                6
    #define   LSb16ADC_CTRL_ADC_EN                                6
    #define       bADC_CTRL_ADC_EN                             1
    #define   MSK32ADC_CTRL_ADC_EN                                0x00000040

    #define     BA_ADC_CTRL_ADC_SEL_VREF                       0x0000
    #define     B16ADC_CTRL_ADC_SEL_VREF                       0x0000
    #define   LSb32ADC_CTRL_ADC_SEL_VREF                          7
    #define   LSb16ADC_CTRL_ADC_SEL_VREF                          7
    #define       bADC_CTRL_ADC_SEL_VREF                       1
    #define   MSK32ADC_CTRL_ADC_SEL_VREF                          0x00000080

    #define     BA_ADC_CTRL_ADC_SELBG                          0x0001
    #define     B16ADC_CTRL_ADC_SELBG                          0x0000
    #define   LSb32ADC_CTRL_ADC_SELBG                             8
    #define   LSb16ADC_CTRL_ADC_SELBG                             8
    #define       bADC_CTRL_ADC_SELBG                          1
    #define   MSK32ADC_CTRL_ADC_SELBG                             0x00000100

    #define     BA_ADC_CTRL_ADC_SELDIFF                        0x0001
    #define     B16ADC_CTRL_ADC_SELDIFF                        0x0000
    #define   LSb32ADC_CTRL_ADC_SELDIFF                           9
    #define   LSb16ADC_CTRL_ADC_SELDIFF                           9
    #define       bADC_CTRL_ADC_SELDIFF                        1
    #define   MSK32ADC_CTRL_ADC_SELDIFF                           0x00000200

    #define     BA_ADC_CTRL_ADC_SELRES                         0x0001
    #define     B16ADC_CTRL_ADC_SELRES                         0x0000
    #define   LSb32ADC_CTRL_ADC_SELRES                            10
    #define   LSb16ADC_CTRL_ADC_SELRES                            10
    #define       bADC_CTRL_ADC_SELRES                         2
    #define   MSK32ADC_CTRL_ADC_SELRES                            0x00000C00

    #define     BA_ADC_CTRL_ADC_START                          0x0001
    #define     B16ADC_CTRL_ADC_START                          0x0000
    #define   LSb32ADC_CTRL_ADC_START                             12
    #define   LSb16ADC_CTRL_ADC_START                             12
    #define       bADC_CTRL_ADC_START                          1
    #define   MSK32ADC_CTRL_ADC_START                             0x00001000

    #define     BA_ADC_CTRL_ADC_RESET                          0x0001
    #define     B16ADC_CTRL_ADC_RESET                          0x0000
    #define   LSb32ADC_CTRL_ADC_RESET                             13
    #define   LSb16ADC_CTRL_ADC_RESET                             13
    #define       bADC_CTRL_ADC_RESET                          1
    #define   MSK32ADC_CTRL_ADC_RESET                             0x00002000

    #define     BA_ADC_CTRL_ADC_CONT                           0x0001
    #define     B16ADC_CTRL_ADC_CONT                           0x0000
    #define   LSb32ADC_CTRL_ADC_CONT                              14
    #define   LSb16ADC_CTRL_ADC_CONT                              14
    #define       bADC_CTRL_ADC_CONT                           1
    #define   MSK32ADC_CTRL_ADC_CONT                              0x00004000

    #define     BA_ADC_CTRL_ADC_DAT_LT                         0x0001
    #define     B16ADC_CTRL_ADC_DAT_LT                         0x0000
    #define   LSb32ADC_CTRL_ADC_DAT_LT                            15
    #define   LSb16ADC_CTRL_ADC_DAT_LT                            15
    #define       bADC_CTRL_ADC_DAT_LT                         5
    #define   MSK32ADC_CTRL_ADC_DAT_LT                            0x000F8000

    #define     BA_ADC_CTRL_INT_EN                             0x0002
    #define     B16ADC_CTRL_INT_EN                             0x0002
    #define   LSb32ADC_CTRL_INT_EN                                20
    #define   LSb16ADC_CTRL_INT_EN                                4
    #define       bADC_CTRL_INT_EN                             1
    #define   MSK32ADC_CTRL_INT_EN                                0x00100000

    #define     BA_ADC_CTRL_OUT_OF_RANGE_INT_EN                0x0002
    #define     B16ADC_CTRL_OUT_OF_RANGE_INT_EN                0x0002
    #define   LSb32ADC_CTRL_OUT_OF_RANGE_INT_EN                   21
    #define   LSb16ADC_CTRL_OUT_OF_RANGE_INT_EN                   5
    #define       bADC_CTRL_OUT_OF_RANGE_INT_EN                1
    #define   MSK32ADC_CTRL_OUT_OF_RANGE_INT_EN                   0x00200000
    ///////////////////////////////////////////////////////////
    #define     RA_ADC_STATUS                                  0x0004

    #define     BA_ADC_STATUS_DATA_RDY                         0x0004
    #define     B16ADC_STATUS_DATA_RDY                         0x0004
    #define   LSb32ADC_STATUS_DATA_RDY                            0
    #define   LSb16ADC_STATUS_DATA_RDY                            0
    #define       bADC_STATUS_DATA_RDY                         1
    #define   MSK32ADC_STATUS_DATA_RDY                            0x00000001

    #define     BA_ADC_STATUS_ADC_TEST_FAIL                    0x0004
    #define     B16ADC_STATUS_ADC_TEST_FAIL                    0x0004
    #define   LSb32ADC_STATUS_ADC_TEST_FAIL                       1
    #define   LSb16ADC_STATUS_ADC_TEST_FAIL                       1
    #define       bADC_STATUS_ADC_TEST_FAIL                    1
    #define   MSK32ADC_STATUS_ADC_TEST_FAIL                       0x00000002

    #define     BA_ADC_STATUS_ADC_MAX_FAIL                     0x0004
    #define     B16ADC_STATUS_ADC_MAX_FAIL                     0x0004
    #define   LSb32ADC_STATUS_ADC_MAX_FAIL                        2
    #define   LSb16ADC_STATUS_ADC_MAX_FAIL                        2
    #define       bADC_STATUS_ADC_MAX_FAIL                     1
    #define   MSK32ADC_STATUS_ADC_MAX_FAIL                        0x00000004

    #define     BA_ADC_STATUS_ADC_MIN_FAIL                     0x0004
    #define     B16ADC_STATUS_ADC_MIN_FAIL                     0x0004
    #define   LSb32ADC_STATUS_ADC_MIN_FAIL                        3
    #define   LSb16ADC_STATUS_ADC_MIN_FAIL                        3
    #define       bADC_STATUS_ADC_MIN_FAIL                     1
    #define   MSK32ADC_STATUS_ADC_MIN_FAIL                        0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_ADC_DATA                                    0x0008

    #define     BA_ADC_DATA_ADC_DATA                           0x0008
    #define     B16ADC_DATA_ADC_DATA                           0x0008
    #define   LSb32ADC_DATA_ADC_DATA                              0
    #define   LSb16ADC_DATA_ADC_DATA                              0
    #define       bADC_DATA_ADC_DATA                           12
    #define   MSK32ADC_DATA_ADC_DATA                              0x00000FFF
    ///////////////////////////////////////////////////////////
    #define     RA_ADC_ADC_DATA_CHK_CTRL                       0x000C

    #define     BA_ADC_ADC_DATA_CHK_CTRL_ADC_DATA_HIGH         0x000C
    #define     B16ADC_ADC_DATA_CHK_CTRL_ADC_DATA_HIGH         0x000C
    #define   LSb32ADC_ADC_DATA_CHK_CTRL_ADC_DATA_HIGH            0
    #define   LSb16ADC_ADC_DATA_CHK_CTRL_ADC_DATA_HIGH            0
    #define       bADC_ADC_DATA_CHK_CTRL_ADC_DATA_HIGH         12
    #define   MSK32ADC_ADC_DATA_CHK_CTRL_ADC_DATA_HIGH            0x00000FFF

    #define     BA_ADC_ADC_DATA_CHK_CTRL_ADC_DATA_LOW          0x000D
    #define     B16ADC_ADC_DATA_CHK_CTRL_ADC_DATA_LOW          0x000C
    #define   LSb32ADC_ADC_DATA_CHK_CTRL_ADC_DATA_LOW             12
    #define   LSb16ADC_ADC_DATA_CHK_CTRL_ADC_DATA_LOW             12
    #define       bADC_ADC_DATA_CHK_CTRL_ADC_DATA_LOW          12
    #define   MSK32ADC_ADC_DATA_CHK_CTRL_ADC_DATA_LOW             0x00FFF000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ADC {
    ///////////////////////////////////////////////////////////
    #define   GET32ADC_CTRL_ADC_ENCTR(r32)                     _BFGET_(r32, 2, 0)
    #define   SET32ADC_CTRL_ADC_ENCTR(r32,v)                   _BFSET_(r32, 2, 0,v)
    #define   GET16ADC_CTRL_ADC_ENCTR(r16)                     _BFGET_(r16, 2, 0)
    #define   SET16ADC_CTRL_ADC_ENCTR(r16,v)                   _BFSET_(r16, 2, 0,v)

    #define   GET32ADC_CTRL_ADC_SELIN(r32)                     _BFGET_(r32, 5, 3)
    #define   SET32ADC_CTRL_ADC_SELIN(r32,v)                   _BFSET_(r32, 5, 3,v)
    #define   GET16ADC_CTRL_ADC_SELIN(r16)                     _BFGET_(r16, 5, 3)
    #define   SET16ADC_CTRL_ADC_SELIN(r16,v)                   _BFSET_(r16, 5, 3,v)

    #define   GET32ADC_CTRL_ADC_EN(r32)                        _BFGET_(r32, 6, 6)
    #define   SET32ADC_CTRL_ADC_EN(r32,v)                      _BFSET_(r32, 6, 6,v)
    #define   GET16ADC_CTRL_ADC_EN(r16)                        _BFGET_(r16, 6, 6)
    #define   SET16ADC_CTRL_ADC_EN(r16,v)                      _BFSET_(r16, 6, 6,v)

    #define   GET32ADC_CTRL_ADC_SEL_VREF(r32)                  _BFGET_(r32, 7, 7)
    #define   SET32ADC_CTRL_ADC_SEL_VREF(r32,v)                _BFSET_(r32, 7, 7,v)
    #define   GET16ADC_CTRL_ADC_SEL_VREF(r16)                  _BFGET_(r16, 7, 7)
    #define   SET16ADC_CTRL_ADC_SEL_VREF(r16,v)                _BFSET_(r16, 7, 7,v)

    #define   GET32ADC_CTRL_ADC_SELBG(r32)                     _BFGET_(r32, 8, 8)
    #define   SET32ADC_CTRL_ADC_SELBG(r32,v)                   _BFSET_(r32, 8, 8,v)
    #define   GET16ADC_CTRL_ADC_SELBG(r16)                     _BFGET_(r16, 8, 8)
    #define   SET16ADC_CTRL_ADC_SELBG(r16,v)                   _BFSET_(r16, 8, 8,v)

    #define   GET32ADC_CTRL_ADC_SELDIFF(r32)                   _BFGET_(r32, 9, 9)
    #define   SET32ADC_CTRL_ADC_SELDIFF(r32,v)                 _BFSET_(r32, 9, 9,v)
    #define   GET16ADC_CTRL_ADC_SELDIFF(r16)                   _BFGET_(r16, 9, 9)
    #define   SET16ADC_CTRL_ADC_SELDIFF(r16,v)                 _BFSET_(r16, 9, 9,v)

    #define   GET32ADC_CTRL_ADC_SELRES(r32)                    _BFGET_(r32,11,10)
    #define   SET32ADC_CTRL_ADC_SELRES(r32,v)                  _BFSET_(r32,11,10,v)
    #define   GET16ADC_CTRL_ADC_SELRES(r16)                    _BFGET_(r16,11,10)
    #define   SET16ADC_CTRL_ADC_SELRES(r16,v)                  _BFSET_(r16,11,10,v)

    #define   GET32ADC_CTRL_ADC_START(r32)                     _BFGET_(r32,12,12)
    #define   SET32ADC_CTRL_ADC_START(r32,v)                   _BFSET_(r32,12,12,v)
    #define   GET16ADC_CTRL_ADC_START(r16)                     _BFGET_(r16,12,12)
    #define   SET16ADC_CTRL_ADC_START(r16,v)                   _BFSET_(r16,12,12,v)

    #define   GET32ADC_CTRL_ADC_RESET(r32)                     _BFGET_(r32,13,13)
    #define   SET32ADC_CTRL_ADC_RESET(r32,v)                   _BFSET_(r32,13,13,v)
    #define   GET16ADC_CTRL_ADC_RESET(r16)                     _BFGET_(r16,13,13)
    #define   SET16ADC_CTRL_ADC_RESET(r16,v)                   _BFSET_(r16,13,13,v)

    #define   GET32ADC_CTRL_ADC_CONT(r32)                      _BFGET_(r32,14,14)
    #define   SET32ADC_CTRL_ADC_CONT(r32,v)                    _BFSET_(r32,14,14,v)
    #define   GET16ADC_CTRL_ADC_CONT(r16)                      _BFGET_(r16,14,14)
    #define   SET16ADC_CTRL_ADC_CONT(r16,v)                    _BFSET_(r16,14,14,v)

    #define   GET32ADC_CTRL_ADC_DAT_LT(r32)                    _BFGET_(r32,19,15)
    #define   SET32ADC_CTRL_ADC_DAT_LT(r32,v)                  _BFSET_(r32,19,15,v)

    #define   GET32ADC_CTRL_INT_EN(r32)                        _BFGET_(r32,20,20)
    #define   SET32ADC_CTRL_INT_EN(r32,v)                      _BFSET_(r32,20,20,v)
    #define   GET16ADC_CTRL_INT_EN(r16)                        _BFGET_(r16, 4, 4)
    #define   SET16ADC_CTRL_INT_EN(r16,v)                      _BFSET_(r16, 4, 4,v)

    #define   GET32ADC_CTRL_OUT_OF_RANGE_INT_EN(r32)           _BFGET_(r32,21,21)
    #define   SET32ADC_CTRL_OUT_OF_RANGE_INT_EN(r32,v)         _BFSET_(r32,21,21,v)
    #define   GET16ADC_CTRL_OUT_OF_RANGE_INT_EN(r16)           _BFGET_(r16, 5, 5)
    #define   SET16ADC_CTRL_OUT_OF_RANGE_INT_EN(r16,v)         _BFSET_(r16, 5, 5,v)

    #define     w32ADC_CTRL                                    {\
            UNSG32 uCTRL_ADC_ENCTR                             :  3;\
            UNSG32 uCTRL_ADC_SELIN                             :  3;\
            UNSG32 uCTRL_ADC_EN                                :  1;\
            UNSG32 uCTRL_ADC_SEL_VREF                          :  1;\
            UNSG32 uCTRL_ADC_SELBG                             :  1;\
            UNSG32 uCTRL_ADC_SELDIFF                           :  1;\
            UNSG32 uCTRL_ADC_SELRES                            :  2;\
            UNSG32 uCTRL_ADC_START                             :  1;\
            UNSG32 uCTRL_ADC_RESET                             :  1;\
            UNSG32 uCTRL_ADC_CONT                              :  1;\
            UNSG32 uCTRL_ADC_DAT_LT                            :  5;\
            UNSG32 uCTRL_INT_EN                                :  1;\
            UNSG32 uCTRL_OUT_OF_RANGE_INT_EN                   :  1;\
            UNSG32 RSVDx0_b22                                  : 10;\
          }
    union { UNSG32 u32ADC_CTRL;
            struct w32ADC_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADC_STATUS_DATA_RDY(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32ADC_STATUS_DATA_RDY(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16ADC_STATUS_DATA_RDY(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16ADC_STATUS_DATA_RDY(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32ADC_STATUS_ADC_TEST_FAIL(r32)               _BFGET_(r32, 1, 1)
    #define   SET32ADC_STATUS_ADC_TEST_FAIL(r32,v)             _BFSET_(r32, 1, 1,v)
    #define   GET16ADC_STATUS_ADC_TEST_FAIL(r16)               _BFGET_(r16, 1, 1)
    #define   SET16ADC_STATUS_ADC_TEST_FAIL(r16,v)             _BFSET_(r16, 1, 1,v)

    #define   GET32ADC_STATUS_ADC_MAX_FAIL(r32)                _BFGET_(r32, 2, 2)
    #define   SET32ADC_STATUS_ADC_MAX_FAIL(r32,v)              _BFSET_(r32, 2, 2,v)
    #define   GET16ADC_STATUS_ADC_MAX_FAIL(r16)                _BFGET_(r16, 2, 2)
    #define   SET16ADC_STATUS_ADC_MAX_FAIL(r16,v)              _BFSET_(r16, 2, 2,v)

    #define   GET32ADC_STATUS_ADC_MIN_FAIL(r32)                _BFGET_(r32, 3, 3)
    #define   SET32ADC_STATUS_ADC_MIN_FAIL(r32,v)              _BFSET_(r32, 3, 3,v)
    #define   GET16ADC_STATUS_ADC_MIN_FAIL(r16)                _BFGET_(r16, 3, 3)
    #define   SET16ADC_STATUS_ADC_MIN_FAIL(r16,v)              _BFSET_(r16, 3, 3,v)

    #define     w32ADC_STATUS                                  {\
            UNSG32 uSTATUS_DATA_RDY                            :  1;\
            UNSG32 uSTATUS_ADC_TEST_FAIL                       :  1;\
            UNSG32 uSTATUS_ADC_MAX_FAIL                        :  1;\
            UNSG32 uSTATUS_ADC_MIN_FAIL                        :  1;\
            UNSG32 RSVDx4_b4                                   : 28;\
          }
    union { UNSG32 u32ADC_STATUS;
            struct w32ADC_STATUS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADC_DATA_ADC_DATA(r32)                      _BFGET_(r32,11, 0)
    #define   SET32ADC_DATA_ADC_DATA(r32,v)                    _BFSET_(r32,11, 0,v)
    #define   GET16ADC_DATA_ADC_DATA(r16)                      _BFGET_(r16,11, 0)
    #define   SET16ADC_DATA_ADC_DATA(r16,v)                    _BFSET_(r16,11, 0,v)

    #define     w32ADC_DATA                                    {\
            UNSG32 uDATA_ADC_DATA                              : 12;\
            UNSG32 RSVDx8_b12                                  : 20;\
          }
    union { UNSG32 u32ADC_DATA;
            struct w32ADC_DATA;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADC_ADC_DATA_CHK_CTRL_ADC_DATA_HIGH(r32)    _BFGET_(r32,11, 0)
    #define   SET32ADC_ADC_DATA_CHK_CTRL_ADC_DATA_HIGH(r32,v)  _BFSET_(r32,11, 0,v)
    #define   GET16ADC_ADC_DATA_CHK_CTRL_ADC_DATA_HIGH(r16)    _BFGET_(r16,11, 0)
    #define   SET16ADC_ADC_DATA_CHK_CTRL_ADC_DATA_HIGH(r16,v)  _BFSET_(r16,11, 0,v)

    #define   GET32ADC_ADC_DATA_CHK_CTRL_ADC_DATA_LOW(r32)     _BFGET_(r32,23,12)
    #define   SET32ADC_ADC_DATA_CHK_CTRL_ADC_DATA_LOW(r32,v)   _BFSET_(r32,23,12,v)

    #define     w32ADC_ADC_DATA_CHK_CTRL                       {\
            UNSG32 uADC_DATA_CHK_CTRL_ADC_DATA_HIGH            : 12;\
            UNSG32 uADC_DATA_CHK_CTRL_ADC_DATA_LOW             : 12;\
            UNSG32 RSVDxC_b24                                  :  8;\
          }
    union { UNSG32 u32ADC_ADC_DATA_CHK_CTRL;
            struct w32ADC_ADC_DATA_CHK_CTRL;
          };
    ///////////////////////////////////////////////////////////
    } SIE_ADC;

    typedef union  T32ADC_CTRL
          { UNSG32 u32;
            struct w32ADC_CTRL;
                 } T32ADC_CTRL;
    typedef union  T32ADC_STATUS
          { UNSG32 u32;
            struct w32ADC_STATUS;
                 } T32ADC_STATUS;
    typedef union  T32ADC_DATA
          { UNSG32 u32;
            struct w32ADC_DATA;
                 } T32ADC_DATA;
    typedef union  T32ADC_ADC_DATA_CHK_CTRL
          { UNSG32 u32;
            struct w32ADC_ADC_DATA_CHK_CTRL;
                 } T32ADC_ADC_DATA_CHK_CTRL;
    ///////////////////////////////////////////////////////////

    typedef union  TADC_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32ADC_CTRL;
                   };
                 } TADC_CTRL;
    typedef union  TADC_STATUS
          { UNSG32 u32[1];
            struct {
            struct w32ADC_STATUS;
                   };
                 } TADC_STATUS;
    typedef union  TADC_DATA
          { UNSG32 u32[1];
            struct {
            struct w32ADC_DATA;
                   };
                 } TADC_DATA;
    typedef union  TADC_ADC_DATA_CHK_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32ADC_ADC_DATA_CHK_CTRL;
                   };
                 } TADC_ADC_DATA_CHK_CTRL;

    ///////////////////////////////////////////////////////////
     SIGN32 ADC_drvrd(SIE_ADC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ADC_drvwr(SIE_ADC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ADC_reset(SIE_ADC *p);
     SIGN32 ADC_cmp  (SIE_ADC *p, SIE_ADC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ADC_check(p,pie,pfx,hLOG) ADC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ADC_print(p,    pfx,hLOG) ADC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ADC
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: adc.h
////////////////////////////////////////////////////////////

