//////
/// don't edit! auto-generated by docc: fephy.h
////////////////////////////////////////////////////////////
#ifndef fephy_h
#define fephy_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
///
/// $INTERFACE FEPHY                                    (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P-)
///               %unsigned 1  EPHY_RST_N                0x0
///                                    ###
///                                    * Global Reset Low active, asynchronous, used to reset the whole circuit in normal mode
///                                    ###
///               %unsigned 1  EPHY_SHUTDOWN             0x1
///                                    ###
///                                    * Analog block shutdown 1'b1 : shutdown 1'b0 : power up
///                                    ###
///               %unsigned 2  EPHY_MODE                 0x0
///                                    ###
///                                    * Operation mode selection 2'b00 : normal mode 2'b01 : sim mode (Sunplus quick simulation mode) 2'b10 : AFE test mode 2'b11 : reserved
///                                    ###
///               %unsigned 2  EPHY_XMII_SEL             0x0
///                                    ###
///                                    * SMI and MII/RMII interface selection 2'b00 : internal SMI and MII 2'b01 : external SMI and MII 2'b10 : internal SMI and RMII 2'b11 : external SMI and RMII
///                                    ###
///               %unsigned 3  EPHY_CLKSEL               0x4
///                                    ###
///                                    * clock frequency 3'b100: EPHY_CLKIN 25MHz 3'b101: EPHY_CLKIN 27MHz 3'b110: EPHY_CLKIN 24MHz 3'b111: EPHY_CLKIN 50MHz others: reserved
///                                    ###
///               %unsigned 5  EPHY_ID                   0x0
///                                    ###
///                                    * PHY ID for MII/MDIO register PHY Address
///                                    ###
///               %unsigned 1  EPHY_LED_POL              0x0
///                                    ###
///                                    * LED polarity 1'b0 : high active 1'b1 : low active
///                                    ###
///               %unsigned 1  EPHY_BGS_3                0x0
///                                    ###
///                                    * Band Gap Selection Bit 3 EPHY_BGS_3,EPHY_BGS_2, EPHY_BGS_1,EPHY_BGS_0 are grouped to EPHY_BGS[3:0], EPHY_BGS is used to adjust DC voltage and should be trimmed during FT(final test) test. The trimming flow will be described in test plan document
///                                    ###
///               %unsigned 1  EPHY_BGS_2                0x0
///                                    ###
///                                    * Band Gap Selection Bit 3 EPHY_BGS_3,EPHY_BGS_2, EPHY_BGS_1,EPHY_BGS_0 are grouped to EPHY_BGS[3:0], EPHY_BGS is used to adjust DC voltage and should be trimmed during FT(final test) test. The trimming flow will be described in test plan document
///                                    ###
///               %unsigned 1  EPHY_BGS_1                0x0
///                                    ###
///                                    * Band Gap Selection Bit 3 EPHY_BGS_3,EPHY_BGS_2, EPHY_BGS_1,EPHY_BGS_0 are grouped to EPHY_BGS[3:0], EPHY_BGS is used to adjust DC voltage and should be trimmed during FT(final test) test. The trimming flow will be described in test plan document
///                                    ###
///               %unsigned 1  EPHY_BGS_0                0x0
///                                    ###
///                                    * Band Gap Selection Bit 3 EPHY_BGS_3,EPHY_BGS_2, EPHY_BGS_1,EPHY_BGS_0 are grouped to EPHY_BGS[3:0], EPHY_BGS is used to adjust DC voltage and should be trimmed during FT(final test) test. The trimming flow will be described in test plan document
///                                    ###
///               %unsigned 1  BIST_MODE                 0x0
///                                    ###
///                                    * BIST Test Mode Enable 1'b0 : disable 1'b1 : BIST test mode enable
///                                    ###
///               %unsigned 1  EPHY_AFE_CLKSRC_SEL       0x1
///               %unsigned 1  EPHY_AFE_RST_B            0x0
///               %%        10         # Stuffing bits...
///     @ 0x00004 FEPHY_BIST_STATUS    (R-)
///               %unsigned 1  BIST_FINISH_RMII2MII      0x0
///                                    ###
///                                    * BIST Test Finish for RMII2MII 1'b0 : not finish 1'b1 : finish
///                                    ###
///               %unsigned 1  BIST_FAIL_RMII2MII        0x0
///                                    ###
///                                    * BIST Test Fail for RMII2MII 1'b0 : pass if BIST_FINISH_RMII2MII is 1'b1 1'b1 : fail
///                                    ###
///               %unsigned 1  BIST_FINISH_MII2RMII      0x0
///                                    ###
///                                    * BIST Test Finish for MII2RMII 1'b0 : not finish 1'b1 : finish
///                                    ###
///               %unsigned 1  BIST_FAIL_MII2RMII        0x0
///                                    ###
///                                    * BIST Test Fail for MII2RMII 1'b0 : pass if BIST_FINISH_MII2RMII is 1'b1 1'b1 : fail
///                                    ###
///               %unsigned 1  BIST_FINISH_PLPIC         0x0
///                                    ###
///                                    * BIST Test Finish for PLPIC 1'b0 : not finish 1'b1 : finish
///                                    ###
///               %unsigned 1  BIST_FAIL_PLPIC           0x0
///                                    ###
///                                    * BIST Test Fail for PLPIC 1'b0 : pass if BIST_FINISH_PLPIC is 1'b1 1'b1 : fail
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x00008 FEPHY_ADCCLK_FREQCNTR_CNTL (P-)
///               %unsigned 1  FEPHY_ADCCLK_FREQCNTR_EN  0x0
///                                    ###
///                                    * ADCCLK Frequency counter enable. Writing one enables the counter. 0 clears the counter value.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0000C FEPHY_ADCCLK_FREQCNTR_VAL (R-)
///               %unsigned 20 FEPHY_ADCCLK_FREQCNTR_VAL 0x0
///                                    ###
///                                    * ADCCLK Frequency counter value.
///                                    ###
///               %%        12         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:      49b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_FEPHY
#define h_FEPHY (){}

    #define     RA_FEPHY_CTRL                                  0x0000

    #define     BA_FEPHY_CTRL_EPHY_RST_N                       0x0000
    #define     B16FEPHY_CTRL_EPHY_RST_N                       0x0000
    #define   LSb32FEPHY_CTRL_EPHY_RST_N                          0
    #define   LSb16FEPHY_CTRL_EPHY_RST_N                          0
    #define       bFEPHY_CTRL_EPHY_RST_N                       1
    #define   MSK32FEPHY_CTRL_EPHY_RST_N                          0x00000001

    #define     BA_FEPHY_CTRL_EPHY_SHUTDOWN                    0x0000
    #define     B16FEPHY_CTRL_EPHY_SHUTDOWN                    0x0000
    #define   LSb32FEPHY_CTRL_EPHY_SHUTDOWN                       1
    #define   LSb16FEPHY_CTRL_EPHY_SHUTDOWN                       1
    #define       bFEPHY_CTRL_EPHY_SHUTDOWN                    1
    #define   MSK32FEPHY_CTRL_EPHY_SHUTDOWN                       0x00000002

    #define     BA_FEPHY_CTRL_EPHY_MODE                        0x0000
    #define     B16FEPHY_CTRL_EPHY_MODE                        0x0000
    #define   LSb32FEPHY_CTRL_EPHY_MODE                           2
    #define   LSb16FEPHY_CTRL_EPHY_MODE                           2
    #define       bFEPHY_CTRL_EPHY_MODE                        2
    #define   MSK32FEPHY_CTRL_EPHY_MODE                           0x0000000C

    #define     BA_FEPHY_CTRL_EPHY_XMII_SEL                    0x0000
    #define     B16FEPHY_CTRL_EPHY_XMII_SEL                    0x0000
    #define   LSb32FEPHY_CTRL_EPHY_XMII_SEL                       4
    #define   LSb16FEPHY_CTRL_EPHY_XMII_SEL                       4
    #define       bFEPHY_CTRL_EPHY_XMII_SEL                    2
    #define   MSK32FEPHY_CTRL_EPHY_XMII_SEL                       0x00000030

    #define     BA_FEPHY_CTRL_EPHY_CLKSEL                      0x0000
    #define     B16FEPHY_CTRL_EPHY_CLKSEL                      0x0000
    #define   LSb32FEPHY_CTRL_EPHY_CLKSEL                         6
    #define   LSb16FEPHY_CTRL_EPHY_CLKSEL                         6
    #define       bFEPHY_CTRL_EPHY_CLKSEL                      3
    #define   MSK32FEPHY_CTRL_EPHY_CLKSEL                         0x000001C0

    #define     BA_FEPHY_CTRL_EPHY_ID                          0x0001
    #define     B16FEPHY_CTRL_EPHY_ID                          0x0000
    #define   LSb32FEPHY_CTRL_EPHY_ID                             9
    #define   LSb16FEPHY_CTRL_EPHY_ID                             9
    #define       bFEPHY_CTRL_EPHY_ID                          5
    #define   MSK32FEPHY_CTRL_EPHY_ID                             0x00003E00

    #define     BA_FEPHY_CTRL_EPHY_LED_POL                     0x0001
    #define     B16FEPHY_CTRL_EPHY_LED_POL                     0x0000
    #define   LSb32FEPHY_CTRL_EPHY_LED_POL                        14
    #define   LSb16FEPHY_CTRL_EPHY_LED_POL                        14
    #define       bFEPHY_CTRL_EPHY_LED_POL                     1
    #define   MSK32FEPHY_CTRL_EPHY_LED_POL                        0x00004000

    #define     BA_FEPHY_CTRL_EPHY_BGS_3                       0x0001
    #define     B16FEPHY_CTRL_EPHY_BGS_3                       0x0000
    #define   LSb32FEPHY_CTRL_EPHY_BGS_3                          15
    #define   LSb16FEPHY_CTRL_EPHY_BGS_3                          15
    #define       bFEPHY_CTRL_EPHY_BGS_3                       1
    #define   MSK32FEPHY_CTRL_EPHY_BGS_3                          0x00008000

    #define     BA_FEPHY_CTRL_EPHY_BGS_2                       0x0002
    #define     B16FEPHY_CTRL_EPHY_BGS_2                       0x0002
    #define   LSb32FEPHY_CTRL_EPHY_BGS_2                          16
    #define   LSb16FEPHY_CTRL_EPHY_BGS_2                          0
    #define       bFEPHY_CTRL_EPHY_BGS_2                       1
    #define   MSK32FEPHY_CTRL_EPHY_BGS_2                          0x00010000

    #define     BA_FEPHY_CTRL_EPHY_BGS_1                       0x0002
    #define     B16FEPHY_CTRL_EPHY_BGS_1                       0x0002
    #define   LSb32FEPHY_CTRL_EPHY_BGS_1                          17
    #define   LSb16FEPHY_CTRL_EPHY_BGS_1                          1
    #define       bFEPHY_CTRL_EPHY_BGS_1                       1
    #define   MSK32FEPHY_CTRL_EPHY_BGS_1                          0x00020000

    #define     BA_FEPHY_CTRL_EPHY_BGS_0                       0x0002
    #define     B16FEPHY_CTRL_EPHY_BGS_0                       0x0002
    #define   LSb32FEPHY_CTRL_EPHY_BGS_0                          18
    #define   LSb16FEPHY_CTRL_EPHY_BGS_0                          2
    #define       bFEPHY_CTRL_EPHY_BGS_0                       1
    #define   MSK32FEPHY_CTRL_EPHY_BGS_0                          0x00040000

    #define     BA_FEPHY_CTRL_BIST_MODE                        0x0002
    #define     B16FEPHY_CTRL_BIST_MODE                        0x0002
    #define   LSb32FEPHY_CTRL_BIST_MODE                           19
    #define   LSb16FEPHY_CTRL_BIST_MODE                           3
    #define       bFEPHY_CTRL_BIST_MODE                        1
    #define   MSK32FEPHY_CTRL_BIST_MODE                           0x00080000

    #define     BA_FEPHY_CTRL_EPHY_AFE_CLKSRC_SEL              0x0002
    #define     B16FEPHY_CTRL_EPHY_AFE_CLKSRC_SEL              0x0002
    #define   LSb32FEPHY_CTRL_EPHY_AFE_CLKSRC_SEL                 20
    #define   LSb16FEPHY_CTRL_EPHY_AFE_CLKSRC_SEL                 4
    #define       bFEPHY_CTRL_EPHY_AFE_CLKSRC_SEL              1
    #define   MSK32FEPHY_CTRL_EPHY_AFE_CLKSRC_SEL                 0x00100000

    #define     BA_FEPHY_CTRL_EPHY_AFE_RST_B                   0x0002
    #define     B16FEPHY_CTRL_EPHY_AFE_RST_B                   0x0002
    #define   LSb32FEPHY_CTRL_EPHY_AFE_RST_B                      21
    #define   LSb16FEPHY_CTRL_EPHY_AFE_RST_B                      5
    #define       bFEPHY_CTRL_EPHY_AFE_RST_B                   1
    #define   MSK32FEPHY_CTRL_EPHY_AFE_RST_B                      0x00200000
    ///////////////////////////////////////////////////////////
    #define     RA_FEPHY_FEPHY_BIST_STATUS                     0x0004

    #define     BA_FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_RMII2MII 0x0004
    #define     B16FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_RMII2MII 0x0004
    #define   LSb32FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_RMII2MII    0
    #define   LSb16FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_RMII2MII    0
    #define       bFEPHY_FEPHY_BIST_STATUS_BIST_FINISH_RMII2MII 1
    #define   MSK32FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_RMII2MII    0x00000001

    #define     BA_FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_RMII2MII  0x0004
    #define     B16FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_RMII2MII  0x0004
    #define   LSb32FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_RMII2MII     1
    #define   LSb16FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_RMII2MII     1
    #define       bFEPHY_FEPHY_BIST_STATUS_BIST_FAIL_RMII2MII  1
    #define   MSK32FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_RMII2MII     0x00000002

    #define     BA_FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_MII2RMII 0x0004
    #define     B16FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_MII2RMII 0x0004
    #define   LSb32FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_MII2RMII    2
    #define   LSb16FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_MII2RMII    2
    #define       bFEPHY_FEPHY_BIST_STATUS_BIST_FINISH_MII2RMII 1
    #define   MSK32FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_MII2RMII    0x00000004

    #define     BA_FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_MII2RMII  0x0004
    #define     B16FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_MII2RMII  0x0004
    #define   LSb32FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_MII2RMII     3
    #define   LSb16FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_MII2RMII     3
    #define       bFEPHY_FEPHY_BIST_STATUS_BIST_FAIL_MII2RMII  1
    #define   MSK32FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_MII2RMII     0x00000008

    #define     BA_FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_PLPIC   0x0004
    #define     B16FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_PLPIC   0x0004
    #define   LSb32FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_PLPIC      4
    #define   LSb16FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_PLPIC      4
    #define       bFEPHY_FEPHY_BIST_STATUS_BIST_FINISH_PLPIC   1
    #define   MSK32FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_PLPIC      0x00000010

    #define     BA_FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_PLPIC     0x0004
    #define     B16FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_PLPIC     0x0004
    #define   LSb32FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_PLPIC        5
    #define   LSb16FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_PLPIC        5
    #define       bFEPHY_FEPHY_BIST_STATUS_BIST_FAIL_PLPIC     1
    #define   MSK32FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_PLPIC        0x00000020
    ///////////////////////////////////////////////////////////
    #define     RA_FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL            0x0008

    #define     BA_FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL_FEPHY_ADCCLK_FREQCNTR_EN 0x0008
    #define     B16FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL_FEPHY_ADCCLK_FREQCNTR_EN 0x0008
    #define   LSb32FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL_FEPHY_ADCCLK_FREQCNTR_EN    0
    #define   LSb16FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL_FEPHY_ADCCLK_FREQCNTR_EN    0
    #define       bFEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL_FEPHY_ADCCLK_FREQCNTR_EN 1
    #define   MSK32FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL_FEPHY_ADCCLK_FREQCNTR_EN    0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_FEPHY_FEPHY_ADCCLK_FREQCNTR_VAL             0x000C

    #define     BA_FEPHY_FEPHY_ADCCLK_FREQCNTR_VAL_FEPHY_ADCCLK_FREQCNTR_VAL 0x000C
    #define     B16FEPHY_FEPHY_ADCCLK_FREQCNTR_VAL_FEPHY_ADCCLK_FREQCNTR_VAL 0x000C
    #define   LSb32FEPHY_FEPHY_ADCCLK_FREQCNTR_VAL_FEPHY_ADCCLK_FREQCNTR_VAL    0
    #define   LSb16FEPHY_FEPHY_ADCCLK_FREQCNTR_VAL_FEPHY_ADCCLK_FREQCNTR_VAL    0
    #define       bFEPHY_FEPHY_ADCCLK_FREQCNTR_VAL_FEPHY_ADCCLK_FREQCNTR_VAL 20
    #define   MSK32FEPHY_FEPHY_ADCCLK_FREQCNTR_VAL_FEPHY_ADCCLK_FREQCNTR_VAL    0x000FFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_FEPHY {
    ///////////////////////////////////////////////////////////
    #define   GET32FEPHY_CTRL_EPHY_RST_N(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32FEPHY_CTRL_EPHY_RST_N(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16FEPHY_CTRL_EPHY_RST_N(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16FEPHY_CTRL_EPHY_RST_N(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32FEPHY_CTRL_EPHY_SHUTDOWN(r32)               _BFGET_(r32, 1, 1)
    #define   SET32FEPHY_CTRL_EPHY_SHUTDOWN(r32,v)             _BFSET_(r32, 1, 1,v)
    #define   GET16FEPHY_CTRL_EPHY_SHUTDOWN(r16)               _BFGET_(r16, 1, 1)
    #define   SET16FEPHY_CTRL_EPHY_SHUTDOWN(r16,v)             _BFSET_(r16, 1, 1,v)

    #define   GET32FEPHY_CTRL_EPHY_MODE(r32)                   _BFGET_(r32, 3, 2)
    #define   SET32FEPHY_CTRL_EPHY_MODE(r32,v)                 _BFSET_(r32, 3, 2,v)
    #define   GET16FEPHY_CTRL_EPHY_MODE(r16)                   _BFGET_(r16, 3, 2)
    #define   SET16FEPHY_CTRL_EPHY_MODE(r16,v)                 _BFSET_(r16, 3, 2,v)

    #define   GET32FEPHY_CTRL_EPHY_XMII_SEL(r32)               _BFGET_(r32, 5, 4)
    #define   SET32FEPHY_CTRL_EPHY_XMII_SEL(r32,v)             _BFSET_(r32, 5, 4,v)
    #define   GET16FEPHY_CTRL_EPHY_XMII_SEL(r16)               _BFGET_(r16, 5, 4)
    #define   SET16FEPHY_CTRL_EPHY_XMII_SEL(r16,v)             _BFSET_(r16, 5, 4,v)

    #define   GET32FEPHY_CTRL_EPHY_CLKSEL(r32)                 _BFGET_(r32, 8, 6)
    #define   SET32FEPHY_CTRL_EPHY_CLKSEL(r32,v)               _BFSET_(r32, 8, 6,v)
    #define   GET16FEPHY_CTRL_EPHY_CLKSEL(r16)                 _BFGET_(r16, 8, 6)
    #define   SET16FEPHY_CTRL_EPHY_CLKSEL(r16,v)               _BFSET_(r16, 8, 6,v)

    #define   GET32FEPHY_CTRL_EPHY_ID(r32)                     _BFGET_(r32,13, 9)
    #define   SET32FEPHY_CTRL_EPHY_ID(r32,v)                   _BFSET_(r32,13, 9,v)
    #define   GET16FEPHY_CTRL_EPHY_ID(r16)                     _BFGET_(r16,13, 9)
    #define   SET16FEPHY_CTRL_EPHY_ID(r16,v)                   _BFSET_(r16,13, 9,v)

    #define   GET32FEPHY_CTRL_EPHY_LED_POL(r32)                _BFGET_(r32,14,14)
    #define   SET32FEPHY_CTRL_EPHY_LED_POL(r32,v)              _BFSET_(r32,14,14,v)
    #define   GET16FEPHY_CTRL_EPHY_LED_POL(r16)                _BFGET_(r16,14,14)
    #define   SET16FEPHY_CTRL_EPHY_LED_POL(r16,v)              _BFSET_(r16,14,14,v)

    #define   GET32FEPHY_CTRL_EPHY_BGS_3(r32)                  _BFGET_(r32,15,15)
    #define   SET32FEPHY_CTRL_EPHY_BGS_3(r32,v)                _BFSET_(r32,15,15,v)
    #define   GET16FEPHY_CTRL_EPHY_BGS_3(r16)                  _BFGET_(r16,15,15)
    #define   SET16FEPHY_CTRL_EPHY_BGS_3(r16,v)                _BFSET_(r16,15,15,v)

    #define   GET32FEPHY_CTRL_EPHY_BGS_2(r32)                  _BFGET_(r32,16,16)
    #define   SET32FEPHY_CTRL_EPHY_BGS_2(r32,v)                _BFSET_(r32,16,16,v)
    #define   GET16FEPHY_CTRL_EPHY_BGS_2(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16FEPHY_CTRL_EPHY_BGS_2(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32FEPHY_CTRL_EPHY_BGS_1(r32)                  _BFGET_(r32,17,17)
    #define   SET32FEPHY_CTRL_EPHY_BGS_1(r32,v)                _BFSET_(r32,17,17,v)
    #define   GET16FEPHY_CTRL_EPHY_BGS_1(r16)                  _BFGET_(r16, 1, 1)
    #define   SET16FEPHY_CTRL_EPHY_BGS_1(r16,v)                _BFSET_(r16, 1, 1,v)

    #define   GET32FEPHY_CTRL_EPHY_BGS_0(r32)                  _BFGET_(r32,18,18)
    #define   SET32FEPHY_CTRL_EPHY_BGS_0(r32,v)                _BFSET_(r32,18,18,v)
    #define   GET16FEPHY_CTRL_EPHY_BGS_0(r16)                  _BFGET_(r16, 2, 2)
    #define   SET16FEPHY_CTRL_EPHY_BGS_0(r16,v)                _BFSET_(r16, 2, 2,v)

    #define   GET32FEPHY_CTRL_BIST_MODE(r32)                   _BFGET_(r32,19,19)
    #define   SET32FEPHY_CTRL_BIST_MODE(r32,v)                 _BFSET_(r32,19,19,v)
    #define   GET16FEPHY_CTRL_BIST_MODE(r16)                   _BFGET_(r16, 3, 3)
    #define   SET16FEPHY_CTRL_BIST_MODE(r16,v)                 _BFSET_(r16, 3, 3,v)

    #define   GET32FEPHY_CTRL_EPHY_AFE_CLKSRC_SEL(r32)         _BFGET_(r32,20,20)
    #define   SET32FEPHY_CTRL_EPHY_AFE_CLKSRC_SEL(r32,v)       _BFSET_(r32,20,20,v)
    #define   GET16FEPHY_CTRL_EPHY_AFE_CLKSRC_SEL(r16)         _BFGET_(r16, 4, 4)
    #define   SET16FEPHY_CTRL_EPHY_AFE_CLKSRC_SEL(r16,v)       _BFSET_(r16, 4, 4,v)

    #define   GET32FEPHY_CTRL_EPHY_AFE_RST_B(r32)              _BFGET_(r32,21,21)
    #define   SET32FEPHY_CTRL_EPHY_AFE_RST_B(r32,v)            _BFSET_(r32,21,21,v)
    #define   GET16FEPHY_CTRL_EPHY_AFE_RST_B(r16)              _BFGET_(r16, 5, 5)
    #define   SET16FEPHY_CTRL_EPHY_AFE_RST_B(r16,v)            _BFSET_(r16, 5, 5,v)

    #define     w32FEPHY_CTRL                                  {\
            UNSG32 uCTRL_EPHY_RST_N                            :  1;\
            UNSG32 uCTRL_EPHY_SHUTDOWN                         :  1;\
            UNSG32 uCTRL_EPHY_MODE                             :  2;\
            UNSG32 uCTRL_EPHY_XMII_SEL                         :  2;\
            UNSG32 uCTRL_EPHY_CLKSEL                           :  3;\
            UNSG32 uCTRL_EPHY_ID                               :  5;\
            UNSG32 uCTRL_EPHY_LED_POL                          :  1;\
            UNSG32 uCTRL_EPHY_BGS_3                            :  1;\
            UNSG32 uCTRL_EPHY_BGS_2                            :  1;\
            UNSG32 uCTRL_EPHY_BGS_1                            :  1;\
            UNSG32 uCTRL_EPHY_BGS_0                            :  1;\
            UNSG32 uCTRL_BIST_MODE                             :  1;\
            UNSG32 uCTRL_EPHY_AFE_CLKSRC_SEL                   :  1;\
            UNSG32 uCTRL_EPHY_AFE_RST_B                        :  1;\
            UNSG32 RSVDx0_b22                                  : 10;\
          }
    union { UNSG32 u32FEPHY_CTRL;
            struct w32FEPHY_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_RMII2MII(r32) _BFGET_(r32, 0, 0)
    #define   SET32FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_RMII2MII(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_RMII2MII(r16) _BFGET_(r16, 0, 0)
    #define   SET16FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_RMII2MII(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_RMII2MII(r32) _BFGET_(r32, 1, 1)
    #define   SET32FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_RMII2MII(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_RMII2MII(r16) _BFGET_(r16, 1, 1)
    #define   SET16FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_RMII2MII(r16,v) _BFSET_(r16, 1, 1,v)

    #define   GET32FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_MII2RMII(r32) _BFGET_(r32, 2, 2)
    #define   SET32FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_MII2RMII(r32,v) _BFSET_(r32, 2, 2,v)
    #define   GET16FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_MII2RMII(r16) _BFGET_(r16, 2, 2)
    #define   SET16FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_MII2RMII(r16,v) _BFSET_(r16, 2, 2,v)

    #define   GET32FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_MII2RMII(r32) _BFGET_(r32, 3, 3)
    #define   SET32FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_MII2RMII(r32,v) _BFSET_(r32, 3, 3,v)
    #define   GET16FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_MII2RMII(r16) _BFGET_(r16, 3, 3)
    #define   SET16FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_MII2RMII(r16,v) _BFSET_(r16, 3, 3,v)

    #define   GET32FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_PLPIC(r32) _BFGET_(r32, 4, 4)
    #define   SET32FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_PLPIC(r32,v) _BFSET_(r32, 4, 4,v)
    #define   GET16FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_PLPIC(r16) _BFGET_(r16, 4, 4)
    #define   SET16FEPHY_FEPHY_BIST_STATUS_BIST_FINISH_PLPIC(r16,v) _BFSET_(r16, 4, 4,v)

    #define   GET32FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_PLPIC(r32) _BFGET_(r32, 5, 5)
    #define   SET32FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_PLPIC(r32,v) _BFSET_(r32, 5, 5,v)
    #define   GET16FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_PLPIC(r16) _BFGET_(r16, 5, 5)
    #define   SET16FEPHY_FEPHY_BIST_STATUS_BIST_FAIL_PLPIC(r16,v) _BFSET_(r16, 5, 5,v)

    #define     w32FEPHY_FEPHY_BIST_STATUS                     {\
            UNSG32 uFEPHY_BIST_STATUS_BIST_FINISH_RMII2MII     :  1;\
            UNSG32 uFEPHY_BIST_STATUS_BIST_FAIL_RMII2MII       :  1;\
            UNSG32 uFEPHY_BIST_STATUS_BIST_FINISH_MII2RMII     :  1;\
            UNSG32 uFEPHY_BIST_STATUS_BIST_FAIL_MII2RMII       :  1;\
            UNSG32 uFEPHY_BIST_STATUS_BIST_FINISH_PLPIC        :  1;\
            UNSG32 uFEPHY_BIST_STATUS_BIST_FAIL_PLPIC          :  1;\
            UNSG32 RSVDx4_b6                                   : 26;\
          }
    union { UNSG32 u32FEPHY_FEPHY_BIST_STATUS;
            struct w32FEPHY_FEPHY_BIST_STATUS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL_FEPHY_ADCCLK_FREQCNTR_EN(r32) _BFGET_(r32, 0, 0)
    #define   SET32FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL_FEPHY_ADCCLK_FREQCNTR_EN(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL_FEPHY_ADCCLK_FREQCNTR_EN(r16) _BFGET_(r16, 0, 0)
    #define   SET16FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL_FEPHY_ADCCLK_FREQCNTR_EN(r16,v) _BFSET_(r16, 0, 0,v)

    #define     w32FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL            {\
            UNSG32 uFEPHY_ADCCLK_FREQCNTR_CNTL_FEPHY_ADCCLK_FREQCNTR_EN :  1;\
            UNSG32 RSVDx8_b1                                   : 31;\
          }
    union { UNSG32 u32FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL;
            struct w32FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32FEPHY_FEPHY_ADCCLK_FREQCNTR_VAL_FEPHY_ADCCLK_FREQCNTR_VAL(r32) _BFGET_(r32,19, 0)
    #define   SET32FEPHY_FEPHY_ADCCLK_FREQCNTR_VAL_FEPHY_ADCCLK_FREQCNTR_VAL(r32,v) _BFSET_(r32,19, 0,v)

    #define     w32FEPHY_FEPHY_ADCCLK_FREQCNTR_VAL             {\
            UNSG32 uFEPHY_ADCCLK_FREQCNTR_VAL_FEPHY_ADCCLK_FREQCNTR_VAL : 20;\
            UNSG32 RSVDxC_b20                                  : 12;\
          }
    union { UNSG32 u32FEPHY_FEPHY_ADCCLK_FREQCNTR_VAL;
            struct w32FEPHY_FEPHY_ADCCLK_FREQCNTR_VAL;
          };
    ///////////////////////////////////////////////////////////
    } SIE_FEPHY;

    typedef union  T32FEPHY_CTRL
          { UNSG32 u32;
            struct w32FEPHY_CTRL;
                 } T32FEPHY_CTRL;
    typedef union  T32FEPHY_FEPHY_BIST_STATUS
          { UNSG32 u32;
            struct w32FEPHY_FEPHY_BIST_STATUS;
                 } T32FEPHY_FEPHY_BIST_STATUS;
    typedef union  T32FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL
          { UNSG32 u32;
            struct w32FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL;
                 } T32FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL;
    typedef union  T32FEPHY_FEPHY_ADCCLK_FREQCNTR_VAL
          { UNSG32 u32;
            struct w32FEPHY_FEPHY_ADCCLK_FREQCNTR_VAL;
                 } T32FEPHY_FEPHY_ADCCLK_FREQCNTR_VAL;
    ///////////////////////////////////////////////////////////

    typedef union  TFEPHY_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32FEPHY_CTRL;
                   };
                 } TFEPHY_CTRL;
    typedef union  TFEPHY_FEPHY_BIST_STATUS
          { UNSG32 u32[1];
            struct {
            struct w32FEPHY_FEPHY_BIST_STATUS;
                   };
                 } TFEPHY_FEPHY_BIST_STATUS;
    typedef union  TFEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL
          { UNSG32 u32[1];
            struct {
            struct w32FEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL;
                   };
                 } TFEPHY_FEPHY_ADCCLK_FREQCNTR_CNTL;
    typedef union  TFEPHY_FEPHY_ADCCLK_FREQCNTR_VAL
          { UNSG32 u32[1];
            struct {
            struct w32FEPHY_FEPHY_ADCCLK_FREQCNTR_VAL;
                   };
                 } TFEPHY_FEPHY_ADCCLK_FREQCNTR_VAL;

    ///////////////////////////////////////////////////////////
     SIGN32 FEPHY_drvrd(SIE_FEPHY *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 FEPHY_drvwr(SIE_FEPHY *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void FEPHY_reset(SIE_FEPHY *p);
     SIGN32 FEPHY_cmp  (SIE_FEPHY *p, SIE_FEPHY *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define FEPHY_check(p,pie,pfx,hLOG) FEPHY_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define FEPHY_print(p,    pfx,hLOG) FEPHY_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: FEPHY
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: fephy.h
////////////////////////////////////////////////////////////

