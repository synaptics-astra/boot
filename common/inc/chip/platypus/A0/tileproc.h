//////
/// don't edit! auto-generated by docc: tileproc.h
////////////////////////////////////////////////////////////
#ifndef tileproc_h
#define tileproc_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
///
/// $INTERFACE TG_PL                                    (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 X                    (P)
///               %unsigned 13 start                     0x0
///               %unsigned 13 end                       0x0
///               %%        6          # Stuffing bits...
///     @ 0x00004 Y                    (P)
///               %unsigned 12 start                     0x0
///               %unsigned 12 end                       0x0
///                                    ###
///                                    * Horizontal and Vertical Start and End values for a plane
///                                    ###
///               %%        8          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:      50b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_TG_PL
#define h_TG_PL (){}

    #define     RA_TG_PL_X                                     0x0000

    #define     BA_TG_PL_X_start                               0x0000
    #define     B16TG_PL_X_start                               0x0000
    #define   LSb32TG_PL_X_start                                  0
    #define   LSb16TG_PL_X_start                                  0
    #define       bTG_PL_X_start                               13
    #define   MSK32TG_PL_X_start                                  0x00001FFF

    #define     BA_TG_PL_X_end                                 0x0001
    #define     B16TG_PL_X_end                                 0x0000
    #define   LSb32TG_PL_X_end                                    13
    #define   LSb16TG_PL_X_end                                    13
    #define       bTG_PL_X_end                                 13
    #define   MSK32TG_PL_X_end                                    0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PL_Y                                     0x0004

    #define     BA_TG_PL_Y_start                               0x0004
    #define     B16TG_PL_Y_start                               0x0004
    #define   LSb32TG_PL_Y_start                                  0
    #define   LSb16TG_PL_Y_start                                  0
    #define       bTG_PL_Y_start                               12
    #define   MSK32TG_PL_Y_start                                  0x00000FFF

    #define     BA_TG_PL_Y_end                                 0x0005
    #define     B16TG_PL_Y_end                                 0x0004
    #define   LSb32TG_PL_Y_end                                    12
    #define   LSb16TG_PL_Y_end                                    12
    #define       bTG_PL_Y_end                                 12
    #define   MSK32TG_PL_Y_end                                    0x00FFF000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_TG_PL {
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PL_X_start(r32)                          _BFGET_(r32,12, 0)
    #define   SET32TG_PL_X_start(r32,v)                        _BFSET_(r32,12, 0,v)
    #define   GET16TG_PL_X_start(r16)                          _BFGET_(r16,12, 0)
    #define   SET16TG_PL_X_start(r16,v)                        _BFSET_(r16,12, 0,v)

    #define   GET32TG_PL_X_end(r32)                            _BFGET_(r32,25,13)
    #define   SET32TG_PL_X_end(r32,v)                          _BFSET_(r32,25,13,v)

    #define     w32TG_PL_X                                     {\
            UNSG32 uX_start                                    : 13;\
            UNSG32 uX_end                                      : 13;\
            UNSG32 RSVDx0_b26                                  :  6;\
          }
    union { UNSG32 u32TG_PL_X;
            struct w32TG_PL_X;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PL_Y_start(r32)                          _BFGET_(r32,11, 0)
    #define   SET32TG_PL_Y_start(r32,v)                        _BFSET_(r32,11, 0,v)
    #define   GET16TG_PL_Y_start(r16)                          _BFGET_(r16,11, 0)
    #define   SET16TG_PL_Y_start(r16,v)                        _BFSET_(r16,11, 0,v)

    #define   GET32TG_PL_Y_end(r32)                            _BFGET_(r32,23,12)
    #define   SET32TG_PL_Y_end(r32,v)                          _BFSET_(r32,23,12,v)

    #define     w32TG_PL_Y                                     {\
            UNSG32 uY_start                                    : 12;\
            UNSG32 uY_end                                      : 12;\
            UNSG32 RSVDx4_b24                                  :  8;\
          }
    union { UNSG32 u32TG_PL_Y;
            struct w32TG_PL_Y;
          };
    ///////////////////////////////////////////////////////////
    } SIE_TG_PL;

    typedef union  T32TG_PL_X
          { UNSG32 u32;
            struct w32TG_PL_X;
                 } T32TG_PL_X;
    typedef union  T32TG_PL_Y
          { UNSG32 u32;
            struct w32TG_PL_Y;
                 } T32TG_PL_Y;
    ///////////////////////////////////////////////////////////

    typedef union  TTG_PL_X
          { UNSG32 u32[1];
            struct {
            struct w32TG_PL_X;
                   };
                 } TTG_PL_X;
    typedef union  TTG_PL_Y
          { UNSG32 u32[1];
            struct {
            struct w32TG_PL_Y;
                   };
                 } TTG_PL_Y;

    ///////////////////////////////////////////////////////////
     SIGN32 TG_PL_drvrd(SIE_TG_PL *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 TG_PL_drvwr(SIE_TG_PL *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void TG_PL_reset(SIE_TG_PL *p);
     SIGN32 TG_PL_cmp  (SIE_TG_PL *p, SIE_TG_PL *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define TG_PL_check(p,pie,pfx,hLOG) TG_PL_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define TG_PL_print(p,    pfx,hLOG) TG_PL_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: TG_PL
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE TG_PRG                                   (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P)
///               %unsigned 2  mode                      0x2
///                                    ###
///                                    * Generates the hcnt and vcnt with the sref. The different modes programmable are : 0 = free running mode, 1 = sync mode, 2= Semi sync mode
///                                    ###
///               %unsigned 8  lwin                      0xF
///                                    ###
///                                    * Used in generation of lock sync and lock active for resetting hcnt and vcnt in TG
///                                    ###
///               %unsigned 12 frst                      0x0
///                                    ###
///                                    * Position during vertical blanking time at which frame reset is generated
///                                    ###
///               %unsigned 10 freeze                    0x0
///                                    ###
///                                    * Freeze controls for TG; this register should be used by SW when it wants to modify the plane position/size registers so that HW does not pick-up the intermediate values written.
///                                    ###
///     @ 0x00004 CTRL1                (P)
///               %unsigned 2  sync_ctrl                 0x0
///                                    ###
///                                    * To provide low latency for pass-through where the latency requirement is less than one frame
///                                    * [0] : Enable Bit. For low latency pass-through, enable this bit to 1’b1. Default it is zero.
///                                    * [1] : The SW will get active video start event from Cypress and then it will program SYNC bit SYNC_CTRL[1] to 1’b1 in VPP for low latency graphics (RGB) pass through.
///                                    ###
///               %unsigned 9  res_change_en             0x0
///                                    ###
///                                    * Enable bits for dynamic resolution change of registers used for generating timing signals
///                                    * [0] – enable bit for Htotal/Vtotal programmable register
///                                    * [1] - enable bit for VX programmable register
///                                    * [2] - enable bit for Hsync (start & end) programmable register
///                                    * [3] - enable bit for Vsync (startY & endY) programmable register
///                                    * [4] - enable bit for Plane0 (startX & endX) programmable register
///                                    * [5] - enable bit for Plane0 (startY & endY) programmable register
///                                    * [6] - enable bit for Field (startX & endX) programmable register
///                                    * [7] - enable bit for Field (startY & endY) programmable register
///                                    * [8] - enable bit for Vsync (startX & endX) programmable register
///                                    ###
///               %%        21         # Stuffing bits...
///     @ 0x00008 Total                (P)
///               %unsigned 12 vertical                  0x0
///                                    ###
///                                    * Vertical Total values (in lines).
///                                    ###
///               %unsigned 13 horizontal                0x0
///                                    ###
///                                    * Horizontal Total values (in pixels)
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x0000C Initial              (P)
///               %unsigned 13 xi                        0x0
///                                    ###
///                                    * Initial Horizontal position value
///                                    ###
///               %unsigned 12 yi                        0x0
///                                    ###
///                                    * Initial Vertical position value
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x00010 HSYNC                (P)
///               %unsigned 13 h_start                   0x0
///                                    ###
///                                    * Horizontal Start value indicated for Hsync position
///                                    ###
///               %unsigned 13 h_end                     0x0
///                                    ###
///                                    * Horizontal End value indicated for Hsync position
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00014 VSYNC                (P)
///               %unsigned 12 v_start                   0x0
///                                    ###
///                                    * Vertical Start value indicated for Vsync position
///                                    ###
///               %unsigned 12 v_end                     0x0
///                                    ###
///                                    * Vertical End value indicated for Vsync position
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00018 VS                   (P)
///               %unsigned 13 h_start                   0x0
///                                    ###
///                                    * Horizontal Start value indicated for Vsync position
///                                    ###
///               %unsigned 13 h_end                     0x0
///                                    ###
///                                    * Horizontal End value indicated for Vsync position
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x0001C FT                   (P)
///               %unsigned 8  frame                     0x0
///                                    ###
///                                    * Frame total value
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00020 VX                   (P)
///               %unsigned 13 vx                        0x0
///                                    ###
///                                    * Horizontal positions at which vertical active data
///                                    ###
///               %%        19         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      36B, bits:     190b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_TG_PRG
#define h_TG_PRG (){}

    #define     RA_TG_PRG_CTRL                                 0x0000

    #define     BA_TG_PRG_CTRL_mode                            0x0000
    #define     B16TG_PRG_CTRL_mode                            0x0000
    #define   LSb32TG_PRG_CTRL_mode                               0
    #define   LSb16TG_PRG_CTRL_mode                               0
    #define       bTG_PRG_CTRL_mode                            2
    #define   MSK32TG_PRG_CTRL_mode                               0x00000003

    #define     BA_TG_PRG_CTRL_lwin                            0x0000
    #define     B16TG_PRG_CTRL_lwin                            0x0000
    #define   LSb32TG_PRG_CTRL_lwin                               2
    #define   LSb16TG_PRG_CTRL_lwin                               2
    #define       bTG_PRG_CTRL_lwin                            8
    #define   MSK32TG_PRG_CTRL_lwin                               0x000003FC

    #define     BA_TG_PRG_CTRL_frst                            0x0001
    #define     B16TG_PRG_CTRL_frst                            0x0000
    #define   LSb32TG_PRG_CTRL_frst                               10
    #define   LSb16TG_PRG_CTRL_frst                               10
    #define       bTG_PRG_CTRL_frst                            12
    #define   MSK32TG_PRG_CTRL_frst                               0x003FFC00

    #define     BA_TG_PRG_CTRL_freeze                          0x0002
    #define     B16TG_PRG_CTRL_freeze                          0x0002
    #define   LSb32TG_PRG_CTRL_freeze                             22
    #define   LSb16TG_PRG_CTRL_freeze                             6
    #define       bTG_PRG_CTRL_freeze                          10
    #define   MSK32TG_PRG_CTRL_freeze                             0xFFC00000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_CTRL1                                0x0004

    #define     BA_TG_PRG_CTRL1_sync_ctrl                      0x0004
    #define     B16TG_PRG_CTRL1_sync_ctrl                      0x0004
    #define   LSb32TG_PRG_CTRL1_sync_ctrl                         0
    #define   LSb16TG_PRG_CTRL1_sync_ctrl                         0
    #define       bTG_PRG_CTRL1_sync_ctrl                      2
    #define   MSK32TG_PRG_CTRL1_sync_ctrl                         0x00000003

    #define     BA_TG_PRG_CTRL1_res_change_en                  0x0004
    #define     B16TG_PRG_CTRL1_res_change_en                  0x0004
    #define   LSb32TG_PRG_CTRL1_res_change_en                     2
    #define   LSb16TG_PRG_CTRL1_res_change_en                     2
    #define       bTG_PRG_CTRL1_res_change_en                  9
    #define   MSK32TG_PRG_CTRL1_res_change_en                     0x000007FC
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_Total                                0x0008

    #define     BA_TG_PRG_Total_vertical                       0x0008
    #define     B16TG_PRG_Total_vertical                       0x0008
    #define   LSb32TG_PRG_Total_vertical                          0
    #define   LSb16TG_PRG_Total_vertical                          0
    #define       bTG_PRG_Total_vertical                       12
    #define   MSK32TG_PRG_Total_vertical                          0x00000FFF

    #define     BA_TG_PRG_Total_horizontal                     0x0009
    #define     B16TG_PRG_Total_horizontal                     0x0008
    #define   LSb32TG_PRG_Total_horizontal                        12
    #define   LSb16TG_PRG_Total_horizontal                        12
    #define       bTG_PRG_Total_horizontal                     13
    #define   MSK32TG_PRG_Total_horizontal                        0x01FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_Initial                              0x000C

    #define     BA_TG_PRG_Initial_xi                           0x000C
    #define     B16TG_PRG_Initial_xi                           0x000C
    #define   LSb32TG_PRG_Initial_xi                              0
    #define   LSb16TG_PRG_Initial_xi                              0
    #define       bTG_PRG_Initial_xi                           13
    #define   MSK32TG_PRG_Initial_xi                              0x00001FFF

    #define     BA_TG_PRG_Initial_yi                           0x000D
    #define     B16TG_PRG_Initial_yi                           0x000C
    #define   LSb32TG_PRG_Initial_yi                              13
    #define   LSb16TG_PRG_Initial_yi                              13
    #define       bTG_PRG_Initial_yi                           12
    #define   MSK32TG_PRG_Initial_yi                              0x01FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_HSYNC                                0x0010

    #define     BA_TG_PRG_HSYNC_h_start                        0x0010
    #define     B16TG_PRG_HSYNC_h_start                        0x0010
    #define   LSb32TG_PRG_HSYNC_h_start                           0
    #define   LSb16TG_PRG_HSYNC_h_start                           0
    #define       bTG_PRG_HSYNC_h_start                        13
    #define   MSK32TG_PRG_HSYNC_h_start                           0x00001FFF

    #define     BA_TG_PRG_HSYNC_h_end                          0x0011
    #define     B16TG_PRG_HSYNC_h_end                          0x0010
    #define   LSb32TG_PRG_HSYNC_h_end                             13
    #define   LSb16TG_PRG_HSYNC_h_end                             13
    #define       bTG_PRG_HSYNC_h_end                          13
    #define   MSK32TG_PRG_HSYNC_h_end                             0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_VSYNC                                0x0014

    #define     BA_TG_PRG_VSYNC_v_start                        0x0014
    #define     B16TG_PRG_VSYNC_v_start                        0x0014
    #define   LSb32TG_PRG_VSYNC_v_start                           0
    #define   LSb16TG_PRG_VSYNC_v_start                           0
    #define       bTG_PRG_VSYNC_v_start                        12
    #define   MSK32TG_PRG_VSYNC_v_start                           0x00000FFF

    #define     BA_TG_PRG_VSYNC_v_end                          0x0015
    #define     B16TG_PRG_VSYNC_v_end                          0x0014
    #define   LSb32TG_PRG_VSYNC_v_end                             12
    #define   LSb16TG_PRG_VSYNC_v_end                             12
    #define       bTG_PRG_VSYNC_v_end                          12
    #define   MSK32TG_PRG_VSYNC_v_end                             0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_VS                                   0x0018

    #define     BA_TG_PRG_VS_h_start                           0x0018
    #define     B16TG_PRG_VS_h_start                           0x0018
    #define   LSb32TG_PRG_VS_h_start                              0
    #define   LSb16TG_PRG_VS_h_start                              0
    #define       bTG_PRG_VS_h_start                           13
    #define   MSK32TG_PRG_VS_h_start                              0x00001FFF

    #define     BA_TG_PRG_VS_h_end                             0x0019
    #define     B16TG_PRG_VS_h_end                             0x0018
    #define   LSb32TG_PRG_VS_h_end                                13
    #define   LSb16TG_PRG_VS_h_end                                13
    #define       bTG_PRG_VS_h_end                             13
    #define   MSK32TG_PRG_VS_h_end                                0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_FT                                   0x001C

    #define     BA_TG_PRG_FT_frame                             0x001C
    #define     B16TG_PRG_FT_frame                             0x001C
    #define   LSb32TG_PRG_FT_frame                                0
    #define   LSb16TG_PRG_FT_frame                                0
    #define       bTG_PRG_FT_frame                             8
    #define   MSK32TG_PRG_FT_frame                                0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_VX                                   0x0020

    #define     BA_TG_PRG_VX_vx                                0x0020
    #define     B16TG_PRG_VX_vx                                0x0020
    #define   LSb32TG_PRG_VX_vx                                   0
    #define   LSb16TG_PRG_VX_vx                                   0
    #define       bTG_PRG_VX_vx                                13
    #define   MSK32TG_PRG_VX_vx                                   0x00001FFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_TG_PRG {
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_CTRL_mode(r32)                       _BFGET_(r32, 1, 0)
    #define   SET32TG_PRG_CTRL_mode(r32,v)                     _BFSET_(r32, 1, 0,v)
    #define   GET16TG_PRG_CTRL_mode(r16)                       _BFGET_(r16, 1, 0)
    #define   SET16TG_PRG_CTRL_mode(r16,v)                     _BFSET_(r16, 1, 0,v)

    #define   GET32TG_PRG_CTRL_lwin(r32)                       _BFGET_(r32, 9, 2)
    #define   SET32TG_PRG_CTRL_lwin(r32,v)                     _BFSET_(r32, 9, 2,v)
    #define   GET16TG_PRG_CTRL_lwin(r16)                       _BFGET_(r16, 9, 2)
    #define   SET16TG_PRG_CTRL_lwin(r16,v)                     _BFSET_(r16, 9, 2,v)

    #define   GET32TG_PRG_CTRL_frst(r32)                       _BFGET_(r32,21,10)
    #define   SET32TG_PRG_CTRL_frst(r32,v)                     _BFSET_(r32,21,10,v)

    #define   GET32TG_PRG_CTRL_freeze(r32)                     _BFGET_(r32,31,22)
    #define   SET32TG_PRG_CTRL_freeze(r32,v)                   _BFSET_(r32,31,22,v)
    #define   GET16TG_PRG_CTRL_freeze(r16)                     _BFGET_(r16,15, 6)
    #define   SET16TG_PRG_CTRL_freeze(r16,v)                   _BFSET_(r16,15, 6,v)

    #define     w32TG_PRG_CTRL                                 {\
            UNSG32 uCTRL_mode                                  :  2;\
            UNSG32 uCTRL_lwin                                  :  8;\
            UNSG32 uCTRL_frst                                  : 12;\
            UNSG32 uCTRL_freeze                                : 10;\
          }
    union { UNSG32 u32TG_PRG_CTRL;
            struct w32TG_PRG_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_CTRL1_sync_ctrl(r32)                 _BFGET_(r32, 1, 0)
    #define   SET32TG_PRG_CTRL1_sync_ctrl(r32,v)               _BFSET_(r32, 1, 0,v)
    #define   GET16TG_PRG_CTRL1_sync_ctrl(r16)                 _BFGET_(r16, 1, 0)
    #define   SET16TG_PRG_CTRL1_sync_ctrl(r16,v)               _BFSET_(r16, 1, 0,v)

    #define   GET32TG_PRG_CTRL1_res_change_en(r32)             _BFGET_(r32,10, 2)
    #define   SET32TG_PRG_CTRL1_res_change_en(r32,v)           _BFSET_(r32,10, 2,v)
    #define   GET16TG_PRG_CTRL1_res_change_en(r16)             _BFGET_(r16,10, 2)
    #define   SET16TG_PRG_CTRL1_res_change_en(r16,v)           _BFSET_(r16,10, 2,v)

    #define     w32TG_PRG_CTRL1                                {\
            UNSG32 uCTRL1_sync_ctrl                            :  2;\
            UNSG32 uCTRL1_res_change_en                        :  9;\
            UNSG32 RSVDx4_b11                                  : 21;\
          }
    union { UNSG32 u32TG_PRG_CTRL1;
            struct w32TG_PRG_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_Total_vertical(r32)                  _BFGET_(r32,11, 0)
    #define   SET32TG_PRG_Total_vertical(r32,v)                _BFSET_(r32,11, 0,v)
    #define   GET16TG_PRG_Total_vertical(r16)                  _BFGET_(r16,11, 0)
    #define   SET16TG_PRG_Total_vertical(r16,v)                _BFSET_(r16,11, 0,v)

    #define   GET32TG_PRG_Total_horizontal(r32)                _BFGET_(r32,24,12)
    #define   SET32TG_PRG_Total_horizontal(r32,v)              _BFSET_(r32,24,12,v)

    #define     w32TG_PRG_Total                                {\
            UNSG32 uTotal_vertical                             : 12;\
            UNSG32 uTotal_horizontal                           : 13;\
            UNSG32 RSVDx8_b25                                  :  7;\
          }
    union { UNSG32 u32TG_PRG_Total;
            struct w32TG_PRG_Total;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_Initial_xi(r32)                      _BFGET_(r32,12, 0)
    #define   SET32TG_PRG_Initial_xi(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16TG_PRG_Initial_xi(r16)                      _BFGET_(r16,12, 0)
    #define   SET16TG_PRG_Initial_xi(r16,v)                    _BFSET_(r16,12, 0,v)

    #define   GET32TG_PRG_Initial_yi(r32)                      _BFGET_(r32,24,13)
    #define   SET32TG_PRG_Initial_yi(r32,v)                    _BFSET_(r32,24,13,v)

    #define     w32TG_PRG_Initial                              {\
            UNSG32 uInitial_xi                                 : 13;\
            UNSG32 uInitial_yi                                 : 12;\
            UNSG32 RSVDxC_b25                                  :  7;\
          }
    union { UNSG32 u32TG_PRG_Initial;
            struct w32TG_PRG_Initial;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_HSYNC_h_start(r32)                   _BFGET_(r32,12, 0)
    #define   SET32TG_PRG_HSYNC_h_start(r32,v)                 _BFSET_(r32,12, 0,v)
    #define   GET16TG_PRG_HSYNC_h_start(r16)                   _BFGET_(r16,12, 0)
    #define   SET16TG_PRG_HSYNC_h_start(r16,v)                 _BFSET_(r16,12, 0,v)

    #define   GET32TG_PRG_HSYNC_h_end(r32)                     _BFGET_(r32,25,13)
    #define   SET32TG_PRG_HSYNC_h_end(r32,v)                   _BFSET_(r32,25,13,v)

    #define     w32TG_PRG_HSYNC                                {\
            UNSG32 uHSYNC_h_start                              : 13;\
            UNSG32 uHSYNC_h_end                                : 13;\
            UNSG32 RSVDx10_b26                                 :  6;\
          }
    union { UNSG32 u32TG_PRG_HSYNC;
            struct w32TG_PRG_HSYNC;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_VSYNC_v_start(r32)                   _BFGET_(r32,11, 0)
    #define   SET32TG_PRG_VSYNC_v_start(r32,v)                 _BFSET_(r32,11, 0,v)
    #define   GET16TG_PRG_VSYNC_v_start(r16)                   _BFGET_(r16,11, 0)
    #define   SET16TG_PRG_VSYNC_v_start(r16,v)                 _BFSET_(r16,11, 0,v)

    #define   GET32TG_PRG_VSYNC_v_end(r32)                     _BFGET_(r32,23,12)
    #define   SET32TG_PRG_VSYNC_v_end(r32,v)                   _BFSET_(r32,23,12,v)

    #define     w32TG_PRG_VSYNC                                {\
            UNSG32 uVSYNC_v_start                              : 12;\
            UNSG32 uVSYNC_v_end                                : 12;\
            UNSG32 RSVDx14_b24                                 :  8;\
          }
    union { UNSG32 u32TG_PRG_VSYNC;
            struct w32TG_PRG_VSYNC;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_VS_h_start(r32)                      _BFGET_(r32,12, 0)
    #define   SET32TG_PRG_VS_h_start(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16TG_PRG_VS_h_start(r16)                      _BFGET_(r16,12, 0)
    #define   SET16TG_PRG_VS_h_start(r16,v)                    _BFSET_(r16,12, 0,v)

    #define   GET32TG_PRG_VS_h_end(r32)                        _BFGET_(r32,25,13)
    #define   SET32TG_PRG_VS_h_end(r32,v)                      _BFSET_(r32,25,13,v)

    #define     w32TG_PRG_VS                                   {\
            UNSG32 uVS_h_start                                 : 13;\
            UNSG32 uVS_h_end                                   : 13;\
            UNSG32 RSVDx18_b26                                 :  6;\
          }
    union { UNSG32 u32TG_PRG_VS;
            struct w32TG_PRG_VS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_FT_frame(r32)                        _BFGET_(r32, 7, 0)
    #define   SET32TG_PRG_FT_frame(r32,v)                      _BFSET_(r32, 7, 0,v)
    #define   GET16TG_PRG_FT_frame(r16)                        _BFGET_(r16, 7, 0)
    #define   SET16TG_PRG_FT_frame(r16,v)                      _BFSET_(r16, 7, 0,v)

    #define     w32TG_PRG_FT                                   {\
            UNSG32 uFT_frame                                   :  8;\
            UNSG32 RSVDx1C_b8                                  : 24;\
          }
    union { UNSG32 u32TG_PRG_FT;
            struct w32TG_PRG_FT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_VX_vx(r32)                           _BFGET_(r32,12, 0)
    #define   SET32TG_PRG_VX_vx(r32,v)                         _BFSET_(r32,12, 0,v)
    #define   GET16TG_PRG_VX_vx(r16)                           _BFGET_(r16,12, 0)
    #define   SET16TG_PRG_VX_vx(r16,v)                         _BFSET_(r16,12, 0,v)

    #define     w32TG_PRG_VX                                   {\
            UNSG32 uVX_vx                                      : 13;\
            UNSG32 RSVDx20_b13                                 : 19;\
          }
    union { UNSG32 u32TG_PRG_VX;
            struct w32TG_PRG_VX;
          };
    ///////////////////////////////////////////////////////////
    } SIE_TG_PRG;

    typedef union  T32TG_PRG_CTRL
          { UNSG32 u32;
            struct w32TG_PRG_CTRL;
                 } T32TG_PRG_CTRL;
    typedef union  T32TG_PRG_CTRL1
          { UNSG32 u32;
            struct w32TG_PRG_CTRL1;
                 } T32TG_PRG_CTRL1;
    typedef union  T32TG_PRG_Total
          { UNSG32 u32;
            struct w32TG_PRG_Total;
                 } T32TG_PRG_Total;
    typedef union  T32TG_PRG_Initial
          { UNSG32 u32;
            struct w32TG_PRG_Initial;
                 } T32TG_PRG_Initial;
    typedef union  T32TG_PRG_HSYNC
          { UNSG32 u32;
            struct w32TG_PRG_HSYNC;
                 } T32TG_PRG_HSYNC;
    typedef union  T32TG_PRG_VSYNC
          { UNSG32 u32;
            struct w32TG_PRG_VSYNC;
                 } T32TG_PRG_VSYNC;
    typedef union  T32TG_PRG_VS
          { UNSG32 u32;
            struct w32TG_PRG_VS;
                 } T32TG_PRG_VS;
    typedef union  T32TG_PRG_FT
          { UNSG32 u32;
            struct w32TG_PRG_FT;
                 } T32TG_PRG_FT;
    typedef union  T32TG_PRG_VX
          { UNSG32 u32;
            struct w32TG_PRG_VX;
                 } T32TG_PRG_VX;
    ///////////////////////////////////////////////////////////

    typedef union  TTG_PRG_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_CTRL;
                   };
                 } TTG_PRG_CTRL;
    typedef union  TTG_PRG_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_CTRL1;
                   };
                 } TTG_PRG_CTRL1;
    typedef union  TTG_PRG_Total
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_Total;
                   };
                 } TTG_PRG_Total;
    typedef union  TTG_PRG_Initial
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_Initial;
                   };
                 } TTG_PRG_Initial;
    typedef union  TTG_PRG_HSYNC
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_HSYNC;
                   };
                 } TTG_PRG_HSYNC;
    typedef union  TTG_PRG_VSYNC
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_VSYNC;
                   };
                 } TTG_PRG_VSYNC;
    typedef union  TTG_PRG_VS
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_VS;
                   };
                 } TTG_PRG_VS;
    typedef union  TTG_PRG_FT
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_FT;
                   };
                 } TTG_PRG_FT;
    typedef union  TTG_PRG_VX
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_VX;
                   };
                 } TTG_PRG_VX;

    ///////////////////////////////////////////////////////////
     SIGN32 TG_PRG_drvrd(SIE_TG_PRG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 TG_PRG_drvwr(SIE_TG_PRG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void TG_PRG_reset(SIE_TG_PRG *p);
     SIGN32 TG_PRG_cmp  (SIE_TG_PRG *p, SIE_TG_PRG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define TG_PRG_check(p,pie,pfx,hLOG) TG_PRG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define TG_PRG_print(p,    pfx,hLOG) TG_PRG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: TG_PRG
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE TG                      biu              (4,4)
///     ###
///     * Register specification of interface Timing Generator
///     * There are two counters in the timing generator module. hCntr (from 1 to SIZE_X) and vCntr (from 1 to SIZE_Y).
///     * When start, the initial value will be loaded to the xCnt and yCnt
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 INIT                 (P)
///               %unsigned 16 Y                         0x1
///                                    ###
///                                    * Initial Y value which will be used to load Y counter when tg is enabled.
///                                    ###
///               %unsigned 16 X                         0x1
///                                    ###
///                                    * Initial X value which will be used to load X counter when tg is enabled.
///                                    * A whole frame scan size.
///                                    ###
///     @ 0x00004 SIZE                 (P)
///               %unsigned 16 Y                         0x465
///                                    ###
///                                    * Total scan lines per frame.
///                                    ###
///               %unsigned 16 X                         0x898
///                                    ###
///                                    * Total scan clock cycles per line.
///                                    * Hsync
///                                    ###
///     @ 0x00008 HS                   (P)
///               %unsigned 16 FE                        0x1
///                                    ###
///                                    * Hsync front edge. The first pixel position of hsync pulse.
///                                    ###
///               %unsigned 16 BE                        0x2C
///                                    ###
///                                    * Hsync back edge. The last pixel position of hsync pulse.
///                                    * HS = hCntr>=FE & hCntr<=BE
///                                    * HBlanking
///                                    ###
///     @ 0x0000C HB                   (P)
///               %unsigned 16 FE                        0x841
///                                    ###
///                                    * Hblank front edge. The first pixel position of the hBlank pulse. SIZEX-HFP = 2200-88+1
///                                    ###
///               %unsigned 16 BE                        0xC0
///                                    ###
///                                    * Hblank back edge. The last pixel position of the hBlank pulse. HPW + HBP = 44+148
///                                    * HB = hCntr>=FE || hCntr<=BE.
///                                    ###
///     @ 0x00010 HB_CR                (P)
///               %unsigned 16 FE                        0x841
///                                    ###
///                                    * Hblank front edge. The first pixel position of the hBlank pulse. SIZEX-HFP = 2200-88+1
///                                    ###
///               %unsigned 16 BE                        0xC0
///                                    ###
///                                    * Hblank back edge. The last pixel position of the hBlank pulse. HPW + HBP = 44+148
///                                    * HB_CR = hCntr>=FE || hCntr<=BE.
///                                    ###
///     @ 0x00014 HB_CR2               (P)
///               %unsigned 16 FE                        0x841
///                                    ###
///                                    * Hblank front edge. The first pixel position of the hBlank pulse. SIZEX-HFP = 2200-88+1
///                                    * Note : to be programmed with different value (only when cropping is required). Else to be programmed same as HB FE (above register)
///                                    ###
///               %unsigned 16 BE                        0xC0
///                                    ###
///                                    * Hblank back edge. The last pixel position of the hBlank pulse. HPW + HBP = 44+148
///                                    * Note : to be programmed with different value (only when cropping is required). Else to be programmed same as HB BE (above register)
///                                    * HB = hCntr>=FE || hCntr<=BE.
///                                    * VS0 defines the first first pixel position of the first VSYNC (progressive or interlace mode) pulse.
///                                    * For example
///                                    * 1080i60, the VTP is the last pixel of the last line. So set both VLCNT0 and VPCNT0 to 0.
///                                    ###
///     @ 0x00018 VS0                  (P)
///               %unsigned 16 FE                        0x1
///                                    ###
///                                    * Vsync pulse front edge.
///                                    * Vsync will be asserted at the beginning of this line.
///                                    ###
///               %unsigned 16 BE                        0x5
///                                    ###
///                                    * Vsync pulse back edge.
///                                    * Vsycn pulse will be de-asserted after the end of this line.
///                                    * Vsync = (vCntr>=FE & vCntr<=BE)
///                                    * Vsync pulse 1
///                                    * defines the first pixel position of the second vSync pulse. For example
///                                    * 1080i60, the VTP is pixel 1100 of line 563. So set both VLCNT2=563. and VPCNT2 to 1100.
///                                    ###
///     @ 0x0001C VS1                  (P)
///               %unsigned 16 FE                        0x233
///                                    ###
///                                    * Vsync pulse 1 front edge line position.
///                                    * Vsync pulse 1 will be asserted at the middle of this line.
///                                    ###
///               %unsigned 16 BE                        0x238
///                                    ###
///                                    * Vsync pulse 1 back edge line position.
///                                    * Vsync pulse 1 will be de-asserted at the middle of this line.
///                                    * Vsync1 = (vCntr>=FE & hCntr>SIZEX/2) & (vCntr<=BE & hCntr<=SIZEX/2)
///                                    * Vertical blanking.
///                                    * VB0 parameter definietion
///                                    ###
///     @ 0x00020 VB0                  (P)
///               %unsigned 16 FE                        0x462
///                                    ###
///                                    * Vblank front edge line position
///                                    * The first line of the vertical blanking.
///                                    ###
///               %unsigned 16 BE                        0x29
///                                    ###
///                                    * Vblank back edge line position
///                                    * the last line number of the vertical blanking
///                                    * The default value is used for 1080p case.
///                                    * Vblank0 = vCntr>=FE || vCntr<=BE
///                                    ###
///     @ 0x00024 VB0_CR               (P)
///               %unsigned 16 FE                        0x462
///                                    ###
///                                    * Vblank front edge line position
///                                    * The first line of the vertical blanking.
///                                    ###
///               %unsigned 16 BE                        0x29
///                                    ###
///                                    * Vblank back edge line position
///                                    * the last line number of the vertical blanking
///                                    * The default value is used for 1080p case.
///                                    * Vblank0_CR = vCntr>=FE || vCntr<=BE
///                                    ###
///     @ 0x00028 VB0_CR2              (P)
///               %unsigned 16 FE                        0x462
///                                    ###
///                                    * Vblank front edge line position
///                                    * The first line of the vertical blanking.
///                                    * Note : to be programmed with different value only when cropping is required. Else to be programmed same as VB0 FE (above register)
///                                    ###
///               %unsigned 16 BE                        0x29
///                                    ###
///                                    * Vblank back edge line position
///                                    * the last line number of the vertical blanking
///                                    * The default value is used for 1080p case.
///                                    * Note : to be programmed with different value only when cropping is required. Else to be programmed same as VB0 BE (above register)
///                                    * Vblank0 = vCntr>=FE || vCntr<=BE
///                                    ###
///     @ 0x0002C VB1                  (P)
///               %unsigned 16 FE                        0x231
///                                    ###
///                                    * Vblank front edge line postion
///                                    * The first line number of VB1.
///                                    ###
///               %unsigned 16 BE                        0x247
///                                    ###
///                                    * Vblank back edge line postion
///                                    * the last line numer of VB1.
///                                    * VB1 = (vCntr>=FE & vCntr<=BE)
///                                    * SCAN mode
///                                    ###
///     @ 0x00030 SCAN                 (P)
///               %unsigned 1  MODE                      0x0
///                                    : PROG                      0x0
///                                    : INTER                     0x1
///                                                 ###
///                                                 * Frame done interrupt position
///                                                 ###
///               %%        31         # Stuffing bits...
///     @ 0x00034 INTPOS               (P)
///               %unsigned 16 FRAME                     0x465
///                                    ###
///                                    * Frame interrupt status will be set at the end of this line.
///                                    * Program 0 to this register will disable frame interrupt.
///                                    ###
///               %unsigned 16 FIELD                     0x233
///                                    ###
///                                    * Field interrupt status will be set at the end of this line.
///                                    * Program 0 to this register will disable field interrupt.
///                                    * MODE
///                                    ###
///     @ 0x00038 MODE                 (P)
///               %unsigned 1  EN                        0x0
///                                    : MASTER                    0x0
///                                    : SLAVE                     0x1
///                                                 ###
///                                                 * In master mode, TG drive the control signal.
///                                                 * In slave mode, TG take the external hsync and vsync, it generate the internal sync and blank signal based on the programmed register and external hsync and vsync.
///                                                 * HREF input for slave mode.
///                                                 ###
///               %%        31         # Stuffing bits...
///     @ 0x0003C HVREF                (P)
///               %unsigned 1  SEL                       0x0
///                                    : SYNC                      0x0
///                                    : BLANK                     0x1
///                                                 ###
///                                                 * In slave mode, tg will sync to the external tg generated HREF/VREF which could be HSYBC/VSYNC or HBLANK/VBLANK. Currently only HSYNC/VSYNC is supported.
///                                                 * HSYNC and VSYNC have to be come in pair.
///                                                 ###
///               %unsigned 1  POL                       0x0
///                                    : NEG_PULSE                 0x0
///                                    : POS_PULSE                 0x1
///                                                 ###
///                                                 * 0 : indicate the input HREF/VREF are negative pulses
///                                                 * 1: indicate the input HREF/VREFare positive pulses.
///                                                 * HREF and VREF have to be the same polarity.
///                                                 * End of TG register group
///                                                 ###
///               %%        30         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      64B, bits:     420b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_TG
#define h_TG (){}

    #define     RA_TG_INIT                                     0x0000

    #define     BA_TG_INIT_Y                                   0x0000
    #define     B16TG_INIT_Y                                   0x0000
    #define   LSb32TG_INIT_Y                                      0
    #define   LSb16TG_INIT_Y                                      0
    #define       bTG_INIT_Y                                   16
    #define   MSK32TG_INIT_Y                                      0x0000FFFF

    #define     BA_TG_INIT_X                                   0x0002
    #define     B16TG_INIT_X                                   0x0002
    #define   LSb32TG_INIT_X                                      16
    #define   LSb16TG_INIT_X                                      0
    #define       bTG_INIT_X                                   16
    #define   MSK32TG_INIT_X                                      0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_SIZE                                     0x0004

    #define     BA_TG_SIZE_Y                                   0x0004
    #define     B16TG_SIZE_Y                                   0x0004
    #define   LSb32TG_SIZE_Y                                      0
    #define   LSb16TG_SIZE_Y                                      0
    #define       bTG_SIZE_Y                                   16
    #define   MSK32TG_SIZE_Y                                      0x0000FFFF

    #define     BA_TG_SIZE_X                                   0x0006
    #define     B16TG_SIZE_X                                   0x0006
    #define   LSb32TG_SIZE_X                                      16
    #define   LSb16TG_SIZE_X                                      0
    #define       bTG_SIZE_X                                   16
    #define   MSK32TG_SIZE_X                                      0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_HS                                       0x0008

    #define     BA_TG_HS_FE                                    0x0008
    #define     B16TG_HS_FE                                    0x0008
    #define   LSb32TG_HS_FE                                       0
    #define   LSb16TG_HS_FE                                       0
    #define       bTG_HS_FE                                    16
    #define   MSK32TG_HS_FE                                       0x0000FFFF

    #define     BA_TG_HS_BE                                    0x000A
    #define     B16TG_HS_BE                                    0x000A
    #define   LSb32TG_HS_BE                                       16
    #define   LSb16TG_HS_BE                                       0
    #define       bTG_HS_BE                                    16
    #define   MSK32TG_HS_BE                                       0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_HB                                       0x000C

    #define     BA_TG_HB_FE                                    0x000C
    #define     B16TG_HB_FE                                    0x000C
    #define   LSb32TG_HB_FE                                       0
    #define   LSb16TG_HB_FE                                       0
    #define       bTG_HB_FE                                    16
    #define   MSK32TG_HB_FE                                       0x0000FFFF

    #define     BA_TG_HB_BE                                    0x000E
    #define     B16TG_HB_BE                                    0x000E
    #define   LSb32TG_HB_BE                                       16
    #define   LSb16TG_HB_BE                                       0
    #define       bTG_HB_BE                                    16
    #define   MSK32TG_HB_BE                                       0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_HB_CR                                    0x0010

    #define     BA_TG_HB_CR_FE                                 0x0010
    #define     B16TG_HB_CR_FE                                 0x0010
    #define   LSb32TG_HB_CR_FE                                    0
    #define   LSb16TG_HB_CR_FE                                    0
    #define       bTG_HB_CR_FE                                 16
    #define   MSK32TG_HB_CR_FE                                    0x0000FFFF

    #define     BA_TG_HB_CR_BE                                 0x0012
    #define     B16TG_HB_CR_BE                                 0x0012
    #define   LSb32TG_HB_CR_BE                                    16
    #define   LSb16TG_HB_CR_BE                                    0
    #define       bTG_HB_CR_BE                                 16
    #define   MSK32TG_HB_CR_BE                                    0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_HB_CR2                                   0x0014

    #define     BA_TG_HB_CR2_FE                                0x0014
    #define     B16TG_HB_CR2_FE                                0x0014
    #define   LSb32TG_HB_CR2_FE                                   0
    #define   LSb16TG_HB_CR2_FE                                   0
    #define       bTG_HB_CR2_FE                                16
    #define   MSK32TG_HB_CR2_FE                                   0x0000FFFF

    #define     BA_TG_HB_CR2_BE                                0x0016
    #define     B16TG_HB_CR2_BE                                0x0016
    #define   LSb32TG_HB_CR2_BE                                   16
    #define   LSb16TG_HB_CR2_BE                                   0
    #define       bTG_HB_CR2_BE                                16
    #define   MSK32TG_HB_CR2_BE                                   0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_VS0                                      0x0018

    #define     BA_TG_VS0_FE                                   0x0018
    #define     B16TG_VS0_FE                                   0x0018
    #define   LSb32TG_VS0_FE                                      0
    #define   LSb16TG_VS0_FE                                      0
    #define       bTG_VS0_FE                                   16
    #define   MSK32TG_VS0_FE                                      0x0000FFFF

    #define     BA_TG_VS0_BE                                   0x001A
    #define     B16TG_VS0_BE                                   0x001A
    #define   LSb32TG_VS0_BE                                      16
    #define   LSb16TG_VS0_BE                                      0
    #define       bTG_VS0_BE                                   16
    #define   MSK32TG_VS0_BE                                      0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_VS1                                      0x001C

    #define     BA_TG_VS1_FE                                   0x001C
    #define     B16TG_VS1_FE                                   0x001C
    #define   LSb32TG_VS1_FE                                      0
    #define   LSb16TG_VS1_FE                                      0
    #define       bTG_VS1_FE                                   16
    #define   MSK32TG_VS1_FE                                      0x0000FFFF

    #define     BA_TG_VS1_BE                                   0x001E
    #define     B16TG_VS1_BE                                   0x001E
    #define   LSb32TG_VS1_BE                                      16
    #define   LSb16TG_VS1_BE                                      0
    #define       bTG_VS1_BE                                   16
    #define   MSK32TG_VS1_BE                                      0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_VB0                                      0x0020

    #define     BA_TG_VB0_FE                                   0x0020
    #define     B16TG_VB0_FE                                   0x0020
    #define   LSb32TG_VB0_FE                                      0
    #define   LSb16TG_VB0_FE                                      0
    #define       bTG_VB0_FE                                   16
    #define   MSK32TG_VB0_FE                                      0x0000FFFF

    #define     BA_TG_VB0_BE                                   0x0022
    #define     B16TG_VB0_BE                                   0x0022
    #define   LSb32TG_VB0_BE                                      16
    #define   LSb16TG_VB0_BE                                      0
    #define       bTG_VB0_BE                                   16
    #define   MSK32TG_VB0_BE                                      0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_VB0_CR                                   0x0024

    #define     BA_TG_VB0_CR_FE                                0x0024
    #define     B16TG_VB0_CR_FE                                0x0024
    #define   LSb32TG_VB0_CR_FE                                   0
    #define   LSb16TG_VB0_CR_FE                                   0
    #define       bTG_VB0_CR_FE                                16
    #define   MSK32TG_VB0_CR_FE                                   0x0000FFFF

    #define     BA_TG_VB0_CR_BE                                0x0026
    #define     B16TG_VB0_CR_BE                                0x0026
    #define   LSb32TG_VB0_CR_BE                                   16
    #define   LSb16TG_VB0_CR_BE                                   0
    #define       bTG_VB0_CR_BE                                16
    #define   MSK32TG_VB0_CR_BE                                   0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_VB0_CR2                                  0x0028

    #define     BA_TG_VB0_CR2_FE                               0x0028
    #define     B16TG_VB0_CR2_FE                               0x0028
    #define   LSb32TG_VB0_CR2_FE                                  0
    #define   LSb16TG_VB0_CR2_FE                                  0
    #define       bTG_VB0_CR2_FE                               16
    #define   MSK32TG_VB0_CR2_FE                                  0x0000FFFF

    #define     BA_TG_VB0_CR2_BE                               0x002A
    #define     B16TG_VB0_CR2_BE                               0x002A
    #define   LSb32TG_VB0_CR2_BE                                  16
    #define   LSb16TG_VB0_CR2_BE                                  0
    #define       bTG_VB0_CR2_BE                               16
    #define   MSK32TG_VB0_CR2_BE                                  0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_VB1                                      0x002C

    #define     BA_TG_VB1_FE                                   0x002C
    #define     B16TG_VB1_FE                                   0x002C
    #define   LSb32TG_VB1_FE                                      0
    #define   LSb16TG_VB1_FE                                      0
    #define       bTG_VB1_FE                                   16
    #define   MSK32TG_VB1_FE                                      0x0000FFFF

    #define     BA_TG_VB1_BE                                   0x002E
    #define     B16TG_VB1_BE                                   0x002E
    #define   LSb32TG_VB1_BE                                      16
    #define   LSb16TG_VB1_BE                                      0
    #define       bTG_VB1_BE                                   16
    #define   MSK32TG_VB1_BE                                      0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_SCAN                                     0x0030

    #define     BA_TG_SCAN_MODE                                0x0030
    #define     B16TG_SCAN_MODE                                0x0030
    #define   LSb32TG_SCAN_MODE                                   0
    #define   LSb16TG_SCAN_MODE                                   0
    #define       bTG_SCAN_MODE                                1
    #define   MSK32TG_SCAN_MODE                                   0x00000001
    #define        TG_SCAN_MODE_PROG                                        0x0
    #define        TG_SCAN_MODE_INTER                                       0x1
    ///////////////////////////////////////////////////////////
    #define     RA_TG_INTPOS                                   0x0034

    #define     BA_TG_INTPOS_FRAME                             0x0034
    #define     B16TG_INTPOS_FRAME                             0x0034
    #define   LSb32TG_INTPOS_FRAME                                0
    #define   LSb16TG_INTPOS_FRAME                                0
    #define       bTG_INTPOS_FRAME                             16
    #define   MSK32TG_INTPOS_FRAME                                0x0000FFFF

    #define     BA_TG_INTPOS_FIELD                             0x0036
    #define     B16TG_INTPOS_FIELD                             0x0036
    #define   LSb32TG_INTPOS_FIELD                                16
    #define   LSb16TG_INTPOS_FIELD                                0
    #define       bTG_INTPOS_FIELD                             16
    #define   MSK32TG_INTPOS_FIELD                                0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MODE                                     0x0038

    #define     BA_TG_MODE_EN                                  0x0038
    #define     B16TG_MODE_EN                                  0x0038
    #define   LSb32TG_MODE_EN                                     0
    #define   LSb16TG_MODE_EN                                     0
    #define       bTG_MODE_EN                                  1
    #define   MSK32TG_MODE_EN                                     0x00000001
    #define        TG_MODE_EN_MASTER                                        0x0
    #define        TG_MODE_EN_SLAVE                                         0x1
    ///////////////////////////////////////////////////////////
    #define     RA_TG_HVREF                                    0x003C

    #define     BA_TG_HVREF_SEL                                0x003C
    #define     B16TG_HVREF_SEL                                0x003C
    #define   LSb32TG_HVREF_SEL                                   0
    #define   LSb16TG_HVREF_SEL                                   0
    #define       bTG_HVREF_SEL                                1
    #define   MSK32TG_HVREF_SEL                                   0x00000001
    #define        TG_HVREF_SEL_SYNC                                        0x0
    #define        TG_HVREF_SEL_BLANK                                       0x1

    #define     BA_TG_HVREF_POL                                0x003C
    #define     B16TG_HVREF_POL                                0x003C
    #define   LSb32TG_HVREF_POL                                   1
    #define   LSb16TG_HVREF_POL                                   1
    #define       bTG_HVREF_POL                                1
    #define   MSK32TG_HVREF_POL                                   0x00000002
    #define        TG_HVREF_POL_NEG_PULSE                                   0x0
    #define        TG_HVREF_POL_POS_PULSE                                   0x1
    ///////////////////////////////////////////////////////////

    typedef struct SIE_TG {
    ///////////////////////////////////////////////////////////
    #define   GET32TG_INIT_Y(r32)                              _BFGET_(r32,15, 0)
    #define   SET32TG_INIT_Y(r32,v)                            _BFSET_(r32,15, 0,v)
    #define   GET16TG_INIT_Y(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_INIT_Y(r16,v)                            _BFSET_(r16,15, 0,v)

    #define   GET32TG_INIT_X(r32)                              _BFGET_(r32,31,16)
    #define   SET32TG_INIT_X(r32,v)                            _BFSET_(r32,31,16,v)
    #define   GET16TG_INIT_X(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_INIT_X(r16,v)                            _BFSET_(r16,15, 0,v)

    #define     w32TG_INIT                                     {\
            UNSG32 uINIT_Y                                     : 16;\
            UNSG32 uINIT_X                                     : 16;\
          }
    union { UNSG32 u32TG_INIT;
            struct w32TG_INIT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_SIZE_Y(r32)                              _BFGET_(r32,15, 0)
    #define   SET32TG_SIZE_Y(r32,v)                            _BFSET_(r32,15, 0,v)
    #define   GET16TG_SIZE_Y(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_SIZE_Y(r16,v)                            _BFSET_(r16,15, 0,v)

    #define   GET32TG_SIZE_X(r32)                              _BFGET_(r32,31,16)
    #define   SET32TG_SIZE_X(r32,v)                            _BFSET_(r32,31,16,v)
    #define   GET16TG_SIZE_X(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_SIZE_X(r16,v)                            _BFSET_(r16,15, 0,v)

    #define     w32TG_SIZE                                     {\
            UNSG32 uSIZE_Y                                     : 16;\
            UNSG32 uSIZE_X                                     : 16;\
          }
    union { UNSG32 u32TG_SIZE;
            struct w32TG_SIZE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_HS_FE(r32)                               _BFGET_(r32,15, 0)
    #define   SET32TG_HS_FE(r32,v)                             _BFSET_(r32,15, 0,v)
    #define   GET16TG_HS_FE(r16)                               _BFGET_(r16,15, 0)
    #define   SET16TG_HS_FE(r16,v)                             _BFSET_(r16,15, 0,v)

    #define   GET32TG_HS_BE(r32)                               _BFGET_(r32,31,16)
    #define   SET32TG_HS_BE(r32,v)                             _BFSET_(r32,31,16,v)
    #define   GET16TG_HS_BE(r16)                               _BFGET_(r16,15, 0)
    #define   SET16TG_HS_BE(r16,v)                             _BFSET_(r16,15, 0,v)

    #define     w32TG_HS                                       {\
            UNSG32 uHS_FE                                      : 16;\
            UNSG32 uHS_BE                                      : 16;\
          }
    union { UNSG32 u32TG_HS;
            struct w32TG_HS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_HB_FE(r32)                               _BFGET_(r32,15, 0)
    #define   SET32TG_HB_FE(r32,v)                             _BFSET_(r32,15, 0,v)
    #define   GET16TG_HB_FE(r16)                               _BFGET_(r16,15, 0)
    #define   SET16TG_HB_FE(r16,v)                             _BFSET_(r16,15, 0,v)

    #define   GET32TG_HB_BE(r32)                               _BFGET_(r32,31,16)
    #define   SET32TG_HB_BE(r32,v)                             _BFSET_(r32,31,16,v)
    #define   GET16TG_HB_BE(r16)                               _BFGET_(r16,15, 0)
    #define   SET16TG_HB_BE(r16,v)                             _BFSET_(r16,15, 0,v)

    #define     w32TG_HB                                       {\
            UNSG32 uHB_FE                                      : 16;\
            UNSG32 uHB_BE                                      : 16;\
          }
    union { UNSG32 u32TG_HB;
            struct w32TG_HB;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_HB_CR_FE(r32)                            _BFGET_(r32,15, 0)
    #define   SET32TG_HB_CR_FE(r32,v)                          _BFSET_(r32,15, 0,v)
    #define   GET16TG_HB_CR_FE(r16)                            _BFGET_(r16,15, 0)
    #define   SET16TG_HB_CR_FE(r16,v)                          _BFSET_(r16,15, 0,v)

    #define   GET32TG_HB_CR_BE(r32)                            _BFGET_(r32,31,16)
    #define   SET32TG_HB_CR_BE(r32,v)                          _BFSET_(r32,31,16,v)
    #define   GET16TG_HB_CR_BE(r16)                            _BFGET_(r16,15, 0)
    #define   SET16TG_HB_CR_BE(r16,v)                          _BFSET_(r16,15, 0,v)

    #define     w32TG_HB_CR                                    {\
            UNSG32 uHB_CR_FE                                   : 16;\
            UNSG32 uHB_CR_BE                                   : 16;\
          }
    union { UNSG32 u32TG_HB_CR;
            struct w32TG_HB_CR;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_HB_CR2_FE(r32)                           _BFGET_(r32,15, 0)
    #define   SET32TG_HB_CR2_FE(r32,v)                         _BFSET_(r32,15, 0,v)
    #define   GET16TG_HB_CR2_FE(r16)                           _BFGET_(r16,15, 0)
    #define   SET16TG_HB_CR2_FE(r16,v)                         _BFSET_(r16,15, 0,v)

    #define   GET32TG_HB_CR2_BE(r32)                           _BFGET_(r32,31,16)
    #define   SET32TG_HB_CR2_BE(r32,v)                         _BFSET_(r32,31,16,v)
    #define   GET16TG_HB_CR2_BE(r16)                           _BFGET_(r16,15, 0)
    #define   SET16TG_HB_CR2_BE(r16,v)                         _BFSET_(r16,15, 0,v)

    #define     w32TG_HB_CR2                                   {\
            UNSG32 uHB_CR2_FE                                  : 16;\
            UNSG32 uHB_CR2_BE                                  : 16;\
          }
    union { UNSG32 u32TG_HB_CR2;
            struct w32TG_HB_CR2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_VS0_FE(r32)                              _BFGET_(r32,15, 0)
    #define   SET32TG_VS0_FE(r32,v)                            _BFSET_(r32,15, 0,v)
    #define   GET16TG_VS0_FE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VS0_FE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define   GET32TG_VS0_BE(r32)                              _BFGET_(r32,31,16)
    #define   SET32TG_VS0_BE(r32,v)                            _BFSET_(r32,31,16,v)
    #define   GET16TG_VS0_BE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VS0_BE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define     w32TG_VS0                                      {\
            UNSG32 uVS0_FE                                     : 16;\
            UNSG32 uVS0_BE                                     : 16;\
          }
    union { UNSG32 u32TG_VS0;
            struct w32TG_VS0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_VS1_FE(r32)                              _BFGET_(r32,15, 0)
    #define   SET32TG_VS1_FE(r32,v)                            _BFSET_(r32,15, 0,v)
    #define   GET16TG_VS1_FE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VS1_FE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define   GET32TG_VS1_BE(r32)                              _BFGET_(r32,31,16)
    #define   SET32TG_VS1_BE(r32,v)                            _BFSET_(r32,31,16,v)
    #define   GET16TG_VS1_BE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VS1_BE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define     w32TG_VS1                                      {\
            UNSG32 uVS1_FE                                     : 16;\
            UNSG32 uVS1_BE                                     : 16;\
          }
    union { UNSG32 u32TG_VS1;
            struct w32TG_VS1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_VB0_FE(r32)                              _BFGET_(r32,15, 0)
    #define   SET32TG_VB0_FE(r32,v)                            _BFSET_(r32,15, 0,v)
    #define   GET16TG_VB0_FE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VB0_FE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define   GET32TG_VB0_BE(r32)                              _BFGET_(r32,31,16)
    #define   SET32TG_VB0_BE(r32,v)                            _BFSET_(r32,31,16,v)
    #define   GET16TG_VB0_BE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VB0_BE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define     w32TG_VB0                                      {\
            UNSG32 uVB0_FE                                     : 16;\
            UNSG32 uVB0_BE                                     : 16;\
          }
    union { UNSG32 u32TG_VB0;
            struct w32TG_VB0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_VB0_CR_FE(r32)                           _BFGET_(r32,15, 0)
    #define   SET32TG_VB0_CR_FE(r32,v)                         _BFSET_(r32,15, 0,v)
    #define   GET16TG_VB0_CR_FE(r16)                           _BFGET_(r16,15, 0)
    #define   SET16TG_VB0_CR_FE(r16,v)                         _BFSET_(r16,15, 0,v)

    #define   GET32TG_VB0_CR_BE(r32)                           _BFGET_(r32,31,16)
    #define   SET32TG_VB0_CR_BE(r32,v)                         _BFSET_(r32,31,16,v)
    #define   GET16TG_VB0_CR_BE(r16)                           _BFGET_(r16,15, 0)
    #define   SET16TG_VB0_CR_BE(r16,v)                         _BFSET_(r16,15, 0,v)

    #define     w32TG_VB0_CR                                   {\
            UNSG32 uVB0_CR_FE                                  : 16;\
            UNSG32 uVB0_CR_BE                                  : 16;\
          }
    union { UNSG32 u32TG_VB0_CR;
            struct w32TG_VB0_CR;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_VB0_CR2_FE(r32)                          _BFGET_(r32,15, 0)
    #define   SET32TG_VB0_CR2_FE(r32,v)                        _BFSET_(r32,15, 0,v)
    #define   GET16TG_VB0_CR2_FE(r16)                          _BFGET_(r16,15, 0)
    #define   SET16TG_VB0_CR2_FE(r16,v)                        _BFSET_(r16,15, 0,v)

    #define   GET32TG_VB0_CR2_BE(r32)                          _BFGET_(r32,31,16)
    #define   SET32TG_VB0_CR2_BE(r32,v)                        _BFSET_(r32,31,16,v)
    #define   GET16TG_VB0_CR2_BE(r16)                          _BFGET_(r16,15, 0)
    #define   SET16TG_VB0_CR2_BE(r16,v)                        _BFSET_(r16,15, 0,v)

    #define     w32TG_VB0_CR2                                  {\
            UNSG32 uVB0_CR2_FE                                 : 16;\
            UNSG32 uVB0_CR2_BE                                 : 16;\
          }
    union { UNSG32 u32TG_VB0_CR2;
            struct w32TG_VB0_CR2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_VB1_FE(r32)                              _BFGET_(r32,15, 0)
    #define   SET32TG_VB1_FE(r32,v)                            _BFSET_(r32,15, 0,v)
    #define   GET16TG_VB1_FE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VB1_FE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define   GET32TG_VB1_BE(r32)                              _BFGET_(r32,31,16)
    #define   SET32TG_VB1_BE(r32,v)                            _BFSET_(r32,31,16,v)
    #define   GET16TG_VB1_BE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VB1_BE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define     w32TG_VB1                                      {\
            UNSG32 uVB1_FE                                     : 16;\
            UNSG32 uVB1_BE                                     : 16;\
          }
    union { UNSG32 u32TG_VB1;
            struct w32TG_VB1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_SCAN_MODE(r32)                           _BFGET_(r32, 0, 0)
    #define   SET32TG_SCAN_MODE(r32,v)                         _BFSET_(r32, 0, 0,v)
    #define   GET16TG_SCAN_MODE(r16)                           _BFGET_(r16, 0, 0)
    #define   SET16TG_SCAN_MODE(r16,v)                         _BFSET_(r16, 0, 0,v)

    #define     w32TG_SCAN                                     {\
            UNSG32 uSCAN_MODE                                  :  1;\
            UNSG32 RSVDx30_b1                                  : 31;\
          }
    union { UNSG32 u32TG_SCAN;
            struct w32TG_SCAN;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_INTPOS_FRAME(r32)                        _BFGET_(r32,15, 0)
    #define   SET32TG_INTPOS_FRAME(r32,v)                      _BFSET_(r32,15, 0,v)
    #define   GET16TG_INTPOS_FRAME(r16)                        _BFGET_(r16,15, 0)
    #define   SET16TG_INTPOS_FRAME(r16,v)                      _BFSET_(r16,15, 0,v)

    #define   GET32TG_INTPOS_FIELD(r32)                        _BFGET_(r32,31,16)
    #define   SET32TG_INTPOS_FIELD(r32,v)                      _BFSET_(r32,31,16,v)
    #define   GET16TG_INTPOS_FIELD(r16)                        _BFGET_(r16,15, 0)
    #define   SET16TG_INTPOS_FIELD(r16,v)                      _BFSET_(r16,15, 0,v)

    #define     w32TG_INTPOS                                   {\
            UNSG32 uINTPOS_FRAME                               : 16;\
            UNSG32 uINTPOS_FIELD                               : 16;\
          }
    union { UNSG32 u32TG_INTPOS;
            struct w32TG_INTPOS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MODE_EN(r32)                             _BFGET_(r32, 0, 0)
    #define   SET32TG_MODE_EN(r32,v)                           _BFSET_(r32, 0, 0,v)
    #define   GET16TG_MODE_EN(r16)                             _BFGET_(r16, 0, 0)
    #define   SET16TG_MODE_EN(r16,v)                           _BFSET_(r16, 0, 0,v)

    #define     w32TG_MODE                                     {\
            UNSG32 uMODE_EN                                    :  1;\
            UNSG32 RSVDx38_b1                                  : 31;\
          }
    union { UNSG32 u32TG_MODE;
            struct w32TG_MODE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_HVREF_SEL(r32)                           _BFGET_(r32, 0, 0)
    #define   SET32TG_HVREF_SEL(r32,v)                         _BFSET_(r32, 0, 0,v)
    #define   GET16TG_HVREF_SEL(r16)                           _BFGET_(r16, 0, 0)
    #define   SET16TG_HVREF_SEL(r16,v)                         _BFSET_(r16, 0, 0,v)

    #define   GET32TG_HVREF_POL(r32)                           _BFGET_(r32, 1, 1)
    #define   SET32TG_HVREF_POL(r32,v)                         _BFSET_(r32, 1, 1,v)
    #define   GET16TG_HVREF_POL(r16)                           _BFGET_(r16, 1, 1)
    #define   SET16TG_HVREF_POL(r16,v)                         _BFSET_(r16, 1, 1,v)

    #define     w32TG_HVREF                                    {\
            UNSG32 uHVREF_SEL                                  :  1;\
            UNSG32 uHVREF_POL                                  :  1;\
            UNSG32 RSVDx3C_b2                                  : 30;\
          }
    union { UNSG32 u32TG_HVREF;
            struct w32TG_HVREF;
          };
    ///////////////////////////////////////////////////////////
    } SIE_TG;

    typedef union  T32TG_INIT
          { UNSG32 u32;
            struct w32TG_INIT;
                 } T32TG_INIT;
    typedef union  T32TG_SIZE
          { UNSG32 u32;
            struct w32TG_SIZE;
                 } T32TG_SIZE;
    typedef union  T32TG_HS
          { UNSG32 u32;
            struct w32TG_HS;
                 } T32TG_HS;
    typedef union  T32TG_HB
          { UNSG32 u32;
            struct w32TG_HB;
                 } T32TG_HB;
    typedef union  T32TG_HB_CR
          { UNSG32 u32;
            struct w32TG_HB_CR;
                 } T32TG_HB_CR;
    typedef union  T32TG_HB_CR2
          { UNSG32 u32;
            struct w32TG_HB_CR2;
                 } T32TG_HB_CR2;
    typedef union  T32TG_VS0
          { UNSG32 u32;
            struct w32TG_VS0;
                 } T32TG_VS0;
    typedef union  T32TG_VS1
          { UNSG32 u32;
            struct w32TG_VS1;
                 } T32TG_VS1;
    typedef union  T32TG_VB0
          { UNSG32 u32;
            struct w32TG_VB0;
                 } T32TG_VB0;
    typedef union  T32TG_VB0_CR
          { UNSG32 u32;
            struct w32TG_VB0_CR;
                 } T32TG_VB0_CR;
    typedef union  T32TG_VB0_CR2
          { UNSG32 u32;
            struct w32TG_VB0_CR2;
                 } T32TG_VB0_CR2;
    typedef union  T32TG_VB1
          { UNSG32 u32;
            struct w32TG_VB1;
                 } T32TG_VB1;
    typedef union  T32TG_SCAN
          { UNSG32 u32;
            struct w32TG_SCAN;
                 } T32TG_SCAN;
    typedef union  T32TG_INTPOS
          { UNSG32 u32;
            struct w32TG_INTPOS;
                 } T32TG_INTPOS;
    typedef union  T32TG_MODE
          { UNSG32 u32;
            struct w32TG_MODE;
                 } T32TG_MODE;
    typedef union  T32TG_HVREF
          { UNSG32 u32;
            struct w32TG_HVREF;
                 } T32TG_HVREF;
    ///////////////////////////////////////////////////////////

    typedef union  TTG_INIT
          { UNSG32 u32[1];
            struct {
            struct w32TG_INIT;
                   };
                 } TTG_INIT;
    typedef union  TTG_SIZE
          { UNSG32 u32[1];
            struct {
            struct w32TG_SIZE;
                   };
                 } TTG_SIZE;
    typedef union  TTG_HS
          { UNSG32 u32[1];
            struct {
            struct w32TG_HS;
                   };
                 } TTG_HS;
    typedef union  TTG_HB
          { UNSG32 u32[1];
            struct {
            struct w32TG_HB;
                   };
                 } TTG_HB;
    typedef union  TTG_HB_CR
          { UNSG32 u32[1];
            struct {
            struct w32TG_HB_CR;
                   };
                 } TTG_HB_CR;
    typedef union  TTG_HB_CR2
          { UNSG32 u32[1];
            struct {
            struct w32TG_HB_CR2;
                   };
                 } TTG_HB_CR2;
    typedef union  TTG_VS0
          { UNSG32 u32[1];
            struct {
            struct w32TG_VS0;
                   };
                 } TTG_VS0;
    typedef union  TTG_VS1
          { UNSG32 u32[1];
            struct {
            struct w32TG_VS1;
                   };
                 } TTG_VS1;
    typedef union  TTG_VB0
          { UNSG32 u32[1];
            struct {
            struct w32TG_VB0;
                   };
                 } TTG_VB0;
    typedef union  TTG_VB0_CR
          { UNSG32 u32[1];
            struct {
            struct w32TG_VB0_CR;
                   };
                 } TTG_VB0_CR;
    typedef union  TTG_VB0_CR2
          { UNSG32 u32[1];
            struct {
            struct w32TG_VB0_CR2;
                   };
                 } TTG_VB0_CR2;
    typedef union  TTG_VB1
          { UNSG32 u32[1];
            struct {
            struct w32TG_VB1;
                   };
                 } TTG_VB1;
    typedef union  TTG_SCAN
          { UNSG32 u32[1];
            struct {
            struct w32TG_SCAN;
                   };
                 } TTG_SCAN;
    typedef union  TTG_INTPOS
          { UNSG32 u32[1];
            struct {
            struct w32TG_INTPOS;
                   };
                 } TTG_INTPOS;
    typedef union  TTG_MODE
          { UNSG32 u32[1];
            struct {
            struct w32TG_MODE;
                   };
                 } TTG_MODE;
    typedef union  TTG_HVREF
          { UNSG32 u32[1];
            struct {
            struct w32TG_HVREF;
                   };
                 } TTG_HVREF;

    ///////////////////////////////////////////////////////////
     SIGN32 TG_drvrd(SIE_TG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 TG_drvwr(SIE_TG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void TG_reset(SIE_TG *p);
     SIGN32 TG_cmp  (SIE_TG *p, SIE_TG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define TG_check(p,pie,pfx,hLOG) TG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define TG_print(p,    pfx,hLOG) TG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: TG
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE TG_MAIN                 biu              (4,4)
///     ###
///     * Register specification of interface Timing Generator used in Main Video Plane (BL and EL)
///     * There are two counters in the timing generator module. hCntr (from 1 to SIZE_X) and vCntr (from 1 to SIZE_Y).
///     * When start, the initial value will be loaded to the xCnt and yCnt
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 INIT                 (P)
///               %unsigned 16 Y                         0x1
///                                    ###
///                                    * Initial Y value which will be used to load Y counter when tg is enabled.
///                                    ###
///               %unsigned 16 X                         0x1
///                                    ###
///                                    * Initial X value which will be used to load X counter when tg is enabled.
///                                    * A whole frame scan size.
///                                    ###
///     @ 0x00004 SIZE                 (P)
///               %unsigned 16 Y                         0x465
///                                    ###
///                                    * Total scan lines per frame.
///                                    ###
///               %unsigned 16 X                         0x898
///                                    ###
///                                    * Total scan clock cycles per line.
///                                    * Hsync
///                                    ###
///     @ 0x00008 HS                   (P)
///               %unsigned 16 FE                        0x1
///                                    ###
///                                    * Hsync front edge. The first pixel position of hsync pulse.
///                                    ###
///               %unsigned 16 BE                        0x2C
///                                    ###
///                                    * Hsync back edge. The last pixel position of hsync pulse.
///                                    * HS = hCntr>=FE & hCntr<=BE
///                                    * HBlanking
///                                    ###
///     @ 0x0000C HB                   (P)
///               %unsigned 16 FE                        0x841
///                                    ###
///                                    * Hblank front edge. The first pixel position of the hBlank pulse. SIZEX-HFP = 2200-88+1
///                                    * [Used for Base Plane]
///                                    ###
///               %unsigned 16 BE                        0xC0
///                                    ###
///                                    * Hblank back edge. The last pixel position of the hBlank pulse. HPW + HBP = 44+148
///                                    * [Used for Base Plane]
///                                    * HB = hCntr>=FE || hCntr<=BE.
///                                    ###
///     @ 0x00010 HB_Y                 (P)
///               %unsigned 16 FE                        0x841
///                                    ###
///                                    * Hblank front edge. The first pixel position of the hBlank pulse. SIZEX-HFP = 2200-88+1
///                                    * [Used for Luma Input Crop Plane]
///                                    ###
///               %unsigned 16 BE                        0xC0
///                                    ###
///                                    * Hblank back edge. The last pixel position of the hBlank pulse. HPW + HBP = 44+148
///                                    * [Used for Luma Input Crop Plane]
///                                    * HB_Y = hCntr>=FE || hCntr<=BE.
///                                    ###
///     @ 0x00014 HB_C                 (P)
///               %unsigned 16 FE                        0x841
///                                    ###
///                                    * Hblank front edge. The first pixel position of the hBlank pulse. SIZEX-HFP = 2200-88+1
///                                    * [Used for Croma Input Crop Plane]
///                                    ###
///               %unsigned 16 BE                        0xC0
///                                    ###
///                                    * Hblank back edge. The last pixel position of the hBlank pulse. HPW + HBP = 44+148
///                                    * [Used for Croma Input Crop Plane]
///                                    * HB_C = hCntr>=FE || hCntr<=BE.
///                                    ###
///     @ 0x00018 HB_OUT               (P)
///               %unsigned 16 FE                        0x841
///                                    ###
///                                    * Hblank front edge. The first pixel position of the hBlank pulse. SIZEX-HFP = 2200-88+1
///                                    * [Used for DETILE-UPS420 Output, downstream logic will work on this DE]
///                                    ###
///               %unsigned 16 BE                        0xC0
///                                    ###
///                                    * Hblank back edge. The last pixel position of the hBlank pulse. HPW + HBP = 44+148
///                                    * [Used for DETILE-UPS420 Output, downstream logic will work on this DE]
///                                    * HB_OUT = hCntr>=FE || hCntr<=BE.
///                                    * VS0 defines the first first pixel position of the first VSYNC (progressive or interlace mode) pulse.
///                                    * For example
///                                    * 1080i60, the VTP is the last pixel of the last line. So set both VLCNT0 and VPCNT0 to 0.
///                                    ###
///     @ 0x0001C VS0                  (P)
///               %unsigned 16 FE                        0x1
///                                    ###
///                                    * Vsync pulse front edge.
///                                    * Vsync will be asserted at the beginning of this line.
///                                    ###
///               %unsigned 16 BE                        0x5
///                                    ###
///                                    * Vsync pulse back edge.
///                                    * Vsycn pulse will be de-asserted after the end of this line.
///                                    * Vsync = (vCntr>=FE & vCntr<=BE)
///                                    * Vsync pulse 1
///                                    * defines the first pixel position of the second vSync pulse. For example
///                                    * 1080i60, the VTP is pixel 1100 of line 563. So set both VLCNT2=563. and VPCNT2 to 1100.
///                                    ###
///     @ 0x00020 VS1                  (P)
///               %unsigned 16 FE                        0x233
///                                    ###
///                                    * Vsync pulse 1 front edge line position.
///                                    * Vsync pulse 1 will be asserted at the middle of this line.
///                                    ###
///               %unsigned 16 BE                        0x238
///                                    ###
///                                    * Vsync pulse 1 back edge line position.
///                                    * Vsync pulse 1 will be de-asserted at the middle of this line.
///                                    * Vsync1 = (vCntr>=FE & hCntr>SIZEX/2) & (vCntr<=BE & hCntr<=SIZEX/2)
///                                    * Vertical blanking.
///                                    * VB0 parameter definietion
///                                    ###
///     @ 0x00024 VB0                  (P)
///               %unsigned 16 FE                        0x462
///                                    ###
///                                    * Vblank front edge line position
///                                    * The first line of the vertical blanking.
///                                    * [Used for Base Plane]
///                                    ###
///               %unsigned 16 BE                        0x29
///                                    ###
///                                    * Vblank back edge line position
///                                    * the last line number of the vertical blanking
///                                    * The default value is used for 1080p case.
///                                    * [Used for Base Plane]
///                                    * Vblank0 = vCntr>=FE || vCntr<=BE
///                                    ###
///     @ 0x00028 VB0_Y                (P)
///               %unsigned 16 FE                        0x462
///                                    ###
///                                    * Vblank front edge line position
///                                    * The first line of the vertical blanking.
///                                    * [Used for Luma Input Crop Plane]
///                                    ###
///               %unsigned 16 BE                        0x29
///                                    ###
///                                    * Vblank back edge line position
///                                    * the last line number of the vertical blanking
///                                    * The default value is used for 1080p case.
///                                    * [Used for Croma Input Crop Plane]
///                                    * Vblank0_CR = vCntr>=FE || vCntr<=BE
///                                    ###
///     @ 0x0002C VB0_C                (P)
///               %unsigned 16 FE                        0x462
///               %unsigned 16 BE                        0x29
///                                    ###
///                                    * Vblank back edge line position
///                                    * the last line number of the vertical blanking
///                                    * The default value is used for 1080p case.
///                                    * [Used for Croma Input Crop Plane]
///                                    * Vblank0 = vCntr>=FE || vCntr<=BE
///                                    ###
///     @ 0x00030 VB0_OUT              (P)
///               %unsigned 16 FE                        0x462
///                                    ###
///                                    * Vblank front edge line position
///                                    * The first line of the vertical blanking.
///                                    * [Used for DETILE-UPS420 Output, downstream logic will work on this DE]
///                                    ###
///               %unsigned 16 BE                        0x29
///                                    ###
///                                    * Vblank back edge line position
///                                    * the last line number of the vertical blanking
///                                    * The default value is used for 1080p case.
///                                    * [Used for DETILE-UPS420 Output, downstream logic will work on this DE]
///                                    * Vblank0 = vCntr>=FE || vCntr<=BE
///                                    ###
///     @ 0x00034 VB1                  (P)
///               %unsigned 16 FE                        0x231
///                                    ###
///                                    * Vblank front edge line postion
///                                    * The first line number of VB1.
///                                    ###
///               %unsigned 16 BE                        0x247
///                                    ###
///                                    * Vblank back edge line postion
///                                    * the last line numer of VB1.
///                                    * VB1 = (vCntr>=FE & vCntr<=BE)
///                                    * SCAN mode
///                                    ###
///     @ 0x00038 SCAN                 (P)
///               %unsigned 1  MODE                      0x0
///                                    : PROG                      0x0
///                                    : INTER                     0x1
///                                                 ###
///                                                 * Frame done interrupt position
///                                                 ###
///               %%        31         # Stuffing bits...
///     @ 0x0003C INTPOS               (P)
///               %unsigned 16 FRAME                     0x465
///                                    ###
///                                    * Frame interrupt status will be set at the end of this line.
///                                    * Program 0 to this register will disable frame interrupt.
///                                    ###
///               %unsigned 16 FIELD                     0x233
///                                    ###
///                                    * Field interrupt status will be set at the end of this line.
///                                    * Program 0 to this register will disable field interrupt.
///                                    * MODE
///                                    ###
///     @ 0x00040 MODE                 (P)
///               %unsigned 1  EN                        0x0
///                                    : MASTER                    0x0
///                                    : SLAVE                     0x1
///                                                 ###
///                                                 * In master mode, TG drive the control signal.
///                                                 * In slave mode, TG take the external hsync and vsync, it generate the internal sync and blank signal based on the programmed register and external hsync and vsync.
///                                                 * HREF input for slave mode.
///                                                 ###
///               %%        31         # Stuffing bits...
///     @ 0x00044 HVREF                (P)
///               %unsigned 1  SEL                       0x0
///                                    : SYNC                      0x0
///                                    : BLANK                     0x1
///                                                 ###
///                                                 * In slave mode, tg will sync to the external tg generated HREF/VREF which could be HSYBC/VSYNC or HBLANK/VBLANK. Currently only HSYNC/VSYNC is supported.
///                                                 * HSYNC and VSYNC have to be come in pair.
///                                                 ###
///               %unsigned 1  POL                       0x0
///                                    : NEG_PULSE                 0x0
///                                    : POS_PULSE                 0x1
///                                                 ###
///                                                 * 0 : indicate the input HREF/VREF are negative pulses
///                                                 * 1: indicate the input HREF/VREFare positive pulses.
///                                                 * HREF and VREF have to be the same polarity.
///                                                 * End of TG register group
///                                                 ###
///               %%        30         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      72B, bits:     484b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_TG_MAIN
#define h_TG_MAIN (){}

    #define     RA_TG_MAIN_INIT                                0x0000

    #define     BA_TG_MAIN_INIT_Y                              0x0000
    #define     B16TG_MAIN_INIT_Y                              0x0000
    #define   LSb32TG_MAIN_INIT_Y                                 0
    #define   LSb16TG_MAIN_INIT_Y                                 0
    #define       bTG_MAIN_INIT_Y                              16
    #define   MSK32TG_MAIN_INIT_Y                                 0x0000FFFF

    #define     BA_TG_MAIN_INIT_X                              0x0002
    #define     B16TG_MAIN_INIT_X                              0x0002
    #define   LSb32TG_MAIN_INIT_X                                 16
    #define   LSb16TG_MAIN_INIT_X                                 0
    #define       bTG_MAIN_INIT_X                              16
    #define   MSK32TG_MAIN_INIT_X                                 0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_SIZE                                0x0004

    #define     BA_TG_MAIN_SIZE_Y                              0x0004
    #define     B16TG_MAIN_SIZE_Y                              0x0004
    #define   LSb32TG_MAIN_SIZE_Y                                 0
    #define   LSb16TG_MAIN_SIZE_Y                                 0
    #define       bTG_MAIN_SIZE_Y                              16
    #define   MSK32TG_MAIN_SIZE_Y                                 0x0000FFFF

    #define     BA_TG_MAIN_SIZE_X                              0x0006
    #define     B16TG_MAIN_SIZE_X                              0x0006
    #define   LSb32TG_MAIN_SIZE_X                                 16
    #define   LSb16TG_MAIN_SIZE_X                                 0
    #define       bTG_MAIN_SIZE_X                              16
    #define   MSK32TG_MAIN_SIZE_X                                 0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_HS                                  0x0008

    #define     BA_TG_MAIN_HS_FE                               0x0008
    #define     B16TG_MAIN_HS_FE                               0x0008
    #define   LSb32TG_MAIN_HS_FE                                  0
    #define   LSb16TG_MAIN_HS_FE                                  0
    #define       bTG_MAIN_HS_FE                               16
    #define   MSK32TG_MAIN_HS_FE                                  0x0000FFFF

    #define     BA_TG_MAIN_HS_BE                               0x000A
    #define     B16TG_MAIN_HS_BE                               0x000A
    #define   LSb32TG_MAIN_HS_BE                                  16
    #define   LSb16TG_MAIN_HS_BE                                  0
    #define       bTG_MAIN_HS_BE                               16
    #define   MSK32TG_MAIN_HS_BE                                  0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_HB                                  0x000C

    #define     BA_TG_MAIN_HB_FE                               0x000C
    #define     B16TG_MAIN_HB_FE                               0x000C
    #define   LSb32TG_MAIN_HB_FE                                  0
    #define   LSb16TG_MAIN_HB_FE                                  0
    #define       bTG_MAIN_HB_FE                               16
    #define   MSK32TG_MAIN_HB_FE                                  0x0000FFFF

    #define     BA_TG_MAIN_HB_BE                               0x000E
    #define     B16TG_MAIN_HB_BE                               0x000E
    #define   LSb32TG_MAIN_HB_BE                                  16
    #define   LSb16TG_MAIN_HB_BE                                  0
    #define       bTG_MAIN_HB_BE                               16
    #define   MSK32TG_MAIN_HB_BE                                  0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_HB_Y                                0x0010

    #define     BA_TG_MAIN_HB_Y_FE                             0x0010
    #define     B16TG_MAIN_HB_Y_FE                             0x0010
    #define   LSb32TG_MAIN_HB_Y_FE                                0
    #define   LSb16TG_MAIN_HB_Y_FE                                0
    #define       bTG_MAIN_HB_Y_FE                             16
    #define   MSK32TG_MAIN_HB_Y_FE                                0x0000FFFF

    #define     BA_TG_MAIN_HB_Y_BE                             0x0012
    #define     B16TG_MAIN_HB_Y_BE                             0x0012
    #define   LSb32TG_MAIN_HB_Y_BE                                16
    #define   LSb16TG_MAIN_HB_Y_BE                                0
    #define       bTG_MAIN_HB_Y_BE                             16
    #define   MSK32TG_MAIN_HB_Y_BE                                0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_HB_C                                0x0014

    #define     BA_TG_MAIN_HB_C_FE                             0x0014
    #define     B16TG_MAIN_HB_C_FE                             0x0014
    #define   LSb32TG_MAIN_HB_C_FE                                0
    #define   LSb16TG_MAIN_HB_C_FE                                0
    #define       bTG_MAIN_HB_C_FE                             16
    #define   MSK32TG_MAIN_HB_C_FE                                0x0000FFFF

    #define     BA_TG_MAIN_HB_C_BE                             0x0016
    #define     B16TG_MAIN_HB_C_BE                             0x0016
    #define   LSb32TG_MAIN_HB_C_BE                                16
    #define   LSb16TG_MAIN_HB_C_BE                                0
    #define       bTG_MAIN_HB_C_BE                             16
    #define   MSK32TG_MAIN_HB_C_BE                                0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_HB_OUT                              0x0018

    #define     BA_TG_MAIN_HB_OUT_FE                           0x0018
    #define     B16TG_MAIN_HB_OUT_FE                           0x0018
    #define   LSb32TG_MAIN_HB_OUT_FE                              0
    #define   LSb16TG_MAIN_HB_OUT_FE                              0
    #define       bTG_MAIN_HB_OUT_FE                           16
    #define   MSK32TG_MAIN_HB_OUT_FE                              0x0000FFFF

    #define     BA_TG_MAIN_HB_OUT_BE                           0x001A
    #define     B16TG_MAIN_HB_OUT_BE                           0x001A
    #define   LSb32TG_MAIN_HB_OUT_BE                              16
    #define   LSb16TG_MAIN_HB_OUT_BE                              0
    #define       bTG_MAIN_HB_OUT_BE                           16
    #define   MSK32TG_MAIN_HB_OUT_BE                              0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_VS0                                 0x001C

    #define     BA_TG_MAIN_VS0_FE                              0x001C
    #define     B16TG_MAIN_VS0_FE                              0x001C
    #define   LSb32TG_MAIN_VS0_FE                                 0
    #define   LSb16TG_MAIN_VS0_FE                                 0
    #define       bTG_MAIN_VS0_FE                              16
    #define   MSK32TG_MAIN_VS0_FE                                 0x0000FFFF

    #define     BA_TG_MAIN_VS0_BE                              0x001E
    #define     B16TG_MAIN_VS0_BE                              0x001E
    #define   LSb32TG_MAIN_VS0_BE                                 16
    #define   LSb16TG_MAIN_VS0_BE                                 0
    #define       bTG_MAIN_VS0_BE                              16
    #define   MSK32TG_MAIN_VS0_BE                                 0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_VS1                                 0x0020

    #define     BA_TG_MAIN_VS1_FE                              0x0020
    #define     B16TG_MAIN_VS1_FE                              0x0020
    #define   LSb32TG_MAIN_VS1_FE                                 0
    #define   LSb16TG_MAIN_VS1_FE                                 0
    #define       bTG_MAIN_VS1_FE                              16
    #define   MSK32TG_MAIN_VS1_FE                                 0x0000FFFF

    #define     BA_TG_MAIN_VS1_BE                              0x0022
    #define     B16TG_MAIN_VS1_BE                              0x0022
    #define   LSb32TG_MAIN_VS1_BE                                 16
    #define   LSb16TG_MAIN_VS1_BE                                 0
    #define       bTG_MAIN_VS1_BE                              16
    #define   MSK32TG_MAIN_VS1_BE                                 0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_VB0                                 0x0024

    #define     BA_TG_MAIN_VB0_FE                              0x0024
    #define     B16TG_MAIN_VB0_FE                              0x0024
    #define   LSb32TG_MAIN_VB0_FE                                 0
    #define   LSb16TG_MAIN_VB0_FE                                 0
    #define       bTG_MAIN_VB0_FE                              16
    #define   MSK32TG_MAIN_VB0_FE                                 0x0000FFFF

    #define     BA_TG_MAIN_VB0_BE                              0x0026
    #define     B16TG_MAIN_VB0_BE                              0x0026
    #define   LSb32TG_MAIN_VB0_BE                                 16
    #define   LSb16TG_MAIN_VB0_BE                                 0
    #define       bTG_MAIN_VB0_BE                              16
    #define   MSK32TG_MAIN_VB0_BE                                 0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_VB0_Y                               0x0028

    #define     BA_TG_MAIN_VB0_Y_FE                            0x0028
    #define     B16TG_MAIN_VB0_Y_FE                            0x0028
    #define   LSb32TG_MAIN_VB0_Y_FE                               0
    #define   LSb16TG_MAIN_VB0_Y_FE                               0
    #define       bTG_MAIN_VB0_Y_FE                            16
    #define   MSK32TG_MAIN_VB0_Y_FE                               0x0000FFFF

    #define     BA_TG_MAIN_VB0_Y_BE                            0x002A
    #define     B16TG_MAIN_VB0_Y_BE                            0x002A
    #define   LSb32TG_MAIN_VB0_Y_BE                               16
    #define   LSb16TG_MAIN_VB0_Y_BE                               0
    #define       bTG_MAIN_VB0_Y_BE                            16
    #define   MSK32TG_MAIN_VB0_Y_BE                               0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_VB0_C                               0x002C

    #define     BA_TG_MAIN_VB0_C_FE                            0x002C
    #define     B16TG_MAIN_VB0_C_FE                            0x002C
    #define   LSb32TG_MAIN_VB0_C_FE                               0
    #define   LSb16TG_MAIN_VB0_C_FE                               0
    #define       bTG_MAIN_VB0_C_FE                            16
    #define   MSK32TG_MAIN_VB0_C_FE                               0x0000FFFF

    #define     BA_TG_MAIN_VB0_C_BE                            0x002E
    #define     B16TG_MAIN_VB0_C_BE                            0x002E
    #define   LSb32TG_MAIN_VB0_C_BE                               16
    #define   LSb16TG_MAIN_VB0_C_BE                               0
    #define       bTG_MAIN_VB0_C_BE                            16
    #define   MSK32TG_MAIN_VB0_C_BE                               0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_VB0_OUT                             0x0030

    #define     BA_TG_MAIN_VB0_OUT_FE                          0x0030
    #define     B16TG_MAIN_VB0_OUT_FE                          0x0030
    #define   LSb32TG_MAIN_VB0_OUT_FE                             0
    #define   LSb16TG_MAIN_VB0_OUT_FE                             0
    #define       bTG_MAIN_VB0_OUT_FE                          16
    #define   MSK32TG_MAIN_VB0_OUT_FE                             0x0000FFFF

    #define     BA_TG_MAIN_VB0_OUT_BE                          0x0032
    #define     B16TG_MAIN_VB0_OUT_BE                          0x0032
    #define   LSb32TG_MAIN_VB0_OUT_BE                             16
    #define   LSb16TG_MAIN_VB0_OUT_BE                             0
    #define       bTG_MAIN_VB0_OUT_BE                          16
    #define   MSK32TG_MAIN_VB0_OUT_BE                             0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_VB1                                 0x0034

    #define     BA_TG_MAIN_VB1_FE                              0x0034
    #define     B16TG_MAIN_VB1_FE                              0x0034
    #define   LSb32TG_MAIN_VB1_FE                                 0
    #define   LSb16TG_MAIN_VB1_FE                                 0
    #define       bTG_MAIN_VB1_FE                              16
    #define   MSK32TG_MAIN_VB1_FE                                 0x0000FFFF

    #define     BA_TG_MAIN_VB1_BE                              0x0036
    #define     B16TG_MAIN_VB1_BE                              0x0036
    #define   LSb32TG_MAIN_VB1_BE                                 16
    #define   LSb16TG_MAIN_VB1_BE                                 0
    #define       bTG_MAIN_VB1_BE                              16
    #define   MSK32TG_MAIN_VB1_BE                                 0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_SCAN                                0x0038

    #define     BA_TG_MAIN_SCAN_MODE                           0x0038
    #define     B16TG_MAIN_SCAN_MODE                           0x0038
    #define   LSb32TG_MAIN_SCAN_MODE                              0
    #define   LSb16TG_MAIN_SCAN_MODE                              0
    #define       bTG_MAIN_SCAN_MODE                           1
    #define   MSK32TG_MAIN_SCAN_MODE                              0x00000001
    #define        TG_MAIN_SCAN_MODE_PROG                                   0x0
    #define        TG_MAIN_SCAN_MODE_INTER                                  0x1
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_INTPOS                              0x003C

    #define     BA_TG_MAIN_INTPOS_FRAME                        0x003C
    #define     B16TG_MAIN_INTPOS_FRAME                        0x003C
    #define   LSb32TG_MAIN_INTPOS_FRAME                           0
    #define   LSb16TG_MAIN_INTPOS_FRAME                           0
    #define       bTG_MAIN_INTPOS_FRAME                        16
    #define   MSK32TG_MAIN_INTPOS_FRAME                           0x0000FFFF

    #define     BA_TG_MAIN_INTPOS_FIELD                        0x003E
    #define     B16TG_MAIN_INTPOS_FIELD                        0x003E
    #define   LSb32TG_MAIN_INTPOS_FIELD                           16
    #define   LSb16TG_MAIN_INTPOS_FIELD                           0
    #define       bTG_MAIN_INTPOS_FIELD                        16
    #define   MSK32TG_MAIN_INTPOS_FIELD                           0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_MODE                                0x0040

    #define     BA_TG_MAIN_MODE_EN                             0x0040
    #define     B16TG_MAIN_MODE_EN                             0x0040
    #define   LSb32TG_MAIN_MODE_EN                                0
    #define   LSb16TG_MAIN_MODE_EN                                0
    #define       bTG_MAIN_MODE_EN                             1
    #define   MSK32TG_MAIN_MODE_EN                                0x00000001
    #define        TG_MAIN_MODE_EN_MASTER                                   0x0
    #define        TG_MAIN_MODE_EN_SLAVE                                    0x1
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_HVREF                               0x0044

    #define     BA_TG_MAIN_HVREF_SEL                           0x0044
    #define     B16TG_MAIN_HVREF_SEL                           0x0044
    #define   LSb32TG_MAIN_HVREF_SEL                              0
    #define   LSb16TG_MAIN_HVREF_SEL                              0
    #define       bTG_MAIN_HVREF_SEL                           1
    #define   MSK32TG_MAIN_HVREF_SEL                              0x00000001
    #define        TG_MAIN_HVREF_SEL_SYNC                                   0x0
    #define        TG_MAIN_HVREF_SEL_BLANK                                  0x1

    #define     BA_TG_MAIN_HVREF_POL                           0x0044
    #define     B16TG_MAIN_HVREF_POL                           0x0044
    #define   LSb32TG_MAIN_HVREF_POL                              1
    #define   LSb16TG_MAIN_HVREF_POL                              1
    #define       bTG_MAIN_HVREF_POL                           1
    #define   MSK32TG_MAIN_HVREF_POL                              0x00000002
    #define        TG_MAIN_HVREF_POL_NEG_PULSE                              0x0
    #define        TG_MAIN_HVREF_POL_POS_PULSE                              0x1
    ///////////////////////////////////////////////////////////

    typedef struct SIE_TG_MAIN {
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_INIT_Y(r32)                         _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_INIT_Y(r32,v)                       _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_INIT_Y(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_INIT_Y(r16,v)                       _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_INIT_X(r32)                         _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_INIT_X(r32,v)                       _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_INIT_X(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_INIT_X(r16,v)                       _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_INIT                                {\
            UNSG32 uINIT_Y                                     : 16;\
            UNSG32 uINIT_X                                     : 16;\
          }
    union { UNSG32 u32TG_MAIN_INIT;
            struct w32TG_MAIN_INIT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_SIZE_Y(r32)                         _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_SIZE_Y(r32,v)                       _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_SIZE_Y(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_SIZE_Y(r16,v)                       _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_SIZE_X(r32)                         _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_SIZE_X(r32,v)                       _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_SIZE_X(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_SIZE_X(r16,v)                       _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_SIZE                                {\
            UNSG32 uSIZE_Y                                     : 16;\
            UNSG32 uSIZE_X                                     : 16;\
          }
    union { UNSG32 u32TG_MAIN_SIZE;
            struct w32TG_MAIN_SIZE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_HS_FE(r32)                          _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_HS_FE(r32,v)                        _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_HS_FE(r16)                          _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HS_FE(r16,v)                        _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_HS_BE(r32)                          _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_HS_BE(r32,v)                        _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_HS_BE(r16)                          _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HS_BE(r16,v)                        _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_HS                                  {\
            UNSG32 uHS_FE                                      : 16;\
            UNSG32 uHS_BE                                      : 16;\
          }
    union { UNSG32 u32TG_MAIN_HS;
            struct w32TG_MAIN_HS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_HB_FE(r32)                          _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_HB_FE(r32,v)                        _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_HB_FE(r16)                          _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_FE(r16,v)                        _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_HB_BE(r32)                          _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_HB_BE(r32,v)                        _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_HB_BE(r16)                          _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_BE(r16,v)                        _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_HB                                  {\
            UNSG32 uHB_FE                                      : 16;\
            UNSG32 uHB_BE                                      : 16;\
          }
    union { UNSG32 u32TG_MAIN_HB;
            struct w32TG_MAIN_HB;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_HB_Y_FE(r32)                        _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_HB_Y_FE(r32,v)                      _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_HB_Y_FE(r16)                        _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_Y_FE(r16,v)                      _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_HB_Y_BE(r32)                        _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_HB_Y_BE(r32,v)                      _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_HB_Y_BE(r16)                        _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_Y_BE(r16,v)                      _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_HB_Y                                {\
            UNSG32 uHB_Y_FE                                    : 16;\
            UNSG32 uHB_Y_BE                                    : 16;\
          }
    union { UNSG32 u32TG_MAIN_HB_Y;
            struct w32TG_MAIN_HB_Y;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_HB_C_FE(r32)                        _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_HB_C_FE(r32,v)                      _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_HB_C_FE(r16)                        _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_C_FE(r16,v)                      _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_HB_C_BE(r32)                        _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_HB_C_BE(r32,v)                      _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_HB_C_BE(r16)                        _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_C_BE(r16,v)                      _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_HB_C                                {\
            UNSG32 uHB_C_FE                                    : 16;\
            UNSG32 uHB_C_BE                                    : 16;\
          }
    union { UNSG32 u32TG_MAIN_HB_C;
            struct w32TG_MAIN_HB_C;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_HB_OUT_FE(r32)                      _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_HB_OUT_FE(r32,v)                    _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_HB_OUT_FE(r16)                      _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_OUT_FE(r16,v)                    _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_HB_OUT_BE(r32)                      _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_HB_OUT_BE(r32,v)                    _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_HB_OUT_BE(r16)                      _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_OUT_BE(r16,v)                    _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_HB_OUT                              {\
            UNSG32 uHB_OUT_FE                                  : 16;\
            UNSG32 uHB_OUT_BE                                  : 16;\
          }
    union { UNSG32 u32TG_MAIN_HB_OUT;
            struct w32TG_MAIN_HB_OUT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_VS0_FE(r32)                         _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_VS0_FE(r32,v)                       _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_VS0_FE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VS0_FE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_VS0_BE(r32)                         _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_VS0_BE(r32,v)                       _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_VS0_BE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VS0_BE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_VS0                                 {\
            UNSG32 uVS0_FE                                     : 16;\
            UNSG32 uVS0_BE                                     : 16;\
          }
    union { UNSG32 u32TG_MAIN_VS0;
            struct w32TG_MAIN_VS0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_VS1_FE(r32)                         _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_VS1_FE(r32,v)                       _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_VS1_FE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VS1_FE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_VS1_BE(r32)                         _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_VS1_BE(r32,v)                       _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_VS1_BE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VS1_BE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_VS1                                 {\
            UNSG32 uVS1_FE                                     : 16;\
            UNSG32 uVS1_BE                                     : 16;\
          }
    union { UNSG32 u32TG_MAIN_VS1;
            struct w32TG_MAIN_VS1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_VB0_FE(r32)                         _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_VB0_FE(r32,v)                       _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_VB0_FE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_FE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_VB0_BE(r32)                         _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_VB0_BE(r32,v)                       _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_VB0_BE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_BE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_VB0                                 {\
            UNSG32 uVB0_FE                                     : 16;\
            UNSG32 uVB0_BE                                     : 16;\
          }
    union { UNSG32 u32TG_MAIN_VB0;
            struct w32TG_MAIN_VB0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_VB0_Y_FE(r32)                       _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_VB0_Y_FE(r32,v)                     _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_VB0_Y_FE(r16)                       _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_Y_FE(r16,v)                     _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_VB0_Y_BE(r32)                       _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_VB0_Y_BE(r32,v)                     _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_VB0_Y_BE(r16)                       _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_Y_BE(r16,v)                     _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_VB0_Y                               {\
            UNSG32 uVB0_Y_FE                                   : 16;\
            UNSG32 uVB0_Y_BE                                   : 16;\
          }
    union { UNSG32 u32TG_MAIN_VB0_Y;
            struct w32TG_MAIN_VB0_Y;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_VB0_C_FE(r32)                       _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_VB0_C_FE(r32,v)                     _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_VB0_C_FE(r16)                       _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_C_FE(r16,v)                     _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_VB0_C_BE(r32)                       _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_VB0_C_BE(r32,v)                     _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_VB0_C_BE(r16)                       _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_C_BE(r16,v)                     _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_VB0_C                               {\
            UNSG32 uVB0_C_FE                                   : 16;\
            UNSG32 uVB0_C_BE                                   : 16;\
          }
    union { UNSG32 u32TG_MAIN_VB0_C;
            struct w32TG_MAIN_VB0_C;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_VB0_OUT_FE(r32)                     _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_VB0_OUT_FE(r32,v)                   _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_VB0_OUT_FE(r16)                     _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_OUT_FE(r16,v)                   _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_VB0_OUT_BE(r32)                     _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_VB0_OUT_BE(r32,v)                   _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_VB0_OUT_BE(r16)                     _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_OUT_BE(r16,v)                   _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_VB0_OUT                             {\
            UNSG32 uVB0_OUT_FE                                 : 16;\
            UNSG32 uVB0_OUT_BE                                 : 16;\
          }
    union { UNSG32 u32TG_MAIN_VB0_OUT;
            struct w32TG_MAIN_VB0_OUT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_VB1_FE(r32)                         _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_VB1_FE(r32,v)                       _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_VB1_FE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB1_FE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_VB1_BE(r32)                         _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_VB1_BE(r32,v)                       _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_VB1_BE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB1_BE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_VB1                                 {\
            UNSG32 uVB1_FE                                     : 16;\
            UNSG32 uVB1_BE                                     : 16;\
          }
    union { UNSG32 u32TG_MAIN_VB1;
            struct w32TG_MAIN_VB1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_SCAN_MODE(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32TG_MAIN_SCAN_MODE(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16TG_MAIN_SCAN_MODE(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16TG_MAIN_SCAN_MODE(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define     w32TG_MAIN_SCAN                                {\
            UNSG32 uSCAN_MODE                                  :  1;\
            UNSG32 RSVDx38_b1                                  : 31;\
          }
    union { UNSG32 u32TG_MAIN_SCAN;
            struct w32TG_MAIN_SCAN;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_INTPOS_FRAME(r32)                   _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_INTPOS_FRAME(r32,v)                 _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_INTPOS_FRAME(r16)                   _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_INTPOS_FRAME(r16,v)                 _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_INTPOS_FIELD(r32)                   _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_INTPOS_FIELD(r32,v)                 _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_INTPOS_FIELD(r16)                   _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_INTPOS_FIELD(r16,v)                 _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_INTPOS                              {\
            UNSG32 uINTPOS_FRAME                               : 16;\
            UNSG32 uINTPOS_FIELD                               : 16;\
          }
    union { UNSG32 u32TG_MAIN_INTPOS;
            struct w32TG_MAIN_INTPOS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_MODE_EN(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32TG_MAIN_MODE_EN(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16TG_MAIN_MODE_EN(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16TG_MAIN_MODE_EN(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define     w32TG_MAIN_MODE                                {\
            UNSG32 uMODE_EN                                    :  1;\
            UNSG32 RSVDx40_b1                                  : 31;\
          }
    union { UNSG32 u32TG_MAIN_MODE;
            struct w32TG_MAIN_MODE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_HVREF_SEL(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32TG_MAIN_HVREF_SEL(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16TG_MAIN_HVREF_SEL(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16TG_MAIN_HVREF_SEL(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define   GET32TG_MAIN_HVREF_POL(r32)                      _BFGET_(r32, 1, 1)
    #define   SET32TG_MAIN_HVREF_POL(r32,v)                    _BFSET_(r32, 1, 1,v)
    #define   GET16TG_MAIN_HVREF_POL(r16)                      _BFGET_(r16, 1, 1)
    #define   SET16TG_MAIN_HVREF_POL(r16,v)                    _BFSET_(r16, 1, 1,v)

    #define     w32TG_MAIN_HVREF                               {\
            UNSG32 uHVREF_SEL                                  :  1;\
            UNSG32 uHVREF_POL                                  :  1;\
            UNSG32 RSVDx44_b2                                  : 30;\
          }
    union { UNSG32 u32TG_MAIN_HVREF;
            struct w32TG_MAIN_HVREF;
          };
    ///////////////////////////////////////////////////////////
    } SIE_TG_MAIN;

    typedef union  T32TG_MAIN_INIT
          { UNSG32 u32;
            struct w32TG_MAIN_INIT;
                 } T32TG_MAIN_INIT;
    typedef union  T32TG_MAIN_SIZE
          { UNSG32 u32;
            struct w32TG_MAIN_SIZE;
                 } T32TG_MAIN_SIZE;
    typedef union  T32TG_MAIN_HS
          { UNSG32 u32;
            struct w32TG_MAIN_HS;
                 } T32TG_MAIN_HS;
    typedef union  T32TG_MAIN_HB
          { UNSG32 u32;
            struct w32TG_MAIN_HB;
                 } T32TG_MAIN_HB;
    typedef union  T32TG_MAIN_HB_Y
          { UNSG32 u32;
            struct w32TG_MAIN_HB_Y;
                 } T32TG_MAIN_HB_Y;
    typedef union  T32TG_MAIN_HB_C
          { UNSG32 u32;
            struct w32TG_MAIN_HB_C;
                 } T32TG_MAIN_HB_C;
    typedef union  T32TG_MAIN_HB_OUT
          { UNSG32 u32;
            struct w32TG_MAIN_HB_OUT;
                 } T32TG_MAIN_HB_OUT;
    typedef union  T32TG_MAIN_VS0
          { UNSG32 u32;
            struct w32TG_MAIN_VS0;
                 } T32TG_MAIN_VS0;
    typedef union  T32TG_MAIN_VS1
          { UNSG32 u32;
            struct w32TG_MAIN_VS1;
                 } T32TG_MAIN_VS1;
    typedef union  T32TG_MAIN_VB0
          { UNSG32 u32;
            struct w32TG_MAIN_VB0;
                 } T32TG_MAIN_VB0;
    typedef union  T32TG_MAIN_VB0_Y
          { UNSG32 u32;
            struct w32TG_MAIN_VB0_Y;
                 } T32TG_MAIN_VB0_Y;
    typedef union  T32TG_MAIN_VB0_C
          { UNSG32 u32;
            struct w32TG_MAIN_VB0_C;
                 } T32TG_MAIN_VB0_C;
    typedef union  T32TG_MAIN_VB0_OUT
          { UNSG32 u32;
            struct w32TG_MAIN_VB0_OUT;
                 } T32TG_MAIN_VB0_OUT;
    typedef union  T32TG_MAIN_VB1
          { UNSG32 u32;
            struct w32TG_MAIN_VB1;
                 } T32TG_MAIN_VB1;
    typedef union  T32TG_MAIN_SCAN
          { UNSG32 u32;
            struct w32TG_MAIN_SCAN;
                 } T32TG_MAIN_SCAN;
    typedef union  T32TG_MAIN_INTPOS
          { UNSG32 u32;
            struct w32TG_MAIN_INTPOS;
                 } T32TG_MAIN_INTPOS;
    typedef union  T32TG_MAIN_MODE
          { UNSG32 u32;
            struct w32TG_MAIN_MODE;
                 } T32TG_MAIN_MODE;
    typedef union  T32TG_MAIN_HVREF
          { UNSG32 u32;
            struct w32TG_MAIN_HVREF;
                 } T32TG_MAIN_HVREF;
    ///////////////////////////////////////////////////////////

    typedef union  TTG_MAIN_INIT
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_INIT;
                   };
                 } TTG_MAIN_INIT;
    typedef union  TTG_MAIN_SIZE
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_SIZE;
                   };
                 } TTG_MAIN_SIZE;
    typedef union  TTG_MAIN_HS
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_HS;
                   };
                 } TTG_MAIN_HS;
    typedef union  TTG_MAIN_HB
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_HB;
                   };
                 } TTG_MAIN_HB;
    typedef union  TTG_MAIN_HB_Y
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_HB_Y;
                   };
                 } TTG_MAIN_HB_Y;
    typedef union  TTG_MAIN_HB_C
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_HB_C;
                   };
                 } TTG_MAIN_HB_C;
    typedef union  TTG_MAIN_HB_OUT
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_HB_OUT;
                   };
                 } TTG_MAIN_HB_OUT;
    typedef union  TTG_MAIN_VS0
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_VS0;
                   };
                 } TTG_MAIN_VS0;
    typedef union  TTG_MAIN_VS1
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_VS1;
                   };
                 } TTG_MAIN_VS1;
    typedef union  TTG_MAIN_VB0
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_VB0;
                   };
                 } TTG_MAIN_VB0;
    typedef union  TTG_MAIN_VB0_Y
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_VB0_Y;
                   };
                 } TTG_MAIN_VB0_Y;
    typedef union  TTG_MAIN_VB0_C
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_VB0_C;
                   };
                 } TTG_MAIN_VB0_C;
    typedef union  TTG_MAIN_VB0_OUT
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_VB0_OUT;
                   };
                 } TTG_MAIN_VB0_OUT;
    typedef union  TTG_MAIN_VB1
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_VB1;
                   };
                 } TTG_MAIN_VB1;
    typedef union  TTG_MAIN_SCAN
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_SCAN;
                   };
                 } TTG_MAIN_SCAN;
    typedef union  TTG_MAIN_INTPOS
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_INTPOS;
                   };
                 } TTG_MAIN_INTPOS;
    typedef union  TTG_MAIN_MODE
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_MODE;
                   };
                 } TTG_MAIN_MODE;
    typedef union  TTG_MAIN_HVREF
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_HVREF;
                   };
                 } TTG_MAIN_HVREF;

    ///////////////////////////////////////////////////////////
     SIGN32 TG_MAIN_drvrd(SIE_TG_MAIN *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 TG_MAIN_drvwr(SIE_TG_MAIN *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void TG_MAIN_reset(SIE_TG_MAIN *p);
     SIGN32 TG_MAIN_cmp  (SIE_TG_MAIN *p, SIE_TG_MAIN *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define TG_MAIN_check(p,pie,pfx,hLOG) TG_MAIN_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define TG_MAIN_print(p,    pfx,hLOG) TG_MAIN_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: TG_MAIN
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE BITMAP40                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 SEL                  (P)
///               %unsigned 6  BIT_POS0                  0x0
///               %unsigned 6  BIT_POS1                  0x1
///               %unsigned 6  BIT_POS2                  0x2
///               %unsigned 6  BIT_POS3                  0x3
///               %unsigned 6  BIT_POS4                  0x4
///               %%        2          # Stuffing bits...
///     # 0x00004 SEL1
///               %unsigned 6  BIT_POS5                  0x5
///               %unsigned 6  BIT_POS6                  0x6
///               %unsigned 6  BIT_POS7                  0x7
///               %unsigned 6  BIT_POS8                  0x8
///               %unsigned 6  BIT_POS9                  0x9
///               %%        2          # Stuffing bits...
///     # 0x00008 SEL2
///               %unsigned 6  BIT_POS10                 0xA
///               %unsigned 6  BIT_POS11                 0xB
///               %unsigned 6  BIT_POS12                 0xC
///               %unsigned 6  BIT_POS13                 0xD
///               %unsigned 6  BIT_POS14                 0xE
///               %%        2          # Stuffing bits...
///     # 0x0000C SEL3
///               %unsigned 6  BIT_POS15                 0xF
///               %unsigned 6  BIT_POS16                 0x10
///               %unsigned 6  BIT_POS17                 0x11
///               %unsigned 6  BIT_POS18                 0x12
///               %unsigned 6  BIT_POS19                 0x13
///               %%        2          # Stuffing bits...
///     # 0x00010 SEL4
///               %unsigned 6  BIT_POS20                 0x14
///               %unsigned 6  BIT_POS21                 0x15
///               %unsigned 6  BIT_POS22                 0x16
///               %unsigned 6  BIT_POS23                 0x17
///               %unsigned 6  BIT_POS24                 0x18
///               %%        2          # Stuffing bits...
///     # 0x00014 SEL5
///               %unsigned 6  BIT_POS25                 0x19
///               %unsigned 6  BIT_POS26                 0x1A
///               %unsigned 6  BIT_POS27                 0x1B
///               %unsigned 6  BIT_POS28                 0x1C
///               %unsigned 6  BIT_POS29                 0x1D
///               %%        2          # Stuffing bits...
///     # 0x00018 SEL6
///               %unsigned 6  BIT_POS30                 0x1E
///               %unsigned 6  BIT_POS31                 0x1F
///               %unsigned 6  BIT_POS32                 0x20
///               %unsigned 6  BIT_POS33                 0x21
///               %unsigned 6  BIT_POS34                 0x22
///               %%        2          # Stuffing bits...
///     # 0x0001C SEL7
///               %unsigned 6  BIT_POS35                 0x23
///               %unsigned 6  BIT_POS36                 0x24
///               %unsigned 6  BIT_POS37                 0x25
///               %unsigned 6  BIT_POS38                 0x26
///               %unsigned 6  BIT_POS39                 0x27
///                                    ###
///                                    * Specifies mapping of new bit locations within 40 bit data from Read Client which need to be used to form pixels for Inverse Scan mode.
///                                    * Normal dHub data order:
///                                    * {Y3,Cr2,Y2,Cb2,Y1,Cr0,Y0,Cb0} First pixel in LSB
///                                    * Inverse Scan dHub data order:
///                                    * {Y3,Cr2,Y2,Cb2,Y1,Cr0,Y0,Cb0} First pixel in MSB
///                                    * Following different data orders can be generated to be presented to first UPS in the pipe.
///                                    ###
///               %%        2          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      32B, bits:     240b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_BITMAP40
#define h_BITMAP40 (){}

    #define     RA_BITMAP40_SEL                                0x0000

    #define     BA_BITMAP40_SEL_BIT_POS0                       0x0000
    #define     B16BITMAP40_SEL_BIT_POS0                       0x0000
    #define   LSb32BITMAP40_SEL_BIT_POS0                          0
    #define   LSb16BITMAP40_SEL_BIT_POS0                          0
    #define       bBITMAP40_SEL_BIT_POS0                       6
    #define   MSK32BITMAP40_SEL_BIT_POS0                          0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS1                       0x0000
    #define     B16BITMAP40_SEL_BIT_POS1                       0x0000
    #define   LSb32BITMAP40_SEL_BIT_POS1                          6
    #define   LSb16BITMAP40_SEL_BIT_POS1                          6
    #define       bBITMAP40_SEL_BIT_POS1                       6
    #define   MSK32BITMAP40_SEL_BIT_POS1                          0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS2                       0x0001
    #define     B16BITMAP40_SEL_BIT_POS2                       0x0000
    #define   LSb32BITMAP40_SEL_BIT_POS2                          12
    #define   LSb16BITMAP40_SEL_BIT_POS2                          12
    #define       bBITMAP40_SEL_BIT_POS2                       6
    #define   MSK32BITMAP40_SEL_BIT_POS2                          0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS3                       0x0002
    #define     B16BITMAP40_SEL_BIT_POS3                       0x0002
    #define   LSb32BITMAP40_SEL_BIT_POS3                          18
    #define   LSb16BITMAP40_SEL_BIT_POS3                          2
    #define       bBITMAP40_SEL_BIT_POS3                       6
    #define   MSK32BITMAP40_SEL_BIT_POS3                          0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS4                       0x0003
    #define     B16BITMAP40_SEL_BIT_POS4                       0x0002
    #define   LSb32BITMAP40_SEL_BIT_POS4                          24
    #define   LSb16BITMAP40_SEL_BIT_POS4                          8
    #define       bBITMAP40_SEL_BIT_POS4                       6
    #define   MSK32BITMAP40_SEL_BIT_POS4                          0x3F000000

    #define     RA_BITMAP40_SEL1                               0x0004

    #define     BA_BITMAP40_SEL_BIT_POS5                       0x0004
    #define     B16BITMAP40_SEL_BIT_POS5                       0x0004
    #define   LSb32BITMAP40_SEL_BIT_POS5                          0
    #define   LSb16BITMAP40_SEL_BIT_POS5                          0
    #define       bBITMAP40_SEL_BIT_POS5                       6
    #define   MSK32BITMAP40_SEL_BIT_POS5                          0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS6                       0x0004
    #define     B16BITMAP40_SEL_BIT_POS6                       0x0004
    #define   LSb32BITMAP40_SEL_BIT_POS6                          6
    #define   LSb16BITMAP40_SEL_BIT_POS6                          6
    #define       bBITMAP40_SEL_BIT_POS6                       6
    #define   MSK32BITMAP40_SEL_BIT_POS6                          0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS7                       0x0005
    #define     B16BITMAP40_SEL_BIT_POS7                       0x0004
    #define   LSb32BITMAP40_SEL_BIT_POS7                          12
    #define   LSb16BITMAP40_SEL_BIT_POS7                          12
    #define       bBITMAP40_SEL_BIT_POS7                       6
    #define   MSK32BITMAP40_SEL_BIT_POS7                          0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS8                       0x0006
    #define     B16BITMAP40_SEL_BIT_POS8                       0x0006
    #define   LSb32BITMAP40_SEL_BIT_POS8                          18
    #define   LSb16BITMAP40_SEL_BIT_POS8                          2
    #define       bBITMAP40_SEL_BIT_POS8                       6
    #define   MSK32BITMAP40_SEL_BIT_POS8                          0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS9                       0x0007
    #define     B16BITMAP40_SEL_BIT_POS9                       0x0006
    #define   LSb32BITMAP40_SEL_BIT_POS9                          24
    #define   LSb16BITMAP40_SEL_BIT_POS9                          8
    #define       bBITMAP40_SEL_BIT_POS9                       6
    #define   MSK32BITMAP40_SEL_BIT_POS9                          0x3F000000

    #define     RA_BITMAP40_SEL2                               0x0008

    #define     BA_BITMAP40_SEL_BIT_POS10                      0x0008
    #define     B16BITMAP40_SEL_BIT_POS10                      0x0008
    #define   LSb32BITMAP40_SEL_BIT_POS10                         0
    #define   LSb16BITMAP40_SEL_BIT_POS10                         0
    #define       bBITMAP40_SEL_BIT_POS10                      6
    #define   MSK32BITMAP40_SEL_BIT_POS10                         0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS11                      0x0008
    #define     B16BITMAP40_SEL_BIT_POS11                      0x0008
    #define   LSb32BITMAP40_SEL_BIT_POS11                         6
    #define   LSb16BITMAP40_SEL_BIT_POS11                         6
    #define       bBITMAP40_SEL_BIT_POS11                      6
    #define   MSK32BITMAP40_SEL_BIT_POS11                         0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS12                      0x0009
    #define     B16BITMAP40_SEL_BIT_POS12                      0x0008
    #define   LSb32BITMAP40_SEL_BIT_POS12                         12
    #define   LSb16BITMAP40_SEL_BIT_POS12                         12
    #define       bBITMAP40_SEL_BIT_POS12                      6
    #define   MSK32BITMAP40_SEL_BIT_POS12                         0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS13                      0x000A
    #define     B16BITMAP40_SEL_BIT_POS13                      0x000A
    #define   LSb32BITMAP40_SEL_BIT_POS13                         18
    #define   LSb16BITMAP40_SEL_BIT_POS13                         2
    #define       bBITMAP40_SEL_BIT_POS13                      6
    #define   MSK32BITMAP40_SEL_BIT_POS13                         0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS14                      0x000B
    #define     B16BITMAP40_SEL_BIT_POS14                      0x000A
    #define   LSb32BITMAP40_SEL_BIT_POS14                         24
    #define   LSb16BITMAP40_SEL_BIT_POS14                         8
    #define       bBITMAP40_SEL_BIT_POS14                      6
    #define   MSK32BITMAP40_SEL_BIT_POS14                         0x3F000000

    #define     RA_BITMAP40_SEL3                               0x000C

    #define     BA_BITMAP40_SEL_BIT_POS15                      0x000C
    #define     B16BITMAP40_SEL_BIT_POS15                      0x000C
    #define   LSb32BITMAP40_SEL_BIT_POS15                         0
    #define   LSb16BITMAP40_SEL_BIT_POS15                         0
    #define       bBITMAP40_SEL_BIT_POS15                      6
    #define   MSK32BITMAP40_SEL_BIT_POS15                         0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS16                      0x000C
    #define     B16BITMAP40_SEL_BIT_POS16                      0x000C
    #define   LSb32BITMAP40_SEL_BIT_POS16                         6
    #define   LSb16BITMAP40_SEL_BIT_POS16                         6
    #define       bBITMAP40_SEL_BIT_POS16                      6
    #define   MSK32BITMAP40_SEL_BIT_POS16                         0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS17                      0x000D
    #define     B16BITMAP40_SEL_BIT_POS17                      0x000C
    #define   LSb32BITMAP40_SEL_BIT_POS17                         12
    #define   LSb16BITMAP40_SEL_BIT_POS17                         12
    #define       bBITMAP40_SEL_BIT_POS17                      6
    #define   MSK32BITMAP40_SEL_BIT_POS17                         0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS18                      0x000E
    #define     B16BITMAP40_SEL_BIT_POS18                      0x000E
    #define   LSb32BITMAP40_SEL_BIT_POS18                         18
    #define   LSb16BITMAP40_SEL_BIT_POS18                         2
    #define       bBITMAP40_SEL_BIT_POS18                      6
    #define   MSK32BITMAP40_SEL_BIT_POS18                         0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS19                      0x000F
    #define     B16BITMAP40_SEL_BIT_POS19                      0x000E
    #define   LSb32BITMAP40_SEL_BIT_POS19                         24
    #define   LSb16BITMAP40_SEL_BIT_POS19                         8
    #define       bBITMAP40_SEL_BIT_POS19                      6
    #define   MSK32BITMAP40_SEL_BIT_POS19                         0x3F000000

    #define     RA_BITMAP40_SEL4                               0x0010

    #define     BA_BITMAP40_SEL_BIT_POS20                      0x0010
    #define     B16BITMAP40_SEL_BIT_POS20                      0x0010
    #define   LSb32BITMAP40_SEL_BIT_POS20                         0
    #define   LSb16BITMAP40_SEL_BIT_POS20                         0
    #define       bBITMAP40_SEL_BIT_POS20                      6
    #define   MSK32BITMAP40_SEL_BIT_POS20                         0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS21                      0x0010
    #define     B16BITMAP40_SEL_BIT_POS21                      0x0010
    #define   LSb32BITMAP40_SEL_BIT_POS21                         6
    #define   LSb16BITMAP40_SEL_BIT_POS21                         6
    #define       bBITMAP40_SEL_BIT_POS21                      6
    #define   MSK32BITMAP40_SEL_BIT_POS21                         0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS22                      0x0011
    #define     B16BITMAP40_SEL_BIT_POS22                      0x0010
    #define   LSb32BITMAP40_SEL_BIT_POS22                         12
    #define   LSb16BITMAP40_SEL_BIT_POS22                         12
    #define       bBITMAP40_SEL_BIT_POS22                      6
    #define   MSK32BITMAP40_SEL_BIT_POS22                         0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS23                      0x0012
    #define     B16BITMAP40_SEL_BIT_POS23                      0x0012
    #define   LSb32BITMAP40_SEL_BIT_POS23                         18
    #define   LSb16BITMAP40_SEL_BIT_POS23                         2
    #define       bBITMAP40_SEL_BIT_POS23                      6
    #define   MSK32BITMAP40_SEL_BIT_POS23                         0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS24                      0x0013
    #define     B16BITMAP40_SEL_BIT_POS24                      0x0012
    #define   LSb32BITMAP40_SEL_BIT_POS24                         24
    #define   LSb16BITMAP40_SEL_BIT_POS24                         8
    #define       bBITMAP40_SEL_BIT_POS24                      6
    #define   MSK32BITMAP40_SEL_BIT_POS24                         0x3F000000

    #define     RA_BITMAP40_SEL5                               0x0014

    #define     BA_BITMAP40_SEL_BIT_POS25                      0x0014
    #define     B16BITMAP40_SEL_BIT_POS25                      0x0014
    #define   LSb32BITMAP40_SEL_BIT_POS25                         0
    #define   LSb16BITMAP40_SEL_BIT_POS25                         0
    #define       bBITMAP40_SEL_BIT_POS25                      6
    #define   MSK32BITMAP40_SEL_BIT_POS25                         0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS26                      0x0014
    #define     B16BITMAP40_SEL_BIT_POS26                      0x0014
    #define   LSb32BITMAP40_SEL_BIT_POS26                         6
    #define   LSb16BITMAP40_SEL_BIT_POS26                         6
    #define       bBITMAP40_SEL_BIT_POS26                      6
    #define   MSK32BITMAP40_SEL_BIT_POS26                         0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS27                      0x0015
    #define     B16BITMAP40_SEL_BIT_POS27                      0x0014
    #define   LSb32BITMAP40_SEL_BIT_POS27                         12
    #define   LSb16BITMAP40_SEL_BIT_POS27                         12
    #define       bBITMAP40_SEL_BIT_POS27                      6
    #define   MSK32BITMAP40_SEL_BIT_POS27                         0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS28                      0x0016
    #define     B16BITMAP40_SEL_BIT_POS28                      0x0016
    #define   LSb32BITMAP40_SEL_BIT_POS28                         18
    #define   LSb16BITMAP40_SEL_BIT_POS28                         2
    #define       bBITMAP40_SEL_BIT_POS28                      6
    #define   MSK32BITMAP40_SEL_BIT_POS28                         0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS29                      0x0017
    #define     B16BITMAP40_SEL_BIT_POS29                      0x0016
    #define   LSb32BITMAP40_SEL_BIT_POS29                         24
    #define   LSb16BITMAP40_SEL_BIT_POS29                         8
    #define       bBITMAP40_SEL_BIT_POS29                      6
    #define   MSK32BITMAP40_SEL_BIT_POS29                         0x3F000000

    #define     RA_BITMAP40_SEL6                               0x0018

    #define     BA_BITMAP40_SEL_BIT_POS30                      0x0018
    #define     B16BITMAP40_SEL_BIT_POS30                      0x0018
    #define   LSb32BITMAP40_SEL_BIT_POS30                         0
    #define   LSb16BITMAP40_SEL_BIT_POS30                         0
    #define       bBITMAP40_SEL_BIT_POS30                      6
    #define   MSK32BITMAP40_SEL_BIT_POS30                         0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS31                      0x0018
    #define     B16BITMAP40_SEL_BIT_POS31                      0x0018
    #define   LSb32BITMAP40_SEL_BIT_POS31                         6
    #define   LSb16BITMAP40_SEL_BIT_POS31                         6
    #define       bBITMAP40_SEL_BIT_POS31                      6
    #define   MSK32BITMAP40_SEL_BIT_POS31                         0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS32                      0x0019
    #define     B16BITMAP40_SEL_BIT_POS32                      0x0018
    #define   LSb32BITMAP40_SEL_BIT_POS32                         12
    #define   LSb16BITMAP40_SEL_BIT_POS32                         12
    #define       bBITMAP40_SEL_BIT_POS32                      6
    #define   MSK32BITMAP40_SEL_BIT_POS32                         0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS33                      0x001A
    #define     B16BITMAP40_SEL_BIT_POS33                      0x001A
    #define   LSb32BITMAP40_SEL_BIT_POS33                         18
    #define   LSb16BITMAP40_SEL_BIT_POS33                         2
    #define       bBITMAP40_SEL_BIT_POS33                      6
    #define   MSK32BITMAP40_SEL_BIT_POS33                         0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS34                      0x001B
    #define     B16BITMAP40_SEL_BIT_POS34                      0x001A
    #define   LSb32BITMAP40_SEL_BIT_POS34                         24
    #define   LSb16BITMAP40_SEL_BIT_POS34                         8
    #define       bBITMAP40_SEL_BIT_POS34                      6
    #define   MSK32BITMAP40_SEL_BIT_POS34                         0x3F000000

    #define     RA_BITMAP40_SEL7                               0x001C

    #define     BA_BITMAP40_SEL_BIT_POS35                      0x001C
    #define     B16BITMAP40_SEL_BIT_POS35                      0x001C
    #define   LSb32BITMAP40_SEL_BIT_POS35                         0
    #define   LSb16BITMAP40_SEL_BIT_POS35                         0
    #define       bBITMAP40_SEL_BIT_POS35                      6
    #define   MSK32BITMAP40_SEL_BIT_POS35                         0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS36                      0x001C
    #define     B16BITMAP40_SEL_BIT_POS36                      0x001C
    #define   LSb32BITMAP40_SEL_BIT_POS36                         6
    #define   LSb16BITMAP40_SEL_BIT_POS36                         6
    #define       bBITMAP40_SEL_BIT_POS36                      6
    #define   MSK32BITMAP40_SEL_BIT_POS36                         0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS37                      0x001D
    #define     B16BITMAP40_SEL_BIT_POS37                      0x001C
    #define   LSb32BITMAP40_SEL_BIT_POS37                         12
    #define   LSb16BITMAP40_SEL_BIT_POS37                         12
    #define       bBITMAP40_SEL_BIT_POS37                      6
    #define   MSK32BITMAP40_SEL_BIT_POS37                         0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS38                      0x001E
    #define     B16BITMAP40_SEL_BIT_POS38                      0x001E
    #define   LSb32BITMAP40_SEL_BIT_POS38                         18
    #define   LSb16BITMAP40_SEL_BIT_POS38                         2
    #define       bBITMAP40_SEL_BIT_POS38                      6
    #define   MSK32BITMAP40_SEL_BIT_POS38                         0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS39                      0x001F
    #define     B16BITMAP40_SEL_BIT_POS39                      0x001E
    #define   LSb32BITMAP40_SEL_BIT_POS39                         24
    #define   LSb16BITMAP40_SEL_BIT_POS39                         8
    #define       bBITMAP40_SEL_BIT_POS39                      6
    #define   MSK32BITMAP40_SEL_BIT_POS39                         0x3F000000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_BITMAP40 {
    ///////////////////////////////////////////////////////////
    #define   GET32BITMAP40_SEL_BIT_POS0(r32)                  _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS0(r32,v)                _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS0(r16)                  _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS0(r16,v)                _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS1(r32)                  _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS1(r32,v)                _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS1(r16)                  _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS1(r16,v)                _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS2(r32)                  _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS2(r32,v)                _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS3(r32)                  _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS3(r32,v)                _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS3(r16)                  _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS3(r16,v)                _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS4(r32)                  _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS4(r32,v)                _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS4(r16)                  _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS4(r16,v)                _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL                                {\
            UNSG32 uSEL_BIT_POS0                               :  6;\
            UNSG32 uSEL_BIT_POS1                               :  6;\
            UNSG32 uSEL_BIT_POS2                               :  6;\
            UNSG32 uSEL_BIT_POS3                               :  6;\
            UNSG32 uSEL_BIT_POS4                               :  6;\
            UNSG32 RSVDx0_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL;
            struct w32BITMAP40_SEL;
          };
    #define   GET32BITMAP40_SEL_BIT_POS5(r32)                  _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS5(r32,v)                _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS5(r16)                  _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS5(r16,v)                _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS6(r32)                  _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS6(r32,v)                _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS6(r16)                  _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS6(r16,v)                _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS7(r32)                  _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS7(r32,v)                _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS8(r32)                  _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS8(r32,v)                _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS8(r16)                  _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS8(r16,v)                _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS9(r32)                  _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS9(r32,v)                _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS9(r16)                  _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS9(r16,v)                _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL1                               {\
            UNSG32 uSEL_BIT_POS5                               :  6;\
            UNSG32 uSEL_BIT_POS6                               :  6;\
            UNSG32 uSEL_BIT_POS7                               :  6;\
            UNSG32 uSEL_BIT_POS8                               :  6;\
            UNSG32 uSEL_BIT_POS9                               :  6;\
            UNSG32 RSVDx4_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL1;
            struct w32BITMAP40_SEL1;
          };
    #define   GET32BITMAP40_SEL_BIT_POS10(r32)                 _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS10(r32,v)               _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS10(r16)                 _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS10(r16,v)               _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS11(r32)                 _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS11(r32,v)               _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS11(r16)                 _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS11(r16,v)               _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS12(r32)                 _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS12(r32,v)               _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS13(r32)                 _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS13(r32,v)               _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS13(r16)                 _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS13(r16,v)               _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS14(r32)                 _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS14(r32,v)               _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS14(r16)                 _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS14(r16,v)               _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL2                               {\
            UNSG32 uSEL_BIT_POS10                              :  6;\
            UNSG32 uSEL_BIT_POS11                              :  6;\
            UNSG32 uSEL_BIT_POS12                              :  6;\
            UNSG32 uSEL_BIT_POS13                              :  6;\
            UNSG32 uSEL_BIT_POS14                              :  6;\
            UNSG32 RSVDx8_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL2;
            struct w32BITMAP40_SEL2;
          };
    #define   GET32BITMAP40_SEL_BIT_POS15(r32)                 _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS15(r32,v)               _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS15(r16)                 _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS15(r16,v)               _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS16(r32)                 _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS16(r32,v)               _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS16(r16)                 _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS16(r16,v)               _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS17(r32)                 _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS17(r32,v)               _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS18(r32)                 _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS18(r32,v)               _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS18(r16)                 _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS18(r16,v)               _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS19(r32)                 _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS19(r32,v)               _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS19(r16)                 _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS19(r16,v)               _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL3                               {\
            UNSG32 uSEL_BIT_POS15                              :  6;\
            UNSG32 uSEL_BIT_POS16                              :  6;\
            UNSG32 uSEL_BIT_POS17                              :  6;\
            UNSG32 uSEL_BIT_POS18                              :  6;\
            UNSG32 uSEL_BIT_POS19                              :  6;\
            UNSG32 RSVDxC_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL3;
            struct w32BITMAP40_SEL3;
          };
    #define   GET32BITMAP40_SEL_BIT_POS20(r32)                 _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS20(r32,v)               _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS20(r16)                 _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS20(r16,v)               _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS21(r32)                 _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS21(r32,v)               _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS21(r16)                 _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS21(r16,v)               _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS22(r32)                 _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS22(r32,v)               _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS23(r32)                 _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS23(r32,v)               _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS23(r16)                 _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS23(r16,v)               _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS24(r32)                 _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS24(r32,v)               _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS24(r16)                 _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS24(r16,v)               _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL4                               {\
            UNSG32 uSEL_BIT_POS20                              :  6;\
            UNSG32 uSEL_BIT_POS21                              :  6;\
            UNSG32 uSEL_BIT_POS22                              :  6;\
            UNSG32 uSEL_BIT_POS23                              :  6;\
            UNSG32 uSEL_BIT_POS24                              :  6;\
            UNSG32 RSVDx10_b30                                 :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL4;
            struct w32BITMAP40_SEL4;
          };
    #define   GET32BITMAP40_SEL_BIT_POS25(r32)                 _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS25(r32,v)               _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS25(r16)                 _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS25(r16,v)               _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS26(r32)                 _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS26(r32,v)               _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS26(r16)                 _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS26(r16,v)               _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS27(r32)                 _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS27(r32,v)               _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS28(r32)                 _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS28(r32,v)               _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS28(r16)                 _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS28(r16,v)               _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS29(r32)                 _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS29(r32,v)               _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS29(r16)                 _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS29(r16,v)               _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL5                               {\
            UNSG32 uSEL_BIT_POS25                              :  6;\
            UNSG32 uSEL_BIT_POS26                              :  6;\
            UNSG32 uSEL_BIT_POS27                              :  6;\
            UNSG32 uSEL_BIT_POS28                              :  6;\
            UNSG32 uSEL_BIT_POS29                              :  6;\
            UNSG32 RSVDx14_b30                                 :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL5;
            struct w32BITMAP40_SEL5;
          };
    #define   GET32BITMAP40_SEL_BIT_POS30(r32)                 _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS30(r32,v)               _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS30(r16)                 _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS30(r16,v)               _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS31(r32)                 _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS31(r32,v)               _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS31(r16)                 _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS31(r16,v)               _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS32(r32)                 _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS32(r32,v)               _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS33(r32)                 _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS33(r32,v)               _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS33(r16)                 _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS33(r16,v)               _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS34(r32)                 _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS34(r32,v)               _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS34(r16)                 _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS34(r16,v)               _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL6                               {\
            UNSG32 uSEL_BIT_POS30                              :  6;\
            UNSG32 uSEL_BIT_POS31                              :  6;\
            UNSG32 uSEL_BIT_POS32                              :  6;\
            UNSG32 uSEL_BIT_POS33                              :  6;\
            UNSG32 uSEL_BIT_POS34                              :  6;\
            UNSG32 RSVDx18_b30                                 :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL6;
            struct w32BITMAP40_SEL6;
          };
    #define   GET32BITMAP40_SEL_BIT_POS35(r32)                 _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS35(r32,v)               _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS35(r16)                 _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS35(r16,v)               _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS36(r32)                 _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS36(r32,v)               _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS36(r16)                 _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS36(r16,v)               _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS37(r32)                 _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS37(r32,v)               _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS38(r32)                 _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS38(r32,v)               _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS38(r16)                 _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS38(r16,v)               _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS39(r32)                 _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS39(r32,v)               _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS39(r16)                 _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS39(r16,v)               _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL7                               {\
            UNSG32 uSEL_BIT_POS35                              :  6;\
            UNSG32 uSEL_BIT_POS36                              :  6;\
            UNSG32 uSEL_BIT_POS37                              :  6;\
            UNSG32 uSEL_BIT_POS38                              :  6;\
            UNSG32 uSEL_BIT_POS39                              :  6;\
            UNSG32 RSVDx1C_b30                                 :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL7;
            struct w32BITMAP40_SEL7;
          };
    ///////////////////////////////////////////////////////////
    } SIE_BITMAP40;

    typedef union  T32BITMAP40_SEL
          { UNSG32 u32;
            struct w32BITMAP40_SEL;
                 } T32BITMAP40_SEL;
    typedef union  T32BITMAP40_SEL1
          { UNSG32 u32;
            struct w32BITMAP40_SEL1;
                 } T32BITMAP40_SEL1;
    typedef union  T32BITMAP40_SEL2
          { UNSG32 u32;
            struct w32BITMAP40_SEL2;
                 } T32BITMAP40_SEL2;
    typedef union  T32BITMAP40_SEL3
          { UNSG32 u32;
            struct w32BITMAP40_SEL3;
                 } T32BITMAP40_SEL3;
    typedef union  T32BITMAP40_SEL4
          { UNSG32 u32;
            struct w32BITMAP40_SEL4;
                 } T32BITMAP40_SEL4;
    typedef union  T32BITMAP40_SEL5
          { UNSG32 u32;
            struct w32BITMAP40_SEL5;
                 } T32BITMAP40_SEL5;
    typedef union  T32BITMAP40_SEL6
          { UNSG32 u32;
            struct w32BITMAP40_SEL6;
                 } T32BITMAP40_SEL6;
    typedef union  T32BITMAP40_SEL7
          { UNSG32 u32;
            struct w32BITMAP40_SEL7;
                 } T32BITMAP40_SEL7;
    ///////////////////////////////////////////////////////////

    typedef union  TBITMAP40_SEL
          { UNSG32 u32[8];
            struct {
            struct w32BITMAP40_SEL;
            struct w32BITMAP40_SEL1;
            struct w32BITMAP40_SEL2;
            struct w32BITMAP40_SEL3;
            struct w32BITMAP40_SEL4;
            struct w32BITMAP40_SEL5;
            struct w32BITMAP40_SEL6;
            struct w32BITMAP40_SEL7;
                   };
                 } TBITMAP40_SEL;

    ///////////////////////////////////////////////////////////
     SIGN32 BITMAP40_drvrd(SIE_BITMAP40 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 BITMAP40_drvwr(SIE_BITMAP40 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void BITMAP40_reset(SIE_BITMAP40 *p);
     SIGN32 BITMAP40_cmp  (SIE_BITMAP40 *p, SIE_BITMAP40 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define BITMAP40_check(p,pie,pfx,hLOG) BITMAP40_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define BITMAP40_print(p,    pfx,hLOG) BITMAP40_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: BITMAP40
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE BITMAP20                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 SEL                  (P)
///               %unsigned 5  BIT_POS0                  0x0
///               %unsigned 5  BIT_POS1                  0x1
///               %unsigned 5  BIT_POS2                  0x2
///               %unsigned 5  BIT_POS3                  0x3
///               %unsigned 5  BIT_POS4                  0x4
///               %unsigned 5  BIT_POS5                  0x5
///               %%        2          # Stuffing bits...
///     # 0x00004 SEL1
///               %unsigned 5  BIT_POS6                  0x6
///               %unsigned 5  BIT_POS7                  0x7
///               %unsigned 5  BIT_POS8                  0x8
///               %unsigned 5  BIT_POS9                  0x9
///               %unsigned 5  BIT_POS10                 0xA
///               %unsigned 5  BIT_POS11                 0xB
///               %%        2          # Stuffing bits...
///     # 0x00008 SEL2
///               %unsigned 5  BIT_POS12                 0xC
///               %unsigned 5  BIT_POS13                 0xD
///               %unsigned 5  BIT_POS14                 0xE
///               %unsigned 5  BIT_POS15                 0xF
///               %unsigned 5  BIT_POS16                 0x10
///               %unsigned 5  BIT_POS17                 0x11
///               %%        2          # Stuffing bits...
///     # 0x0000C SEL3
///               %unsigned 5  BIT_POS18                 0x12
///               %unsigned 5  BIT_POS19                 0x13
///                                    ###
///                                    * Specifies mapping of new bit locations within 20 bit data from Read Client which need to be used to form pixels for Inverse Scan mode.
///                                    * Normal dHub data order:
///                                    * {Y3,Cr2,Y2,Cb2,Y1,Cr0,Y0,Cb0} First pixel in LSB
///                                    * Inverse Scan dHub data order:
///                                    * {Y3,Cr2,Y2,Cb2,Y1,Cr0,Y0,Cb0} First pixel in MSB
///                                    * Following different data orders can be generated to be presented to first UPS in the pipe.
///                                    ###
///               %%        22         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:     100b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_BITMAP20
#define h_BITMAP20 (){}

    #define     RA_BITMAP20_SEL                                0x0000

    #define     BA_BITMAP20_SEL_BIT_POS0                       0x0000
    #define     B16BITMAP20_SEL_BIT_POS0                       0x0000
    #define   LSb32BITMAP20_SEL_BIT_POS0                          0
    #define   LSb16BITMAP20_SEL_BIT_POS0                          0
    #define       bBITMAP20_SEL_BIT_POS0                       5
    #define   MSK32BITMAP20_SEL_BIT_POS0                          0x0000001F

    #define     BA_BITMAP20_SEL_BIT_POS1                       0x0000
    #define     B16BITMAP20_SEL_BIT_POS1                       0x0000
    #define   LSb32BITMAP20_SEL_BIT_POS1                          5
    #define   LSb16BITMAP20_SEL_BIT_POS1                          5
    #define       bBITMAP20_SEL_BIT_POS1                       5
    #define   MSK32BITMAP20_SEL_BIT_POS1                          0x000003E0

    #define     BA_BITMAP20_SEL_BIT_POS2                       0x0001
    #define     B16BITMAP20_SEL_BIT_POS2                       0x0000
    #define   LSb32BITMAP20_SEL_BIT_POS2                          10
    #define   LSb16BITMAP20_SEL_BIT_POS2                          10
    #define       bBITMAP20_SEL_BIT_POS2                       5
    #define   MSK32BITMAP20_SEL_BIT_POS2                          0x00007C00

    #define     BA_BITMAP20_SEL_BIT_POS3                       0x0001
    #define     B16BITMAP20_SEL_BIT_POS3                       0x0000
    #define   LSb32BITMAP20_SEL_BIT_POS3                          15
    #define   LSb16BITMAP20_SEL_BIT_POS3                          15
    #define       bBITMAP20_SEL_BIT_POS3                       5
    #define   MSK32BITMAP20_SEL_BIT_POS3                          0x000F8000

    #define     BA_BITMAP20_SEL_BIT_POS4                       0x0002
    #define     B16BITMAP20_SEL_BIT_POS4                       0x0002
    #define   LSb32BITMAP20_SEL_BIT_POS4                          20
    #define   LSb16BITMAP20_SEL_BIT_POS4                          4
    #define       bBITMAP20_SEL_BIT_POS4                       5
    #define   MSK32BITMAP20_SEL_BIT_POS4                          0x01F00000

    #define     BA_BITMAP20_SEL_BIT_POS5                       0x0003
    #define     B16BITMAP20_SEL_BIT_POS5                       0x0002
    #define   LSb32BITMAP20_SEL_BIT_POS5                          25
    #define   LSb16BITMAP20_SEL_BIT_POS5                          9
    #define       bBITMAP20_SEL_BIT_POS5                       5
    #define   MSK32BITMAP20_SEL_BIT_POS5                          0x3E000000

    #define     RA_BITMAP20_SEL1                               0x0004

    #define     BA_BITMAP20_SEL_BIT_POS6                       0x0004
    #define     B16BITMAP20_SEL_BIT_POS6                       0x0004
    #define   LSb32BITMAP20_SEL_BIT_POS6                          0
    #define   LSb16BITMAP20_SEL_BIT_POS6                          0
    #define       bBITMAP20_SEL_BIT_POS6                       5
    #define   MSK32BITMAP20_SEL_BIT_POS6                          0x0000001F

    #define     BA_BITMAP20_SEL_BIT_POS7                       0x0004
    #define     B16BITMAP20_SEL_BIT_POS7                       0x0004
    #define   LSb32BITMAP20_SEL_BIT_POS7                          5
    #define   LSb16BITMAP20_SEL_BIT_POS7                          5
    #define       bBITMAP20_SEL_BIT_POS7                       5
    #define   MSK32BITMAP20_SEL_BIT_POS7                          0x000003E0

    #define     BA_BITMAP20_SEL_BIT_POS8                       0x0005
    #define     B16BITMAP20_SEL_BIT_POS8                       0x0004
    #define   LSb32BITMAP20_SEL_BIT_POS8                          10
    #define   LSb16BITMAP20_SEL_BIT_POS8                          10
    #define       bBITMAP20_SEL_BIT_POS8                       5
    #define   MSK32BITMAP20_SEL_BIT_POS8                          0x00007C00

    #define     BA_BITMAP20_SEL_BIT_POS9                       0x0005
    #define     B16BITMAP20_SEL_BIT_POS9                       0x0004
    #define   LSb32BITMAP20_SEL_BIT_POS9                          15
    #define   LSb16BITMAP20_SEL_BIT_POS9                          15
    #define       bBITMAP20_SEL_BIT_POS9                       5
    #define   MSK32BITMAP20_SEL_BIT_POS9                          0x000F8000

    #define     BA_BITMAP20_SEL_BIT_POS10                      0x0006
    #define     B16BITMAP20_SEL_BIT_POS10                      0x0006
    #define   LSb32BITMAP20_SEL_BIT_POS10                         20
    #define   LSb16BITMAP20_SEL_BIT_POS10                         4
    #define       bBITMAP20_SEL_BIT_POS10                      5
    #define   MSK32BITMAP20_SEL_BIT_POS10                         0x01F00000

    #define     BA_BITMAP20_SEL_BIT_POS11                      0x0007
    #define     B16BITMAP20_SEL_BIT_POS11                      0x0006
    #define   LSb32BITMAP20_SEL_BIT_POS11                         25
    #define   LSb16BITMAP20_SEL_BIT_POS11                         9
    #define       bBITMAP20_SEL_BIT_POS11                      5
    #define   MSK32BITMAP20_SEL_BIT_POS11                         0x3E000000

    #define     RA_BITMAP20_SEL2                               0x0008

    #define     BA_BITMAP20_SEL_BIT_POS12                      0x0008
    #define     B16BITMAP20_SEL_BIT_POS12                      0x0008
    #define   LSb32BITMAP20_SEL_BIT_POS12                         0
    #define   LSb16BITMAP20_SEL_BIT_POS12                         0
    #define       bBITMAP20_SEL_BIT_POS12                      5
    #define   MSK32BITMAP20_SEL_BIT_POS12                         0x0000001F

    #define     BA_BITMAP20_SEL_BIT_POS13                      0x0008
    #define     B16BITMAP20_SEL_BIT_POS13                      0x0008
    #define   LSb32BITMAP20_SEL_BIT_POS13                         5
    #define   LSb16BITMAP20_SEL_BIT_POS13                         5
    #define       bBITMAP20_SEL_BIT_POS13                      5
    #define   MSK32BITMAP20_SEL_BIT_POS13                         0x000003E0

    #define     BA_BITMAP20_SEL_BIT_POS14                      0x0009
    #define     B16BITMAP20_SEL_BIT_POS14                      0x0008
    #define   LSb32BITMAP20_SEL_BIT_POS14                         10
    #define   LSb16BITMAP20_SEL_BIT_POS14                         10
    #define       bBITMAP20_SEL_BIT_POS14                      5
    #define   MSK32BITMAP20_SEL_BIT_POS14                         0x00007C00

    #define     BA_BITMAP20_SEL_BIT_POS15                      0x0009
    #define     B16BITMAP20_SEL_BIT_POS15                      0x0008
    #define   LSb32BITMAP20_SEL_BIT_POS15                         15
    #define   LSb16BITMAP20_SEL_BIT_POS15                         15
    #define       bBITMAP20_SEL_BIT_POS15                      5
    #define   MSK32BITMAP20_SEL_BIT_POS15                         0x000F8000

    #define     BA_BITMAP20_SEL_BIT_POS16                      0x000A
    #define     B16BITMAP20_SEL_BIT_POS16                      0x000A
    #define   LSb32BITMAP20_SEL_BIT_POS16                         20
    #define   LSb16BITMAP20_SEL_BIT_POS16                         4
    #define       bBITMAP20_SEL_BIT_POS16                      5
    #define   MSK32BITMAP20_SEL_BIT_POS16                         0x01F00000

    #define     BA_BITMAP20_SEL_BIT_POS17                      0x000B
    #define     B16BITMAP20_SEL_BIT_POS17                      0x000A
    #define   LSb32BITMAP20_SEL_BIT_POS17                         25
    #define   LSb16BITMAP20_SEL_BIT_POS17                         9
    #define       bBITMAP20_SEL_BIT_POS17                      5
    #define   MSK32BITMAP20_SEL_BIT_POS17                         0x3E000000

    #define     RA_BITMAP20_SEL3                               0x000C

    #define     BA_BITMAP20_SEL_BIT_POS18                      0x000C
    #define     B16BITMAP20_SEL_BIT_POS18                      0x000C
    #define   LSb32BITMAP20_SEL_BIT_POS18                         0
    #define   LSb16BITMAP20_SEL_BIT_POS18                         0
    #define       bBITMAP20_SEL_BIT_POS18                      5
    #define   MSK32BITMAP20_SEL_BIT_POS18                         0x0000001F

    #define     BA_BITMAP20_SEL_BIT_POS19                      0x000C
    #define     B16BITMAP20_SEL_BIT_POS19                      0x000C
    #define   LSb32BITMAP20_SEL_BIT_POS19                         5
    #define   LSb16BITMAP20_SEL_BIT_POS19                         5
    #define       bBITMAP20_SEL_BIT_POS19                      5
    #define   MSK32BITMAP20_SEL_BIT_POS19                         0x000003E0
    ///////////////////////////////////////////////////////////

    typedef struct SIE_BITMAP20 {
    ///////////////////////////////////////////////////////////
    #define   GET32BITMAP20_SEL_BIT_POS0(r32)                  _BFGET_(r32, 4, 0)
    #define   SET32BITMAP20_SEL_BIT_POS0(r32,v)                _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP20_SEL_BIT_POS0(r16)                  _BFGET_(r16, 4, 0)
    #define   SET16BITMAP20_SEL_BIT_POS0(r16,v)                _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP20_SEL_BIT_POS1(r32)                  _BFGET_(r32, 9, 5)
    #define   SET32BITMAP20_SEL_BIT_POS1(r32,v)                _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP20_SEL_BIT_POS1(r16)                  _BFGET_(r16, 9, 5)
    #define   SET16BITMAP20_SEL_BIT_POS1(r16,v)                _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP20_SEL_BIT_POS2(r32)                  _BFGET_(r32,14,10)
    #define   SET32BITMAP20_SEL_BIT_POS2(r32,v)                _BFSET_(r32,14,10,v)
    #define   GET16BITMAP20_SEL_BIT_POS2(r16)                  _BFGET_(r16,14,10)
    #define   SET16BITMAP20_SEL_BIT_POS2(r16,v)                _BFSET_(r16,14,10,v)

    #define   GET32BITMAP20_SEL_BIT_POS3(r32)                  _BFGET_(r32,19,15)
    #define   SET32BITMAP20_SEL_BIT_POS3(r32,v)                _BFSET_(r32,19,15,v)

    #define   GET32BITMAP20_SEL_BIT_POS4(r32)                  _BFGET_(r32,24,20)
    #define   SET32BITMAP20_SEL_BIT_POS4(r32,v)                _BFSET_(r32,24,20,v)
    #define   GET16BITMAP20_SEL_BIT_POS4(r16)                  _BFGET_(r16, 8, 4)
    #define   SET16BITMAP20_SEL_BIT_POS4(r16,v)                _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP20_SEL_BIT_POS5(r32)                  _BFGET_(r32,29,25)
    #define   SET32BITMAP20_SEL_BIT_POS5(r32,v)                _BFSET_(r32,29,25,v)
    #define   GET16BITMAP20_SEL_BIT_POS5(r16)                  _BFGET_(r16,13, 9)
    #define   SET16BITMAP20_SEL_BIT_POS5(r16,v)                _BFSET_(r16,13, 9,v)

    #define     w32BITMAP20_SEL                                {\
            UNSG32 uSEL_BIT_POS0                               :  5;\
            UNSG32 uSEL_BIT_POS1                               :  5;\
            UNSG32 uSEL_BIT_POS2                               :  5;\
            UNSG32 uSEL_BIT_POS3                               :  5;\
            UNSG32 uSEL_BIT_POS4                               :  5;\
            UNSG32 uSEL_BIT_POS5                               :  5;\
            UNSG32 RSVDx0_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP20_SEL;
            struct w32BITMAP20_SEL;
          };
    #define   GET32BITMAP20_SEL_BIT_POS6(r32)                  _BFGET_(r32, 4, 0)
    #define   SET32BITMAP20_SEL_BIT_POS6(r32,v)                _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP20_SEL_BIT_POS6(r16)                  _BFGET_(r16, 4, 0)
    #define   SET16BITMAP20_SEL_BIT_POS6(r16,v)                _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP20_SEL_BIT_POS7(r32)                  _BFGET_(r32, 9, 5)
    #define   SET32BITMAP20_SEL_BIT_POS7(r32,v)                _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP20_SEL_BIT_POS7(r16)                  _BFGET_(r16, 9, 5)
    #define   SET16BITMAP20_SEL_BIT_POS7(r16,v)                _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP20_SEL_BIT_POS8(r32)                  _BFGET_(r32,14,10)
    #define   SET32BITMAP20_SEL_BIT_POS8(r32,v)                _BFSET_(r32,14,10,v)
    #define   GET16BITMAP20_SEL_BIT_POS8(r16)                  _BFGET_(r16,14,10)
    #define   SET16BITMAP20_SEL_BIT_POS8(r16,v)                _BFSET_(r16,14,10,v)

    #define   GET32BITMAP20_SEL_BIT_POS9(r32)                  _BFGET_(r32,19,15)
    #define   SET32BITMAP20_SEL_BIT_POS9(r32,v)                _BFSET_(r32,19,15,v)

    #define   GET32BITMAP20_SEL_BIT_POS10(r32)                 _BFGET_(r32,24,20)
    #define   SET32BITMAP20_SEL_BIT_POS10(r32,v)               _BFSET_(r32,24,20,v)
    #define   GET16BITMAP20_SEL_BIT_POS10(r16)                 _BFGET_(r16, 8, 4)
    #define   SET16BITMAP20_SEL_BIT_POS10(r16,v)               _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP20_SEL_BIT_POS11(r32)                 _BFGET_(r32,29,25)
    #define   SET32BITMAP20_SEL_BIT_POS11(r32,v)               _BFSET_(r32,29,25,v)
    #define   GET16BITMAP20_SEL_BIT_POS11(r16)                 _BFGET_(r16,13, 9)
    #define   SET16BITMAP20_SEL_BIT_POS11(r16,v)               _BFSET_(r16,13, 9,v)

    #define     w32BITMAP20_SEL1                               {\
            UNSG32 uSEL_BIT_POS6                               :  5;\
            UNSG32 uSEL_BIT_POS7                               :  5;\
            UNSG32 uSEL_BIT_POS8                               :  5;\
            UNSG32 uSEL_BIT_POS9                               :  5;\
            UNSG32 uSEL_BIT_POS10                              :  5;\
            UNSG32 uSEL_BIT_POS11                              :  5;\
            UNSG32 RSVDx4_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP20_SEL1;
            struct w32BITMAP20_SEL1;
          };
    #define   GET32BITMAP20_SEL_BIT_POS12(r32)                 _BFGET_(r32, 4, 0)
    #define   SET32BITMAP20_SEL_BIT_POS12(r32,v)               _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP20_SEL_BIT_POS12(r16)                 _BFGET_(r16, 4, 0)
    #define   SET16BITMAP20_SEL_BIT_POS12(r16,v)               _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP20_SEL_BIT_POS13(r32)                 _BFGET_(r32, 9, 5)
    #define   SET32BITMAP20_SEL_BIT_POS13(r32,v)               _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP20_SEL_BIT_POS13(r16)                 _BFGET_(r16, 9, 5)
    #define   SET16BITMAP20_SEL_BIT_POS13(r16,v)               _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP20_SEL_BIT_POS14(r32)                 _BFGET_(r32,14,10)
    #define   SET32BITMAP20_SEL_BIT_POS14(r32,v)               _BFSET_(r32,14,10,v)
    #define   GET16BITMAP20_SEL_BIT_POS14(r16)                 _BFGET_(r16,14,10)
    #define   SET16BITMAP20_SEL_BIT_POS14(r16,v)               _BFSET_(r16,14,10,v)

    #define   GET32BITMAP20_SEL_BIT_POS15(r32)                 _BFGET_(r32,19,15)
    #define   SET32BITMAP20_SEL_BIT_POS15(r32,v)               _BFSET_(r32,19,15,v)

    #define   GET32BITMAP20_SEL_BIT_POS16(r32)                 _BFGET_(r32,24,20)
    #define   SET32BITMAP20_SEL_BIT_POS16(r32,v)               _BFSET_(r32,24,20,v)
    #define   GET16BITMAP20_SEL_BIT_POS16(r16)                 _BFGET_(r16, 8, 4)
    #define   SET16BITMAP20_SEL_BIT_POS16(r16,v)               _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP20_SEL_BIT_POS17(r32)                 _BFGET_(r32,29,25)
    #define   SET32BITMAP20_SEL_BIT_POS17(r32,v)               _BFSET_(r32,29,25,v)
    #define   GET16BITMAP20_SEL_BIT_POS17(r16)                 _BFGET_(r16,13, 9)
    #define   SET16BITMAP20_SEL_BIT_POS17(r16,v)               _BFSET_(r16,13, 9,v)

    #define     w32BITMAP20_SEL2                               {\
            UNSG32 uSEL_BIT_POS12                              :  5;\
            UNSG32 uSEL_BIT_POS13                              :  5;\
            UNSG32 uSEL_BIT_POS14                              :  5;\
            UNSG32 uSEL_BIT_POS15                              :  5;\
            UNSG32 uSEL_BIT_POS16                              :  5;\
            UNSG32 uSEL_BIT_POS17                              :  5;\
            UNSG32 RSVDx8_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP20_SEL2;
            struct w32BITMAP20_SEL2;
          };
    #define   GET32BITMAP20_SEL_BIT_POS18(r32)                 _BFGET_(r32, 4, 0)
    #define   SET32BITMAP20_SEL_BIT_POS18(r32,v)               _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP20_SEL_BIT_POS18(r16)                 _BFGET_(r16, 4, 0)
    #define   SET16BITMAP20_SEL_BIT_POS18(r16,v)               _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP20_SEL_BIT_POS19(r32)                 _BFGET_(r32, 9, 5)
    #define   SET32BITMAP20_SEL_BIT_POS19(r32,v)               _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP20_SEL_BIT_POS19(r16)                 _BFGET_(r16, 9, 5)
    #define   SET16BITMAP20_SEL_BIT_POS19(r16,v)               _BFSET_(r16, 9, 5,v)

    #define     w32BITMAP20_SEL3                               {\
            UNSG32 uSEL_BIT_POS18                              :  5;\
            UNSG32 uSEL_BIT_POS19                              :  5;\
            UNSG32 RSVDxC_b10                                  : 22;\
          }
    union { UNSG32 u32BITMAP20_SEL3;
            struct w32BITMAP20_SEL3;
          };
    ///////////////////////////////////////////////////////////
    } SIE_BITMAP20;

    typedef union  T32BITMAP20_SEL
          { UNSG32 u32;
            struct w32BITMAP20_SEL;
                 } T32BITMAP20_SEL;
    typedef union  T32BITMAP20_SEL1
          { UNSG32 u32;
            struct w32BITMAP20_SEL1;
                 } T32BITMAP20_SEL1;
    typedef union  T32BITMAP20_SEL2
          { UNSG32 u32;
            struct w32BITMAP20_SEL2;
                 } T32BITMAP20_SEL2;
    typedef union  T32BITMAP20_SEL3
          { UNSG32 u32;
            struct w32BITMAP20_SEL3;
                 } T32BITMAP20_SEL3;
    ///////////////////////////////////////////////////////////

    typedef union  TBITMAP20_SEL
          { UNSG32 u32[4];
            struct {
            struct w32BITMAP20_SEL;
            struct w32BITMAP20_SEL1;
            struct w32BITMAP20_SEL2;
            struct w32BITMAP20_SEL3;
                   };
                 } TBITMAP20_SEL;

    ///////////////////////////////////////////////////////////
     SIGN32 BITMAP20_drvrd(SIE_BITMAP20 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 BITMAP20_drvwr(SIE_BITMAP20 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void BITMAP20_reset(SIE_BITMAP20 *p);
     SIGN32 BITMAP20_cmp  (SIE_BITMAP20 *p, SIE_BITMAP20 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define BITMAP20_check(p,pie,pfx,hLOG) BITMAP20_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define BITMAP20_print(p,    pfx,hLOG) BITMAP20_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: BITMAP20
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE BITMAP32                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 SEL                  (P)
///               %unsigned 5  BIT_POS0                  0x0
///               %unsigned 5  BIT_POS1                  0x1
///               %unsigned 5  BIT_POS2                  0x2
///               %unsigned 5  BIT_POS3                  0x3
///               %unsigned 5  BIT_POS4                  0x4
///               %unsigned 5  BIT_POS5                  0x5
///               %%        2          # Stuffing bits...
///     # 0x00004 SEL1
///               %unsigned 5  BIT_POS6                  0x6
///               %unsigned 5  BIT_POS7                  0x7
///               %unsigned 5  BIT_POS8                  0x8
///               %unsigned 5  BIT_POS9                  0x9
///               %unsigned 5  BIT_POS10                 0xA
///               %unsigned 5  BIT_POS11                 0xB
///               %%        2          # Stuffing bits...
///     # 0x00008 SEL2
///               %unsigned 5  BIT_POS12                 0xC
///               %unsigned 5  BIT_POS13                 0xD
///               %unsigned 5  BIT_POS14                 0xE
///               %unsigned 5  BIT_POS15                 0xF
///               %unsigned 5  BIT_POS16                 0x10
///               %unsigned 5  BIT_POS17                 0x11
///               %%        2          # Stuffing bits...
///     # 0x0000C SEL3
///               %unsigned 5  BIT_POS18                 0x12
///               %unsigned 5  BIT_POS19                 0x13
///               %unsigned 5  BIT_POS20                 0x14
///               %unsigned 5  BIT_POS21                 0x15
///               %unsigned 5  BIT_POS22                 0x16
///               %unsigned 5  BIT_POS23                 0x17
///               %%        2          # Stuffing bits...
///     # 0x00010 SEL4
///               %unsigned 5  BIT_POS24                 0x18
///               %unsigned 5  BIT_POS25                 0x19
///               %unsigned 5  BIT_POS26                 0x1A
///               %unsigned 5  BIT_POS27                 0x1B
///               %unsigned 5  BIT_POS28                 0x1C
///               %unsigned 5  BIT_POS29                 0x1D
///               %%        2          # Stuffing bits...
///     # 0x00014 SEL5
///               %unsigned 5  BIT_POS30                 0x1E
///               %unsigned 5  BIT_POS31                 0x1F
///                                    ###
///                                    * Specifies mapping of 32 bit data from Read Client which need to be used to form pixels for Inverse Scan mode.
///                                    ###
///               %%        22         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      24B, bits:     160b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_BITMAP32
#define h_BITMAP32 (){}

    #define     RA_BITMAP32_SEL                                0x0000

    #define     BA_BITMAP32_SEL_BIT_POS0                       0x0000
    #define     B16BITMAP32_SEL_BIT_POS0                       0x0000
    #define   LSb32BITMAP32_SEL_BIT_POS0                          0
    #define   LSb16BITMAP32_SEL_BIT_POS0                          0
    #define       bBITMAP32_SEL_BIT_POS0                       5
    #define   MSK32BITMAP32_SEL_BIT_POS0                          0x0000001F

    #define     BA_BITMAP32_SEL_BIT_POS1                       0x0000
    #define     B16BITMAP32_SEL_BIT_POS1                       0x0000
    #define   LSb32BITMAP32_SEL_BIT_POS1                          5
    #define   LSb16BITMAP32_SEL_BIT_POS1                          5
    #define       bBITMAP32_SEL_BIT_POS1                       5
    #define   MSK32BITMAP32_SEL_BIT_POS1                          0x000003E0

    #define     BA_BITMAP32_SEL_BIT_POS2                       0x0001
    #define     B16BITMAP32_SEL_BIT_POS2                       0x0000
    #define   LSb32BITMAP32_SEL_BIT_POS2                          10
    #define   LSb16BITMAP32_SEL_BIT_POS2                          10
    #define       bBITMAP32_SEL_BIT_POS2                       5
    #define   MSK32BITMAP32_SEL_BIT_POS2                          0x00007C00

    #define     BA_BITMAP32_SEL_BIT_POS3                       0x0001
    #define     B16BITMAP32_SEL_BIT_POS3                       0x0000
    #define   LSb32BITMAP32_SEL_BIT_POS3                          15
    #define   LSb16BITMAP32_SEL_BIT_POS3                          15
    #define       bBITMAP32_SEL_BIT_POS3                       5
    #define   MSK32BITMAP32_SEL_BIT_POS3                          0x000F8000

    #define     BA_BITMAP32_SEL_BIT_POS4                       0x0002
    #define     B16BITMAP32_SEL_BIT_POS4                       0x0002
    #define   LSb32BITMAP32_SEL_BIT_POS4                          20
    #define   LSb16BITMAP32_SEL_BIT_POS4                          4
    #define       bBITMAP32_SEL_BIT_POS4                       5
    #define   MSK32BITMAP32_SEL_BIT_POS4                          0x01F00000

    #define     BA_BITMAP32_SEL_BIT_POS5                       0x0003
    #define     B16BITMAP32_SEL_BIT_POS5                       0x0002
    #define   LSb32BITMAP32_SEL_BIT_POS5                          25
    #define   LSb16BITMAP32_SEL_BIT_POS5                          9
    #define       bBITMAP32_SEL_BIT_POS5                       5
    #define   MSK32BITMAP32_SEL_BIT_POS5                          0x3E000000

    #define     RA_BITMAP32_SEL1                               0x0004

    #define     BA_BITMAP32_SEL_BIT_POS6                       0x0004
    #define     B16BITMAP32_SEL_BIT_POS6                       0x0004
    #define   LSb32BITMAP32_SEL_BIT_POS6                          0
    #define   LSb16BITMAP32_SEL_BIT_POS6                          0
    #define       bBITMAP32_SEL_BIT_POS6                       5
    #define   MSK32BITMAP32_SEL_BIT_POS6                          0x0000001F

    #define     BA_BITMAP32_SEL_BIT_POS7                       0x0004
    #define     B16BITMAP32_SEL_BIT_POS7                       0x0004
    #define   LSb32BITMAP32_SEL_BIT_POS7                          5
    #define   LSb16BITMAP32_SEL_BIT_POS7                          5
    #define       bBITMAP32_SEL_BIT_POS7                       5
    #define   MSK32BITMAP32_SEL_BIT_POS7                          0x000003E0

    #define     BA_BITMAP32_SEL_BIT_POS8                       0x0005
    #define     B16BITMAP32_SEL_BIT_POS8                       0x0004
    #define   LSb32BITMAP32_SEL_BIT_POS8                          10
    #define   LSb16BITMAP32_SEL_BIT_POS8                          10
    #define       bBITMAP32_SEL_BIT_POS8                       5
    #define   MSK32BITMAP32_SEL_BIT_POS8                          0x00007C00

    #define     BA_BITMAP32_SEL_BIT_POS9                       0x0005
    #define     B16BITMAP32_SEL_BIT_POS9                       0x0004
    #define   LSb32BITMAP32_SEL_BIT_POS9                          15
    #define   LSb16BITMAP32_SEL_BIT_POS9                          15
    #define       bBITMAP32_SEL_BIT_POS9                       5
    #define   MSK32BITMAP32_SEL_BIT_POS9                          0x000F8000

    #define     BA_BITMAP32_SEL_BIT_POS10                      0x0006
    #define     B16BITMAP32_SEL_BIT_POS10                      0x0006
    #define   LSb32BITMAP32_SEL_BIT_POS10                         20
    #define   LSb16BITMAP32_SEL_BIT_POS10                         4
    #define       bBITMAP32_SEL_BIT_POS10                      5
    #define   MSK32BITMAP32_SEL_BIT_POS10                         0x01F00000

    #define     BA_BITMAP32_SEL_BIT_POS11                      0x0007
    #define     B16BITMAP32_SEL_BIT_POS11                      0x0006
    #define   LSb32BITMAP32_SEL_BIT_POS11                         25
    #define   LSb16BITMAP32_SEL_BIT_POS11                         9
    #define       bBITMAP32_SEL_BIT_POS11                      5
    #define   MSK32BITMAP32_SEL_BIT_POS11                         0x3E000000

    #define     RA_BITMAP32_SEL2                               0x0008

    #define     BA_BITMAP32_SEL_BIT_POS12                      0x0008
    #define     B16BITMAP32_SEL_BIT_POS12                      0x0008
    #define   LSb32BITMAP32_SEL_BIT_POS12                         0
    #define   LSb16BITMAP32_SEL_BIT_POS12                         0
    #define       bBITMAP32_SEL_BIT_POS12                      5
    #define   MSK32BITMAP32_SEL_BIT_POS12                         0x0000001F

    #define     BA_BITMAP32_SEL_BIT_POS13                      0x0008
    #define     B16BITMAP32_SEL_BIT_POS13                      0x0008
    #define   LSb32BITMAP32_SEL_BIT_POS13                         5
    #define   LSb16BITMAP32_SEL_BIT_POS13                         5
    #define       bBITMAP32_SEL_BIT_POS13                      5
    #define   MSK32BITMAP32_SEL_BIT_POS13                         0x000003E0

    #define     BA_BITMAP32_SEL_BIT_POS14                      0x0009
    #define     B16BITMAP32_SEL_BIT_POS14                      0x0008
    #define   LSb32BITMAP32_SEL_BIT_POS14                         10
    #define   LSb16BITMAP32_SEL_BIT_POS14                         10
    #define       bBITMAP32_SEL_BIT_POS14                      5
    #define   MSK32BITMAP32_SEL_BIT_POS14                         0x00007C00

    #define     BA_BITMAP32_SEL_BIT_POS15                      0x0009
    #define     B16BITMAP32_SEL_BIT_POS15                      0x0008
    #define   LSb32BITMAP32_SEL_BIT_POS15                         15
    #define   LSb16BITMAP32_SEL_BIT_POS15                         15
    #define       bBITMAP32_SEL_BIT_POS15                      5
    #define   MSK32BITMAP32_SEL_BIT_POS15                         0x000F8000

    #define     BA_BITMAP32_SEL_BIT_POS16                      0x000A
    #define     B16BITMAP32_SEL_BIT_POS16                      0x000A
    #define   LSb32BITMAP32_SEL_BIT_POS16                         20
    #define   LSb16BITMAP32_SEL_BIT_POS16                         4
    #define       bBITMAP32_SEL_BIT_POS16                      5
    #define   MSK32BITMAP32_SEL_BIT_POS16                         0x01F00000

    #define     BA_BITMAP32_SEL_BIT_POS17                      0x000B
    #define     B16BITMAP32_SEL_BIT_POS17                      0x000A
    #define   LSb32BITMAP32_SEL_BIT_POS17                         25
    #define   LSb16BITMAP32_SEL_BIT_POS17                         9
    #define       bBITMAP32_SEL_BIT_POS17                      5
    #define   MSK32BITMAP32_SEL_BIT_POS17                         0x3E000000

    #define     RA_BITMAP32_SEL3                               0x000C

    #define     BA_BITMAP32_SEL_BIT_POS18                      0x000C
    #define     B16BITMAP32_SEL_BIT_POS18                      0x000C
    #define   LSb32BITMAP32_SEL_BIT_POS18                         0
    #define   LSb16BITMAP32_SEL_BIT_POS18                         0
    #define       bBITMAP32_SEL_BIT_POS18                      5
    #define   MSK32BITMAP32_SEL_BIT_POS18                         0x0000001F

    #define     BA_BITMAP32_SEL_BIT_POS19                      0x000C
    #define     B16BITMAP32_SEL_BIT_POS19                      0x000C
    #define   LSb32BITMAP32_SEL_BIT_POS19                         5
    #define   LSb16BITMAP32_SEL_BIT_POS19                         5
    #define       bBITMAP32_SEL_BIT_POS19                      5
    #define   MSK32BITMAP32_SEL_BIT_POS19                         0x000003E0

    #define     BA_BITMAP32_SEL_BIT_POS20                      0x000D
    #define     B16BITMAP32_SEL_BIT_POS20                      0x000C
    #define   LSb32BITMAP32_SEL_BIT_POS20                         10
    #define   LSb16BITMAP32_SEL_BIT_POS20                         10
    #define       bBITMAP32_SEL_BIT_POS20                      5
    #define   MSK32BITMAP32_SEL_BIT_POS20                         0x00007C00

    #define     BA_BITMAP32_SEL_BIT_POS21                      0x000D
    #define     B16BITMAP32_SEL_BIT_POS21                      0x000C
    #define   LSb32BITMAP32_SEL_BIT_POS21                         15
    #define   LSb16BITMAP32_SEL_BIT_POS21                         15
    #define       bBITMAP32_SEL_BIT_POS21                      5
    #define   MSK32BITMAP32_SEL_BIT_POS21                         0x000F8000

    #define     BA_BITMAP32_SEL_BIT_POS22                      0x000E
    #define     B16BITMAP32_SEL_BIT_POS22                      0x000E
    #define   LSb32BITMAP32_SEL_BIT_POS22                         20
    #define   LSb16BITMAP32_SEL_BIT_POS22                         4
    #define       bBITMAP32_SEL_BIT_POS22                      5
    #define   MSK32BITMAP32_SEL_BIT_POS22                         0x01F00000

    #define     BA_BITMAP32_SEL_BIT_POS23                      0x000F
    #define     B16BITMAP32_SEL_BIT_POS23                      0x000E
    #define   LSb32BITMAP32_SEL_BIT_POS23                         25
    #define   LSb16BITMAP32_SEL_BIT_POS23                         9
    #define       bBITMAP32_SEL_BIT_POS23                      5
    #define   MSK32BITMAP32_SEL_BIT_POS23                         0x3E000000

    #define     RA_BITMAP32_SEL4                               0x0010

    #define     BA_BITMAP32_SEL_BIT_POS24                      0x0010
    #define     B16BITMAP32_SEL_BIT_POS24                      0x0010
    #define   LSb32BITMAP32_SEL_BIT_POS24                         0
    #define   LSb16BITMAP32_SEL_BIT_POS24                         0
    #define       bBITMAP32_SEL_BIT_POS24                      5
    #define   MSK32BITMAP32_SEL_BIT_POS24                         0x0000001F

    #define     BA_BITMAP32_SEL_BIT_POS25                      0x0010
    #define     B16BITMAP32_SEL_BIT_POS25                      0x0010
    #define   LSb32BITMAP32_SEL_BIT_POS25                         5
    #define   LSb16BITMAP32_SEL_BIT_POS25                         5
    #define       bBITMAP32_SEL_BIT_POS25                      5
    #define   MSK32BITMAP32_SEL_BIT_POS25                         0x000003E0

    #define     BA_BITMAP32_SEL_BIT_POS26                      0x0011
    #define     B16BITMAP32_SEL_BIT_POS26                      0x0010
    #define   LSb32BITMAP32_SEL_BIT_POS26                         10
    #define   LSb16BITMAP32_SEL_BIT_POS26                         10
    #define       bBITMAP32_SEL_BIT_POS26                      5
    #define   MSK32BITMAP32_SEL_BIT_POS26                         0x00007C00

    #define     BA_BITMAP32_SEL_BIT_POS27                      0x0011
    #define     B16BITMAP32_SEL_BIT_POS27                      0x0010
    #define   LSb32BITMAP32_SEL_BIT_POS27                         15
    #define   LSb16BITMAP32_SEL_BIT_POS27                         15
    #define       bBITMAP32_SEL_BIT_POS27                      5
    #define   MSK32BITMAP32_SEL_BIT_POS27                         0x000F8000

    #define     BA_BITMAP32_SEL_BIT_POS28                      0x0012
    #define     B16BITMAP32_SEL_BIT_POS28                      0x0012
    #define   LSb32BITMAP32_SEL_BIT_POS28                         20
    #define   LSb16BITMAP32_SEL_BIT_POS28                         4
    #define       bBITMAP32_SEL_BIT_POS28                      5
    #define   MSK32BITMAP32_SEL_BIT_POS28                         0x01F00000

    #define     BA_BITMAP32_SEL_BIT_POS29                      0x0013
    #define     B16BITMAP32_SEL_BIT_POS29                      0x0012
    #define   LSb32BITMAP32_SEL_BIT_POS29                         25
    #define   LSb16BITMAP32_SEL_BIT_POS29                         9
    #define       bBITMAP32_SEL_BIT_POS29                      5
    #define   MSK32BITMAP32_SEL_BIT_POS29                         0x3E000000

    #define     RA_BITMAP32_SEL5                               0x0014

    #define     BA_BITMAP32_SEL_BIT_POS30                      0x0014
    #define     B16BITMAP32_SEL_BIT_POS30                      0x0014
    #define   LSb32BITMAP32_SEL_BIT_POS30                         0
    #define   LSb16BITMAP32_SEL_BIT_POS30                         0
    #define       bBITMAP32_SEL_BIT_POS30                      5
    #define   MSK32BITMAP32_SEL_BIT_POS30                         0x0000001F

    #define     BA_BITMAP32_SEL_BIT_POS31                      0x0014
    #define     B16BITMAP32_SEL_BIT_POS31                      0x0014
    #define   LSb32BITMAP32_SEL_BIT_POS31                         5
    #define   LSb16BITMAP32_SEL_BIT_POS31                         5
    #define       bBITMAP32_SEL_BIT_POS31                      5
    #define   MSK32BITMAP32_SEL_BIT_POS31                         0x000003E0
    ///////////////////////////////////////////////////////////

    typedef struct SIE_BITMAP32 {
    ///////////////////////////////////////////////////////////
    #define   GET32BITMAP32_SEL_BIT_POS0(r32)                  _BFGET_(r32, 4, 0)
    #define   SET32BITMAP32_SEL_BIT_POS0(r32,v)                _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP32_SEL_BIT_POS0(r16)                  _BFGET_(r16, 4, 0)
    #define   SET16BITMAP32_SEL_BIT_POS0(r16,v)                _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP32_SEL_BIT_POS1(r32)                  _BFGET_(r32, 9, 5)
    #define   SET32BITMAP32_SEL_BIT_POS1(r32,v)                _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP32_SEL_BIT_POS1(r16)                  _BFGET_(r16, 9, 5)
    #define   SET16BITMAP32_SEL_BIT_POS1(r16,v)                _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP32_SEL_BIT_POS2(r32)                  _BFGET_(r32,14,10)
    #define   SET32BITMAP32_SEL_BIT_POS2(r32,v)                _BFSET_(r32,14,10,v)
    #define   GET16BITMAP32_SEL_BIT_POS2(r16)                  _BFGET_(r16,14,10)
    #define   SET16BITMAP32_SEL_BIT_POS2(r16,v)                _BFSET_(r16,14,10,v)

    #define   GET32BITMAP32_SEL_BIT_POS3(r32)                  _BFGET_(r32,19,15)
    #define   SET32BITMAP32_SEL_BIT_POS3(r32,v)                _BFSET_(r32,19,15,v)

    #define   GET32BITMAP32_SEL_BIT_POS4(r32)                  _BFGET_(r32,24,20)
    #define   SET32BITMAP32_SEL_BIT_POS4(r32,v)                _BFSET_(r32,24,20,v)
    #define   GET16BITMAP32_SEL_BIT_POS4(r16)                  _BFGET_(r16, 8, 4)
    #define   SET16BITMAP32_SEL_BIT_POS4(r16,v)                _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP32_SEL_BIT_POS5(r32)                  _BFGET_(r32,29,25)
    #define   SET32BITMAP32_SEL_BIT_POS5(r32,v)                _BFSET_(r32,29,25,v)
    #define   GET16BITMAP32_SEL_BIT_POS5(r16)                  _BFGET_(r16,13, 9)
    #define   SET16BITMAP32_SEL_BIT_POS5(r16,v)                _BFSET_(r16,13, 9,v)

    #define     w32BITMAP32_SEL                                {\
            UNSG32 uSEL_BIT_POS0                               :  5;\
            UNSG32 uSEL_BIT_POS1                               :  5;\
            UNSG32 uSEL_BIT_POS2                               :  5;\
            UNSG32 uSEL_BIT_POS3                               :  5;\
            UNSG32 uSEL_BIT_POS4                               :  5;\
            UNSG32 uSEL_BIT_POS5                               :  5;\
            UNSG32 RSVDx0_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP32_SEL;
            struct w32BITMAP32_SEL;
          };
    #define   GET32BITMAP32_SEL_BIT_POS6(r32)                  _BFGET_(r32, 4, 0)
    #define   SET32BITMAP32_SEL_BIT_POS6(r32,v)                _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP32_SEL_BIT_POS6(r16)                  _BFGET_(r16, 4, 0)
    #define   SET16BITMAP32_SEL_BIT_POS6(r16,v)                _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP32_SEL_BIT_POS7(r32)                  _BFGET_(r32, 9, 5)
    #define   SET32BITMAP32_SEL_BIT_POS7(r32,v)                _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP32_SEL_BIT_POS7(r16)                  _BFGET_(r16, 9, 5)
    #define   SET16BITMAP32_SEL_BIT_POS7(r16,v)                _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP32_SEL_BIT_POS8(r32)                  _BFGET_(r32,14,10)
    #define   SET32BITMAP32_SEL_BIT_POS8(r32,v)                _BFSET_(r32,14,10,v)
    #define   GET16BITMAP32_SEL_BIT_POS8(r16)                  _BFGET_(r16,14,10)
    #define   SET16BITMAP32_SEL_BIT_POS8(r16,v)                _BFSET_(r16,14,10,v)

    #define   GET32BITMAP32_SEL_BIT_POS9(r32)                  _BFGET_(r32,19,15)
    #define   SET32BITMAP32_SEL_BIT_POS9(r32,v)                _BFSET_(r32,19,15,v)

    #define   GET32BITMAP32_SEL_BIT_POS10(r32)                 _BFGET_(r32,24,20)
    #define   SET32BITMAP32_SEL_BIT_POS10(r32,v)               _BFSET_(r32,24,20,v)
    #define   GET16BITMAP32_SEL_BIT_POS10(r16)                 _BFGET_(r16, 8, 4)
    #define   SET16BITMAP32_SEL_BIT_POS10(r16,v)               _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP32_SEL_BIT_POS11(r32)                 _BFGET_(r32,29,25)
    #define   SET32BITMAP32_SEL_BIT_POS11(r32,v)               _BFSET_(r32,29,25,v)
    #define   GET16BITMAP32_SEL_BIT_POS11(r16)                 _BFGET_(r16,13, 9)
    #define   SET16BITMAP32_SEL_BIT_POS11(r16,v)               _BFSET_(r16,13, 9,v)

    #define     w32BITMAP32_SEL1                               {\
            UNSG32 uSEL_BIT_POS6                               :  5;\
            UNSG32 uSEL_BIT_POS7                               :  5;\
            UNSG32 uSEL_BIT_POS8                               :  5;\
            UNSG32 uSEL_BIT_POS9                               :  5;\
            UNSG32 uSEL_BIT_POS10                              :  5;\
            UNSG32 uSEL_BIT_POS11                              :  5;\
            UNSG32 RSVDx4_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP32_SEL1;
            struct w32BITMAP32_SEL1;
          };
    #define   GET32BITMAP32_SEL_BIT_POS12(r32)                 _BFGET_(r32, 4, 0)
    #define   SET32BITMAP32_SEL_BIT_POS12(r32,v)               _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP32_SEL_BIT_POS12(r16)                 _BFGET_(r16, 4, 0)
    #define   SET16BITMAP32_SEL_BIT_POS12(r16,v)               _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP32_SEL_BIT_POS13(r32)                 _BFGET_(r32, 9, 5)
    #define   SET32BITMAP32_SEL_BIT_POS13(r32,v)               _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP32_SEL_BIT_POS13(r16)                 _BFGET_(r16, 9, 5)
    #define   SET16BITMAP32_SEL_BIT_POS13(r16,v)               _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP32_SEL_BIT_POS14(r32)                 _BFGET_(r32,14,10)
    #define   SET32BITMAP32_SEL_BIT_POS14(r32,v)               _BFSET_(r32,14,10,v)
    #define   GET16BITMAP32_SEL_BIT_POS14(r16)                 _BFGET_(r16,14,10)
    #define   SET16BITMAP32_SEL_BIT_POS14(r16,v)               _BFSET_(r16,14,10,v)

    #define   GET32BITMAP32_SEL_BIT_POS15(r32)                 _BFGET_(r32,19,15)
    #define   SET32BITMAP32_SEL_BIT_POS15(r32,v)               _BFSET_(r32,19,15,v)

    #define   GET32BITMAP32_SEL_BIT_POS16(r32)                 _BFGET_(r32,24,20)
    #define   SET32BITMAP32_SEL_BIT_POS16(r32,v)               _BFSET_(r32,24,20,v)
    #define   GET16BITMAP32_SEL_BIT_POS16(r16)                 _BFGET_(r16, 8, 4)
    #define   SET16BITMAP32_SEL_BIT_POS16(r16,v)               _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP32_SEL_BIT_POS17(r32)                 _BFGET_(r32,29,25)
    #define   SET32BITMAP32_SEL_BIT_POS17(r32,v)               _BFSET_(r32,29,25,v)
    #define   GET16BITMAP32_SEL_BIT_POS17(r16)                 _BFGET_(r16,13, 9)
    #define   SET16BITMAP32_SEL_BIT_POS17(r16,v)               _BFSET_(r16,13, 9,v)

    #define     w32BITMAP32_SEL2                               {\
            UNSG32 uSEL_BIT_POS12                              :  5;\
            UNSG32 uSEL_BIT_POS13                              :  5;\
            UNSG32 uSEL_BIT_POS14                              :  5;\
            UNSG32 uSEL_BIT_POS15                              :  5;\
            UNSG32 uSEL_BIT_POS16                              :  5;\
            UNSG32 uSEL_BIT_POS17                              :  5;\
            UNSG32 RSVDx8_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP32_SEL2;
            struct w32BITMAP32_SEL2;
          };
    #define   GET32BITMAP32_SEL_BIT_POS18(r32)                 _BFGET_(r32, 4, 0)
    #define   SET32BITMAP32_SEL_BIT_POS18(r32,v)               _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP32_SEL_BIT_POS18(r16)                 _BFGET_(r16, 4, 0)
    #define   SET16BITMAP32_SEL_BIT_POS18(r16,v)               _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP32_SEL_BIT_POS19(r32)                 _BFGET_(r32, 9, 5)
    #define   SET32BITMAP32_SEL_BIT_POS19(r32,v)               _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP32_SEL_BIT_POS19(r16)                 _BFGET_(r16, 9, 5)
    #define   SET16BITMAP32_SEL_BIT_POS19(r16,v)               _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP32_SEL_BIT_POS20(r32)                 _BFGET_(r32,14,10)
    #define   SET32BITMAP32_SEL_BIT_POS20(r32,v)               _BFSET_(r32,14,10,v)
    #define   GET16BITMAP32_SEL_BIT_POS20(r16)                 _BFGET_(r16,14,10)
    #define   SET16BITMAP32_SEL_BIT_POS20(r16,v)               _BFSET_(r16,14,10,v)

    #define   GET32BITMAP32_SEL_BIT_POS21(r32)                 _BFGET_(r32,19,15)
    #define   SET32BITMAP32_SEL_BIT_POS21(r32,v)               _BFSET_(r32,19,15,v)

    #define   GET32BITMAP32_SEL_BIT_POS22(r32)                 _BFGET_(r32,24,20)
    #define   SET32BITMAP32_SEL_BIT_POS22(r32,v)               _BFSET_(r32,24,20,v)
    #define   GET16BITMAP32_SEL_BIT_POS22(r16)                 _BFGET_(r16, 8, 4)
    #define   SET16BITMAP32_SEL_BIT_POS22(r16,v)               _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP32_SEL_BIT_POS23(r32)                 _BFGET_(r32,29,25)
    #define   SET32BITMAP32_SEL_BIT_POS23(r32,v)               _BFSET_(r32,29,25,v)
    #define   GET16BITMAP32_SEL_BIT_POS23(r16)                 _BFGET_(r16,13, 9)
    #define   SET16BITMAP32_SEL_BIT_POS23(r16,v)               _BFSET_(r16,13, 9,v)

    #define     w32BITMAP32_SEL3                               {\
            UNSG32 uSEL_BIT_POS18                              :  5;\
            UNSG32 uSEL_BIT_POS19                              :  5;\
            UNSG32 uSEL_BIT_POS20                              :  5;\
            UNSG32 uSEL_BIT_POS21                              :  5;\
            UNSG32 uSEL_BIT_POS22                              :  5;\
            UNSG32 uSEL_BIT_POS23                              :  5;\
            UNSG32 RSVDxC_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP32_SEL3;
            struct w32BITMAP32_SEL3;
          };
    #define   GET32BITMAP32_SEL_BIT_POS24(r32)                 _BFGET_(r32, 4, 0)
    #define   SET32BITMAP32_SEL_BIT_POS24(r32,v)               _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP32_SEL_BIT_POS24(r16)                 _BFGET_(r16, 4, 0)
    #define   SET16BITMAP32_SEL_BIT_POS24(r16,v)               _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP32_SEL_BIT_POS25(r32)                 _BFGET_(r32, 9, 5)
    #define   SET32BITMAP32_SEL_BIT_POS25(r32,v)               _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP32_SEL_BIT_POS25(r16)                 _BFGET_(r16, 9, 5)
    #define   SET16BITMAP32_SEL_BIT_POS25(r16,v)               _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP32_SEL_BIT_POS26(r32)                 _BFGET_(r32,14,10)
    #define   SET32BITMAP32_SEL_BIT_POS26(r32,v)               _BFSET_(r32,14,10,v)
    #define   GET16BITMAP32_SEL_BIT_POS26(r16)                 _BFGET_(r16,14,10)
    #define   SET16BITMAP32_SEL_BIT_POS26(r16,v)               _BFSET_(r16,14,10,v)

    #define   GET32BITMAP32_SEL_BIT_POS27(r32)                 _BFGET_(r32,19,15)
    #define   SET32BITMAP32_SEL_BIT_POS27(r32,v)               _BFSET_(r32,19,15,v)

    #define   GET32BITMAP32_SEL_BIT_POS28(r32)                 _BFGET_(r32,24,20)
    #define   SET32BITMAP32_SEL_BIT_POS28(r32,v)               _BFSET_(r32,24,20,v)
    #define   GET16BITMAP32_SEL_BIT_POS28(r16)                 _BFGET_(r16, 8, 4)
    #define   SET16BITMAP32_SEL_BIT_POS28(r16,v)               _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP32_SEL_BIT_POS29(r32)                 _BFGET_(r32,29,25)
    #define   SET32BITMAP32_SEL_BIT_POS29(r32,v)               _BFSET_(r32,29,25,v)
    #define   GET16BITMAP32_SEL_BIT_POS29(r16)                 _BFGET_(r16,13, 9)
    #define   SET16BITMAP32_SEL_BIT_POS29(r16,v)               _BFSET_(r16,13, 9,v)

    #define     w32BITMAP32_SEL4                               {\
            UNSG32 uSEL_BIT_POS24                              :  5;\
            UNSG32 uSEL_BIT_POS25                              :  5;\
            UNSG32 uSEL_BIT_POS26                              :  5;\
            UNSG32 uSEL_BIT_POS27                              :  5;\
            UNSG32 uSEL_BIT_POS28                              :  5;\
            UNSG32 uSEL_BIT_POS29                              :  5;\
            UNSG32 RSVDx10_b30                                 :  2;\
          }
    union { UNSG32 u32BITMAP32_SEL4;
            struct w32BITMAP32_SEL4;
          };
    #define   GET32BITMAP32_SEL_BIT_POS30(r32)                 _BFGET_(r32, 4, 0)
    #define   SET32BITMAP32_SEL_BIT_POS30(r32,v)               _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP32_SEL_BIT_POS30(r16)                 _BFGET_(r16, 4, 0)
    #define   SET16BITMAP32_SEL_BIT_POS30(r16,v)               _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP32_SEL_BIT_POS31(r32)                 _BFGET_(r32, 9, 5)
    #define   SET32BITMAP32_SEL_BIT_POS31(r32,v)               _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP32_SEL_BIT_POS31(r16)                 _BFGET_(r16, 9, 5)
    #define   SET16BITMAP32_SEL_BIT_POS31(r16,v)               _BFSET_(r16, 9, 5,v)

    #define     w32BITMAP32_SEL5                               {\
            UNSG32 uSEL_BIT_POS30                              :  5;\
            UNSG32 uSEL_BIT_POS31                              :  5;\
            UNSG32 RSVDx14_b10                                 : 22;\
          }
    union { UNSG32 u32BITMAP32_SEL5;
            struct w32BITMAP32_SEL5;
          };
    ///////////////////////////////////////////////////////////
    } SIE_BITMAP32;

    typedef union  T32BITMAP32_SEL
          { UNSG32 u32;
            struct w32BITMAP32_SEL;
                 } T32BITMAP32_SEL;
    typedef union  T32BITMAP32_SEL1
          { UNSG32 u32;
            struct w32BITMAP32_SEL1;
                 } T32BITMAP32_SEL1;
    typedef union  T32BITMAP32_SEL2
          { UNSG32 u32;
            struct w32BITMAP32_SEL2;
                 } T32BITMAP32_SEL2;
    typedef union  T32BITMAP32_SEL3
          { UNSG32 u32;
            struct w32BITMAP32_SEL3;
                 } T32BITMAP32_SEL3;
    typedef union  T32BITMAP32_SEL4
          { UNSG32 u32;
            struct w32BITMAP32_SEL4;
                 } T32BITMAP32_SEL4;
    typedef union  T32BITMAP32_SEL5
          { UNSG32 u32;
            struct w32BITMAP32_SEL5;
                 } T32BITMAP32_SEL5;
    ///////////////////////////////////////////////////////////

    typedef union  TBITMAP32_SEL
          { UNSG32 u32[6];
            struct {
            struct w32BITMAP32_SEL;
            struct w32BITMAP32_SEL1;
            struct w32BITMAP32_SEL2;
            struct w32BITMAP32_SEL3;
            struct w32BITMAP32_SEL4;
            struct w32BITMAP32_SEL5;
                   };
                 } TBITMAP32_SEL;

    ///////////////////////////////////////////////////////////
     SIGN32 BITMAP32_drvrd(SIE_BITMAP32 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 BITMAP32_drvwr(SIE_BITMAP32 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void BITMAP32_reset(SIE_BITMAP32 *p);
     SIGN32 BITMAP32_cmp  (SIE_BITMAP32 *p, SIE_BITMAP32 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define BITMAP32_check(p,pie,pfx,hLOG) BITMAP32_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define BITMAP32_print(p,    pfx,hLOG) BITMAP32_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: BITMAP32
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE BITMAP16                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 SEL                  (P)
///               %unsigned 4  BIT_POS0                  0x0
///               %unsigned 4  BIT_POS1                  0x1
///               %unsigned 4  BIT_POS2                  0x2
///               %unsigned 4  BIT_POS3                  0x3
///               %unsigned 4  BIT_POS4                  0x4
///               %unsigned 4  BIT_POS5                  0x5
///               %unsigned 4  BIT_POS6                  0x6
///               %unsigned 4  BIT_POS7                  0x7
///     # 0x00004 SEL1
///               %unsigned 4  BIT_POS8                  0x8
///               %unsigned 4  BIT_POS9                  0x9
///               %unsigned 4  BIT_POS10                 0xA
///               %unsigned 4  BIT_POS11                 0xB
///               %unsigned 4  BIT_POS12                 0xC
///               %unsigned 4  BIT_POS13                 0xD
///               %unsigned 4  BIT_POS14                 0xE
///               %unsigned 4  BIT_POS15                 0xF
///                                    ###
///                                    * Specifies mapping of new bit locations within 16 bit data from Read Client which need to be used to form pixels for Inverse Scan mode.
///                                    * Normal dHub data order:
///                                    * {Y3,Cr2,Y2,Cb2,Y1,Cr0,Y0,Cb0} First pixel in LSB
///                                    * Inverse Scan dHub data order:
///                                    * {Y3,Cr2,Y2,Cb2,Y1,Cr0,Y0,Cb0} First pixel in MSB
///                                    * Following different data orders can be generated to be presented to first UPS in the pipe.
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:      64b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_BITMAP16
#define h_BITMAP16 (){}

    #define     RA_BITMAP16_SEL                                0x0000

    #define     BA_BITMAP16_SEL_BIT_POS0                       0x0000
    #define     B16BITMAP16_SEL_BIT_POS0                       0x0000
    #define   LSb32BITMAP16_SEL_BIT_POS0                          0
    #define   LSb16BITMAP16_SEL_BIT_POS0                          0
    #define       bBITMAP16_SEL_BIT_POS0                       4
    #define   MSK32BITMAP16_SEL_BIT_POS0                          0x0000000F

    #define     BA_BITMAP16_SEL_BIT_POS1                       0x0000
    #define     B16BITMAP16_SEL_BIT_POS1                       0x0000
    #define   LSb32BITMAP16_SEL_BIT_POS1                          4
    #define   LSb16BITMAP16_SEL_BIT_POS1                          4
    #define       bBITMAP16_SEL_BIT_POS1                       4
    #define   MSK32BITMAP16_SEL_BIT_POS1                          0x000000F0

    #define     BA_BITMAP16_SEL_BIT_POS2                       0x0001
    #define     B16BITMAP16_SEL_BIT_POS2                       0x0000
    #define   LSb32BITMAP16_SEL_BIT_POS2                          8
    #define   LSb16BITMAP16_SEL_BIT_POS2                          8
    #define       bBITMAP16_SEL_BIT_POS2                       4
    #define   MSK32BITMAP16_SEL_BIT_POS2                          0x00000F00

    #define     BA_BITMAP16_SEL_BIT_POS3                       0x0001
    #define     B16BITMAP16_SEL_BIT_POS3                       0x0000
    #define   LSb32BITMAP16_SEL_BIT_POS3                          12
    #define   LSb16BITMAP16_SEL_BIT_POS3                          12
    #define       bBITMAP16_SEL_BIT_POS3                       4
    #define   MSK32BITMAP16_SEL_BIT_POS3                          0x0000F000

    #define     BA_BITMAP16_SEL_BIT_POS4                       0x0002
    #define     B16BITMAP16_SEL_BIT_POS4                       0x0002
    #define   LSb32BITMAP16_SEL_BIT_POS4                          16
    #define   LSb16BITMAP16_SEL_BIT_POS4                          0
    #define       bBITMAP16_SEL_BIT_POS4                       4
    #define   MSK32BITMAP16_SEL_BIT_POS4                          0x000F0000

    #define     BA_BITMAP16_SEL_BIT_POS5                       0x0002
    #define     B16BITMAP16_SEL_BIT_POS5                       0x0002
    #define   LSb32BITMAP16_SEL_BIT_POS5                          20
    #define   LSb16BITMAP16_SEL_BIT_POS5                          4
    #define       bBITMAP16_SEL_BIT_POS5                       4
    #define   MSK32BITMAP16_SEL_BIT_POS5                          0x00F00000

    #define     BA_BITMAP16_SEL_BIT_POS6                       0x0003
    #define     B16BITMAP16_SEL_BIT_POS6                       0x0002
    #define   LSb32BITMAP16_SEL_BIT_POS6                          24
    #define   LSb16BITMAP16_SEL_BIT_POS6                          8
    #define       bBITMAP16_SEL_BIT_POS6                       4
    #define   MSK32BITMAP16_SEL_BIT_POS6                          0x0F000000

    #define     BA_BITMAP16_SEL_BIT_POS7                       0x0003
    #define     B16BITMAP16_SEL_BIT_POS7                       0x0002
    #define   LSb32BITMAP16_SEL_BIT_POS7                          28
    #define   LSb16BITMAP16_SEL_BIT_POS7                          12
    #define       bBITMAP16_SEL_BIT_POS7                       4
    #define   MSK32BITMAP16_SEL_BIT_POS7                          0xF0000000

    #define     RA_BITMAP16_SEL1                               0x0004

    #define     BA_BITMAP16_SEL_BIT_POS8                       0x0004
    #define     B16BITMAP16_SEL_BIT_POS8                       0x0004
    #define   LSb32BITMAP16_SEL_BIT_POS8                          0
    #define   LSb16BITMAP16_SEL_BIT_POS8                          0
    #define       bBITMAP16_SEL_BIT_POS8                       4
    #define   MSK32BITMAP16_SEL_BIT_POS8                          0x0000000F

    #define     BA_BITMAP16_SEL_BIT_POS9                       0x0004
    #define     B16BITMAP16_SEL_BIT_POS9                       0x0004
    #define   LSb32BITMAP16_SEL_BIT_POS9                          4
    #define   LSb16BITMAP16_SEL_BIT_POS9                          4
    #define       bBITMAP16_SEL_BIT_POS9                       4
    #define   MSK32BITMAP16_SEL_BIT_POS9                          0x000000F0

    #define     BA_BITMAP16_SEL_BIT_POS10                      0x0005
    #define     B16BITMAP16_SEL_BIT_POS10                      0x0004
    #define   LSb32BITMAP16_SEL_BIT_POS10                         8
    #define   LSb16BITMAP16_SEL_BIT_POS10                         8
    #define       bBITMAP16_SEL_BIT_POS10                      4
    #define   MSK32BITMAP16_SEL_BIT_POS10                         0x00000F00

    #define     BA_BITMAP16_SEL_BIT_POS11                      0x0005
    #define     B16BITMAP16_SEL_BIT_POS11                      0x0004
    #define   LSb32BITMAP16_SEL_BIT_POS11                         12
    #define   LSb16BITMAP16_SEL_BIT_POS11                         12
    #define       bBITMAP16_SEL_BIT_POS11                      4
    #define   MSK32BITMAP16_SEL_BIT_POS11                         0x0000F000

    #define     BA_BITMAP16_SEL_BIT_POS12                      0x0006
    #define     B16BITMAP16_SEL_BIT_POS12                      0x0006
    #define   LSb32BITMAP16_SEL_BIT_POS12                         16
    #define   LSb16BITMAP16_SEL_BIT_POS12                         0
    #define       bBITMAP16_SEL_BIT_POS12                      4
    #define   MSK32BITMAP16_SEL_BIT_POS12                         0x000F0000

    #define     BA_BITMAP16_SEL_BIT_POS13                      0x0006
    #define     B16BITMAP16_SEL_BIT_POS13                      0x0006
    #define   LSb32BITMAP16_SEL_BIT_POS13                         20
    #define   LSb16BITMAP16_SEL_BIT_POS13                         4
    #define       bBITMAP16_SEL_BIT_POS13                      4
    #define   MSK32BITMAP16_SEL_BIT_POS13                         0x00F00000

    #define     BA_BITMAP16_SEL_BIT_POS14                      0x0007
    #define     B16BITMAP16_SEL_BIT_POS14                      0x0006
    #define   LSb32BITMAP16_SEL_BIT_POS14                         24
    #define   LSb16BITMAP16_SEL_BIT_POS14                         8
    #define       bBITMAP16_SEL_BIT_POS14                      4
    #define   MSK32BITMAP16_SEL_BIT_POS14                         0x0F000000

    #define     BA_BITMAP16_SEL_BIT_POS15                      0x0007
    #define     B16BITMAP16_SEL_BIT_POS15                      0x0006
    #define   LSb32BITMAP16_SEL_BIT_POS15                         28
    #define   LSb16BITMAP16_SEL_BIT_POS15                         12
    #define       bBITMAP16_SEL_BIT_POS15                      4
    #define   MSK32BITMAP16_SEL_BIT_POS15                         0xF0000000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_BITMAP16 {
    ///////////////////////////////////////////////////////////
    #define   GET32BITMAP16_SEL_BIT_POS0(r32)                  _BFGET_(r32, 3, 0)
    #define   SET32BITMAP16_SEL_BIT_POS0(r32,v)                _BFSET_(r32, 3, 0,v)
    #define   GET16BITMAP16_SEL_BIT_POS0(r16)                  _BFGET_(r16, 3, 0)
    #define   SET16BITMAP16_SEL_BIT_POS0(r16,v)                _BFSET_(r16, 3, 0,v)

    #define   GET32BITMAP16_SEL_BIT_POS1(r32)                  _BFGET_(r32, 7, 4)
    #define   SET32BITMAP16_SEL_BIT_POS1(r32,v)                _BFSET_(r32, 7, 4,v)
    #define   GET16BITMAP16_SEL_BIT_POS1(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16BITMAP16_SEL_BIT_POS1(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32BITMAP16_SEL_BIT_POS2(r32)                  _BFGET_(r32,11, 8)
    #define   SET32BITMAP16_SEL_BIT_POS2(r32,v)                _BFSET_(r32,11, 8,v)
    #define   GET16BITMAP16_SEL_BIT_POS2(r16)                  _BFGET_(r16,11, 8)
    #define   SET16BITMAP16_SEL_BIT_POS2(r16,v)                _BFSET_(r16,11, 8,v)

    #define   GET32BITMAP16_SEL_BIT_POS3(r32)                  _BFGET_(r32,15,12)
    #define   SET32BITMAP16_SEL_BIT_POS3(r32,v)                _BFSET_(r32,15,12,v)
    #define   GET16BITMAP16_SEL_BIT_POS3(r16)                  _BFGET_(r16,15,12)
    #define   SET16BITMAP16_SEL_BIT_POS3(r16,v)                _BFSET_(r16,15,12,v)

    #define   GET32BITMAP16_SEL_BIT_POS4(r32)                  _BFGET_(r32,19,16)
    #define   SET32BITMAP16_SEL_BIT_POS4(r32,v)                _BFSET_(r32,19,16,v)
    #define   GET16BITMAP16_SEL_BIT_POS4(r16)                  _BFGET_(r16, 3, 0)
    #define   SET16BITMAP16_SEL_BIT_POS4(r16,v)                _BFSET_(r16, 3, 0,v)

    #define   GET32BITMAP16_SEL_BIT_POS5(r32)                  _BFGET_(r32,23,20)
    #define   SET32BITMAP16_SEL_BIT_POS5(r32,v)                _BFSET_(r32,23,20,v)
    #define   GET16BITMAP16_SEL_BIT_POS5(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16BITMAP16_SEL_BIT_POS5(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32BITMAP16_SEL_BIT_POS6(r32)                  _BFGET_(r32,27,24)
    #define   SET32BITMAP16_SEL_BIT_POS6(r32,v)                _BFSET_(r32,27,24,v)
    #define   GET16BITMAP16_SEL_BIT_POS6(r16)                  _BFGET_(r16,11, 8)
    #define   SET16BITMAP16_SEL_BIT_POS6(r16,v)                _BFSET_(r16,11, 8,v)

    #define   GET32BITMAP16_SEL_BIT_POS7(r32)                  _BFGET_(r32,31,28)
    #define   SET32BITMAP16_SEL_BIT_POS7(r32,v)                _BFSET_(r32,31,28,v)
    #define   GET16BITMAP16_SEL_BIT_POS7(r16)                  _BFGET_(r16,15,12)
    #define   SET16BITMAP16_SEL_BIT_POS7(r16,v)                _BFSET_(r16,15,12,v)

    #define     w32BITMAP16_SEL                                {\
            UNSG32 uSEL_BIT_POS0                               :  4;\
            UNSG32 uSEL_BIT_POS1                               :  4;\
            UNSG32 uSEL_BIT_POS2                               :  4;\
            UNSG32 uSEL_BIT_POS3                               :  4;\
            UNSG32 uSEL_BIT_POS4                               :  4;\
            UNSG32 uSEL_BIT_POS5                               :  4;\
            UNSG32 uSEL_BIT_POS6                               :  4;\
            UNSG32 uSEL_BIT_POS7                               :  4;\
          }
    union { UNSG32 u32BITMAP16_SEL;
            struct w32BITMAP16_SEL;
          };
    #define   GET32BITMAP16_SEL_BIT_POS8(r32)                  _BFGET_(r32, 3, 0)
    #define   SET32BITMAP16_SEL_BIT_POS8(r32,v)                _BFSET_(r32, 3, 0,v)
    #define   GET16BITMAP16_SEL_BIT_POS8(r16)                  _BFGET_(r16, 3, 0)
    #define   SET16BITMAP16_SEL_BIT_POS8(r16,v)                _BFSET_(r16, 3, 0,v)

    #define   GET32BITMAP16_SEL_BIT_POS9(r32)                  _BFGET_(r32, 7, 4)
    #define   SET32BITMAP16_SEL_BIT_POS9(r32,v)                _BFSET_(r32, 7, 4,v)
    #define   GET16BITMAP16_SEL_BIT_POS9(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16BITMAP16_SEL_BIT_POS9(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32BITMAP16_SEL_BIT_POS10(r32)                 _BFGET_(r32,11, 8)
    #define   SET32BITMAP16_SEL_BIT_POS10(r32,v)               _BFSET_(r32,11, 8,v)
    #define   GET16BITMAP16_SEL_BIT_POS10(r16)                 _BFGET_(r16,11, 8)
    #define   SET16BITMAP16_SEL_BIT_POS10(r16,v)               _BFSET_(r16,11, 8,v)

    #define   GET32BITMAP16_SEL_BIT_POS11(r32)                 _BFGET_(r32,15,12)
    #define   SET32BITMAP16_SEL_BIT_POS11(r32,v)               _BFSET_(r32,15,12,v)
    #define   GET16BITMAP16_SEL_BIT_POS11(r16)                 _BFGET_(r16,15,12)
    #define   SET16BITMAP16_SEL_BIT_POS11(r16,v)               _BFSET_(r16,15,12,v)

    #define   GET32BITMAP16_SEL_BIT_POS12(r32)                 _BFGET_(r32,19,16)
    #define   SET32BITMAP16_SEL_BIT_POS12(r32,v)               _BFSET_(r32,19,16,v)
    #define   GET16BITMAP16_SEL_BIT_POS12(r16)                 _BFGET_(r16, 3, 0)
    #define   SET16BITMAP16_SEL_BIT_POS12(r16,v)               _BFSET_(r16, 3, 0,v)

    #define   GET32BITMAP16_SEL_BIT_POS13(r32)                 _BFGET_(r32,23,20)
    #define   SET32BITMAP16_SEL_BIT_POS13(r32,v)               _BFSET_(r32,23,20,v)
    #define   GET16BITMAP16_SEL_BIT_POS13(r16)                 _BFGET_(r16, 7, 4)
    #define   SET16BITMAP16_SEL_BIT_POS13(r16,v)               _BFSET_(r16, 7, 4,v)

    #define   GET32BITMAP16_SEL_BIT_POS14(r32)                 _BFGET_(r32,27,24)
    #define   SET32BITMAP16_SEL_BIT_POS14(r32,v)               _BFSET_(r32,27,24,v)
    #define   GET16BITMAP16_SEL_BIT_POS14(r16)                 _BFGET_(r16,11, 8)
    #define   SET16BITMAP16_SEL_BIT_POS14(r16,v)               _BFSET_(r16,11, 8,v)

    #define   GET32BITMAP16_SEL_BIT_POS15(r32)                 _BFGET_(r32,31,28)
    #define   SET32BITMAP16_SEL_BIT_POS15(r32,v)               _BFSET_(r32,31,28,v)
    #define   GET16BITMAP16_SEL_BIT_POS15(r16)                 _BFGET_(r16,15,12)
    #define   SET16BITMAP16_SEL_BIT_POS15(r16,v)               _BFSET_(r16,15,12,v)

    #define     w32BITMAP16_SEL1                               {\
            UNSG32 uSEL_BIT_POS8                               :  4;\
            UNSG32 uSEL_BIT_POS9                               :  4;\
            UNSG32 uSEL_BIT_POS10                              :  4;\
            UNSG32 uSEL_BIT_POS11                              :  4;\
            UNSG32 uSEL_BIT_POS12                              :  4;\
            UNSG32 uSEL_BIT_POS13                              :  4;\
            UNSG32 uSEL_BIT_POS14                              :  4;\
            UNSG32 uSEL_BIT_POS15                              :  4;\
          }
    union { UNSG32 u32BITMAP16_SEL1;
            struct w32BITMAP16_SEL1;
          };
    ///////////////////////////////////////////////////////////
    } SIE_BITMAP16;

    typedef union  T32BITMAP16_SEL
          { UNSG32 u32;
            struct w32BITMAP16_SEL;
                 } T32BITMAP16_SEL;
    typedef union  T32BITMAP16_SEL1
          { UNSG32 u32;
            struct w32BITMAP16_SEL1;
                 } T32BITMAP16_SEL1;
    ///////////////////////////////////////////////////////////

    typedef union  TBITMAP16_SEL
          { UNSG32 u32[2];
            struct {
            struct w32BITMAP16_SEL;
            struct w32BITMAP16_SEL1;
                   };
                 } TBITMAP16_SEL;

    ///////////////////////////////////////////////////////////
     SIGN32 BITMAP16_drvrd(SIE_BITMAP16 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 BITMAP16_drvwr(SIE_BITMAP16 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void BITMAP16_reset(SIE_BITMAP16 *p);
     SIGN32 BITMAP16_cmp  (SIE_BITMAP16 *p, SIE_BITMAP16 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define BITMAP16_check(p,pie,pfx,hLOG) BITMAP16_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define BITMAP16_print(p,    pfx,hLOG) BITMAP16_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: BITMAP16
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE BITMAP12                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 SEL                  (P)
///               %unsigned 4  BIT_POS0                  0x0
///               %unsigned 4  BIT_POS1                  0x1
///               %unsigned 4  BIT_POS2                  0x2
///               %unsigned 4  BIT_POS3                  0x3
///               %unsigned 4  BIT_POS4                  0x4
///               %unsigned 4  BIT_POS5                  0x5
///               %unsigned 4  BIT_POS6                  0x6
///               %unsigned 4  BIT_POS7                  0x7
///     # 0x00004 SEL1
///               %unsigned 4  BIT_POS8                  0x8
///               %unsigned 4  BIT_POS9                  0x9
///               %unsigned 4  BIT_POS10                 0xA
///               %unsigned 4  BIT_POS11                 0xB
///                                    ###
///                                    * Specifies mapping of new bit locations within 12 bit data from Read Client which need to be used to form pixels for Inverse Scan mode.
///                                    ###
///               %%        16         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:      48b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_BITMAP12
#define h_BITMAP12 (){}

    #define     RA_BITMAP12_SEL                                0x0000

    #define     BA_BITMAP12_SEL_BIT_POS0                       0x0000
    #define     B16BITMAP12_SEL_BIT_POS0                       0x0000
    #define   LSb32BITMAP12_SEL_BIT_POS0                          0
    #define   LSb16BITMAP12_SEL_BIT_POS0                          0
    #define       bBITMAP12_SEL_BIT_POS0                       4
    #define   MSK32BITMAP12_SEL_BIT_POS0                          0x0000000F

    #define     BA_BITMAP12_SEL_BIT_POS1                       0x0000
    #define     B16BITMAP12_SEL_BIT_POS1                       0x0000
    #define   LSb32BITMAP12_SEL_BIT_POS1                          4
    #define   LSb16BITMAP12_SEL_BIT_POS1                          4
    #define       bBITMAP12_SEL_BIT_POS1                       4
    #define   MSK32BITMAP12_SEL_BIT_POS1                          0x000000F0

    #define     BA_BITMAP12_SEL_BIT_POS2                       0x0001
    #define     B16BITMAP12_SEL_BIT_POS2                       0x0000
    #define   LSb32BITMAP12_SEL_BIT_POS2                          8
    #define   LSb16BITMAP12_SEL_BIT_POS2                          8
    #define       bBITMAP12_SEL_BIT_POS2                       4
    #define   MSK32BITMAP12_SEL_BIT_POS2                          0x00000F00

    #define     BA_BITMAP12_SEL_BIT_POS3                       0x0001
    #define     B16BITMAP12_SEL_BIT_POS3                       0x0000
    #define   LSb32BITMAP12_SEL_BIT_POS3                          12
    #define   LSb16BITMAP12_SEL_BIT_POS3                          12
    #define       bBITMAP12_SEL_BIT_POS3                       4
    #define   MSK32BITMAP12_SEL_BIT_POS3                          0x0000F000

    #define     BA_BITMAP12_SEL_BIT_POS4                       0x0002
    #define     B16BITMAP12_SEL_BIT_POS4                       0x0002
    #define   LSb32BITMAP12_SEL_BIT_POS4                          16
    #define   LSb16BITMAP12_SEL_BIT_POS4                          0
    #define       bBITMAP12_SEL_BIT_POS4                       4
    #define   MSK32BITMAP12_SEL_BIT_POS4                          0x000F0000

    #define     BA_BITMAP12_SEL_BIT_POS5                       0x0002
    #define     B16BITMAP12_SEL_BIT_POS5                       0x0002
    #define   LSb32BITMAP12_SEL_BIT_POS5                          20
    #define   LSb16BITMAP12_SEL_BIT_POS5                          4
    #define       bBITMAP12_SEL_BIT_POS5                       4
    #define   MSK32BITMAP12_SEL_BIT_POS5                          0x00F00000

    #define     BA_BITMAP12_SEL_BIT_POS6                       0x0003
    #define     B16BITMAP12_SEL_BIT_POS6                       0x0002
    #define   LSb32BITMAP12_SEL_BIT_POS6                          24
    #define   LSb16BITMAP12_SEL_BIT_POS6                          8
    #define       bBITMAP12_SEL_BIT_POS6                       4
    #define   MSK32BITMAP12_SEL_BIT_POS6                          0x0F000000

    #define     BA_BITMAP12_SEL_BIT_POS7                       0x0003
    #define     B16BITMAP12_SEL_BIT_POS7                       0x0002
    #define   LSb32BITMAP12_SEL_BIT_POS7                          28
    #define   LSb16BITMAP12_SEL_BIT_POS7                          12
    #define       bBITMAP12_SEL_BIT_POS7                       4
    #define   MSK32BITMAP12_SEL_BIT_POS7                          0xF0000000

    #define     RA_BITMAP12_SEL1                               0x0004

    #define     BA_BITMAP12_SEL_BIT_POS8                       0x0004
    #define     B16BITMAP12_SEL_BIT_POS8                       0x0004
    #define   LSb32BITMAP12_SEL_BIT_POS8                          0
    #define   LSb16BITMAP12_SEL_BIT_POS8                          0
    #define       bBITMAP12_SEL_BIT_POS8                       4
    #define   MSK32BITMAP12_SEL_BIT_POS8                          0x0000000F

    #define     BA_BITMAP12_SEL_BIT_POS9                       0x0004
    #define     B16BITMAP12_SEL_BIT_POS9                       0x0004
    #define   LSb32BITMAP12_SEL_BIT_POS9                          4
    #define   LSb16BITMAP12_SEL_BIT_POS9                          4
    #define       bBITMAP12_SEL_BIT_POS9                       4
    #define   MSK32BITMAP12_SEL_BIT_POS9                          0x000000F0

    #define     BA_BITMAP12_SEL_BIT_POS10                      0x0005
    #define     B16BITMAP12_SEL_BIT_POS10                      0x0004
    #define   LSb32BITMAP12_SEL_BIT_POS10                         8
    #define   LSb16BITMAP12_SEL_BIT_POS10                         8
    #define       bBITMAP12_SEL_BIT_POS10                      4
    #define   MSK32BITMAP12_SEL_BIT_POS10                         0x00000F00

    #define     BA_BITMAP12_SEL_BIT_POS11                      0x0005
    #define     B16BITMAP12_SEL_BIT_POS11                      0x0004
    #define   LSb32BITMAP12_SEL_BIT_POS11                         12
    #define   LSb16BITMAP12_SEL_BIT_POS11                         12
    #define       bBITMAP12_SEL_BIT_POS11                      4
    #define   MSK32BITMAP12_SEL_BIT_POS11                         0x0000F000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_BITMAP12 {
    ///////////////////////////////////////////////////////////
    #define   GET32BITMAP12_SEL_BIT_POS0(r32)                  _BFGET_(r32, 3, 0)
    #define   SET32BITMAP12_SEL_BIT_POS0(r32,v)                _BFSET_(r32, 3, 0,v)
    #define   GET16BITMAP12_SEL_BIT_POS0(r16)                  _BFGET_(r16, 3, 0)
    #define   SET16BITMAP12_SEL_BIT_POS0(r16,v)                _BFSET_(r16, 3, 0,v)

    #define   GET32BITMAP12_SEL_BIT_POS1(r32)                  _BFGET_(r32, 7, 4)
    #define   SET32BITMAP12_SEL_BIT_POS1(r32,v)                _BFSET_(r32, 7, 4,v)
    #define   GET16BITMAP12_SEL_BIT_POS1(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16BITMAP12_SEL_BIT_POS1(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32BITMAP12_SEL_BIT_POS2(r32)                  _BFGET_(r32,11, 8)
    #define   SET32BITMAP12_SEL_BIT_POS2(r32,v)                _BFSET_(r32,11, 8,v)
    #define   GET16BITMAP12_SEL_BIT_POS2(r16)                  _BFGET_(r16,11, 8)
    #define   SET16BITMAP12_SEL_BIT_POS2(r16,v)                _BFSET_(r16,11, 8,v)

    #define   GET32BITMAP12_SEL_BIT_POS3(r32)                  _BFGET_(r32,15,12)
    #define   SET32BITMAP12_SEL_BIT_POS3(r32,v)                _BFSET_(r32,15,12,v)
    #define   GET16BITMAP12_SEL_BIT_POS3(r16)                  _BFGET_(r16,15,12)
    #define   SET16BITMAP12_SEL_BIT_POS3(r16,v)                _BFSET_(r16,15,12,v)

    #define   GET32BITMAP12_SEL_BIT_POS4(r32)                  _BFGET_(r32,19,16)
    #define   SET32BITMAP12_SEL_BIT_POS4(r32,v)                _BFSET_(r32,19,16,v)
    #define   GET16BITMAP12_SEL_BIT_POS4(r16)                  _BFGET_(r16, 3, 0)
    #define   SET16BITMAP12_SEL_BIT_POS4(r16,v)                _BFSET_(r16, 3, 0,v)

    #define   GET32BITMAP12_SEL_BIT_POS5(r32)                  _BFGET_(r32,23,20)
    #define   SET32BITMAP12_SEL_BIT_POS5(r32,v)                _BFSET_(r32,23,20,v)
    #define   GET16BITMAP12_SEL_BIT_POS5(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16BITMAP12_SEL_BIT_POS5(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32BITMAP12_SEL_BIT_POS6(r32)                  _BFGET_(r32,27,24)
    #define   SET32BITMAP12_SEL_BIT_POS6(r32,v)                _BFSET_(r32,27,24,v)
    #define   GET16BITMAP12_SEL_BIT_POS6(r16)                  _BFGET_(r16,11, 8)
    #define   SET16BITMAP12_SEL_BIT_POS6(r16,v)                _BFSET_(r16,11, 8,v)

    #define   GET32BITMAP12_SEL_BIT_POS7(r32)                  _BFGET_(r32,31,28)
    #define   SET32BITMAP12_SEL_BIT_POS7(r32,v)                _BFSET_(r32,31,28,v)
    #define   GET16BITMAP12_SEL_BIT_POS7(r16)                  _BFGET_(r16,15,12)
    #define   SET16BITMAP12_SEL_BIT_POS7(r16,v)                _BFSET_(r16,15,12,v)

    #define     w32BITMAP12_SEL                                {\
            UNSG32 uSEL_BIT_POS0                               :  4;\
            UNSG32 uSEL_BIT_POS1                               :  4;\
            UNSG32 uSEL_BIT_POS2                               :  4;\
            UNSG32 uSEL_BIT_POS3                               :  4;\
            UNSG32 uSEL_BIT_POS4                               :  4;\
            UNSG32 uSEL_BIT_POS5                               :  4;\
            UNSG32 uSEL_BIT_POS6                               :  4;\
            UNSG32 uSEL_BIT_POS7                               :  4;\
          }
    union { UNSG32 u32BITMAP12_SEL;
            struct w32BITMAP12_SEL;
          };
    #define   GET32BITMAP12_SEL_BIT_POS8(r32)                  _BFGET_(r32, 3, 0)
    #define   SET32BITMAP12_SEL_BIT_POS8(r32,v)                _BFSET_(r32, 3, 0,v)
    #define   GET16BITMAP12_SEL_BIT_POS8(r16)                  _BFGET_(r16, 3, 0)
    #define   SET16BITMAP12_SEL_BIT_POS8(r16,v)                _BFSET_(r16, 3, 0,v)

    #define   GET32BITMAP12_SEL_BIT_POS9(r32)                  _BFGET_(r32, 7, 4)
    #define   SET32BITMAP12_SEL_BIT_POS9(r32,v)                _BFSET_(r32, 7, 4,v)
    #define   GET16BITMAP12_SEL_BIT_POS9(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16BITMAP12_SEL_BIT_POS9(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32BITMAP12_SEL_BIT_POS10(r32)                 _BFGET_(r32,11, 8)
    #define   SET32BITMAP12_SEL_BIT_POS10(r32,v)               _BFSET_(r32,11, 8,v)
    #define   GET16BITMAP12_SEL_BIT_POS10(r16)                 _BFGET_(r16,11, 8)
    #define   SET16BITMAP12_SEL_BIT_POS10(r16,v)               _BFSET_(r16,11, 8,v)

    #define   GET32BITMAP12_SEL_BIT_POS11(r32)                 _BFGET_(r32,15,12)
    #define   SET32BITMAP12_SEL_BIT_POS11(r32,v)               _BFSET_(r32,15,12,v)
    #define   GET16BITMAP12_SEL_BIT_POS11(r16)                 _BFGET_(r16,15,12)
    #define   SET16BITMAP12_SEL_BIT_POS11(r16,v)               _BFSET_(r16,15,12,v)

    #define     w32BITMAP12_SEL1                               {\
            UNSG32 uSEL_BIT_POS8                               :  4;\
            UNSG32 uSEL_BIT_POS9                               :  4;\
            UNSG32 uSEL_BIT_POS10                              :  4;\
            UNSG32 uSEL_BIT_POS11                              :  4;\
            UNSG32 RSVDx4_b16                                  : 16;\
          }
    union { UNSG32 u32BITMAP12_SEL1;
            struct w32BITMAP12_SEL1;
          };
    ///////////////////////////////////////////////////////////
    } SIE_BITMAP12;

    typedef union  T32BITMAP12_SEL
          { UNSG32 u32;
            struct w32BITMAP12_SEL;
                 } T32BITMAP12_SEL;
    typedef union  T32BITMAP12_SEL1
          { UNSG32 u32;
            struct w32BITMAP12_SEL1;
                 } T32BITMAP12_SEL1;
    ///////////////////////////////////////////////////////////

    typedef union  TBITMAP12_SEL
          { UNSG32 u32[2];
            struct {
            struct w32BITMAP12_SEL;
            struct w32BITMAP12_SEL1;
                   };
                 } TBITMAP12_SEL;

    ///////////////////////////////////////////////////////////
     SIGN32 BITMAP12_drvrd(SIE_BITMAP12 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 BITMAP12_drvwr(SIE_BITMAP12 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void BITMAP12_reset(SIE_BITMAP12 *p);
     SIGN32 BITMAP12_cmp  (SIE_BITMAP12 *p, SIE_BITMAP12 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define BITMAP12_check(p,pie,pfx,hLOG) BITMAP12_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define BITMAP12_print(p,    pfx,hLOG) BITMAP12_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: BITMAP12
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE ReadClient              biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 Rd                   (P-)
///               %unsigned 1  start                     0x0
///                                    ###
///                                    * Start bit for the respective clients.
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the client.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  clear                     0x0
///                                    ###
///                                    * 0 : Don't clear, normal state.
///                                    * 1 : Clear the asynchronous FIFO between the respective client and dHub.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00004 Word                 (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of 128-bit words that have to be fetched from DDR for read Client. Should be programmed as:
///                                    * ceil( ohres*ovres*16 / 128 )
///                                    * Note : In case of resolution which is not integer multiple of 128, word total should be programmed as follows :
///                                    * For eg if ohres = 116, then (ohres*24/128) = 21.75. Then word total should be (22*ovres)
///                                    ###
///     @ 0x00008 NonStdRes            (P)
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * Enable for Read Client when resolution is not integer multiple of 16
///                                    ###
///               %unsigned 13 pixlineTot                0x64
///                                    ###
///                                    * Total number of pixels in a line (for Read Client)
///                                    ###
///               %unsigned 4  flushCnt                  0x5
///                                    ###
///                                    * Counter to determine the ready status of Read Client after end of line (only used when NonStdRes_enable = 1)
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x0000C pack                 (P)
///               %unsigned 4  Sel                       0x0
///                                    ###
///                                    * PackSel values for following Read Client's
///                                    * [A] DEINT Read Client0
///                                    * [0000] : 20 bit unpacking
///                                    * [0001] : 8 bit unpacking
///                                    * [0010] : 10 bit unpacking
///                                    * [0011] : 10 bit unpacking [for V4H6 format]
///                                    * [remaining] : unused/invalid
///                                    * [B] DEINT Read Client1
///                                    * [0000] : 20 bit unpacking
///                                    * [0001] : 8 bit unpacking
///                                    * [0010] : 10 bit unpacking
///                                    * [0011] : 10 bit unpacking [for V4H6 format]
///                                    * [remaining] : unused/invalid
///                                    * [C] PIP/GFX0 Read Client 1 (for Croma channel)
///                                    * [0000] : 8 bit unpacking
///                                    * [0001] : 10 bit unpacking
///                                    * [0010] : 10 bit unpacking [for V4H6 format]
///                                    * [remaining] : unused/invalid
///                                    * Note : based on above (A, B or C) program packSel accordingly
///                                    ###
///               %%        28         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:      56b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ReadClient
#define h_ReadClient (){}

    #define     RA_ReadClient_Rd                               0x0000

    #define     BA_ReadClient_Rd_start                         0x0000
    #define     B16ReadClient_Rd_start                         0x0000
    #define   LSb32ReadClient_Rd_start                            0
    #define   LSb16ReadClient_Rd_start                            0
    #define       bReadClient_Rd_start                         1
    #define   MSK32ReadClient_Rd_start                            0x00000001

    #define     BA_ReadClient_Rd_clear                         0x0000
    #define     B16ReadClient_Rd_clear                         0x0000
    #define   LSb32ReadClient_Rd_clear                            1
    #define   LSb16ReadClient_Rd_clear                            1
    #define       bReadClient_Rd_clear                         1
    #define   MSK32ReadClient_Rd_clear                            0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_ReadClient_Word                             0x0004

    #define     BA_ReadClient_Word_tot                         0x0004
    #define     B16ReadClient_Word_tot                         0x0004
    #define   LSb32ReadClient_Word_tot                            0
    #define   LSb16ReadClient_Word_tot                            0
    #define       bReadClient_Word_tot                         32
    #define   MSK32ReadClient_Word_tot                            0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_ReadClient_NonStdRes                        0x0008

    #define     BA_ReadClient_NonStdRes_enable                 0x0008
    #define     B16ReadClient_NonStdRes_enable                 0x0008
    #define   LSb32ReadClient_NonStdRes_enable                    0
    #define   LSb16ReadClient_NonStdRes_enable                    0
    #define       bReadClient_NonStdRes_enable                 1
    #define   MSK32ReadClient_NonStdRes_enable                    0x00000001

    #define     BA_ReadClient_NonStdRes_pixlineTot             0x0008
    #define     B16ReadClient_NonStdRes_pixlineTot             0x0008
    #define   LSb32ReadClient_NonStdRes_pixlineTot                1
    #define   LSb16ReadClient_NonStdRes_pixlineTot                1
    #define       bReadClient_NonStdRes_pixlineTot             13
    #define   MSK32ReadClient_NonStdRes_pixlineTot                0x00003FFE

    #define     BA_ReadClient_NonStdRes_flushCnt               0x0009
    #define     B16ReadClient_NonStdRes_flushCnt               0x0008
    #define   LSb32ReadClient_NonStdRes_flushCnt                  14
    #define   LSb16ReadClient_NonStdRes_flushCnt                  14
    #define       bReadClient_NonStdRes_flushCnt               4
    #define   MSK32ReadClient_NonStdRes_flushCnt                  0x0003C000
    ///////////////////////////////////////////////////////////
    #define     RA_ReadClient_pack                             0x000C

    #define     BA_ReadClient_pack_Sel                         0x000C
    #define     B16ReadClient_pack_Sel                         0x000C
    #define   LSb32ReadClient_pack_Sel                            0
    #define   LSb16ReadClient_pack_Sel                            0
    #define       bReadClient_pack_Sel                         4
    #define   MSK32ReadClient_pack_Sel                            0x0000000F
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ReadClient {
    ///////////////////////////////////////////////////////////
    #define   GET32ReadClient_Rd_start(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32ReadClient_Rd_start(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16ReadClient_Rd_start(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16ReadClient_Rd_start(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32ReadClient_Rd_clear(r32)                    _BFGET_(r32, 1, 1)
    #define   SET32ReadClient_Rd_clear(r32,v)                  _BFSET_(r32, 1, 1,v)
    #define   GET16ReadClient_Rd_clear(r16)                    _BFGET_(r16, 1, 1)
    #define   SET16ReadClient_Rd_clear(r16,v)                  _BFSET_(r16, 1, 1,v)

    #define     w32ReadClient_Rd                               {\
            UNSG32 uRd_start                                   :  1;\
            UNSG32 uRd_clear                                   :  1;\
            UNSG32 RSVDx0_b2                                   : 30;\
          }
    union { UNSG32 u32ReadClient_Rd;
            struct w32ReadClient_Rd;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ReadClient_Word_tot(r32)                    _BFGET_(r32,31, 0)
    #define   SET32ReadClient_Word_tot(r32,v)                  _BFSET_(r32,31, 0,v)

    #define     w32ReadClient_Word                             {\
            UNSG32 uWord_tot                                   : 32;\
          }
    union { UNSG32 u32ReadClient_Word;
            struct w32ReadClient_Word;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ReadClient_NonStdRes_enable(r32)            _BFGET_(r32, 0, 0)
    #define   SET32ReadClient_NonStdRes_enable(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16ReadClient_NonStdRes_enable(r16)            _BFGET_(r16, 0, 0)
    #define   SET16ReadClient_NonStdRes_enable(r16,v)          _BFSET_(r16, 0, 0,v)

    #define   GET32ReadClient_NonStdRes_pixlineTot(r32)        _BFGET_(r32,13, 1)
    #define   SET32ReadClient_NonStdRes_pixlineTot(r32,v)      _BFSET_(r32,13, 1,v)
    #define   GET16ReadClient_NonStdRes_pixlineTot(r16)        _BFGET_(r16,13, 1)
    #define   SET16ReadClient_NonStdRes_pixlineTot(r16,v)      _BFSET_(r16,13, 1,v)

    #define   GET32ReadClient_NonStdRes_flushCnt(r32)          _BFGET_(r32,17,14)
    #define   SET32ReadClient_NonStdRes_flushCnt(r32,v)        _BFSET_(r32,17,14,v)

    #define     w32ReadClient_NonStdRes                        {\
            UNSG32 uNonStdRes_enable                           :  1;\
            UNSG32 uNonStdRes_pixlineTot                       : 13;\
            UNSG32 uNonStdRes_flushCnt                         :  4;\
            UNSG32 RSVDx8_b18                                  : 14;\
          }
    union { UNSG32 u32ReadClient_NonStdRes;
            struct w32ReadClient_NonStdRes;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ReadClient_pack_Sel(r32)                    _BFGET_(r32, 3, 0)
    #define   SET32ReadClient_pack_Sel(r32,v)                  _BFSET_(r32, 3, 0,v)
    #define   GET16ReadClient_pack_Sel(r16)                    _BFGET_(r16, 3, 0)
    #define   SET16ReadClient_pack_Sel(r16,v)                  _BFSET_(r16, 3, 0,v)

    #define     w32ReadClient_pack                             {\
            UNSG32 upack_Sel                                   :  4;\
            UNSG32 RSVDxC_b4                                   : 28;\
          }
    union { UNSG32 u32ReadClient_pack;
            struct w32ReadClient_pack;
          };
    ///////////////////////////////////////////////////////////
    } SIE_ReadClient;

    typedef union  T32ReadClient_Rd
          { UNSG32 u32;
            struct w32ReadClient_Rd;
                 } T32ReadClient_Rd;
    typedef union  T32ReadClient_Word
          { UNSG32 u32;
            struct w32ReadClient_Word;
                 } T32ReadClient_Word;
    typedef union  T32ReadClient_NonStdRes
          { UNSG32 u32;
            struct w32ReadClient_NonStdRes;
                 } T32ReadClient_NonStdRes;
    typedef union  T32ReadClient_pack
          { UNSG32 u32;
            struct w32ReadClient_pack;
                 } T32ReadClient_pack;
    ///////////////////////////////////////////////////////////

    typedef union  TReadClient_Rd
          { UNSG32 u32[1];
            struct {
            struct w32ReadClient_Rd;
                   };
                 } TReadClient_Rd;
    typedef union  TReadClient_Word
          { UNSG32 u32[1];
            struct {
            struct w32ReadClient_Word;
                   };
                 } TReadClient_Word;
    typedef union  TReadClient_NonStdRes
          { UNSG32 u32[1];
            struct {
            struct w32ReadClient_NonStdRes;
                   };
                 } TReadClient_NonStdRes;
    typedef union  TReadClient_pack
          { UNSG32 u32[1];
            struct {
            struct w32ReadClient_pack;
                   };
                 } TReadClient_pack;

    ///////////////////////////////////////////////////////////
     SIGN32 ReadClient_drvrd(SIE_ReadClient *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ReadClient_drvwr(SIE_ReadClient *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ReadClient_reset(SIE_ReadClient *p);
     SIGN32 ReadClient_cmp  (SIE_ReadClient *p, SIE_ReadClient *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ReadClient_check(p,pie,pfx,hLOG) ReadClient_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ReadClient_print(p,    pfx,hLOG) ReadClient_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ReadClient
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE WriteClient             biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 Wr                   (P-)
///               %unsigned 1  start                     0x0
///                                    ###
///                                    * Start bit for the respective clients.
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the client.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  clear                     0x0
///                                    ###
///                                    * 0 : Don't clear, normal state.
///                                    * 1 : Clear the asynchronous FIFO between the respective client and dHub.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00004 pix                  (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of pixels expected from input to write client. This is used to generate flush in Write client to write the partially formed 128-bit data (if any) to DDR.
///                                    * Should be programmed with (ovres*ohres).
///                                    ###
///     @ 0x00008 NonStdRes            (P)
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * Enable for Read Client when resolution is not integer multiple of 16
///                                    ###
///               %unsigned 13 pixlineTot                0x64
///                                    ###
///                                    * Total number of pixels in a line (for Write Client)
///                                    ###
///               %%        18         # Stuffing bits...
///     @ 0x0000C pack                 (P)
///               %unsigned 4  Sel                       0x0
///                                    ###
///                                    * PackSel for Write Client
///                                    * [0000] : 8 bit packing
///                                    * [0001] : 10 bit packing
///                                    * [0010] : 12 bit packing
///                                    * [0011] : 15 bit packing
///                                    * [0100] : 16 bit packing
///                                    * [0101] : 20 bit packing
///                                    * [0110] : 24 bit packing
///                                    * [0111] : 30 bit packing
///                                    * [1000] : 32 bit packing
///                                    ###
///               %%        28         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:      52b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_WriteClient
#define h_WriteClient (){}

    #define     RA_WriteClient_Wr                              0x0000

    #define     BA_WriteClient_Wr_start                        0x0000
    #define     B16WriteClient_Wr_start                        0x0000
    #define   LSb32WriteClient_Wr_start                           0
    #define   LSb16WriteClient_Wr_start                           0
    #define       bWriteClient_Wr_start                        1
    #define   MSK32WriteClient_Wr_start                           0x00000001

    #define     BA_WriteClient_Wr_clear                        0x0000
    #define     B16WriteClient_Wr_clear                        0x0000
    #define   LSb32WriteClient_Wr_clear                           1
    #define   LSb16WriteClient_Wr_clear                           1
    #define       bWriteClient_Wr_clear                        1
    #define   MSK32WriteClient_Wr_clear                           0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_WriteClient_pix                             0x0004

    #define     BA_WriteClient_pix_tot                         0x0004
    #define     B16WriteClient_pix_tot                         0x0004
    #define   LSb32WriteClient_pix_tot                            0
    #define   LSb16WriteClient_pix_tot                            0
    #define       bWriteClient_pix_tot                         32
    #define   MSK32WriteClient_pix_tot                            0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_WriteClient_NonStdRes                       0x0008

    #define     BA_WriteClient_NonStdRes_enable                0x0008
    #define     B16WriteClient_NonStdRes_enable                0x0008
    #define   LSb32WriteClient_NonStdRes_enable                   0
    #define   LSb16WriteClient_NonStdRes_enable                   0
    #define       bWriteClient_NonStdRes_enable                1
    #define   MSK32WriteClient_NonStdRes_enable                   0x00000001

    #define     BA_WriteClient_NonStdRes_pixlineTot            0x0008
    #define     B16WriteClient_NonStdRes_pixlineTot            0x0008
    #define   LSb32WriteClient_NonStdRes_pixlineTot               1
    #define   LSb16WriteClient_NonStdRes_pixlineTot               1
    #define       bWriteClient_NonStdRes_pixlineTot            13
    #define   MSK32WriteClient_NonStdRes_pixlineTot               0x00003FFE
    ///////////////////////////////////////////////////////////
    #define     RA_WriteClient_pack                            0x000C

    #define     BA_WriteClient_pack_Sel                        0x000C
    #define     B16WriteClient_pack_Sel                        0x000C
    #define   LSb32WriteClient_pack_Sel                           0
    #define   LSb16WriteClient_pack_Sel                           0
    #define       bWriteClient_pack_Sel                        4
    #define   MSK32WriteClient_pack_Sel                           0x0000000F
    ///////////////////////////////////////////////////////////

    typedef struct SIE_WriteClient {
    ///////////////////////////////////////////////////////////
    #define   GET32WriteClient_Wr_start(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32WriteClient_Wr_start(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16WriteClient_Wr_start(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16WriteClient_Wr_start(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define   GET32WriteClient_Wr_clear(r32)                   _BFGET_(r32, 1, 1)
    #define   SET32WriteClient_Wr_clear(r32,v)                 _BFSET_(r32, 1, 1,v)
    #define   GET16WriteClient_Wr_clear(r16)                   _BFGET_(r16, 1, 1)
    #define   SET16WriteClient_Wr_clear(r16,v)                 _BFSET_(r16, 1, 1,v)

    #define     w32WriteClient_Wr                              {\
            UNSG32 uWr_start                                   :  1;\
            UNSG32 uWr_clear                                   :  1;\
            UNSG32 RSVDx0_b2                                   : 30;\
          }
    union { UNSG32 u32WriteClient_Wr;
            struct w32WriteClient_Wr;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32WriteClient_pix_tot(r32)                    _BFGET_(r32,31, 0)
    #define   SET32WriteClient_pix_tot(r32,v)                  _BFSET_(r32,31, 0,v)

    #define     w32WriteClient_pix                             {\
            UNSG32 upix_tot                                    : 32;\
          }
    union { UNSG32 u32WriteClient_pix;
            struct w32WriteClient_pix;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32WriteClient_NonStdRes_enable(r32)           _BFGET_(r32, 0, 0)
    #define   SET32WriteClient_NonStdRes_enable(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16WriteClient_NonStdRes_enable(r16)           _BFGET_(r16, 0, 0)
    #define   SET16WriteClient_NonStdRes_enable(r16,v)         _BFSET_(r16, 0, 0,v)

    #define   GET32WriteClient_NonStdRes_pixlineTot(r32)       _BFGET_(r32,13, 1)
    #define   SET32WriteClient_NonStdRes_pixlineTot(r32,v)     _BFSET_(r32,13, 1,v)
    #define   GET16WriteClient_NonStdRes_pixlineTot(r16)       _BFGET_(r16,13, 1)
    #define   SET16WriteClient_NonStdRes_pixlineTot(r16,v)     _BFSET_(r16,13, 1,v)

    #define     w32WriteClient_NonStdRes                       {\
            UNSG32 uNonStdRes_enable                           :  1;\
            UNSG32 uNonStdRes_pixlineTot                       : 13;\
            UNSG32 RSVDx8_b14                                  : 18;\
          }
    union { UNSG32 u32WriteClient_NonStdRes;
            struct w32WriteClient_NonStdRes;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32WriteClient_pack_Sel(r32)                   _BFGET_(r32, 3, 0)
    #define   SET32WriteClient_pack_Sel(r32,v)                 _BFSET_(r32, 3, 0,v)
    #define   GET16WriteClient_pack_Sel(r16)                   _BFGET_(r16, 3, 0)
    #define   SET16WriteClient_pack_Sel(r16,v)                 _BFSET_(r16, 3, 0,v)

    #define     w32WriteClient_pack                            {\
            UNSG32 upack_Sel                                   :  4;\
            UNSG32 RSVDxC_b4                                   : 28;\
          }
    union { UNSG32 u32WriteClient_pack;
            struct w32WriteClient_pack;
          };
    ///////////////////////////////////////////////////////////
    } SIE_WriteClient;

    typedef union  T32WriteClient_Wr
          { UNSG32 u32;
            struct w32WriteClient_Wr;
                 } T32WriteClient_Wr;
    typedef union  T32WriteClient_pix
          { UNSG32 u32;
            struct w32WriteClient_pix;
                 } T32WriteClient_pix;
    typedef union  T32WriteClient_NonStdRes
          { UNSG32 u32;
            struct w32WriteClient_NonStdRes;
                 } T32WriteClient_NonStdRes;
    typedef union  T32WriteClient_pack
          { UNSG32 u32;
            struct w32WriteClient_pack;
                 } T32WriteClient_pack;
    ///////////////////////////////////////////////////////////

    typedef union  TWriteClient_Wr
          { UNSG32 u32[1];
            struct {
            struct w32WriteClient_Wr;
                   };
                 } TWriteClient_Wr;
    typedef union  TWriteClient_pix
          { UNSG32 u32[1];
            struct {
            struct w32WriteClient_pix;
                   };
                 } TWriteClient_pix;
    typedef union  TWriteClient_NonStdRes
          { UNSG32 u32[1];
            struct {
            struct w32WriteClient_NonStdRes;
                   };
                 } TWriteClient_NonStdRes;
    typedef union  TWriteClient_pack
          { UNSG32 u32[1];
            struct {
            struct w32WriteClient_pack;
                   };
                 } TWriteClient_pack;

    ///////////////////////////////////////////////////////////
     SIGN32 WriteClient_drvrd(SIE_WriteClient *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 WriteClient_drvwr(SIE_WriteClient *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void WriteClient_reset(SIE_WriteClient *p);
     SIGN32 WriteClient_cmp  (SIE_WriteClient *p, SIE_WriteClient *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define WriteClient_check(p,pie,pfx,hLOG) WriteClient_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define WriteClient_print(p,    pfx,hLOG) WriteClient_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: WriteClient
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE ClientIF                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 MR0                  (P-)
///               %unsigned 1  start                     0x0
///                                    ###
///                                    * Start bit for the respective clients.
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the client.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  clear                     0x0
///                                    ###
///                                    * 0 : Don't clear, normal state.
///                                    * 1 : Clear the asynchronous FIFO between the respective client and dHub.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00004 MR0_word             (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of 128-bit words that have to be fetched from DDR for R0 read Client. Should be programmed as:
///                                    * ceil( ohres*ovres*16 / 128 )
///                                    * Note0 : In case of resolution which is not integer multiple of 128, word total should be programmed as follows :
///                                    * For eg if ohres = 116, then (ohres*24/128) = 21.75. Then word total should be (22*ovres). Where '24' = no of bits in a pixel
///                                    * Note1 : In case of DETILE UPS420 10Bit Mode 0, word total should be programmed as
///                                    * (ihres*ivres*NoB*16/15)/128 where NoB = 10
///                                    ###
///     @ 0x00008 MR1                  (P-)
///               %unsigned 1  start                     0x0
///                                    ###
///                                    * Start bit for the respective clients.
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the client.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  clear                     0x0
///                                    ###
///                                    * 0 : Don't clear, normal state.
///                                    * 1 : Clear the asynchronous FIFO between the respective client and dHub.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x0000C MR1_word             (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of 128-bit words that have to be fetched from DDR for R1 read Client. Should be programmed as:
///                                    * ceil( ohres*ovres*16 / 128 )
///                                    * Note : In case of resolution which is not integer multiple of 128, word total should be programmed as follows :
///                                    * For eg if ohres = 116, then (ohres*24/128) = 21.75. Then word total should be (22*ovres). Where '24' = no of bits in a pixel
///                                    * Note1 : In case of DETILE UPS420 10Bit Mode 0, word total should be programmed as
///                                    * (ihres*ivres*NoB*16/15)/(128*2) where NoB = 10
///                                    ###
///     @ 0x00010 CTRL0                (P)
///               %unsigned 1  CLKEN_Main0               0x0
///                                    ###
///                                    * 1: Take care of rdy from MainR0 while generating clken for mainPl
///                                    * 0 : don't consider rdy from MainR0
///                                    * Make this bit 1 whenever read client of MainR0 is turned-on. Otherwise, make it zero.
///                                    ###
///               %unsigned 1  CLKEN_Main1               0x0
///                                    ###
///                                    * 1: Take care of rdy from MainR1 while generating clken for mainPl
///                                    * 0 : don't consider rdy from MainR1
///                                    * Make this bit 1 whenever read client of MainR1 is turned-on. Otherwise, make it zero.
///                                    ###
///               %unsigned 1  rdmain_initval0           0x0
///                                    ###
///                                    * Initiallization value for read Mask for Main RdClient1 (420SP)
///                                    ###
///               %unsigned 1  rdmain_initval1           0x1
///                                    ###
///                                    * Initiallization value for read Mask for Main RdClient1 (420SP)
///                                    ###
///               %unsigned 1  rdm_mask_sftrst           0x0
///                                    ###
///                                    * Soft reset to initialize read mask. Write 1 to initialize read mask with rdMainMaskInitVal0
///                                    ###
///               %unsigned 4  packSel_MR0               0x0
///                                    ###
///                                    * PackSel for Main Read Client (R0)
///                                    * [0000] : 8 bit unpacking
///                                    * [0001] : 10 bit unpacking
///                                    * [0010] : 16 bit unpacking
///                                    * [0011]: 10 bit unpacking [for Tile Format 10Bit V4H6]
///                                    * [0100] : 20 Bit unpacking [for YUV422 10bpc]
///                                    * [0101] : 32 Bit unpacking [for YUV_444_10b DWA, ARGB32, and ARGB2101010 formats]
///                                    * [0110] : 24 Bit unpacking[for YUV444 8bpc]
///                                    * [0111] : 30 Bit unpacking[for YUV444 10bpc]
///                                    ###
///               %unsigned 2  packSel_MR1               0x0
///                                    ###
///                                    * PackSel for Main Read Client (R1)
///                                    * [00] : 8 bit unpacking
///                                    * [01] : 10 bit unpacking
///                                    * [10] : 10 bit unpacking [for Tile Format 10Bit V4H6]
///                                    * [11] : 16 bit unpacking
///                                    ###
///               %unsigned 1  ups420_idataSelM          0x0
///                                    ###
///                                    * Input Data Select for UPS 420-422. Default it is 16bit YC from Read Client R0 – for MAIN Plane
///                                    ###
///               %unsigned 1  read_sel_420SP            0x0
///                                    ###
///                                    * Read select from read client (R1) for 420 SP format case
///                                    ###
///               %unsigned 3  ups420_idat_ctrl          0x0
///                                    ###
///                                    * Data control enable for ups420_422
///                                    * [000] : Input data is 10 bpc (YUV420, YUV444,    RGB101010)
///                                    * [001] : Input data is 8bpc(YUV420, YUV444,    RGB888)
///                                    * [010] : For DV TEST path (8bpc)
///                                    * [011] : For DV TEST path (10bpc)
///                                    * [100] : Input data is YUV 422 8bpc
///                                    * [101] : Input data is YUV 422 10bpc
///                                    * [110] : Not Used
///                                    * [111] : Input data is ARGB2101010 /ARGB8888/ YUV444 DWA
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00014 DUMMY                (P)
///               %unsigned 32 dummy                     0x0
///                                    ###
///                                    * Can be used for ECO (left intentionally) to match register space with BG4CT-VPP
///                                    ###
///     @ 0x00018 CTRL2                (P)
///               %unsigned 1  nonStdResEn_MR0           0x0
///                                    ###
///                                    * Enable for Main Read Client 0 when resolution is not integer multiple of 16
///                                    ###
///               %unsigned 13 pixlineTot_MR0            0x64
///                                    ###
///                                    * Total number of pixels in a line (for Main Read Client 0)
///                                    ###
///               %unsigned 4  flushCnt_MR0              0x5
///                                    ###
///                                    * Counter to determine the ready status of Main Read Client 0 after end of line (only used when nonStdResEn_MR0 = 1)
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x0001C CTRL3                (P)
///               %unsigned 1  nonStdResEn_MR1           0x0
///                                    ###
///                                    * Enable for Main Read Client 1 when resolution is not integer multiple of 16
///                                    ###
///               %unsigned 13 pixlineTot_MR1            0x64
///                                    ###
///                                    * Total number of pixels in a line (for Main Read Client 1)
///                                    ###
///               %unsigned 4  flushCnt_MR1              0x5
///                                    ###
///                                    * Counter to determine the ready status of Main Read Client 1 after end of line (only used when nonStdResEn_MR1 = 1)
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x00020                      (P)
///     # 0x00020 RdClientVmxVm
///               $ReadClient          RdClientVmxVm     REG
///                                    ###
///                                    * Read Client for VmxVm DMA I/F registers
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      48B, bits:     208b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ClientIF
#define h_ClientIF (){}

    #define     RA_ClientIF_MR0                                0x0000

    #define     BA_ClientIF_MR0_start                          0x0000
    #define     B16ClientIF_MR0_start                          0x0000
    #define   LSb32ClientIF_MR0_start                             0
    #define   LSb16ClientIF_MR0_start                             0
    #define       bClientIF_MR0_start                          1
    #define   MSK32ClientIF_MR0_start                             0x00000001

    #define     BA_ClientIF_MR0_clear                          0x0000
    #define     B16ClientIF_MR0_clear                          0x0000
    #define   LSb32ClientIF_MR0_clear                             1
    #define   LSb16ClientIF_MR0_clear                             1
    #define       bClientIF_MR0_clear                          1
    #define   MSK32ClientIF_MR0_clear                             0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_MR0_word                           0x0004

    #define     BA_ClientIF_MR0_word_tot                       0x0004
    #define     B16ClientIF_MR0_word_tot                       0x0004
    #define   LSb32ClientIF_MR0_word_tot                          0
    #define   LSb16ClientIF_MR0_word_tot                          0
    #define       bClientIF_MR0_word_tot                       32
    #define   MSK32ClientIF_MR0_word_tot                          0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_MR1                                0x0008

    #define     BA_ClientIF_MR1_start                          0x0008
    #define     B16ClientIF_MR1_start                          0x0008
    #define   LSb32ClientIF_MR1_start                             0
    #define   LSb16ClientIF_MR1_start                             0
    #define       bClientIF_MR1_start                          1
    #define   MSK32ClientIF_MR1_start                             0x00000001

    #define     BA_ClientIF_MR1_clear                          0x0008
    #define     B16ClientIF_MR1_clear                          0x0008
    #define   LSb32ClientIF_MR1_clear                             1
    #define   LSb16ClientIF_MR1_clear                             1
    #define       bClientIF_MR1_clear                          1
    #define   MSK32ClientIF_MR1_clear                             0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_MR1_word                           0x000C

    #define     BA_ClientIF_MR1_word_tot                       0x000C
    #define     B16ClientIF_MR1_word_tot                       0x000C
    #define   LSb32ClientIF_MR1_word_tot                          0
    #define   LSb16ClientIF_MR1_word_tot                          0
    #define       bClientIF_MR1_word_tot                       32
    #define   MSK32ClientIF_MR1_word_tot                          0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_CTRL0                              0x0010

    #define     BA_ClientIF_CTRL0_CLKEN_Main0                  0x0010
    #define     B16ClientIF_CTRL0_CLKEN_Main0                  0x0010
    #define   LSb32ClientIF_CTRL0_CLKEN_Main0                     0
    #define   LSb16ClientIF_CTRL0_CLKEN_Main0                     0
    #define       bClientIF_CTRL0_CLKEN_Main0                  1
    #define   MSK32ClientIF_CTRL0_CLKEN_Main0                     0x00000001

    #define     BA_ClientIF_CTRL0_CLKEN_Main1                  0x0010
    #define     B16ClientIF_CTRL0_CLKEN_Main1                  0x0010
    #define   LSb32ClientIF_CTRL0_CLKEN_Main1                     1
    #define   LSb16ClientIF_CTRL0_CLKEN_Main1                     1
    #define       bClientIF_CTRL0_CLKEN_Main1                  1
    #define   MSK32ClientIF_CTRL0_CLKEN_Main1                     0x00000002

    #define     BA_ClientIF_CTRL0_rdmain_initval0              0x0010
    #define     B16ClientIF_CTRL0_rdmain_initval0              0x0010
    #define   LSb32ClientIF_CTRL0_rdmain_initval0                 2
    #define   LSb16ClientIF_CTRL0_rdmain_initval0                 2
    #define       bClientIF_CTRL0_rdmain_initval0              1
    #define   MSK32ClientIF_CTRL0_rdmain_initval0                 0x00000004

    #define     BA_ClientIF_CTRL0_rdmain_initval1              0x0010
    #define     B16ClientIF_CTRL0_rdmain_initval1              0x0010
    #define   LSb32ClientIF_CTRL0_rdmain_initval1                 3
    #define   LSb16ClientIF_CTRL0_rdmain_initval1                 3
    #define       bClientIF_CTRL0_rdmain_initval1              1
    #define   MSK32ClientIF_CTRL0_rdmain_initval1                 0x00000008

    #define     BA_ClientIF_CTRL0_rdm_mask_sftrst              0x0010
    #define     B16ClientIF_CTRL0_rdm_mask_sftrst              0x0010
    #define   LSb32ClientIF_CTRL0_rdm_mask_sftrst                 4
    #define   LSb16ClientIF_CTRL0_rdm_mask_sftrst                 4
    #define       bClientIF_CTRL0_rdm_mask_sftrst              1
    #define   MSK32ClientIF_CTRL0_rdm_mask_sftrst                 0x00000010

    #define     BA_ClientIF_CTRL0_packSel_MR0                  0x0010
    #define     B16ClientIF_CTRL0_packSel_MR0                  0x0010
    #define   LSb32ClientIF_CTRL0_packSel_MR0                     5
    #define   LSb16ClientIF_CTRL0_packSel_MR0                     5
    #define       bClientIF_CTRL0_packSel_MR0                  4
    #define   MSK32ClientIF_CTRL0_packSel_MR0                     0x000001E0

    #define     BA_ClientIF_CTRL0_packSel_MR1                  0x0011
    #define     B16ClientIF_CTRL0_packSel_MR1                  0x0010
    #define   LSb32ClientIF_CTRL0_packSel_MR1                     9
    #define   LSb16ClientIF_CTRL0_packSel_MR1                     9
    #define       bClientIF_CTRL0_packSel_MR1                  2
    #define   MSK32ClientIF_CTRL0_packSel_MR1                     0x00000600

    #define     BA_ClientIF_CTRL0_ups420_idataSelM             0x0011
    #define     B16ClientIF_CTRL0_ups420_idataSelM             0x0010
    #define   LSb32ClientIF_CTRL0_ups420_idataSelM                11
    #define   LSb16ClientIF_CTRL0_ups420_idataSelM                11
    #define       bClientIF_CTRL0_ups420_idataSelM             1
    #define   MSK32ClientIF_CTRL0_ups420_idataSelM                0x00000800

    #define     BA_ClientIF_CTRL0_read_sel_420SP               0x0011
    #define     B16ClientIF_CTRL0_read_sel_420SP               0x0010
    #define   LSb32ClientIF_CTRL0_read_sel_420SP                  12
    #define   LSb16ClientIF_CTRL0_read_sel_420SP                  12
    #define       bClientIF_CTRL0_read_sel_420SP               1
    #define   MSK32ClientIF_CTRL0_read_sel_420SP                  0x00001000

    #define     BA_ClientIF_CTRL0_ups420_idat_ctrl             0x0011
    #define     B16ClientIF_CTRL0_ups420_idat_ctrl             0x0010
    #define   LSb32ClientIF_CTRL0_ups420_idat_ctrl                13
    #define   LSb16ClientIF_CTRL0_ups420_idat_ctrl                13
    #define       bClientIF_CTRL0_ups420_idat_ctrl             3
    #define   MSK32ClientIF_CTRL0_ups420_idat_ctrl                0x0000E000
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_DUMMY                              0x0014

    #define     BA_ClientIF_DUMMY_dummy                        0x0014
    #define     B16ClientIF_DUMMY_dummy                        0x0014
    #define   LSb32ClientIF_DUMMY_dummy                           0
    #define   LSb16ClientIF_DUMMY_dummy                           0
    #define       bClientIF_DUMMY_dummy                        32
    #define   MSK32ClientIF_DUMMY_dummy                           0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_CTRL2                              0x0018

    #define     BA_ClientIF_CTRL2_nonStdResEn_MR0              0x0018
    #define     B16ClientIF_CTRL2_nonStdResEn_MR0              0x0018
    #define   LSb32ClientIF_CTRL2_nonStdResEn_MR0                 0
    #define   LSb16ClientIF_CTRL2_nonStdResEn_MR0                 0
    #define       bClientIF_CTRL2_nonStdResEn_MR0              1
    #define   MSK32ClientIF_CTRL2_nonStdResEn_MR0                 0x00000001

    #define     BA_ClientIF_CTRL2_pixlineTot_MR0               0x0018
    #define     B16ClientIF_CTRL2_pixlineTot_MR0               0x0018
    #define   LSb32ClientIF_CTRL2_pixlineTot_MR0                  1
    #define   LSb16ClientIF_CTRL2_pixlineTot_MR0                  1
    #define       bClientIF_CTRL2_pixlineTot_MR0               13
    #define   MSK32ClientIF_CTRL2_pixlineTot_MR0                  0x00003FFE

    #define     BA_ClientIF_CTRL2_flushCnt_MR0                 0x0019
    #define     B16ClientIF_CTRL2_flushCnt_MR0                 0x0018
    #define   LSb32ClientIF_CTRL2_flushCnt_MR0                    14
    #define   LSb16ClientIF_CTRL2_flushCnt_MR0                    14
    #define       bClientIF_CTRL2_flushCnt_MR0                 4
    #define   MSK32ClientIF_CTRL2_flushCnt_MR0                    0x0003C000
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_CTRL3                              0x001C

    #define     BA_ClientIF_CTRL3_nonStdResEn_MR1              0x001C
    #define     B16ClientIF_CTRL3_nonStdResEn_MR1              0x001C
    #define   LSb32ClientIF_CTRL3_nonStdResEn_MR1                 0
    #define   LSb16ClientIF_CTRL3_nonStdResEn_MR1                 0
    #define       bClientIF_CTRL3_nonStdResEn_MR1              1
    #define   MSK32ClientIF_CTRL3_nonStdResEn_MR1                 0x00000001

    #define     BA_ClientIF_CTRL3_pixlineTot_MR1               0x001C
    #define     B16ClientIF_CTRL3_pixlineTot_MR1               0x001C
    #define   LSb32ClientIF_CTRL3_pixlineTot_MR1                  1
    #define   LSb16ClientIF_CTRL3_pixlineTot_MR1                  1
    #define       bClientIF_CTRL3_pixlineTot_MR1               13
    #define   MSK32ClientIF_CTRL3_pixlineTot_MR1                  0x00003FFE

    #define     BA_ClientIF_CTRL3_flushCnt_MR1                 0x001D
    #define     B16ClientIF_CTRL3_flushCnt_MR1                 0x001C
    #define   LSb32ClientIF_CTRL3_flushCnt_MR1                    14
    #define   LSb16ClientIF_CTRL3_flushCnt_MR1                    14
    #define       bClientIF_CTRL3_flushCnt_MR1                 4
    #define   MSK32ClientIF_CTRL3_flushCnt_MR1                    0x0003C000
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_RdClientVmxVm                      0x0020
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ClientIF {
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_MR0_start(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32ClientIF_MR0_start(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16ClientIF_MR0_start(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16ClientIF_MR0_start(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define   GET32ClientIF_MR0_clear(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32ClientIF_MR0_clear(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16ClientIF_MR0_clear(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16ClientIF_MR0_clear(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define     w32ClientIF_MR0                                {\
            UNSG32 uMR0_start                                  :  1;\
            UNSG32 uMR0_clear                                  :  1;\
            UNSG32 RSVDx0_b2                                   : 30;\
          }
    union { UNSG32 u32ClientIF_MR0;
            struct w32ClientIF_MR0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_MR0_word_tot(r32)                  _BFGET_(r32,31, 0)
    #define   SET32ClientIF_MR0_word_tot(r32,v)                _BFSET_(r32,31, 0,v)

    #define     w32ClientIF_MR0_word                           {\
            UNSG32 uMR0_word_tot                               : 32;\
          }
    union { UNSG32 u32ClientIF_MR0_word;
            struct w32ClientIF_MR0_word;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_MR1_start(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32ClientIF_MR1_start(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16ClientIF_MR1_start(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16ClientIF_MR1_start(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define   GET32ClientIF_MR1_clear(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32ClientIF_MR1_clear(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16ClientIF_MR1_clear(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16ClientIF_MR1_clear(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define     w32ClientIF_MR1                                {\
            UNSG32 uMR1_start                                  :  1;\
            UNSG32 uMR1_clear                                  :  1;\
            UNSG32 RSVDx8_b2                                   : 30;\
          }
    union { UNSG32 u32ClientIF_MR1;
            struct w32ClientIF_MR1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_MR1_word_tot(r32)                  _BFGET_(r32,31, 0)
    #define   SET32ClientIF_MR1_word_tot(r32,v)                _BFSET_(r32,31, 0,v)

    #define     w32ClientIF_MR1_word                           {\
            UNSG32 uMR1_word_tot                               : 32;\
          }
    union { UNSG32 u32ClientIF_MR1_word;
            struct w32ClientIF_MR1_word;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_CTRL0_CLKEN_Main0(r32)             _BFGET_(r32, 0, 0)
    #define   SET32ClientIF_CTRL0_CLKEN_Main0(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16ClientIF_CTRL0_CLKEN_Main0(r16)             _BFGET_(r16, 0, 0)
    #define   SET16ClientIF_CTRL0_CLKEN_Main0(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32ClientIF_CTRL0_CLKEN_Main1(r32)             _BFGET_(r32, 1, 1)
    #define   SET32ClientIF_CTRL0_CLKEN_Main1(r32,v)           _BFSET_(r32, 1, 1,v)
    #define   GET16ClientIF_CTRL0_CLKEN_Main1(r16)             _BFGET_(r16, 1, 1)
    #define   SET16ClientIF_CTRL0_CLKEN_Main1(r16,v)           _BFSET_(r16, 1, 1,v)

    #define   GET32ClientIF_CTRL0_rdmain_initval0(r32)         _BFGET_(r32, 2, 2)
    #define   SET32ClientIF_CTRL0_rdmain_initval0(r32,v)       _BFSET_(r32, 2, 2,v)
    #define   GET16ClientIF_CTRL0_rdmain_initval0(r16)         _BFGET_(r16, 2, 2)
    #define   SET16ClientIF_CTRL0_rdmain_initval0(r16,v)       _BFSET_(r16, 2, 2,v)

    #define   GET32ClientIF_CTRL0_rdmain_initval1(r32)         _BFGET_(r32, 3, 3)
    #define   SET32ClientIF_CTRL0_rdmain_initval1(r32,v)       _BFSET_(r32, 3, 3,v)
    #define   GET16ClientIF_CTRL0_rdmain_initval1(r16)         _BFGET_(r16, 3, 3)
    #define   SET16ClientIF_CTRL0_rdmain_initval1(r16,v)       _BFSET_(r16, 3, 3,v)

    #define   GET32ClientIF_CTRL0_rdm_mask_sftrst(r32)         _BFGET_(r32, 4, 4)
    #define   SET32ClientIF_CTRL0_rdm_mask_sftrst(r32,v)       _BFSET_(r32, 4, 4,v)
    #define   GET16ClientIF_CTRL0_rdm_mask_sftrst(r16)         _BFGET_(r16, 4, 4)
    #define   SET16ClientIF_CTRL0_rdm_mask_sftrst(r16,v)       _BFSET_(r16, 4, 4,v)

    #define   GET32ClientIF_CTRL0_packSel_MR0(r32)             _BFGET_(r32, 8, 5)
    #define   SET32ClientIF_CTRL0_packSel_MR0(r32,v)           _BFSET_(r32, 8, 5,v)
    #define   GET16ClientIF_CTRL0_packSel_MR0(r16)             _BFGET_(r16, 8, 5)
    #define   SET16ClientIF_CTRL0_packSel_MR0(r16,v)           _BFSET_(r16, 8, 5,v)

    #define   GET32ClientIF_CTRL0_packSel_MR1(r32)             _BFGET_(r32,10, 9)
    #define   SET32ClientIF_CTRL0_packSel_MR1(r32,v)           _BFSET_(r32,10, 9,v)
    #define   GET16ClientIF_CTRL0_packSel_MR1(r16)             _BFGET_(r16,10, 9)
    #define   SET16ClientIF_CTRL0_packSel_MR1(r16,v)           _BFSET_(r16,10, 9,v)

    #define   GET32ClientIF_CTRL0_ups420_idataSelM(r32)        _BFGET_(r32,11,11)
    #define   SET32ClientIF_CTRL0_ups420_idataSelM(r32,v)      _BFSET_(r32,11,11,v)
    #define   GET16ClientIF_CTRL0_ups420_idataSelM(r16)        _BFGET_(r16,11,11)
    #define   SET16ClientIF_CTRL0_ups420_idataSelM(r16,v)      _BFSET_(r16,11,11,v)

    #define   GET32ClientIF_CTRL0_read_sel_420SP(r32)          _BFGET_(r32,12,12)
    #define   SET32ClientIF_CTRL0_read_sel_420SP(r32,v)        _BFSET_(r32,12,12,v)
    #define   GET16ClientIF_CTRL0_read_sel_420SP(r16)          _BFGET_(r16,12,12)
    #define   SET16ClientIF_CTRL0_read_sel_420SP(r16,v)        _BFSET_(r16,12,12,v)

    #define   GET32ClientIF_CTRL0_ups420_idat_ctrl(r32)        _BFGET_(r32,15,13)
    #define   SET32ClientIF_CTRL0_ups420_idat_ctrl(r32,v)      _BFSET_(r32,15,13,v)
    #define   GET16ClientIF_CTRL0_ups420_idat_ctrl(r16)        _BFGET_(r16,15,13)
    #define   SET16ClientIF_CTRL0_ups420_idat_ctrl(r16,v)      _BFSET_(r16,15,13,v)

    #define     w32ClientIF_CTRL0                              {\
            UNSG32 uCTRL0_CLKEN_Main0                          :  1;\
            UNSG32 uCTRL0_CLKEN_Main1                          :  1;\
            UNSG32 uCTRL0_rdmain_initval0                      :  1;\
            UNSG32 uCTRL0_rdmain_initval1                      :  1;\
            UNSG32 uCTRL0_rdm_mask_sftrst                      :  1;\
            UNSG32 uCTRL0_packSel_MR0                          :  4;\
            UNSG32 uCTRL0_packSel_MR1                          :  2;\
            UNSG32 uCTRL0_ups420_idataSelM                     :  1;\
            UNSG32 uCTRL0_read_sel_420SP                       :  1;\
            UNSG32 uCTRL0_ups420_idat_ctrl                     :  3;\
            UNSG32 RSVDx10_b16                                 : 16;\
          }
    union { UNSG32 u32ClientIF_CTRL0;
            struct w32ClientIF_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_DUMMY_dummy(r32)                   _BFGET_(r32,31, 0)
    #define   SET32ClientIF_DUMMY_dummy(r32,v)                 _BFSET_(r32,31, 0,v)

    #define     w32ClientIF_DUMMY                              {\
            UNSG32 uDUMMY_dummy                                : 32;\
          }
    union { UNSG32 u32ClientIF_DUMMY;
            struct w32ClientIF_DUMMY;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_CTRL2_nonStdResEn_MR0(r32)         _BFGET_(r32, 0, 0)
    #define   SET32ClientIF_CTRL2_nonStdResEn_MR0(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16ClientIF_CTRL2_nonStdResEn_MR0(r16)         _BFGET_(r16, 0, 0)
    #define   SET16ClientIF_CTRL2_nonStdResEn_MR0(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32ClientIF_CTRL2_pixlineTot_MR0(r32)          _BFGET_(r32,13, 1)
    #define   SET32ClientIF_CTRL2_pixlineTot_MR0(r32,v)        _BFSET_(r32,13, 1,v)
    #define   GET16ClientIF_CTRL2_pixlineTot_MR0(r16)          _BFGET_(r16,13, 1)
    #define   SET16ClientIF_CTRL2_pixlineTot_MR0(r16,v)        _BFSET_(r16,13, 1,v)

    #define   GET32ClientIF_CTRL2_flushCnt_MR0(r32)            _BFGET_(r32,17,14)
    #define   SET32ClientIF_CTRL2_flushCnt_MR0(r32,v)          _BFSET_(r32,17,14,v)

    #define     w32ClientIF_CTRL2                              {\
            UNSG32 uCTRL2_nonStdResEn_MR0                      :  1;\
            UNSG32 uCTRL2_pixlineTot_MR0                       : 13;\
            UNSG32 uCTRL2_flushCnt_MR0                         :  4;\
            UNSG32 RSVDx18_b18                                 : 14;\
          }
    union { UNSG32 u32ClientIF_CTRL2;
            struct w32ClientIF_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_CTRL3_nonStdResEn_MR1(r32)         _BFGET_(r32, 0, 0)
    #define   SET32ClientIF_CTRL3_nonStdResEn_MR1(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16ClientIF_CTRL3_nonStdResEn_MR1(r16)         _BFGET_(r16, 0, 0)
    #define   SET16ClientIF_CTRL3_nonStdResEn_MR1(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32ClientIF_CTRL3_pixlineTot_MR1(r32)          _BFGET_(r32,13, 1)
    #define   SET32ClientIF_CTRL3_pixlineTot_MR1(r32,v)        _BFSET_(r32,13, 1,v)
    #define   GET16ClientIF_CTRL3_pixlineTot_MR1(r16)          _BFGET_(r16,13, 1)
    #define   SET16ClientIF_CTRL3_pixlineTot_MR1(r16,v)        _BFSET_(r16,13, 1,v)

    #define   GET32ClientIF_CTRL3_flushCnt_MR1(r32)            _BFGET_(r32,17,14)
    #define   SET32ClientIF_CTRL3_flushCnt_MR1(r32,v)          _BFSET_(r32,17,14,v)

    #define     w32ClientIF_CTRL3                              {\
            UNSG32 uCTRL3_nonStdResEn_MR1                      :  1;\
            UNSG32 uCTRL3_pixlineTot_MR1                       : 13;\
            UNSG32 uCTRL3_flushCnt_MR1                         :  4;\
            UNSG32 RSVDx1C_b18                                 : 14;\
          }
    union { UNSG32 u32ClientIF_CTRL3;
            struct w32ClientIF_CTRL3;
          };
    ///////////////////////////////////////////////////////////
              SIE_ReadClient                                   ie_RdClientVmxVm;
    ///////////////////////////////////////////////////////////
    } SIE_ClientIF;

    typedef union  T32ClientIF_MR0
          { UNSG32 u32;
            struct w32ClientIF_MR0;
                 } T32ClientIF_MR0;
    typedef union  T32ClientIF_MR0_word
          { UNSG32 u32;
            struct w32ClientIF_MR0_word;
                 } T32ClientIF_MR0_word;
    typedef union  T32ClientIF_MR1
          { UNSG32 u32;
            struct w32ClientIF_MR1;
                 } T32ClientIF_MR1;
    typedef union  T32ClientIF_MR1_word
          { UNSG32 u32;
            struct w32ClientIF_MR1_word;
                 } T32ClientIF_MR1_word;
    typedef union  T32ClientIF_CTRL0
          { UNSG32 u32;
            struct w32ClientIF_CTRL0;
                 } T32ClientIF_CTRL0;
    typedef union  T32ClientIF_DUMMY
          { UNSG32 u32;
            struct w32ClientIF_DUMMY;
                 } T32ClientIF_DUMMY;
    typedef union  T32ClientIF_CTRL2
          { UNSG32 u32;
            struct w32ClientIF_CTRL2;
                 } T32ClientIF_CTRL2;
    typedef union  T32ClientIF_CTRL3
          { UNSG32 u32;
            struct w32ClientIF_CTRL3;
                 } T32ClientIF_CTRL3;
    ///////////////////////////////////////////////////////////

    typedef union  TClientIF_MR0
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_MR0;
                   };
                 } TClientIF_MR0;
    typedef union  TClientIF_MR0_word
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_MR0_word;
                   };
                 } TClientIF_MR0_word;
    typedef union  TClientIF_MR1
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_MR1;
                   };
                 } TClientIF_MR1;
    typedef union  TClientIF_MR1_word
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_MR1_word;
                   };
                 } TClientIF_MR1_word;
    typedef union  TClientIF_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_CTRL0;
                   };
                 } TClientIF_CTRL0;
    typedef union  TClientIF_DUMMY
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_DUMMY;
                   };
                 } TClientIF_DUMMY;
    typedef union  TClientIF_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_CTRL2;
                   };
                 } TClientIF_CTRL2;
    typedef union  TClientIF_CTRL3
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_CTRL3;
                   };
                 } TClientIF_CTRL3;

    ///////////////////////////////////////////////////////////
     SIGN32 ClientIF_drvrd(SIE_ClientIF *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ClientIF_drvwr(SIE_ClientIF *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ClientIF_reset(SIE_ClientIF *p);
     SIGN32 ClientIF_cmp  (SIE_ClientIF *p, SIE_ClientIF *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ClientIF_check(p,pie,pfx,hLOG) ClientIF_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ClientIF_print(p,    pfx,hLOG) ClientIF_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ClientIF
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE BETG                    biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 PL0
///               $TG_PL               PL0               REG
///                                    ###
///                                    * Plane 0 Related registers (for Base Plane)
///                                    ###
///     @ 0x00008                      (P)
///     # 0x00008 PL1
///               $TG_PL               PL1               REG
///                                    ###
///                                    * Plane 1 Related registers (for Main plane)
///                                    ###
///     @ 0x00010                      (P)
///     # 0x00010 PL2
///               $TG_PL               PL2               REG
///                                    ###
///                                    * Plane 2 Related registers (for PIP/Graphics1 Plane)
///                                    ###
///     @ 0x00018                      (P)
///     # 0x00018 PL3
///               $TG_PL               PL3               REG
///                                    ###
///                                    * Plane 3 Related registers (for Graphics2 Plane)
///                                    ###
///     @ 0x00020                      (P)
///     # 0x00020 PL4
///               $TG_PL               PL4               REG
///                                    ###
///                                    * Plane 4 Related registers (for FIX0 Plane)
///                                    ###
///     @ 0x00028                      (P)
///     # 0x00028 PL5
///               $TG_PL               PL5               REG
///                                    ###
///                                    * Plane 5 Related registers (for FIX1 Plane)
///                                    ###
///     @ 0x00030                      (P)
///     # 0x00030 PL6
///               $TG_PL               PL6               REG
///                                    ###
///                                    * Plane 6 Related registers (for FIX2 Plane)
///                                    ###
///     @ 0x00038                      (P)
///     # 0x00038 PL7
///               $TG_PL               PL7               REG
///                                    ###
///                                    * Plane 7 Related registers (for FIX3 Plane)
///                                    ###
///     @ 0x00040                      (P)
///     # 0x00040 PL8
///               $TG_PL               PL8               REG
///                                    ###
///                                    * Plane 8 Related registers (for overlay output read)
///                                    ###
///     @ 0x00048                      (P)
///     # 0x00048 PL1_CR
///               $TG_PL               PL1_CR            REG
///                                    ###
///                                    * Plane 1 Crop Related registers (for taking cropped input of Main Plane as Overlay Input)
///                                    ###
///     @ 0x00050                      (P)
///     # 0x00050 PL2_CR
///               $TG_PL               PL2_CR            REG
///                                    ###
///                                    * Plane 2 Crop Related registers (for taking cropped input of PIP/Graphics1 Plane as Overlay Input)
///                                    ###
///     @ 0x00058                      (P)
///     # 0x00058 PL3_CR
///               $TG_PL               PL3_CR            REG
///                                    ###
///                                    * Plane 3 Crop Related registers (for taking cropped input of Graphics-2 Plane as Overlay Input)
///                                    ###
///     @ 0x00060                      (P)
///     # 0x00060 PL4_CR
///               $TG_PL               PL4_CR            REG
///                                    ###
///                                    * Plane 4 Crop Related registers
///                                    ###
///     @ 0x00068                      (P)
///     # 0x00068 PL5_CR
///               $TG_PL               PL5_CR            REG
///                                    ###
///                                    * Plane 5 Crop Related registers
///                                    ###
///     @ 0x00070                      (P)
///     # 0x00070 PL6_CR
///               $TG_PL               PL6_CR            REG
///                                    ###
///                                    * Plane 6 Crop Related registers
///                                    ###
///     @ 0x00078                      (P)
///     # 0x00078 PL7_CR
///               $TG_PL               PL7_CR            REG
///                                    ###
///                                    * Plane 7 Crop Related registers
///                                    ###
///     @ 0x00080                      (P)
///     # 0x00080 PL8_CR
///               $TG_PL               PL8_CR            REG
///                                    ###
///                                    * Plane 8 Crop Related registers
///                                    ###
///     @ 0x00088                      (P)
///     # 0x00088 PL_FLD
///               $TG_PL               PL_FLD            REG
///                                    ###
///                                    * Field Related registers
///                                    ###
///     @ 0x00090                      (P)
///     # 0x00090 TG_PRG
///               $TG_PRG              TG_PRG            REG
///                                    ###
///                                    * Timing Generator programming registers
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     180B, bits:    1090b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_BETG
#define h_BETG (){}

    #define     RA_BETG_PL0                                    0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL1                                    0x0008
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL2                                    0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL3                                    0x0018
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL4                                    0x0020
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL5                                    0x0028
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL6                                    0x0030
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL7                                    0x0038
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL8                                    0x0040
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL1_CR                                 0x0048
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL2_CR                                 0x0050
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL3_CR                                 0x0058
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL4_CR                                 0x0060
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL5_CR                                 0x0068
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL6_CR                                 0x0070
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL7_CR                                 0x0078
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL8_CR                                 0x0080
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL_FLD                                 0x0088
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_TG_PRG                                 0x0090
    ///////////////////////////////////////////////////////////

    typedef struct SIE_BETG {
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL0;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL1;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL2;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL3;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL4;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL5;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL6;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL7;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL8;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL1_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL2_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL3_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL4_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL5_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL6_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL7_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL8_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL_FLD;
    ///////////////////////////////////////////////////////////
              SIE_TG_PRG                                       ie_TG_PRG;
    ///////////////////////////////////////////////////////////
    } SIE_BETG;

    ///////////////////////////////////////////////////////////
     SIGN32 BETG_drvrd(SIE_BETG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 BETG_drvwr(SIE_BETG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void BETG_reset(SIE_BETG *p);
     SIGN32 BETG_cmp  (SIE_BETG *p, SIE_BETG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define BETG_check(p,pie,pfx,hLOG) BETG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define BETG_print(p,    pfx,hLOG) BETG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: BETG
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE UPS_420_422             biu              (4,4)
///     ###
///     * Register specification of interface UPS_420_422
///     * Defines the size of the UPS_420_422
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * 1'd1 : enable ups420_422
///                                    * 1'd0 : bypass
///                                    ###
///               %unsigned 1  msbswap                   0x0
///                                    ###
///                                    * Not valid.
///                                    * 1'd0 : it assume first pixel consist of msb 5bit of chroma(C) and second pixel have lsb 5bit of chroma(C).
///                                    * 1'd1 : vice versa(means it assume first pixel consist of lsb 5bit of Chroma and second pixel have msb 5bit of chroma.
///                                    ###
///               %unsigned 1  cswap_regs                0x0
///                                    ###
///                                    * if enable, swaps output choma
///                                    * As per algo engineer, cswap must be 0 if vfilter = 1.
///                                    ###
///               %unsigned 1  yshift_regs               0x0
///                                    ###
///                                    * Advances output luma by 1 clock.
///                                    ###
///               %unsigned 1  cshift_regs               0x0
///                                    ###
///                                    * Delayed output chroma by 1 clock
///                                    ###
///               %unsigned 1  sp_en                     0x0
///                                    ###
///                                    * if enable(=1), it assumes input data format is in semi-planer format.
///                                    * Configuration enable=1 & sp_en=0 is not suporrted.
///                                    ###
///               %unsigned 1  dat8_en                   0x0
///                                    ###
///                                    * Unused.
///                                    * this should be enable if input 420 data is converted from 8bit to 10bit by LSB append with zero(Only for HDMI pack). This should be zero for 8bit design.
///                                    ###
///               %unsigned 1  sft_rst                   0x0
///                                    ###
///                                    * This is active high clear or soft reset bit. When it is high, UPS_420_422 reset to initial state.
///                                    ###
///               %unsigned 1  use_blank                 0x0
///                                    ###
///                                    * 0 : Use boundary pixel repetition for boundary interpolation
///                                    * 1 : Use blank pixel programmed using yblank_regs and cblank_regs for boundary interpolation.
///                                    ###
///               %unsigned 1  opt_malloc                0x0
///                                    ###
///                                    * 1: Optimizes tile segment memory allocations for high horizontal resolutions.
///                                    * 0: No memory allocation optimization.
///                                    * Must be set 1 if tile_en=1, and if HRES extends into additional marginal HRES supported by the module. Else must be 0.
///                                    * For example, for any operating mode, if the maximum HRES supported is '4K(i.e., 3840) + 126', then opt_malloc must be set 1 for the particular operating mode if HRES >= 3840. If for any operating mode, if the maximum supported is '2K(i.e., 1920) + 126', then opt_malloc must be set 1 for particular operating mode if HRES >= 1920.
///                                    ###
///               %unsigned 9  rsv0                      0x0
///                                    ###
///                                    * Reserved bits
///                                    ###
///               %unsigned 9  rsv1                      0x0
///                                    ###
///                                    * Reserved bits
///                                    ###
///               %unsigned 1  vfilter                   0x0
///                                    ###
///                                    * Controls vertical 2 tap filtering
///                                    * 1: Enables
///                                    * 0: Disables
///                                    * Note: vfilter=1 and luma_rpt=1 is an invalid combination
///                                    ###
///               %unsigned 1  out422                    0x1
///                                    ###
///                                    * To be programmed only for tiled SP input and if hardware configuration has 420-422 filter. Otherwise, must be 1.
///                                    * 1: output format is YUV422.
///                                    * 0: output format is YUV420 SP.
///                                    ###
///               %unsigned 1  crop_blank                0x1
///                                    ###
///                                    * Must be '1' if 'hardware configration doesn't have 420-422 filter' or if 'out422=0'.
///                                    * 1: pixels to be cropped are replaced with blank value before 420-422 filtering. 420-422 filter boundary includes these blank pixels (existing implementation).
///                                    * 0: 420-422 filtering boundary excludes these croppped pixels (newly added support).
///                                    ###
///               %unsigned 1  luma_rpt                  0x0
///                                    ###
///                                    * Repetiion in 420 output.
///                                    * Valid only if out422 is 0.
///                                    * 0: Repeats only chroma line.
///                                    * 1: Repeats both chroma and luma lines.
///                                    * Hres,vres,hblanking should be programmed as double(el_tg) in luma repeat case
///                                    * Refer “ups_420_422_design.pdf” for illustration.
///                                    ###
///     @ 0x00004 CFG1                 (P)
///               %unsigned 13 ups_c0                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 0 in 2s complement format.
///                                    ###
///               %unsigned 13 ups_c1                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 1 in 2s complement format.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %unsigned 13 ups_c2                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 2 in 2s complement format.
///                                    ###
///               %unsigned 13 ups_c3                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 3 in 2s complement format.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x0000C CFG3                 (P)
///               %unsigned 13 ups_c4                    0x400
///                                    ###
///                                    * 13 bit upsampler coefficient 4 in 2s complement format.
///                                    ###
///               %unsigned 13 ups_c5                    0x800
///                                    ###
///                                    * 13 bit upsampler coefficient 5 in 2s complement format.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %unsigned 13 ups_c6                    0x400
///                                    ###
///                                    * 13 bit upsampler coefficient 6 in 2s complement format.
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x00014 CFG5                 (P)
///               %unsigned 13 hres_regs                 0xF00
///                                    ###
///                                    * this should be programmed with active pixel count in a line.
///                                    * If luma_rpt=1, each new input pixel data arrives once every 2 clocks. But the hres_regs should still be programmed to # of pixels and not to # of clocks within input active line duration.
///                                    * Eg: if luma_rpt=1 and hres_regs=0d80, input horizontal actrive duration is 2*80 = 0d160 clocks.
///                                    ###
///               %unsigned 13 htot_regs                 0x1130
///                                    ###
///                                    * this should be programmed with total pixel clocks (not pixel count) in a line duration.
///                                    * Eg:
///                                    * Eg: if luma_rpt=1, each new input pixel data arrives once every 2 clocks . So if hres_regs=0d80 and input hblank=0d50 clocks, htot_regs = 2*80 + 50 = 0d210.
///                                    ###
///               %unsigned 1  auto_pixcnt               0x0
///                                    ###
///                                    * 0: hres_regs and htot_regs will be used to generate hde timing and delay.
///                                    * 1: automatically count hres and htotal pixel count. This will require hde is blanking region.
///                                    ###
///               %unsigned 1  power_redn                0x0
///                                    ###
///                                    * 0: Disables Power Optimization Logic
///                                    * 1: Enables Power Optimization Logic
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00018 CFG6                 (P)
///               %unsigned 8  Rsv0                      0x0
///                                    ###
///                                    * Reserved bits.
///                                    ###
///               %unsigned 6  top_crop                  0x0
///                                    ###
///                                    * Crop for top lines.(It should be multiple of 2)
///                                    * If luma_rpt=1, if top_crop=p, to account for line repetition, # of lines cropped on top is 2p.
///                                    ###
///               %unsigned 6  bot_crop                  0x0
///                                    ###
///                                    * Crop for bot lines.(It should be multiple of 2)
///                                    * If luma_rpt=1, if bot_crop=p, to account for line repetition, # of lines cropped at bottom is 2p.
///                                    ###
///               %unsigned 6  left_crop                 0x0
///                                    ###
///                                    * Crop for left pixels.
///                                    * If luma_rpt=1, if left_crop=p, to account for pixel repetition, # of lines cropped at left is 2p.
///                                    ###
///               %unsigned 6  right_crop                0x0
///                                    ###
///                                    * Crop for right pixels.
///                                    * If luma_rpt=1, if right_crop=p, to account for pixel repetition, # of lines cropped at right is 2p.
///                                    ###
///     @ 0x0001C CFG7                 (P)
///               %unsigned 13 vres_regs                 0x870
///                                    ###
///                                    * Input image vertical resolution
///                                    * If luma_rpt=1, each new luma pixel line arrives once every 2 line period. But vres_regs should still be programmed to # of actual valid image lines .
///                                    * Eg: if luma_rpt=1 and vres_regs=0d80, input active video frame contains 160 horizontal line durations.
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x00020 CFG8                 (P)
///               %unsigned 1  pdwn_regs                 0x0
///                                    ###
///                                    * Wired to internal SRAMs' pwdn port.
///                                    ###
///               %unsigned 1  pdlvmc_regs               0x0
///                                    ###
///                                    * Wired to internal SRAMs' pdlvmc port.
///                                    ###
///               %unsigned 1  pdfvssm_regs              0x0
///                                    ###
///                                    * Wired to internal SRAMs' pdfvssm ports.
///                                    ###
///               %unsigned 2  dpwr_regs                 0x3
///                                    ###
///                                    * Internal Dynamic power control.
///                                    * Bit[1] -cg_en: controls clock to internal logic.
///                                    * 1: enables internal dynamic clock gating.
///                                    * 0: disables internal dynamic clock gating.
///                                    * Bit[0] - ctrl_cen: controls CEN to SRAMs
///                                    * 1: enables SRAMs dynamically.
///                                    * 0: SRAMs always enabled.
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00024 CFG9                 (P)
///               %unsigned 12 yblank_regs               0x0
///                                    ###
///                                    * luma blank value for initial and end of line pixel taps. For 10 bit design, MS 10 bits are used.
///                                    ###
///               %unsigned 12 cblank_regs               0x800
///                                    ###
///                                    * chroma blank value for initial and end of line pixel taps. For 10 bit design, MS 10 bits are used.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00028 CFG10                (P)
///               %unsigned 1  tile_en                   0x0
///                                    ###
///                                    * 1 : Module accept data is in tile format.
///                                    * 0 : Else data input to the module is in SP format or normal fomat(HDMI pack). This bit will having highest priority.
///                                    ###
///               %unsigned 3  rsv0                      0x0
///                                    ###
///                                    * Reserved bits
///                                    ###
///               %unsigned 8  tile_depth                0x4
///                                    ###
///                                    * number of lines in tile.
///                                    * Supported values: 0d3, 0d4,0d6, 0d8 (provided the value is within the range of hardware supported max tile depth)
///                                    ###
///               %unsigned 8  tile_width                0x8
///                                    ###
///                                    * number of pixel of each line within tile.
///                                    * Supported values: d4, d8, d6, d12, d16.
///                                    * Minimum value should be 2
///                                    * End of UPS_420_422 register group
///                                    ###
///               %%        12         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      44B, bits:     245b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_UPS_420_422
#define h_UPS_420_422 (){}

    #define     RA_UPS_420_422_CFG0                            0x0000

    #define     BA_UPS_420_422_CFG0_enable                     0x0000
    #define     B16UPS_420_422_CFG0_enable                     0x0000
    #define   LSb32UPS_420_422_CFG0_enable                        0
    #define   LSb16UPS_420_422_CFG0_enable                        0
    #define       bUPS_420_422_CFG0_enable                     1
    #define   MSK32UPS_420_422_CFG0_enable                        0x00000001

    #define     BA_UPS_420_422_CFG0_msbswap                    0x0000
    #define     B16UPS_420_422_CFG0_msbswap                    0x0000
    #define   LSb32UPS_420_422_CFG0_msbswap                       1
    #define   LSb16UPS_420_422_CFG0_msbswap                       1
    #define       bUPS_420_422_CFG0_msbswap                    1
    #define   MSK32UPS_420_422_CFG0_msbswap                       0x00000002

    #define     BA_UPS_420_422_CFG0_cswap_regs                 0x0000
    #define     B16UPS_420_422_CFG0_cswap_regs                 0x0000
    #define   LSb32UPS_420_422_CFG0_cswap_regs                    2
    #define   LSb16UPS_420_422_CFG0_cswap_regs                    2
    #define       bUPS_420_422_CFG0_cswap_regs                 1
    #define   MSK32UPS_420_422_CFG0_cswap_regs                    0x00000004

    #define     BA_UPS_420_422_CFG0_yshift_regs                0x0000
    #define     B16UPS_420_422_CFG0_yshift_regs                0x0000
    #define   LSb32UPS_420_422_CFG0_yshift_regs                   3
    #define   LSb16UPS_420_422_CFG0_yshift_regs                   3
    #define       bUPS_420_422_CFG0_yshift_regs                1
    #define   MSK32UPS_420_422_CFG0_yshift_regs                   0x00000008

    #define     BA_UPS_420_422_CFG0_cshift_regs                0x0000
    #define     B16UPS_420_422_CFG0_cshift_regs                0x0000
    #define   LSb32UPS_420_422_CFG0_cshift_regs                   4
    #define   LSb16UPS_420_422_CFG0_cshift_regs                   4
    #define       bUPS_420_422_CFG0_cshift_regs                1
    #define   MSK32UPS_420_422_CFG0_cshift_regs                   0x00000010

    #define     BA_UPS_420_422_CFG0_sp_en                      0x0000
    #define     B16UPS_420_422_CFG0_sp_en                      0x0000
    #define   LSb32UPS_420_422_CFG0_sp_en                         5
    #define   LSb16UPS_420_422_CFG0_sp_en                         5
    #define       bUPS_420_422_CFG0_sp_en                      1
    #define   MSK32UPS_420_422_CFG0_sp_en                         0x00000020

    #define     BA_UPS_420_422_CFG0_dat8_en                    0x0000
    #define     B16UPS_420_422_CFG0_dat8_en                    0x0000
    #define   LSb32UPS_420_422_CFG0_dat8_en                       6
    #define   LSb16UPS_420_422_CFG0_dat8_en                       6
    #define       bUPS_420_422_CFG0_dat8_en                    1
    #define   MSK32UPS_420_422_CFG0_dat8_en                       0x00000040

    #define     BA_UPS_420_422_CFG0_sft_rst                    0x0000
    #define     B16UPS_420_422_CFG0_sft_rst                    0x0000
    #define   LSb32UPS_420_422_CFG0_sft_rst                       7
    #define   LSb16UPS_420_422_CFG0_sft_rst                       7
    #define       bUPS_420_422_CFG0_sft_rst                    1
    #define   MSK32UPS_420_422_CFG0_sft_rst                       0x00000080

    #define     BA_UPS_420_422_CFG0_use_blank                  0x0001
    #define     B16UPS_420_422_CFG0_use_blank                  0x0000
    #define   LSb32UPS_420_422_CFG0_use_blank                     8
    #define   LSb16UPS_420_422_CFG0_use_blank                     8
    #define       bUPS_420_422_CFG0_use_blank                  1
    #define   MSK32UPS_420_422_CFG0_use_blank                     0x00000100

    #define     BA_UPS_420_422_CFG0_opt_malloc                 0x0001
    #define     B16UPS_420_422_CFG0_opt_malloc                 0x0000
    #define   LSb32UPS_420_422_CFG0_opt_malloc                    9
    #define   LSb16UPS_420_422_CFG0_opt_malloc                    9
    #define       bUPS_420_422_CFG0_opt_malloc                 1
    #define   MSK32UPS_420_422_CFG0_opt_malloc                    0x00000200

    #define     BA_UPS_420_422_CFG0_rsv0                       0x0001
    #define     B16UPS_420_422_CFG0_rsv0                       0x0000
    #define   LSb32UPS_420_422_CFG0_rsv0                          10
    #define   LSb16UPS_420_422_CFG0_rsv0                          10
    #define       bUPS_420_422_CFG0_rsv0                       9
    #define   MSK32UPS_420_422_CFG0_rsv0                          0x0007FC00

    #define     BA_UPS_420_422_CFG0_rsv1                       0x0002
    #define     B16UPS_420_422_CFG0_rsv1                       0x0002
    #define   LSb32UPS_420_422_CFG0_rsv1                          19
    #define   LSb16UPS_420_422_CFG0_rsv1                          3
    #define       bUPS_420_422_CFG0_rsv1                       9
    #define   MSK32UPS_420_422_CFG0_rsv1                          0x0FF80000

    #define     BA_UPS_420_422_CFG0_vfilter                    0x0003
    #define     B16UPS_420_422_CFG0_vfilter                    0x0002
    #define   LSb32UPS_420_422_CFG0_vfilter                       28
    #define   LSb16UPS_420_422_CFG0_vfilter                       12
    #define       bUPS_420_422_CFG0_vfilter                    1
    #define   MSK32UPS_420_422_CFG0_vfilter                       0x10000000

    #define     BA_UPS_420_422_CFG0_out422                     0x0003
    #define     B16UPS_420_422_CFG0_out422                     0x0002
    #define   LSb32UPS_420_422_CFG0_out422                        29
    #define   LSb16UPS_420_422_CFG0_out422                        13
    #define       bUPS_420_422_CFG0_out422                     1
    #define   MSK32UPS_420_422_CFG0_out422                        0x20000000

    #define     BA_UPS_420_422_CFG0_crop_blank                 0x0003
    #define     B16UPS_420_422_CFG0_crop_blank                 0x0002
    #define   LSb32UPS_420_422_CFG0_crop_blank                    30
    #define   LSb16UPS_420_422_CFG0_crop_blank                    14
    #define       bUPS_420_422_CFG0_crop_blank                 1
    #define   MSK32UPS_420_422_CFG0_crop_blank                    0x40000000

    #define     BA_UPS_420_422_CFG0_luma_rpt                   0x0003
    #define     B16UPS_420_422_CFG0_luma_rpt                   0x0002
    #define   LSb32UPS_420_422_CFG0_luma_rpt                      31
    #define   LSb16UPS_420_422_CFG0_luma_rpt                      15
    #define       bUPS_420_422_CFG0_luma_rpt                   1
    #define   MSK32UPS_420_422_CFG0_luma_rpt                      0x80000000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG1                            0x0004

    #define     BA_UPS_420_422_CFG1_ups_c0                     0x0004
    #define     B16UPS_420_422_CFG1_ups_c0                     0x0004
    #define   LSb32UPS_420_422_CFG1_ups_c0                        0
    #define   LSb16UPS_420_422_CFG1_ups_c0                        0
    #define       bUPS_420_422_CFG1_ups_c0                     13
    #define   MSK32UPS_420_422_CFG1_ups_c0                        0x00001FFF

    #define     BA_UPS_420_422_CFG1_ups_c1                     0x0005
    #define     B16UPS_420_422_CFG1_ups_c1                     0x0004
    #define   LSb32UPS_420_422_CFG1_ups_c1                        13
    #define   LSb16UPS_420_422_CFG1_ups_c1                        13
    #define       bUPS_420_422_CFG1_ups_c1                     13
    #define   MSK32UPS_420_422_CFG1_ups_c1                        0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG2                            0x0008

    #define     BA_UPS_420_422_CFG2_ups_c2                     0x0008
    #define     B16UPS_420_422_CFG2_ups_c2                     0x0008
    #define   LSb32UPS_420_422_CFG2_ups_c2                        0
    #define   LSb16UPS_420_422_CFG2_ups_c2                        0
    #define       bUPS_420_422_CFG2_ups_c2                     13
    #define   MSK32UPS_420_422_CFG2_ups_c2                        0x00001FFF

    #define     BA_UPS_420_422_CFG2_ups_c3                     0x0009
    #define     B16UPS_420_422_CFG2_ups_c3                     0x0008
    #define   LSb32UPS_420_422_CFG2_ups_c3                        13
    #define   LSb16UPS_420_422_CFG2_ups_c3                        13
    #define       bUPS_420_422_CFG2_ups_c3                     13
    #define   MSK32UPS_420_422_CFG2_ups_c3                        0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG3                            0x000C

    #define     BA_UPS_420_422_CFG3_ups_c4                     0x000C
    #define     B16UPS_420_422_CFG3_ups_c4                     0x000C
    #define   LSb32UPS_420_422_CFG3_ups_c4                        0
    #define   LSb16UPS_420_422_CFG3_ups_c4                        0
    #define       bUPS_420_422_CFG3_ups_c4                     13
    #define   MSK32UPS_420_422_CFG3_ups_c4                        0x00001FFF

    #define     BA_UPS_420_422_CFG3_ups_c5                     0x000D
    #define     B16UPS_420_422_CFG3_ups_c5                     0x000C
    #define   LSb32UPS_420_422_CFG3_ups_c5                        13
    #define   LSb16UPS_420_422_CFG3_ups_c5                        13
    #define       bUPS_420_422_CFG3_ups_c5                     13
    #define   MSK32UPS_420_422_CFG3_ups_c5                        0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG4                            0x0010

    #define     BA_UPS_420_422_CFG4_ups_c6                     0x0010
    #define     B16UPS_420_422_CFG4_ups_c6                     0x0010
    #define   LSb32UPS_420_422_CFG4_ups_c6                        0
    #define   LSb16UPS_420_422_CFG4_ups_c6                        0
    #define       bUPS_420_422_CFG4_ups_c6                     13
    #define   MSK32UPS_420_422_CFG4_ups_c6                        0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG5                            0x0014

    #define     BA_UPS_420_422_CFG5_hres_regs                  0x0014
    #define     B16UPS_420_422_CFG5_hres_regs                  0x0014
    #define   LSb32UPS_420_422_CFG5_hres_regs                     0
    #define   LSb16UPS_420_422_CFG5_hres_regs                     0
    #define       bUPS_420_422_CFG5_hres_regs                  13
    #define   MSK32UPS_420_422_CFG5_hres_regs                     0x00001FFF

    #define     BA_UPS_420_422_CFG5_htot_regs                  0x0015
    #define     B16UPS_420_422_CFG5_htot_regs                  0x0014
    #define   LSb32UPS_420_422_CFG5_htot_regs                     13
    #define   LSb16UPS_420_422_CFG5_htot_regs                     13
    #define       bUPS_420_422_CFG5_htot_regs                  13
    #define   MSK32UPS_420_422_CFG5_htot_regs                     0x03FFE000

    #define     BA_UPS_420_422_CFG5_auto_pixcnt                0x0017
    #define     B16UPS_420_422_CFG5_auto_pixcnt                0x0016
    #define   LSb32UPS_420_422_CFG5_auto_pixcnt                   26
    #define   LSb16UPS_420_422_CFG5_auto_pixcnt                   10
    #define       bUPS_420_422_CFG5_auto_pixcnt                1
    #define   MSK32UPS_420_422_CFG5_auto_pixcnt                   0x04000000

    #define     BA_UPS_420_422_CFG5_power_redn                 0x0017
    #define     B16UPS_420_422_CFG5_power_redn                 0x0016
    #define   LSb32UPS_420_422_CFG5_power_redn                    27
    #define   LSb16UPS_420_422_CFG5_power_redn                    11
    #define       bUPS_420_422_CFG5_power_redn                 1
    #define   MSK32UPS_420_422_CFG5_power_redn                    0x08000000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG6                            0x0018

    #define     BA_UPS_420_422_CFG6_Rsv0                       0x0018
    #define     B16UPS_420_422_CFG6_Rsv0                       0x0018
    #define   LSb32UPS_420_422_CFG6_Rsv0                          0
    #define   LSb16UPS_420_422_CFG6_Rsv0                          0
    #define       bUPS_420_422_CFG6_Rsv0                       8
    #define   MSK32UPS_420_422_CFG6_Rsv0                          0x000000FF

    #define     BA_UPS_420_422_CFG6_top_crop                   0x0019
    #define     B16UPS_420_422_CFG6_top_crop                   0x0018
    #define   LSb32UPS_420_422_CFG6_top_crop                      8
    #define   LSb16UPS_420_422_CFG6_top_crop                      8
    #define       bUPS_420_422_CFG6_top_crop                   6
    #define   MSK32UPS_420_422_CFG6_top_crop                      0x00003F00

    #define     BA_UPS_420_422_CFG6_bot_crop                   0x0019
    #define     B16UPS_420_422_CFG6_bot_crop                   0x0018
    #define   LSb32UPS_420_422_CFG6_bot_crop                      14
    #define   LSb16UPS_420_422_CFG6_bot_crop                      14
    #define       bUPS_420_422_CFG6_bot_crop                   6
    #define   MSK32UPS_420_422_CFG6_bot_crop                      0x000FC000

    #define     BA_UPS_420_422_CFG6_left_crop                  0x001A
    #define     B16UPS_420_422_CFG6_left_crop                  0x001A
    #define   LSb32UPS_420_422_CFG6_left_crop                     20
    #define   LSb16UPS_420_422_CFG6_left_crop                     4
    #define       bUPS_420_422_CFG6_left_crop                  6
    #define   MSK32UPS_420_422_CFG6_left_crop                     0x03F00000

    #define     BA_UPS_420_422_CFG6_right_crop                 0x001B
    #define     B16UPS_420_422_CFG6_right_crop                 0x001A
    #define   LSb32UPS_420_422_CFG6_right_crop                    26
    #define   LSb16UPS_420_422_CFG6_right_crop                    10
    #define       bUPS_420_422_CFG6_right_crop                 6
    #define   MSK32UPS_420_422_CFG6_right_crop                    0xFC000000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG7                            0x001C

    #define     BA_UPS_420_422_CFG7_vres_regs                  0x001C
    #define     B16UPS_420_422_CFG7_vres_regs                  0x001C
    #define   LSb32UPS_420_422_CFG7_vres_regs                     0
    #define   LSb16UPS_420_422_CFG7_vres_regs                     0
    #define       bUPS_420_422_CFG7_vres_regs                  13
    #define   MSK32UPS_420_422_CFG7_vres_regs                     0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG8                            0x0020

    #define     BA_UPS_420_422_CFG8_pdwn_regs                  0x0020
    #define     B16UPS_420_422_CFG8_pdwn_regs                  0x0020
    #define   LSb32UPS_420_422_CFG8_pdwn_regs                     0
    #define   LSb16UPS_420_422_CFG8_pdwn_regs                     0
    #define       bUPS_420_422_CFG8_pdwn_regs                  1
    #define   MSK32UPS_420_422_CFG8_pdwn_regs                     0x00000001

    #define     BA_UPS_420_422_CFG8_pdlvmc_regs                0x0020
    #define     B16UPS_420_422_CFG8_pdlvmc_regs                0x0020
    #define   LSb32UPS_420_422_CFG8_pdlvmc_regs                   1
    #define   LSb16UPS_420_422_CFG8_pdlvmc_regs                   1
    #define       bUPS_420_422_CFG8_pdlvmc_regs                1
    #define   MSK32UPS_420_422_CFG8_pdlvmc_regs                   0x00000002

    #define     BA_UPS_420_422_CFG8_pdfvssm_regs               0x0020
    #define     B16UPS_420_422_CFG8_pdfvssm_regs               0x0020
    #define   LSb32UPS_420_422_CFG8_pdfvssm_regs                  2
    #define   LSb16UPS_420_422_CFG8_pdfvssm_regs                  2
    #define       bUPS_420_422_CFG8_pdfvssm_regs               1
    #define   MSK32UPS_420_422_CFG8_pdfvssm_regs                  0x00000004

    #define     BA_UPS_420_422_CFG8_dpwr_regs                  0x0020
    #define     B16UPS_420_422_CFG8_dpwr_regs                  0x0020
    #define   LSb32UPS_420_422_CFG8_dpwr_regs                     3
    #define   LSb16UPS_420_422_CFG8_dpwr_regs                     3
    #define       bUPS_420_422_CFG8_dpwr_regs                  2
    #define   MSK32UPS_420_422_CFG8_dpwr_regs                     0x00000018
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG9                            0x0024

    #define     BA_UPS_420_422_CFG9_yblank_regs                0x0024
    #define     B16UPS_420_422_CFG9_yblank_regs                0x0024
    #define   LSb32UPS_420_422_CFG9_yblank_regs                   0
    #define   LSb16UPS_420_422_CFG9_yblank_regs                   0
    #define       bUPS_420_422_CFG9_yblank_regs                12
    #define   MSK32UPS_420_422_CFG9_yblank_regs                   0x00000FFF

    #define     BA_UPS_420_422_CFG9_cblank_regs                0x0025
    #define     B16UPS_420_422_CFG9_cblank_regs                0x0024
    #define   LSb32UPS_420_422_CFG9_cblank_regs                   12
    #define   LSb16UPS_420_422_CFG9_cblank_regs                   12
    #define       bUPS_420_422_CFG9_cblank_regs                12
    #define   MSK32UPS_420_422_CFG9_cblank_regs                   0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG10                           0x0028

    #define     BA_UPS_420_422_CFG10_tile_en                   0x0028
    #define     B16UPS_420_422_CFG10_tile_en                   0x0028
    #define   LSb32UPS_420_422_CFG10_tile_en                      0
    #define   LSb16UPS_420_422_CFG10_tile_en                      0
    #define       bUPS_420_422_CFG10_tile_en                   1
    #define   MSK32UPS_420_422_CFG10_tile_en                      0x00000001

    #define     BA_UPS_420_422_CFG10_rsv0                      0x0028
    #define     B16UPS_420_422_CFG10_rsv0                      0x0028
    #define   LSb32UPS_420_422_CFG10_rsv0                         1
    #define   LSb16UPS_420_422_CFG10_rsv0                         1
    #define       bUPS_420_422_CFG10_rsv0                      3
    #define   MSK32UPS_420_422_CFG10_rsv0                         0x0000000E

    #define     BA_UPS_420_422_CFG10_tile_depth                0x0028
    #define     B16UPS_420_422_CFG10_tile_depth                0x0028
    #define   LSb32UPS_420_422_CFG10_tile_depth                   4
    #define   LSb16UPS_420_422_CFG10_tile_depth                   4
    #define       bUPS_420_422_CFG10_tile_depth                8
    #define   MSK32UPS_420_422_CFG10_tile_depth                   0x00000FF0

    #define     BA_UPS_420_422_CFG10_tile_width                0x0029
    #define     B16UPS_420_422_CFG10_tile_width                0x0028
    #define   LSb32UPS_420_422_CFG10_tile_width                   12
    #define   LSb16UPS_420_422_CFG10_tile_width                   12
    #define       bUPS_420_422_CFG10_tile_width                8
    #define   MSK32UPS_420_422_CFG10_tile_width                   0x000FF000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_UPS_420_422 {
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG0_enable(r32)                _BFGET_(r32, 0, 0)
    #define   SET32UPS_420_422_CFG0_enable(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16UPS_420_422_CFG0_enable(r16)                _BFGET_(r16, 0, 0)
    #define   SET16UPS_420_422_CFG0_enable(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32UPS_420_422_CFG0_msbswap(r32)               _BFGET_(r32, 1, 1)
    #define   SET32UPS_420_422_CFG0_msbswap(r32,v)             _BFSET_(r32, 1, 1,v)
    #define   GET16UPS_420_422_CFG0_msbswap(r16)               _BFGET_(r16, 1, 1)
    #define   SET16UPS_420_422_CFG0_msbswap(r16,v)             _BFSET_(r16, 1, 1,v)

    #define   GET32UPS_420_422_CFG0_cswap_regs(r32)            _BFGET_(r32, 2, 2)
    #define   SET32UPS_420_422_CFG0_cswap_regs(r32,v)          _BFSET_(r32, 2, 2,v)
    #define   GET16UPS_420_422_CFG0_cswap_regs(r16)            _BFGET_(r16, 2, 2)
    #define   SET16UPS_420_422_CFG0_cswap_regs(r16,v)          _BFSET_(r16, 2, 2,v)

    #define   GET32UPS_420_422_CFG0_yshift_regs(r32)           _BFGET_(r32, 3, 3)
    #define   SET32UPS_420_422_CFG0_yshift_regs(r32,v)         _BFSET_(r32, 3, 3,v)
    #define   GET16UPS_420_422_CFG0_yshift_regs(r16)           _BFGET_(r16, 3, 3)
    #define   SET16UPS_420_422_CFG0_yshift_regs(r16,v)         _BFSET_(r16, 3, 3,v)

    #define   GET32UPS_420_422_CFG0_cshift_regs(r32)           _BFGET_(r32, 4, 4)
    #define   SET32UPS_420_422_CFG0_cshift_regs(r32,v)         _BFSET_(r32, 4, 4,v)
    #define   GET16UPS_420_422_CFG0_cshift_regs(r16)           _BFGET_(r16, 4, 4)
    #define   SET16UPS_420_422_CFG0_cshift_regs(r16,v)         _BFSET_(r16, 4, 4,v)

    #define   GET32UPS_420_422_CFG0_sp_en(r32)                 _BFGET_(r32, 5, 5)
    #define   SET32UPS_420_422_CFG0_sp_en(r32,v)               _BFSET_(r32, 5, 5,v)
    #define   GET16UPS_420_422_CFG0_sp_en(r16)                 _BFGET_(r16, 5, 5)
    #define   SET16UPS_420_422_CFG0_sp_en(r16,v)               _BFSET_(r16, 5, 5,v)

    #define   GET32UPS_420_422_CFG0_dat8_en(r32)               _BFGET_(r32, 6, 6)
    #define   SET32UPS_420_422_CFG0_dat8_en(r32,v)             _BFSET_(r32, 6, 6,v)
    #define   GET16UPS_420_422_CFG0_dat8_en(r16)               _BFGET_(r16, 6, 6)
    #define   SET16UPS_420_422_CFG0_dat8_en(r16,v)             _BFSET_(r16, 6, 6,v)

    #define   GET32UPS_420_422_CFG0_sft_rst(r32)               _BFGET_(r32, 7, 7)
    #define   SET32UPS_420_422_CFG0_sft_rst(r32,v)             _BFSET_(r32, 7, 7,v)
    #define   GET16UPS_420_422_CFG0_sft_rst(r16)               _BFGET_(r16, 7, 7)
    #define   SET16UPS_420_422_CFG0_sft_rst(r16,v)             _BFSET_(r16, 7, 7,v)

    #define   GET32UPS_420_422_CFG0_use_blank(r32)             _BFGET_(r32, 8, 8)
    #define   SET32UPS_420_422_CFG0_use_blank(r32,v)           _BFSET_(r32, 8, 8,v)
    #define   GET16UPS_420_422_CFG0_use_blank(r16)             _BFGET_(r16, 8, 8)
    #define   SET16UPS_420_422_CFG0_use_blank(r16,v)           _BFSET_(r16, 8, 8,v)

    #define   GET32UPS_420_422_CFG0_opt_malloc(r32)            _BFGET_(r32, 9, 9)
    #define   SET32UPS_420_422_CFG0_opt_malloc(r32,v)          _BFSET_(r32, 9, 9,v)
    #define   GET16UPS_420_422_CFG0_opt_malloc(r16)            _BFGET_(r16, 9, 9)
    #define   SET16UPS_420_422_CFG0_opt_malloc(r16,v)          _BFSET_(r16, 9, 9,v)

    #define   GET32UPS_420_422_CFG0_rsv0(r32)                  _BFGET_(r32,18,10)
    #define   SET32UPS_420_422_CFG0_rsv0(r32,v)                _BFSET_(r32,18,10,v)

    #define   GET32UPS_420_422_CFG0_rsv1(r32)                  _BFGET_(r32,27,19)
    #define   SET32UPS_420_422_CFG0_rsv1(r32,v)                _BFSET_(r32,27,19,v)
    #define   GET16UPS_420_422_CFG0_rsv1(r16)                  _BFGET_(r16,11, 3)
    #define   SET16UPS_420_422_CFG0_rsv1(r16,v)                _BFSET_(r16,11, 3,v)

    #define   GET32UPS_420_422_CFG0_vfilter(r32)               _BFGET_(r32,28,28)
    #define   SET32UPS_420_422_CFG0_vfilter(r32,v)             _BFSET_(r32,28,28,v)
    #define   GET16UPS_420_422_CFG0_vfilter(r16)               _BFGET_(r16,12,12)
    #define   SET16UPS_420_422_CFG0_vfilter(r16,v)             _BFSET_(r16,12,12,v)

    #define   GET32UPS_420_422_CFG0_out422(r32)                _BFGET_(r32,29,29)
    #define   SET32UPS_420_422_CFG0_out422(r32,v)              _BFSET_(r32,29,29,v)
    #define   GET16UPS_420_422_CFG0_out422(r16)                _BFGET_(r16,13,13)
    #define   SET16UPS_420_422_CFG0_out422(r16,v)              _BFSET_(r16,13,13,v)

    #define   GET32UPS_420_422_CFG0_crop_blank(r32)            _BFGET_(r32,30,30)
    #define   SET32UPS_420_422_CFG0_crop_blank(r32,v)          _BFSET_(r32,30,30,v)
    #define   GET16UPS_420_422_CFG0_crop_blank(r16)            _BFGET_(r16,14,14)
    #define   SET16UPS_420_422_CFG0_crop_blank(r16,v)          _BFSET_(r16,14,14,v)

    #define   GET32UPS_420_422_CFG0_luma_rpt(r32)              _BFGET_(r32,31,31)
    #define   SET32UPS_420_422_CFG0_luma_rpt(r32,v)            _BFSET_(r32,31,31,v)
    #define   GET16UPS_420_422_CFG0_luma_rpt(r16)              _BFGET_(r16,15,15)
    #define   SET16UPS_420_422_CFG0_luma_rpt(r16,v)            _BFSET_(r16,15,15,v)

    #define     w32UPS_420_422_CFG0                            {\
            UNSG32 uCFG0_enable                                :  1;\
            UNSG32 uCFG0_msbswap                               :  1;\
            UNSG32 uCFG0_cswap_regs                            :  1;\
            UNSG32 uCFG0_yshift_regs                           :  1;\
            UNSG32 uCFG0_cshift_regs                           :  1;\
            UNSG32 uCFG0_sp_en                                 :  1;\
            UNSG32 uCFG0_dat8_en                               :  1;\
            UNSG32 uCFG0_sft_rst                               :  1;\
            UNSG32 uCFG0_use_blank                             :  1;\
            UNSG32 uCFG0_opt_malloc                            :  1;\
            UNSG32 uCFG0_rsv0                                  :  9;\
            UNSG32 uCFG0_rsv1                                  :  9;\
            UNSG32 uCFG0_vfilter                               :  1;\
            UNSG32 uCFG0_out422                                :  1;\
            UNSG32 uCFG0_crop_blank                            :  1;\
            UNSG32 uCFG0_luma_rpt                              :  1;\
          }
    union { UNSG32 u32UPS_420_422_CFG0;
            struct w32UPS_420_422_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG1_ups_c0(r32)                _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_CFG1_ups_c0(r32,v)              _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_CFG1_ups_c0(r16)                _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_CFG1_ups_c0(r16,v)              _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_CFG1_ups_c1(r32)                _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_CFG1_ups_c1(r32,v)              _BFSET_(r32,25,13,v)

    #define     w32UPS_420_422_CFG1                            {\
            UNSG32 uCFG1_ups_c0                                : 13;\
            UNSG32 uCFG1_ups_c1                                : 13;\
            UNSG32 RSVDx4_b26                                  :  6;\
          }
    union { UNSG32 u32UPS_420_422_CFG1;
            struct w32UPS_420_422_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG2_ups_c2(r32)                _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_CFG2_ups_c2(r32,v)              _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_CFG2_ups_c2(r16)                _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_CFG2_ups_c2(r16,v)              _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_CFG2_ups_c3(r32)                _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_CFG2_ups_c3(r32,v)              _BFSET_(r32,25,13,v)

    #define     w32UPS_420_422_CFG2                            {\
            UNSG32 uCFG2_ups_c2                                : 13;\
            UNSG32 uCFG2_ups_c3                                : 13;\
            UNSG32 RSVDx8_b26                                  :  6;\
          }
    union { UNSG32 u32UPS_420_422_CFG2;
            struct w32UPS_420_422_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG3_ups_c4(r32)                _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_CFG3_ups_c4(r32,v)              _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_CFG3_ups_c4(r16)                _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_CFG3_ups_c4(r16,v)              _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_CFG3_ups_c5(r32)                _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_CFG3_ups_c5(r32,v)              _BFSET_(r32,25,13,v)

    #define     w32UPS_420_422_CFG3                            {\
            UNSG32 uCFG3_ups_c4                                : 13;\
            UNSG32 uCFG3_ups_c5                                : 13;\
            UNSG32 RSVDxC_b26                                  :  6;\
          }
    union { UNSG32 u32UPS_420_422_CFG3;
            struct w32UPS_420_422_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG4_ups_c6(r32)                _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_CFG4_ups_c6(r32,v)              _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_CFG4_ups_c6(r16)                _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_CFG4_ups_c6(r16,v)              _BFSET_(r16,12, 0,v)

    #define     w32UPS_420_422_CFG4                            {\
            UNSG32 uCFG4_ups_c6                                : 13;\
            UNSG32 RSVDx10_b13                                 : 19;\
          }
    union { UNSG32 u32UPS_420_422_CFG4;
            struct w32UPS_420_422_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG5_hres_regs(r32)             _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_CFG5_hres_regs(r32,v)           _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_CFG5_hres_regs(r16)             _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_CFG5_hres_regs(r16,v)           _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_CFG5_htot_regs(r32)             _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_CFG5_htot_regs(r32,v)           _BFSET_(r32,25,13,v)

    #define   GET32UPS_420_422_CFG5_auto_pixcnt(r32)           _BFGET_(r32,26,26)
    #define   SET32UPS_420_422_CFG5_auto_pixcnt(r32,v)         _BFSET_(r32,26,26,v)
    #define   GET16UPS_420_422_CFG5_auto_pixcnt(r16)           _BFGET_(r16,10,10)
    #define   SET16UPS_420_422_CFG5_auto_pixcnt(r16,v)         _BFSET_(r16,10,10,v)

    #define   GET32UPS_420_422_CFG5_power_redn(r32)            _BFGET_(r32,27,27)
    #define   SET32UPS_420_422_CFG5_power_redn(r32,v)          _BFSET_(r32,27,27,v)
    #define   GET16UPS_420_422_CFG5_power_redn(r16)            _BFGET_(r16,11,11)
    #define   SET16UPS_420_422_CFG5_power_redn(r16,v)          _BFSET_(r16,11,11,v)

    #define     w32UPS_420_422_CFG5                            {\
            UNSG32 uCFG5_hres_regs                             : 13;\
            UNSG32 uCFG5_htot_regs                             : 13;\
            UNSG32 uCFG5_auto_pixcnt                           :  1;\
            UNSG32 uCFG5_power_redn                            :  1;\
            UNSG32 RSVDx14_b28                                 :  4;\
          }
    union { UNSG32 u32UPS_420_422_CFG5;
            struct w32UPS_420_422_CFG5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG6_Rsv0(r32)                  _BFGET_(r32, 7, 0)
    #define   SET32UPS_420_422_CFG6_Rsv0(r32,v)                _BFSET_(r32, 7, 0,v)
    #define   GET16UPS_420_422_CFG6_Rsv0(r16)                  _BFGET_(r16, 7, 0)
    #define   SET16UPS_420_422_CFG6_Rsv0(r16,v)                _BFSET_(r16, 7, 0,v)

    #define   GET32UPS_420_422_CFG6_top_crop(r32)              _BFGET_(r32,13, 8)
    #define   SET32UPS_420_422_CFG6_top_crop(r32,v)            _BFSET_(r32,13, 8,v)
    #define   GET16UPS_420_422_CFG6_top_crop(r16)              _BFGET_(r16,13, 8)
    #define   SET16UPS_420_422_CFG6_top_crop(r16,v)            _BFSET_(r16,13, 8,v)

    #define   GET32UPS_420_422_CFG6_bot_crop(r32)              _BFGET_(r32,19,14)
    #define   SET32UPS_420_422_CFG6_bot_crop(r32,v)            _BFSET_(r32,19,14,v)

    #define   GET32UPS_420_422_CFG6_left_crop(r32)             _BFGET_(r32,25,20)
    #define   SET32UPS_420_422_CFG6_left_crop(r32,v)           _BFSET_(r32,25,20,v)
    #define   GET16UPS_420_422_CFG6_left_crop(r16)             _BFGET_(r16, 9, 4)
    #define   SET16UPS_420_422_CFG6_left_crop(r16,v)           _BFSET_(r16, 9, 4,v)

    #define   GET32UPS_420_422_CFG6_right_crop(r32)            _BFGET_(r32,31,26)
    #define   SET32UPS_420_422_CFG6_right_crop(r32,v)          _BFSET_(r32,31,26,v)
    #define   GET16UPS_420_422_CFG6_right_crop(r16)            _BFGET_(r16,15,10)
    #define   SET16UPS_420_422_CFG6_right_crop(r16,v)          _BFSET_(r16,15,10,v)

    #define     w32UPS_420_422_CFG6                            {\
            UNSG32 uCFG6_Rsv0                                  :  8;\
            UNSG32 uCFG6_top_crop                              :  6;\
            UNSG32 uCFG6_bot_crop                              :  6;\
            UNSG32 uCFG6_left_crop                             :  6;\
            UNSG32 uCFG6_right_crop                            :  6;\
          }
    union { UNSG32 u32UPS_420_422_CFG6;
            struct w32UPS_420_422_CFG6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG7_vres_regs(r32)             _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_CFG7_vres_regs(r32,v)           _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_CFG7_vres_regs(r16)             _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_CFG7_vres_regs(r16,v)           _BFSET_(r16,12, 0,v)

    #define     w32UPS_420_422_CFG7                            {\
            UNSG32 uCFG7_vres_regs                             : 13;\
            UNSG32 RSVDx1C_b13                                 : 19;\
          }
    union { UNSG32 u32UPS_420_422_CFG7;
            struct w32UPS_420_422_CFG7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG8_pdwn_regs(r32)             _BFGET_(r32, 0, 0)
    #define   SET32UPS_420_422_CFG8_pdwn_regs(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16UPS_420_422_CFG8_pdwn_regs(r16)             _BFGET_(r16, 0, 0)
    #define   SET16UPS_420_422_CFG8_pdwn_regs(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32UPS_420_422_CFG8_pdlvmc_regs(r32)           _BFGET_(r32, 1, 1)
    #define   SET32UPS_420_422_CFG8_pdlvmc_regs(r32,v)         _BFSET_(r32, 1, 1,v)
    #define   GET16UPS_420_422_CFG8_pdlvmc_regs(r16)           _BFGET_(r16, 1, 1)
    #define   SET16UPS_420_422_CFG8_pdlvmc_regs(r16,v)         _BFSET_(r16, 1, 1,v)

    #define   GET32UPS_420_422_CFG8_pdfvssm_regs(r32)          _BFGET_(r32, 2, 2)
    #define   SET32UPS_420_422_CFG8_pdfvssm_regs(r32,v)        _BFSET_(r32, 2, 2,v)
    #define   GET16UPS_420_422_CFG8_pdfvssm_regs(r16)          _BFGET_(r16, 2, 2)
    #define   SET16UPS_420_422_CFG8_pdfvssm_regs(r16,v)        _BFSET_(r16, 2, 2,v)

    #define   GET32UPS_420_422_CFG8_dpwr_regs(r32)             _BFGET_(r32, 4, 3)
    #define   SET32UPS_420_422_CFG8_dpwr_regs(r32,v)           _BFSET_(r32, 4, 3,v)
    #define   GET16UPS_420_422_CFG8_dpwr_regs(r16)             _BFGET_(r16, 4, 3)
    #define   SET16UPS_420_422_CFG8_dpwr_regs(r16,v)           _BFSET_(r16, 4, 3,v)

    #define     w32UPS_420_422_CFG8                            {\
            UNSG32 uCFG8_pdwn_regs                             :  1;\
            UNSG32 uCFG8_pdlvmc_regs                           :  1;\
            UNSG32 uCFG8_pdfvssm_regs                          :  1;\
            UNSG32 uCFG8_dpwr_regs                             :  2;\
            UNSG32 RSVDx20_b5                                  : 27;\
          }
    union { UNSG32 u32UPS_420_422_CFG8;
            struct w32UPS_420_422_CFG8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG9_yblank_regs(r32)           _BFGET_(r32,11, 0)
    #define   SET32UPS_420_422_CFG9_yblank_regs(r32,v)         _BFSET_(r32,11, 0,v)
    #define   GET16UPS_420_422_CFG9_yblank_regs(r16)           _BFGET_(r16,11, 0)
    #define   SET16UPS_420_422_CFG9_yblank_regs(r16,v)         _BFSET_(r16,11, 0,v)

    #define   GET32UPS_420_422_CFG9_cblank_regs(r32)           _BFGET_(r32,23,12)
    #define   SET32UPS_420_422_CFG9_cblank_regs(r32,v)         _BFSET_(r32,23,12,v)

    #define     w32UPS_420_422_CFG9                            {\
            UNSG32 uCFG9_yblank_regs                           : 12;\
            UNSG32 uCFG9_cblank_regs                           : 12;\
            UNSG32 RSVDx24_b24                                 :  8;\
          }
    union { UNSG32 u32UPS_420_422_CFG9;
            struct w32UPS_420_422_CFG9;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG10_tile_en(r32)              _BFGET_(r32, 0, 0)
    #define   SET32UPS_420_422_CFG10_tile_en(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16UPS_420_422_CFG10_tile_en(r16)              _BFGET_(r16, 0, 0)
    #define   SET16UPS_420_422_CFG10_tile_en(r16,v)            _BFSET_(r16, 0, 0,v)

    #define   GET32UPS_420_422_CFG10_rsv0(r32)                 _BFGET_(r32, 3, 1)
    #define   SET32UPS_420_422_CFG10_rsv0(r32,v)               _BFSET_(r32, 3, 1,v)
    #define   GET16UPS_420_422_CFG10_rsv0(r16)                 _BFGET_(r16, 3, 1)
    #define   SET16UPS_420_422_CFG10_rsv0(r16,v)               _BFSET_(r16, 3, 1,v)

    #define   GET32UPS_420_422_CFG10_tile_depth(r32)           _BFGET_(r32,11, 4)
    #define   SET32UPS_420_422_CFG10_tile_depth(r32,v)         _BFSET_(r32,11, 4,v)
    #define   GET16UPS_420_422_CFG10_tile_depth(r16)           _BFGET_(r16,11, 4)
    #define   SET16UPS_420_422_CFG10_tile_depth(r16,v)         _BFSET_(r16,11, 4,v)

    #define   GET32UPS_420_422_CFG10_tile_width(r32)           _BFGET_(r32,19,12)
    #define   SET32UPS_420_422_CFG10_tile_width(r32,v)         _BFSET_(r32,19,12,v)

    #define     w32UPS_420_422_CFG10                           {\
            UNSG32 uCFG10_tile_en                              :  1;\
            UNSG32 uCFG10_rsv0                                 :  3;\
            UNSG32 uCFG10_tile_depth                           :  8;\
            UNSG32 uCFG10_tile_width                           :  8;\
            UNSG32 RSVDx28_b20                                 : 12;\
          }
    union { UNSG32 u32UPS_420_422_CFG10;
            struct w32UPS_420_422_CFG10;
          };
    ///////////////////////////////////////////////////////////
    } SIE_UPS_420_422;

    typedef union  T32UPS_420_422_CFG0
          { UNSG32 u32;
            struct w32UPS_420_422_CFG0;
                 } T32UPS_420_422_CFG0;
    typedef union  T32UPS_420_422_CFG1
          { UNSG32 u32;
            struct w32UPS_420_422_CFG1;
                 } T32UPS_420_422_CFG1;
    typedef union  T32UPS_420_422_CFG2
          { UNSG32 u32;
            struct w32UPS_420_422_CFG2;
                 } T32UPS_420_422_CFG2;
    typedef union  T32UPS_420_422_CFG3
          { UNSG32 u32;
            struct w32UPS_420_422_CFG3;
                 } T32UPS_420_422_CFG3;
    typedef union  T32UPS_420_422_CFG4
          { UNSG32 u32;
            struct w32UPS_420_422_CFG4;
                 } T32UPS_420_422_CFG4;
    typedef union  T32UPS_420_422_CFG5
          { UNSG32 u32;
            struct w32UPS_420_422_CFG5;
                 } T32UPS_420_422_CFG5;
    typedef union  T32UPS_420_422_CFG6
          { UNSG32 u32;
            struct w32UPS_420_422_CFG6;
                 } T32UPS_420_422_CFG6;
    typedef union  T32UPS_420_422_CFG7
          { UNSG32 u32;
            struct w32UPS_420_422_CFG7;
                 } T32UPS_420_422_CFG7;
    typedef union  T32UPS_420_422_CFG8
          { UNSG32 u32;
            struct w32UPS_420_422_CFG8;
                 } T32UPS_420_422_CFG8;
    typedef union  T32UPS_420_422_CFG9
          { UNSG32 u32;
            struct w32UPS_420_422_CFG9;
                 } T32UPS_420_422_CFG9;
    typedef union  T32UPS_420_422_CFG10
          { UNSG32 u32;
            struct w32UPS_420_422_CFG10;
                 } T32UPS_420_422_CFG10;
    ///////////////////////////////////////////////////////////

    typedef union  TUPS_420_422_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG0;
                   };
                 } TUPS_420_422_CFG0;
    typedef union  TUPS_420_422_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG1;
                   };
                 } TUPS_420_422_CFG1;
    typedef union  TUPS_420_422_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG2;
                   };
                 } TUPS_420_422_CFG2;
    typedef union  TUPS_420_422_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG3;
                   };
                 } TUPS_420_422_CFG3;
    typedef union  TUPS_420_422_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG4;
                   };
                 } TUPS_420_422_CFG4;
    typedef union  TUPS_420_422_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG5;
                   };
                 } TUPS_420_422_CFG5;
    typedef union  TUPS_420_422_CFG6
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG6;
                   };
                 } TUPS_420_422_CFG6;
    typedef union  TUPS_420_422_CFG7
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG7;
                   };
                 } TUPS_420_422_CFG7;
    typedef union  TUPS_420_422_CFG8
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG8;
                   };
                 } TUPS_420_422_CFG8;
    typedef union  TUPS_420_422_CFG9
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG9;
                   };
                 } TUPS_420_422_CFG9;
    typedef union  TUPS_420_422_CFG10
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG10;
                   };
                 } TUPS_420_422_CFG10;

    ///////////////////////////////////////////////////////////
     SIGN32 UPS_420_422_drvrd(SIE_UPS_420_422 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 UPS_420_422_drvwr(SIE_UPS_420_422 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void UPS_420_422_reset(SIE_UPS_420_422 *p);
     SIGN32 UPS_420_422_cmp  (SIE_UPS_420_422 *p, SIE_UPS_420_422 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define UPS_420_422_check(p,pie,pfx,hLOG) UPS_420_422_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define UPS_420_422_print(p,    pfx,hLOG) UPS_420_422_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: UPS_420_422
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE DIFLUT0                                  (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 entry                (P)
///               %unsigned 32 DATA
///                                    ###
///                                    * The DIF LUT Programming
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      32b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DIFLUT0
#define h_DIFLUT0 (){}

    #define     RA_DIFLUT0_entry                               0x0000

    #define     BA_DIFLUT0_entry_DATA                          0x0000
    #define     B16DIFLUT0_entry_DATA                          0x0000
    #define   LSb32DIFLUT0_entry_DATA                             0
    #define   LSb16DIFLUT0_entry_DATA                             0
    #define       bDIFLUT0_entry_DATA                          32
    #define   MSK32DIFLUT0_entry_DATA                             0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DIFLUT0 {
    ///////////////////////////////////////////////////////////
    #define   GET32DIFLUT0_entry_DATA(r32)                     _BFGET_(r32,31, 0)
    #define   SET32DIFLUT0_entry_DATA(r32,v)                   _BFSET_(r32,31, 0,v)

    #define     w32DIFLUT0_entry                               {\
            UNSG32 uentry_DATA                                 : 32;\
          }
    union { UNSG32 u32DIFLUT0_entry;
            struct w32DIFLUT0_entry;
          };
    ///////////////////////////////////////////////////////////
    } SIE_DIFLUT0;

    typedef union  T32DIFLUT0_entry
          { UNSG32 u32;
            struct w32DIFLUT0_entry;
                 } T32DIFLUT0_entry;
    ///////////////////////////////////////////////////////////

    typedef union  TDIFLUT0_entry
          { UNSG32 u32[1];
            struct {
            struct w32DIFLUT0_entry;
                   };
                 } TDIFLUT0_entry;

    ///////////////////////////////////////////////////////////
     SIGN32 DIFLUT0_drvrd(SIE_DIFLUT0 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DIFLUT0_drvwr(SIE_DIFLUT0 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DIFLUT0_reset(SIE_DIFLUT0 *p);
     SIGN32 DIFLUT0_cmp  (SIE_DIFLUT0 *p, SIE_DIFLUT0 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DIFLUT0_check(p,pie,pfx,hLOG) DIFLUT0_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DIFLUT0_print(p,    pfx,hLOG) DIFLUT0_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DIFLUT0
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE DIF128_LUT                               (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 DIFLUT0
///               $DIFLUT0             DIFLUT0           REG     [128]
///                                    ###
///                                    * 6-bit index to table lookup
///                                    * End of Interface
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     512B, bits:    4096b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DIF128_LUT
#define h_DIF128_LUT (){}

    #define     RA_DIF128_LUT_DIFLUT0                          0x0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DIF128_LUT {
    ///////////////////////////////////////////////////////////
              SIE_DIFLUT0                                      ie_DIFLUT0[128];
    ///////////////////////////////////////////////////////////
    } SIE_DIF128_LUT;

    ///////////////////////////////////////////////////////////
     SIGN32 DIF128_LUT_drvrd(SIE_DIF128_LUT *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DIF128_LUT_drvwr(SIE_DIF128_LUT *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DIF128_LUT_reset(SIE_DIF128_LUT *p);
     SIGN32 DIF128_LUT_cmp  (SIE_DIF128_LUT *p, SIE_DIF128_LUT *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DIF128_LUT_check(p,pie,pfx,hLOG) DIF128_LUT_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DIF128_LUT_print(p,    pfx,hLOG) DIF128_LUT_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DIF128_LUT
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE DIF_128                 biu              (4,4)
///     ###
///     * Register specification of interface [Detile Input Formatter module]
///     * Defines the size of DIF config registers
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 1  sft_rst                   0x0
///                                    ###
///                                    * Soft reset bit for Detile Input Formatter. Write 1 to reset internal logic and bring to idle state.
///                                    ###
///               %unsigned 9  tile_size                 0x18
///                                    ###
///                                    * Programmable Tile Size for supporting various configurations.
///                                    * Default Size : for V4H6 tiled (10Bit)
///                                    * For V4H8 , program 0x20 (8Bit)
///                                    * For V4H48, program 0xC0 (10Bit)
///                                    * For V4H64, program 0x100(8Bit)
///                                    * For V4H16, program 0x40(8Bit)
///                                    * For V4H12, program 0x30 (10Bit)
///                                    ###
///               %unsigned 1  PDWN0                     0x0
///                                    ###
///                                    * 1: Reduce the leakage(low power) mode , allows VDD to be switched off with data retention
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDLVMC0                   0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDFVSSM0                  0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDWN1                     0x0
///                                    ###
///                                    * 1: Reduce the leakage(low power) mode , allows VDD to be switched off with data retention
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDLVMC1                   0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDFVSSM1                  0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDWN2                     0x0
///                                    ###
///                                    * 1: Reduce the leakage(low power) mode , allows VDD to be switched off with data retention
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDLVMC2                   0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDFVSSM2                  0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted
///                                    * 0: Normal operation
///                                    ###
///               %%        13         # Stuffing bits...
///     @ 0x00004                      (W-)
///     #         # Stuffing bytes...
///               %% 4064
///     @ 0x00200                      (P)
///     # 0x00200 DIFLUT
///               $DIF128_LUT          DIFLUT            MEM
///                                    ###
///                                    * DIF LUT Values
///                                    * End of DIF register group
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    1024B, bits:      51b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DIF_128
#define h_DIF_128 (){}

    #define     RA_DIF_128_CFG0                                0x0000

    #define     BA_DIF_128_CFG0_sft_rst                        0x0000
    #define     B16DIF_128_CFG0_sft_rst                        0x0000
    #define   LSb32DIF_128_CFG0_sft_rst                           0
    #define   LSb16DIF_128_CFG0_sft_rst                           0
    #define       bDIF_128_CFG0_sft_rst                        1
    #define   MSK32DIF_128_CFG0_sft_rst                           0x00000001

    #define     BA_DIF_128_CFG0_tile_size                      0x0000
    #define     B16DIF_128_CFG0_tile_size                      0x0000
    #define   LSb32DIF_128_CFG0_tile_size                         1
    #define   LSb16DIF_128_CFG0_tile_size                         1
    #define       bDIF_128_CFG0_tile_size                      9
    #define   MSK32DIF_128_CFG0_tile_size                         0x000003FE

    #define     BA_DIF_128_CFG0_PDWN0                          0x0001
    #define     B16DIF_128_CFG0_PDWN0                          0x0000
    #define   LSb32DIF_128_CFG0_PDWN0                             10
    #define   LSb16DIF_128_CFG0_PDWN0                             10
    #define       bDIF_128_CFG0_PDWN0                          1
    #define   MSK32DIF_128_CFG0_PDWN0                             0x00000400

    #define     BA_DIF_128_CFG0_PDLVMC0                        0x0001
    #define     B16DIF_128_CFG0_PDLVMC0                        0x0000
    #define   LSb32DIF_128_CFG0_PDLVMC0                           11
    #define   LSb16DIF_128_CFG0_PDLVMC0                           11
    #define       bDIF_128_CFG0_PDLVMC0                        1
    #define   MSK32DIF_128_CFG0_PDLVMC0                           0x00000800

    #define     BA_DIF_128_CFG0_PDFVSSM0                       0x0001
    #define     B16DIF_128_CFG0_PDFVSSM0                       0x0000
    #define   LSb32DIF_128_CFG0_PDFVSSM0                          12
    #define   LSb16DIF_128_CFG0_PDFVSSM0                          12
    #define       bDIF_128_CFG0_PDFVSSM0                       1
    #define   MSK32DIF_128_CFG0_PDFVSSM0                          0x00001000

    #define     BA_DIF_128_CFG0_PDWN1                          0x0001
    #define     B16DIF_128_CFG0_PDWN1                          0x0000
    #define   LSb32DIF_128_CFG0_PDWN1                             13
    #define   LSb16DIF_128_CFG0_PDWN1                             13
    #define       bDIF_128_CFG0_PDWN1                          1
    #define   MSK32DIF_128_CFG0_PDWN1                             0x00002000

    #define     BA_DIF_128_CFG0_PDLVMC1                        0x0001
    #define     B16DIF_128_CFG0_PDLVMC1                        0x0000
    #define   LSb32DIF_128_CFG0_PDLVMC1                           14
    #define   LSb16DIF_128_CFG0_PDLVMC1                           14
    #define       bDIF_128_CFG0_PDLVMC1                        1
    #define   MSK32DIF_128_CFG0_PDLVMC1                           0x00004000

    #define     BA_DIF_128_CFG0_PDFVSSM1                       0x0001
    #define     B16DIF_128_CFG0_PDFVSSM1                       0x0000
    #define   LSb32DIF_128_CFG0_PDFVSSM1                          15
    #define   LSb16DIF_128_CFG0_PDFVSSM1                          15
    #define       bDIF_128_CFG0_PDFVSSM1                       1
    #define   MSK32DIF_128_CFG0_PDFVSSM1                          0x00008000

    #define     BA_DIF_128_CFG0_PDWN2                          0x0002
    #define     B16DIF_128_CFG0_PDWN2                          0x0002
    #define   LSb32DIF_128_CFG0_PDWN2                             16
    #define   LSb16DIF_128_CFG0_PDWN2                             0
    #define       bDIF_128_CFG0_PDWN2                          1
    #define   MSK32DIF_128_CFG0_PDWN2                             0x00010000

    #define     BA_DIF_128_CFG0_PDLVMC2                        0x0002
    #define     B16DIF_128_CFG0_PDLVMC2                        0x0002
    #define   LSb32DIF_128_CFG0_PDLVMC2                           17
    #define   LSb16DIF_128_CFG0_PDLVMC2                           1
    #define       bDIF_128_CFG0_PDLVMC2                        1
    #define   MSK32DIF_128_CFG0_PDLVMC2                           0x00020000

    #define     BA_DIF_128_CFG0_PDFVSSM2                       0x0002
    #define     B16DIF_128_CFG0_PDFVSSM2                       0x0002
    #define   LSb32DIF_128_CFG0_PDFVSSM2                          18
    #define   LSb16DIF_128_CFG0_PDFVSSM2                          2
    #define       bDIF_128_CFG0_PDFVSSM2                       1
    #define   MSK32DIF_128_CFG0_PDFVSSM2                          0x00040000
    ///////////////////////////////////////////////////////////
    #define     RA_DIF_128_DIFLUT                              0x0200
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DIF_128 {
    ///////////////////////////////////////////////////////////
    #define   GET32DIF_128_CFG0_sft_rst(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32DIF_128_CFG0_sft_rst(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16DIF_128_CFG0_sft_rst(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16DIF_128_CFG0_sft_rst(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define   GET32DIF_128_CFG0_tile_size(r32)                 _BFGET_(r32, 9, 1)
    #define   SET32DIF_128_CFG0_tile_size(r32,v)               _BFSET_(r32, 9, 1,v)
    #define   GET16DIF_128_CFG0_tile_size(r16)                 _BFGET_(r16, 9, 1)
    #define   SET16DIF_128_CFG0_tile_size(r16,v)               _BFSET_(r16, 9, 1,v)

    #define   GET32DIF_128_CFG0_PDWN0(r32)                     _BFGET_(r32,10,10)
    #define   SET32DIF_128_CFG0_PDWN0(r32,v)                   _BFSET_(r32,10,10,v)
    #define   GET16DIF_128_CFG0_PDWN0(r16)                     _BFGET_(r16,10,10)
    #define   SET16DIF_128_CFG0_PDWN0(r16,v)                   _BFSET_(r16,10,10,v)

    #define   GET32DIF_128_CFG0_PDLVMC0(r32)                   _BFGET_(r32,11,11)
    #define   SET32DIF_128_CFG0_PDLVMC0(r32,v)                 _BFSET_(r32,11,11,v)
    #define   GET16DIF_128_CFG0_PDLVMC0(r16)                   _BFGET_(r16,11,11)
    #define   SET16DIF_128_CFG0_PDLVMC0(r16,v)                 _BFSET_(r16,11,11,v)

    #define   GET32DIF_128_CFG0_PDFVSSM0(r32)                  _BFGET_(r32,12,12)
    #define   SET32DIF_128_CFG0_PDFVSSM0(r32,v)                _BFSET_(r32,12,12,v)
    #define   GET16DIF_128_CFG0_PDFVSSM0(r16)                  _BFGET_(r16,12,12)
    #define   SET16DIF_128_CFG0_PDFVSSM0(r16,v)                _BFSET_(r16,12,12,v)

    #define   GET32DIF_128_CFG0_PDWN1(r32)                     _BFGET_(r32,13,13)
    #define   SET32DIF_128_CFG0_PDWN1(r32,v)                   _BFSET_(r32,13,13,v)
    #define   GET16DIF_128_CFG0_PDWN1(r16)                     _BFGET_(r16,13,13)
    #define   SET16DIF_128_CFG0_PDWN1(r16,v)                   _BFSET_(r16,13,13,v)

    #define   GET32DIF_128_CFG0_PDLVMC1(r32)                   _BFGET_(r32,14,14)
    #define   SET32DIF_128_CFG0_PDLVMC1(r32,v)                 _BFSET_(r32,14,14,v)
    #define   GET16DIF_128_CFG0_PDLVMC1(r16)                   _BFGET_(r16,14,14)
    #define   SET16DIF_128_CFG0_PDLVMC1(r16,v)                 _BFSET_(r16,14,14,v)

    #define   GET32DIF_128_CFG0_PDFVSSM1(r32)                  _BFGET_(r32,15,15)
    #define   SET32DIF_128_CFG0_PDFVSSM1(r32,v)                _BFSET_(r32,15,15,v)
    #define   GET16DIF_128_CFG0_PDFVSSM1(r16)                  _BFGET_(r16,15,15)
    #define   SET16DIF_128_CFG0_PDFVSSM1(r16,v)                _BFSET_(r16,15,15,v)

    #define   GET32DIF_128_CFG0_PDWN2(r32)                     _BFGET_(r32,16,16)
    #define   SET32DIF_128_CFG0_PDWN2(r32,v)                   _BFSET_(r32,16,16,v)
    #define   GET16DIF_128_CFG0_PDWN2(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16DIF_128_CFG0_PDWN2(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define   GET32DIF_128_CFG0_PDLVMC2(r32)                   _BFGET_(r32,17,17)
    #define   SET32DIF_128_CFG0_PDLVMC2(r32,v)                 _BFSET_(r32,17,17,v)
    #define   GET16DIF_128_CFG0_PDLVMC2(r16)                   _BFGET_(r16, 1, 1)
    #define   SET16DIF_128_CFG0_PDLVMC2(r16,v)                 _BFSET_(r16, 1, 1,v)

    #define   GET32DIF_128_CFG0_PDFVSSM2(r32)                  _BFGET_(r32,18,18)
    #define   SET32DIF_128_CFG0_PDFVSSM2(r32,v)                _BFSET_(r32,18,18,v)
    #define   GET16DIF_128_CFG0_PDFVSSM2(r16)                  _BFGET_(r16, 2, 2)
    #define   SET16DIF_128_CFG0_PDFVSSM2(r16,v)                _BFSET_(r16, 2, 2,v)

    #define     w32DIF_128_CFG0                                {\
            UNSG32 uCFG0_sft_rst                               :  1;\
            UNSG32 uCFG0_tile_size                             :  9;\
            UNSG32 uCFG0_PDWN0                                 :  1;\
            UNSG32 uCFG0_PDLVMC0                               :  1;\
            UNSG32 uCFG0_PDFVSSM0                              :  1;\
            UNSG32 uCFG0_PDWN1                                 :  1;\
            UNSG32 uCFG0_PDLVMC1                               :  1;\
            UNSG32 uCFG0_PDFVSSM1                              :  1;\
            UNSG32 uCFG0_PDWN2                                 :  1;\
            UNSG32 uCFG0_PDLVMC2                               :  1;\
            UNSG32 uCFG0_PDFVSSM2                              :  1;\
            UNSG32 RSVDx0_b19                                  : 13;\
          }
    union { UNSG32 u32DIF_128_CFG0;
            struct w32DIF_128_CFG0;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx4                                      [508];
    ///////////////////////////////////////////////////////////
              SIE_DIF128_LUT                                   ie_DIFLUT;
    ///////////////////////////////////////////////////////////
    } SIE_DIF_128;

    typedef union  T32DIF_128_CFG0
          { UNSG32 u32;
            struct w32DIF_128_CFG0;
                 } T32DIF_128_CFG0;
    ///////////////////////////////////////////////////////////

    typedef union  TDIF_128_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32DIF_128_CFG0;
                   };
                 } TDIF_128_CFG0;

    ///////////////////////////////////////////////////////////
     SIGN32 DIF_128_drvrd(SIE_DIF_128 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DIF_128_drvwr(SIE_DIF_128 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DIF_128_reset(SIE_DIF_128 *p);
     SIGN32 DIF_128_cmp  (SIE_DIF_128 *p, SIE_DIF_128 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DIF_128_check(p,pie,pfx,hLOG) DIF_128_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DIF_128_print(p,    pfx,hLOG) DIF_128_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DIF_128
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE SRAMPWR                                  (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl                 (P-)
///               ###
///               * Control register
///               ###
///               %unsigned 1  SD                        0x0
///                                    : ON                        0x0
///                                    : SHUTDWN                   0x1
///                                                 ###
///                                                 * Shut down mode achieves highest leakage reduction without data retention
///                                                 ###
///               %unsigned 1  DSLP                      0x0
///                                    : ON                        0x0
///                                    : DEEPSLP                   0x1
///                                                 ###
///                                                 * Deep sleep mode powers down the most of peripheral circuit for leakage reduction and retains memory
///                                                 * array content with lower voltage
///                                                 ###
///               %unsigned 1  SLP                       0x0
///                                    : ON                        0x0
///                                    : SLEEP                     0x1
///                                                 ###
///                                                 * Sleep mode powers down most peripheral circuit for leakage reduction with data retention
///                                                 ###
///               %%        29         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       3b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SRAMPWR
#define h_SRAMPWR (){}

    #define     RA_SRAMPWR_ctrl                                0x0000

    #define     BA_SRAMPWR_ctrl_SD                             0x0000
    #define     B16SRAMPWR_ctrl_SD                             0x0000
    #define   LSb32SRAMPWR_ctrl_SD                                0
    #define   LSb16SRAMPWR_ctrl_SD                                0
    #define       bSRAMPWR_ctrl_SD                             1
    #define   MSK32SRAMPWR_ctrl_SD                                0x00000001
    #define        SRAMPWR_ctrl_SD_ON                                       0x0
    #define        SRAMPWR_ctrl_SD_SHUTDWN                                  0x1

    #define     BA_SRAMPWR_ctrl_DSLP                           0x0000
    #define     B16SRAMPWR_ctrl_DSLP                           0x0000
    #define   LSb32SRAMPWR_ctrl_DSLP                              1
    #define   LSb16SRAMPWR_ctrl_DSLP                              1
    #define       bSRAMPWR_ctrl_DSLP                           1
    #define   MSK32SRAMPWR_ctrl_DSLP                              0x00000002
    #define        SRAMPWR_ctrl_DSLP_ON                                     0x0
    #define        SRAMPWR_ctrl_DSLP_DEEPSLP                                0x1

    #define     BA_SRAMPWR_ctrl_SLP                            0x0000
    #define     B16SRAMPWR_ctrl_SLP                            0x0000
    #define   LSb32SRAMPWR_ctrl_SLP                               2
    #define   LSb16SRAMPWR_ctrl_SLP                               2
    #define       bSRAMPWR_ctrl_SLP                            1
    #define   MSK32SRAMPWR_ctrl_SLP                               0x00000004
    #define        SRAMPWR_ctrl_SLP_ON                                      0x0
    #define        SRAMPWR_ctrl_SLP_SLEEP                                   0x1
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SRAMPWR {
    ///////////////////////////////////////////////////////////
    #define   GET32SRAMPWR_ctrl_SD(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32SRAMPWR_ctrl_SD(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16SRAMPWR_ctrl_SD(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16SRAMPWR_ctrl_SD(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define   GET32SRAMPWR_ctrl_DSLP(r32)                      _BFGET_(r32, 1, 1)
    #define   SET32SRAMPWR_ctrl_DSLP(r32,v)                    _BFSET_(r32, 1, 1,v)
    #define   GET16SRAMPWR_ctrl_DSLP(r16)                      _BFGET_(r16, 1, 1)
    #define   SET16SRAMPWR_ctrl_DSLP(r16,v)                    _BFSET_(r16, 1, 1,v)

    #define   GET32SRAMPWR_ctrl_SLP(r32)                       _BFGET_(r32, 2, 2)
    #define   SET32SRAMPWR_ctrl_SLP(r32,v)                     _BFSET_(r32, 2, 2,v)
    #define   GET16SRAMPWR_ctrl_SLP(r16)                       _BFGET_(r16, 2, 2)
    #define   SET16SRAMPWR_ctrl_SLP(r16,v)                     _BFSET_(r16, 2, 2,v)

    #define     w32SRAMPWR_ctrl                                {\
            UNSG32 uctrl_SD                                    :  1;\
            UNSG32 uctrl_DSLP                                  :  1;\
            UNSG32 uctrl_SLP                                   :  1;\
            UNSG32 RSVDx0_b3                                   : 29;\
          }
    union { UNSG32 u32SRAMPWR_ctrl;
            struct w32SRAMPWR_ctrl;
          };
    ///////////////////////////////////////////////////////////
    } SIE_SRAMPWR;

    typedef union  T32SRAMPWR_ctrl
          { UNSG32 u32;
            struct w32SRAMPWR_ctrl;
                 } T32SRAMPWR_ctrl;
    ///////////////////////////////////////////////////////////

    typedef union  TSRAMPWR_ctrl
          { UNSG32 u32[1];
            struct {
            struct w32SRAMPWR_ctrl;
                   };
                 } TSRAMPWR_ctrl;

    ///////////////////////////////////////////////////////////
     SIGN32 SRAMPWR_drvrd(SIE_SRAMPWR *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SRAMPWR_drvwr(SIE_SRAMPWR *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SRAMPWR_reset(SIE_SRAMPWR *p);
     SIGN32 SRAMPWR_cmp  (SIE_SRAMPWR *p, SIE_SRAMPWR *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SRAMPWR_check(p,pie,pfx,hLOG) SRAMPWR_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SRAMPWR_print(p,    pfx,hLOG) SRAMPWR_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SRAMPWR
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE SRAMRWTC                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl0                (P-)
///               ###
///               * Control register
///               ###
///               %unsigned 4  RF1P                      0x5
///                                    ###
///                                    * RTSEL [1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///               %unsigned 4  UHDRF1P                   0x9
///                                    ###
///                                    * RTSEL [1:0] = 01 (default)
///                                    * WTSEL[3:2] = 10 (default)
///                                    ###
///               %unsigned 8  RF2P                      0x35
///                                    ###
///                                    * RCT [1:0] = 01 (default)
///                                    * WCT [3:2] = 01 (default)
///                                    * KP[6:4]      = 011 (default)
///                                    * Bit7 not used
///                                    ###
///               %unsigned 8  UHDRF2P                   0x1
///                                    ###
///                                    * RTSEL [1:0] = 01 (default)
///                                    * WTSEL [3:2] = 00 (default)
///                                    * MTSEL [5:4] = 00 (default)
///                                    * Bit 7 and 8 not used
///                                    ###
///               %unsigned 8  UHDRF2P_ULVT              0x15
///                                    ###
///                                    * RTSEL [1:0] = 01 (default)
///                                    * WTSEL [3:2] = 01 (default)
///                                    * MTSEL [5:4] = 01 (default)
///                                    * Bit 7 and 8 not used
///                                    ###
///     @ 0x00004 ctrl1                (P-)
///               ###
///               * Control register
///               ###
///               %unsigned 4  SHDMBSR1P                 0x5
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///               %unsigned 4  SHDSBSR1P                 0x1
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 00 (default)
///                                    ###
///               %unsigned 4  SHCMBSR1P_SSEG            0x1
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 00 (default)
///                                    ###
///               %unsigned 4  SHCMBSR1P_USEG            0x5
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///               %unsigned 4  SHCSBSR1P                 0x5
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///               %unsigned 4  SHCSBSR1P_CUSTM           0xD
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 11 (default)
///                                    ###
///               %unsigned 4  SPSRAM_WT0                0x1
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 00 (default)
///                                    ###
///               %unsigned 4  SPSRAM_WT1                0x5
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///     @ 0x00008 ctrl2                (P-)
///               ###
///               * Control register
///               ###
///               %unsigned 4  L1CACHE                   0x0
///                                    ###
///                                    * MCR[1:0] = 00 (default)
///                                    * MCW[3:2] = 00 (default)
///                                    ###
///               %unsigned 4  DPSR2P                    0x5
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///               %unsigned 8  ROM                       0x15
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * PTSEL[3:2] = 01 (default)
///                                    * TRB[5:4]: 01
///                                    * TM[6]: 0
///                                    * Bit 7 not used
///                                    ###
///               %%        16         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      12B, bits:      80b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SRAMRWTC
#define h_SRAMRWTC (){}

    #define     RA_SRAMRWTC_ctrl0                              0x0000

    #define     BA_SRAMRWTC_ctrl0_RF1P                         0x0000
    #define     B16SRAMRWTC_ctrl0_RF1P                         0x0000
    #define   LSb32SRAMRWTC_ctrl0_RF1P                            0
    #define   LSb16SRAMRWTC_ctrl0_RF1P                            0
    #define       bSRAMRWTC_ctrl0_RF1P                         4
    #define   MSK32SRAMRWTC_ctrl0_RF1P                            0x0000000F

    #define     BA_SRAMRWTC_ctrl0_UHDRF1P                      0x0000
    #define     B16SRAMRWTC_ctrl0_UHDRF1P                      0x0000
    #define   LSb32SRAMRWTC_ctrl0_UHDRF1P                         4
    #define   LSb16SRAMRWTC_ctrl0_UHDRF1P                         4
    #define       bSRAMRWTC_ctrl0_UHDRF1P                      4
    #define   MSK32SRAMRWTC_ctrl0_UHDRF1P                         0x000000F0

    #define     BA_SRAMRWTC_ctrl0_RF2P                         0x0001
    #define     B16SRAMRWTC_ctrl0_RF2P                         0x0000
    #define   LSb32SRAMRWTC_ctrl0_RF2P                            8
    #define   LSb16SRAMRWTC_ctrl0_RF2P                            8
    #define       bSRAMRWTC_ctrl0_RF2P                         8
    #define   MSK32SRAMRWTC_ctrl0_RF2P                            0x0000FF00

    #define     BA_SRAMRWTC_ctrl0_UHDRF2P                      0x0002
    #define     B16SRAMRWTC_ctrl0_UHDRF2P                      0x0002
    #define   LSb32SRAMRWTC_ctrl0_UHDRF2P                         16
    #define   LSb16SRAMRWTC_ctrl0_UHDRF2P                         0
    #define       bSRAMRWTC_ctrl0_UHDRF2P                      8
    #define   MSK32SRAMRWTC_ctrl0_UHDRF2P                         0x00FF0000

    #define     BA_SRAMRWTC_ctrl0_UHDRF2P_ULVT                 0x0003
    #define     B16SRAMRWTC_ctrl0_UHDRF2P_ULVT                 0x0002
    #define   LSb32SRAMRWTC_ctrl0_UHDRF2P_ULVT                    24
    #define   LSb16SRAMRWTC_ctrl0_UHDRF2P_ULVT                    8
    #define       bSRAMRWTC_ctrl0_UHDRF2P_ULVT                 8
    #define   MSK32SRAMRWTC_ctrl0_UHDRF2P_ULVT                    0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_SRAMRWTC_ctrl1                              0x0004

    #define     BA_SRAMRWTC_ctrl1_SHDMBSR1P                    0x0004
    #define     B16SRAMRWTC_ctrl1_SHDMBSR1P                    0x0004
    #define   LSb32SRAMRWTC_ctrl1_SHDMBSR1P                       0
    #define   LSb16SRAMRWTC_ctrl1_SHDMBSR1P                       0
    #define       bSRAMRWTC_ctrl1_SHDMBSR1P                    4
    #define   MSK32SRAMRWTC_ctrl1_SHDMBSR1P                       0x0000000F

    #define     BA_SRAMRWTC_ctrl1_SHDSBSR1P                    0x0004
    #define     B16SRAMRWTC_ctrl1_SHDSBSR1P                    0x0004
    #define   LSb32SRAMRWTC_ctrl1_SHDSBSR1P                       4
    #define   LSb16SRAMRWTC_ctrl1_SHDSBSR1P                       4
    #define       bSRAMRWTC_ctrl1_SHDSBSR1P                    4
    #define   MSK32SRAMRWTC_ctrl1_SHDSBSR1P                       0x000000F0

    #define     BA_SRAMRWTC_ctrl1_SHCMBSR1P_SSEG               0x0005
    #define     B16SRAMRWTC_ctrl1_SHCMBSR1P_SSEG               0x0004
    #define   LSb32SRAMRWTC_ctrl1_SHCMBSR1P_SSEG                  8
    #define   LSb16SRAMRWTC_ctrl1_SHCMBSR1P_SSEG                  8
    #define       bSRAMRWTC_ctrl1_SHCMBSR1P_SSEG               4
    #define   MSK32SRAMRWTC_ctrl1_SHCMBSR1P_SSEG                  0x00000F00

    #define     BA_SRAMRWTC_ctrl1_SHCMBSR1P_USEG               0x0005
    #define     B16SRAMRWTC_ctrl1_SHCMBSR1P_USEG               0x0004
    #define   LSb32SRAMRWTC_ctrl1_SHCMBSR1P_USEG                  12
    #define   LSb16SRAMRWTC_ctrl1_SHCMBSR1P_USEG                  12
    #define       bSRAMRWTC_ctrl1_SHCMBSR1P_USEG               4
    #define   MSK32SRAMRWTC_ctrl1_SHCMBSR1P_USEG                  0x0000F000

    #define     BA_SRAMRWTC_ctrl1_SHCSBSR1P                    0x0006
    #define     B16SRAMRWTC_ctrl1_SHCSBSR1P                    0x0006
    #define   LSb32SRAMRWTC_ctrl1_SHCSBSR1P                       16
    #define   LSb16SRAMRWTC_ctrl1_SHCSBSR1P                       0
    #define       bSRAMRWTC_ctrl1_SHCSBSR1P                    4
    #define   MSK32SRAMRWTC_ctrl1_SHCSBSR1P                       0x000F0000

    #define     BA_SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM              0x0006
    #define     B16SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM              0x0006
    #define   LSb32SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM                 20
    #define   LSb16SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM                 4
    #define       bSRAMRWTC_ctrl1_SHCSBSR1P_CUSTM              4
    #define   MSK32SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM                 0x00F00000

    #define     BA_SRAMRWTC_ctrl1_SPSRAM_WT0                   0x0007
    #define     B16SRAMRWTC_ctrl1_SPSRAM_WT0                   0x0006
    #define   LSb32SRAMRWTC_ctrl1_SPSRAM_WT0                      24
    #define   LSb16SRAMRWTC_ctrl1_SPSRAM_WT0                      8
    #define       bSRAMRWTC_ctrl1_SPSRAM_WT0                   4
    #define   MSK32SRAMRWTC_ctrl1_SPSRAM_WT0                      0x0F000000

    #define     BA_SRAMRWTC_ctrl1_SPSRAM_WT1                   0x0007
    #define     B16SRAMRWTC_ctrl1_SPSRAM_WT1                   0x0006
    #define   LSb32SRAMRWTC_ctrl1_SPSRAM_WT1                      28
    #define   LSb16SRAMRWTC_ctrl1_SPSRAM_WT1                      12
    #define       bSRAMRWTC_ctrl1_SPSRAM_WT1                   4
    #define   MSK32SRAMRWTC_ctrl1_SPSRAM_WT1                      0xF0000000
    ///////////////////////////////////////////////////////////
    #define     RA_SRAMRWTC_ctrl2                              0x0008

    #define     BA_SRAMRWTC_ctrl2_L1CACHE                      0x0008
    #define     B16SRAMRWTC_ctrl2_L1CACHE                      0x0008
    #define   LSb32SRAMRWTC_ctrl2_L1CACHE                         0
    #define   LSb16SRAMRWTC_ctrl2_L1CACHE                         0
    #define       bSRAMRWTC_ctrl2_L1CACHE                      4
    #define   MSK32SRAMRWTC_ctrl2_L1CACHE                         0x0000000F

    #define     BA_SRAMRWTC_ctrl2_DPSR2P                       0x0008
    #define     B16SRAMRWTC_ctrl2_DPSR2P                       0x0008
    #define   LSb32SRAMRWTC_ctrl2_DPSR2P                          4
    #define   LSb16SRAMRWTC_ctrl2_DPSR2P                          4
    #define       bSRAMRWTC_ctrl2_DPSR2P                       4
    #define   MSK32SRAMRWTC_ctrl2_DPSR2P                          0x000000F0

    #define     BA_SRAMRWTC_ctrl2_ROM                          0x0009
    #define     B16SRAMRWTC_ctrl2_ROM                          0x0008
    #define   LSb32SRAMRWTC_ctrl2_ROM                             8
    #define   LSb16SRAMRWTC_ctrl2_ROM                             8
    #define       bSRAMRWTC_ctrl2_ROM                          8
    #define   MSK32SRAMRWTC_ctrl2_ROM                             0x0000FF00
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SRAMRWTC {
    ///////////////////////////////////////////////////////////
    #define   GET32SRAMRWTC_ctrl0_RF1P(r32)                    _BFGET_(r32, 3, 0)
    #define   SET32SRAMRWTC_ctrl0_RF1P(r32,v)                  _BFSET_(r32, 3, 0,v)
    #define   GET16SRAMRWTC_ctrl0_RF1P(r16)                    _BFGET_(r16, 3, 0)
    #define   SET16SRAMRWTC_ctrl0_RF1P(r16,v)                  _BFSET_(r16, 3, 0,v)

    #define   GET32SRAMRWTC_ctrl0_UHDRF1P(r32)                 _BFGET_(r32, 7, 4)
    #define   SET32SRAMRWTC_ctrl0_UHDRF1P(r32,v)               _BFSET_(r32, 7, 4,v)
    #define   GET16SRAMRWTC_ctrl0_UHDRF1P(r16)                 _BFGET_(r16, 7, 4)
    #define   SET16SRAMRWTC_ctrl0_UHDRF1P(r16,v)               _BFSET_(r16, 7, 4,v)

    #define   GET32SRAMRWTC_ctrl0_RF2P(r32)                    _BFGET_(r32,15, 8)
    #define   SET32SRAMRWTC_ctrl0_RF2P(r32,v)                  _BFSET_(r32,15, 8,v)
    #define   GET16SRAMRWTC_ctrl0_RF2P(r16)                    _BFGET_(r16,15, 8)
    #define   SET16SRAMRWTC_ctrl0_RF2P(r16,v)                  _BFSET_(r16,15, 8,v)

    #define   GET32SRAMRWTC_ctrl0_UHDRF2P(r32)                 _BFGET_(r32,23,16)
    #define   SET32SRAMRWTC_ctrl0_UHDRF2P(r32,v)               _BFSET_(r32,23,16,v)
    #define   GET16SRAMRWTC_ctrl0_UHDRF2P(r16)                 _BFGET_(r16, 7, 0)
    #define   SET16SRAMRWTC_ctrl0_UHDRF2P(r16,v)               _BFSET_(r16, 7, 0,v)

    #define   GET32SRAMRWTC_ctrl0_UHDRF2P_ULVT(r32)            _BFGET_(r32,31,24)
    #define   SET32SRAMRWTC_ctrl0_UHDRF2P_ULVT(r32,v)          _BFSET_(r32,31,24,v)
    #define   GET16SRAMRWTC_ctrl0_UHDRF2P_ULVT(r16)            _BFGET_(r16,15, 8)
    #define   SET16SRAMRWTC_ctrl0_UHDRF2P_ULVT(r16,v)          _BFSET_(r16,15, 8,v)

    #define     w32SRAMRWTC_ctrl0                              {\
            UNSG32 uctrl0_RF1P                                 :  4;\
            UNSG32 uctrl0_UHDRF1P                              :  4;\
            UNSG32 uctrl0_RF2P                                 :  8;\
            UNSG32 uctrl0_UHDRF2P                              :  8;\
            UNSG32 uctrl0_UHDRF2P_ULVT                         :  8;\
          }
    union { UNSG32 u32SRAMRWTC_ctrl0;
            struct w32SRAMRWTC_ctrl0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SRAMRWTC_ctrl1_SHDMBSR1P(r32)               _BFGET_(r32, 3, 0)
    #define   SET32SRAMRWTC_ctrl1_SHDMBSR1P(r32,v)             _BFSET_(r32, 3, 0,v)
    #define   GET16SRAMRWTC_ctrl1_SHDMBSR1P(r16)               _BFGET_(r16, 3, 0)
    #define   SET16SRAMRWTC_ctrl1_SHDMBSR1P(r16,v)             _BFSET_(r16, 3, 0,v)

    #define   GET32SRAMRWTC_ctrl1_SHDSBSR1P(r32)               _BFGET_(r32, 7, 4)
    #define   SET32SRAMRWTC_ctrl1_SHDSBSR1P(r32,v)             _BFSET_(r32, 7, 4,v)
    #define   GET16SRAMRWTC_ctrl1_SHDSBSR1P(r16)               _BFGET_(r16, 7, 4)
    #define   SET16SRAMRWTC_ctrl1_SHDSBSR1P(r16,v)             _BFSET_(r16, 7, 4,v)

    #define   GET32SRAMRWTC_ctrl1_SHCMBSR1P_SSEG(r32)          _BFGET_(r32,11, 8)
    #define   SET32SRAMRWTC_ctrl1_SHCMBSR1P_SSEG(r32,v)        _BFSET_(r32,11, 8,v)
    #define   GET16SRAMRWTC_ctrl1_SHCMBSR1P_SSEG(r16)          _BFGET_(r16,11, 8)
    #define   SET16SRAMRWTC_ctrl1_SHCMBSR1P_SSEG(r16,v)        _BFSET_(r16,11, 8,v)

    #define   GET32SRAMRWTC_ctrl1_SHCMBSR1P_USEG(r32)          _BFGET_(r32,15,12)
    #define   SET32SRAMRWTC_ctrl1_SHCMBSR1P_USEG(r32,v)        _BFSET_(r32,15,12,v)
    #define   GET16SRAMRWTC_ctrl1_SHCMBSR1P_USEG(r16)          _BFGET_(r16,15,12)
    #define   SET16SRAMRWTC_ctrl1_SHCMBSR1P_USEG(r16,v)        _BFSET_(r16,15,12,v)

    #define   GET32SRAMRWTC_ctrl1_SHCSBSR1P(r32)               _BFGET_(r32,19,16)
    #define   SET32SRAMRWTC_ctrl1_SHCSBSR1P(r32,v)             _BFSET_(r32,19,16,v)
    #define   GET16SRAMRWTC_ctrl1_SHCSBSR1P(r16)               _BFGET_(r16, 3, 0)
    #define   SET16SRAMRWTC_ctrl1_SHCSBSR1P(r16,v)             _BFSET_(r16, 3, 0,v)

    #define   GET32SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM(r32)         _BFGET_(r32,23,20)
    #define   SET32SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM(r32,v)       _BFSET_(r32,23,20,v)
    #define   GET16SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM(r16)         _BFGET_(r16, 7, 4)
    #define   SET16SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM(r16,v)       _BFSET_(r16, 7, 4,v)

    #define   GET32SRAMRWTC_ctrl1_SPSRAM_WT0(r32)              _BFGET_(r32,27,24)
    #define   SET32SRAMRWTC_ctrl1_SPSRAM_WT0(r32,v)            _BFSET_(r32,27,24,v)
    #define   GET16SRAMRWTC_ctrl1_SPSRAM_WT0(r16)              _BFGET_(r16,11, 8)
    #define   SET16SRAMRWTC_ctrl1_SPSRAM_WT0(r16,v)            _BFSET_(r16,11, 8,v)

    #define   GET32SRAMRWTC_ctrl1_SPSRAM_WT1(r32)              _BFGET_(r32,31,28)
    #define   SET32SRAMRWTC_ctrl1_SPSRAM_WT1(r32,v)            _BFSET_(r32,31,28,v)
    #define   GET16SRAMRWTC_ctrl1_SPSRAM_WT1(r16)              _BFGET_(r16,15,12)
    #define   SET16SRAMRWTC_ctrl1_SPSRAM_WT1(r16,v)            _BFSET_(r16,15,12,v)

    #define     w32SRAMRWTC_ctrl1                              {\
            UNSG32 uctrl1_SHDMBSR1P                            :  4;\
            UNSG32 uctrl1_SHDSBSR1P                            :  4;\
            UNSG32 uctrl1_SHCMBSR1P_SSEG                       :  4;\
            UNSG32 uctrl1_SHCMBSR1P_USEG                       :  4;\
            UNSG32 uctrl1_SHCSBSR1P                            :  4;\
            UNSG32 uctrl1_SHCSBSR1P_CUSTM                      :  4;\
            UNSG32 uctrl1_SPSRAM_WT0                           :  4;\
            UNSG32 uctrl1_SPSRAM_WT1                           :  4;\
          }
    union { UNSG32 u32SRAMRWTC_ctrl1;
            struct w32SRAMRWTC_ctrl1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SRAMRWTC_ctrl2_L1CACHE(r32)                 _BFGET_(r32, 3, 0)
    #define   SET32SRAMRWTC_ctrl2_L1CACHE(r32,v)               _BFSET_(r32, 3, 0,v)
    #define   GET16SRAMRWTC_ctrl2_L1CACHE(r16)                 _BFGET_(r16, 3, 0)
    #define   SET16SRAMRWTC_ctrl2_L1CACHE(r16,v)               _BFSET_(r16, 3, 0,v)

    #define   GET32SRAMRWTC_ctrl2_DPSR2P(r32)                  _BFGET_(r32, 7, 4)
    #define   SET32SRAMRWTC_ctrl2_DPSR2P(r32,v)                _BFSET_(r32, 7, 4,v)
    #define   GET16SRAMRWTC_ctrl2_DPSR2P(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16SRAMRWTC_ctrl2_DPSR2P(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32SRAMRWTC_ctrl2_ROM(r32)                     _BFGET_(r32,15, 8)
    #define   SET32SRAMRWTC_ctrl2_ROM(r32,v)                   _BFSET_(r32,15, 8,v)
    #define   GET16SRAMRWTC_ctrl2_ROM(r16)                     _BFGET_(r16,15, 8)
    #define   SET16SRAMRWTC_ctrl2_ROM(r16,v)                   _BFSET_(r16,15, 8,v)

    #define     w32SRAMRWTC_ctrl2                              {\
            UNSG32 uctrl2_L1CACHE                              :  4;\
            UNSG32 uctrl2_DPSR2P                               :  4;\
            UNSG32 uctrl2_ROM                                  :  8;\
            UNSG32 RSVDx8_b16                                  : 16;\
          }
    union { UNSG32 u32SRAMRWTC_ctrl2;
            struct w32SRAMRWTC_ctrl2;
          };
    ///////////////////////////////////////////////////////////
    } SIE_SRAMRWTC;

    typedef union  T32SRAMRWTC_ctrl0
          { UNSG32 u32;
            struct w32SRAMRWTC_ctrl0;
                 } T32SRAMRWTC_ctrl0;
    typedef union  T32SRAMRWTC_ctrl1
          { UNSG32 u32;
            struct w32SRAMRWTC_ctrl1;
                 } T32SRAMRWTC_ctrl1;
    typedef union  T32SRAMRWTC_ctrl2
          { UNSG32 u32;
            struct w32SRAMRWTC_ctrl2;
                 } T32SRAMRWTC_ctrl2;
    ///////////////////////////////////////////////////////////

    typedef union  TSRAMRWTC_ctrl0
          { UNSG32 u32[1];
            struct {
            struct w32SRAMRWTC_ctrl0;
                   };
                 } TSRAMRWTC_ctrl0;
    typedef union  TSRAMRWTC_ctrl1
          { UNSG32 u32[1];
            struct {
            struct w32SRAMRWTC_ctrl1;
                   };
                 } TSRAMRWTC_ctrl1;
    typedef union  TSRAMRWTC_ctrl2
          { UNSG32 u32[1];
            struct {
            struct w32SRAMRWTC_ctrl2;
                   };
                 } TSRAMRWTC_ctrl2;

    ///////////////////////////////////////////////////////////
     SIGN32 SRAMRWTC_drvrd(SIE_SRAMRWTC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SRAMRWTC_drvwr(SIE_SRAMRWTC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SRAMRWTC_reset(SIE_SRAMRWTC *p);
     SIGN32 SRAMRWTC_cmp  (SIE_SRAMRWTC *p, SIE_SRAMRWTC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SRAMRWTC_check(p,pie,pfx,hLOG) SRAMRWTC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SRAMRWTC_print(p,    pfx,hLOG) SRAMRWTC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SRAMRWTC
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE DTILE                   biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL0                (P)
///               %unsigned 1  tgEn_rstEn                0x1
///                                    ###
///                                    * TgEn reset enable bit. Default enabled. Write 0 to disable tgEn being cleared on displayTG frst
///                                    ###
///               %unsigned 1  crop_de2_en               0x0
///                                    ###
///                                    * Enable for cropped de2 to be used for cropping input read from Read Client's which is fed to DETILE-UPS420.
///                                    * Write 1 to enable it. Default disabled.
///                                    ###
///               %unsigned 3  cr_line_cnt               0x7
///                                    ###
///                                    * Croma Line Count Number.
///                                    * Should be programmed with tile_height-1
///                                    ###
///               %unsigned 1  tgclken_sel               0x0
///                                    ###
///                                    * FeTG clock enable select for fall back option. Write 1 to select mode without power saving option
///                                    * Default : Power Saving Mode
///                                    ###
///               %unsigned 1  memlbUPS420_cgEnb         0x1
///                                    ###
///                                    * Clock gating enable for Memory Line Buffer (mem : detileUPS420)
///                                    * Write 0 to clock gate this block. Default enabled.
///                                    ###
///               %unsigned 1  auto_flush                0x0
///                                    ###
///                                    * Flush enable
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00004 CTRL1                (P)
///               %unsigned 2  lineCnt_R1_rstval0        0x0
///                                    ###
///                                    * Programmable lineCnt reset value at soft reset or End of Frame. Defaule 0
///                                    ###
///               %unsigned 2  lineCnt_R1_rstval1        0x0
///                                    ###
///                                    * Programmable lineCnt reset value at Start of Frame. Defaule 0
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00008 CTRL2                (P)
///               %unsigned 1  read_sel_422SP            0x0
///               %unsigned 1  wr_ctrl1                  0x1
///               %unsigned 1  wr_ctrl2                  0x1
///               %%        29         # Stuffing bits...
///     @ 0x0000C CTRL4                (P-)
///               %unsigned 1  UPS420_4K_bypass          0x0
///                                    ###
///                                    * When 1 bypasses the ups420_422_tile (Detile) module.
///                                    * Used for clock gating
///                                    ###
///               %unsigned 1  bitmap40_bypass           0x1
///                                    ###
///                                    * Bypass bit for bitmap40 module in Detile/rotation path 1 - HardBypass
///                                    * 0 - In path
///                                    ###
///               %unsigned 1  dif_blk_en                0x0
///                                    ###
///                                    * Detile Input Formatter Block Enable.
///                                    * For bit should be enabled for detile and rotate functions.
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x00010 INVSCAN              (P)
///               %unsigned 1  bitmap128_Rd0_en          0x0
///               %unsigned 1  bitmap128_Rd1_en          0x0
///                                    ###
///                                    * [1] : enable for H Inverse Scan.
///                                    * [0] : Default Value.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00014 CTRL7                (P)
///               %unsigned 1  crop_de1_en               0x0
///                                    ###
///                                    * Selection bit for cropping support (before sending data to DTILE_UPS420_SP or downstream pipe)
///                                    * 0 : Default, no cropping support
///                                    * 1 : Input data read from ReadClient (MR0 and MR1) can be cropped before input to DTILE_UPS420 (programming alongwith crop_de2_en and using feTG controls for the same
///                                    ###
///               %unsigned 1  sp_dwa_10b_normal_mode    0x0
///                                    ###
///                                    * 1: used for only sp DWA 10 bit format support in normal mode.
///                                    * 0: default path (other formats)
///                                    ###
///               %unsigned 1  sp_dwa_10b_inverse_mode   0x0
///                                    ###
///                                    * 1: used for only sp DWA 10 bit format support in inverse scan mode.
///                                    * 0: default path (other formats)
///                                    ###
///               %unsigned 1  uv_mask_val0              0x0
///                                    ###
///                                    * Mask value for UV data at ups420_422_tile output
///                                    * (Not in use currently)
///                                    ###
///               %unsigned 1  uv_mask_val1              0x0
///                                    ###
///                                    * Mask value for UV data at ups420_422_tile output
///                                    * (Not in use currently)
///                                    ###
///               %unsigned 1  uv_mask_disable           0x0
///                                    ###
///                                    * Control bit to diable uv_mask generation for ups420_422_tile output
///                                    * Write 1 to disable UV mask generation. Default enabled.
///                                    * (Not in use currently)
///                                    ###
///               %%        26         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      24B, bits:      26b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DTILE
#define h_DTILE (){}

    #define     RA_DTILE_CTRL0                                 0x0000

    #define     BA_DTILE_CTRL0_tgEn_rstEn                      0x0000
    #define     B16DTILE_CTRL0_tgEn_rstEn                      0x0000
    #define   LSb32DTILE_CTRL0_tgEn_rstEn                         0
    #define   LSb16DTILE_CTRL0_tgEn_rstEn                         0
    #define       bDTILE_CTRL0_tgEn_rstEn                      1
    #define   MSK32DTILE_CTRL0_tgEn_rstEn                         0x00000001

    #define     BA_DTILE_CTRL0_crop_de2_en                     0x0000
    #define     B16DTILE_CTRL0_crop_de2_en                     0x0000
    #define   LSb32DTILE_CTRL0_crop_de2_en                        1
    #define   LSb16DTILE_CTRL0_crop_de2_en                        1
    #define       bDTILE_CTRL0_crop_de2_en                     1
    #define   MSK32DTILE_CTRL0_crop_de2_en                        0x00000002

    #define     BA_DTILE_CTRL0_cr_line_cnt                     0x0000
    #define     B16DTILE_CTRL0_cr_line_cnt                     0x0000
    #define   LSb32DTILE_CTRL0_cr_line_cnt                        2
    #define   LSb16DTILE_CTRL0_cr_line_cnt                        2
    #define       bDTILE_CTRL0_cr_line_cnt                     3
    #define   MSK32DTILE_CTRL0_cr_line_cnt                        0x0000001C

    #define     BA_DTILE_CTRL0_tgclken_sel                     0x0000
    #define     B16DTILE_CTRL0_tgclken_sel                     0x0000
    #define   LSb32DTILE_CTRL0_tgclken_sel                        5
    #define   LSb16DTILE_CTRL0_tgclken_sel                        5
    #define       bDTILE_CTRL0_tgclken_sel                     1
    #define   MSK32DTILE_CTRL0_tgclken_sel                        0x00000020

    #define     BA_DTILE_CTRL0_memlbUPS420_cgEnb               0x0000
    #define     B16DTILE_CTRL0_memlbUPS420_cgEnb               0x0000
    #define   LSb32DTILE_CTRL0_memlbUPS420_cgEnb                  6
    #define   LSb16DTILE_CTRL0_memlbUPS420_cgEnb                  6
    #define       bDTILE_CTRL0_memlbUPS420_cgEnb               1
    #define   MSK32DTILE_CTRL0_memlbUPS420_cgEnb                  0x00000040

    #define     BA_DTILE_CTRL0_auto_flush                      0x0000
    #define     B16DTILE_CTRL0_auto_flush                      0x0000
    #define   LSb32DTILE_CTRL0_auto_flush                         7
    #define   LSb16DTILE_CTRL0_auto_flush                         7
    #define       bDTILE_CTRL0_auto_flush                      1
    #define   MSK32DTILE_CTRL0_auto_flush                         0x00000080
    ///////////////////////////////////////////////////////////
    #define     RA_DTILE_CTRL1                                 0x0004

    #define     BA_DTILE_CTRL1_lineCnt_R1_rstval0              0x0004
    #define     B16DTILE_CTRL1_lineCnt_R1_rstval0              0x0004
    #define   LSb32DTILE_CTRL1_lineCnt_R1_rstval0                 0
    #define   LSb16DTILE_CTRL1_lineCnt_R1_rstval0                 0
    #define       bDTILE_CTRL1_lineCnt_R1_rstval0              2
    #define   MSK32DTILE_CTRL1_lineCnt_R1_rstval0                 0x00000003

    #define     BA_DTILE_CTRL1_lineCnt_R1_rstval1              0x0004
    #define     B16DTILE_CTRL1_lineCnt_R1_rstval1              0x0004
    #define   LSb32DTILE_CTRL1_lineCnt_R1_rstval1                 2
    #define   LSb16DTILE_CTRL1_lineCnt_R1_rstval1                 2
    #define       bDTILE_CTRL1_lineCnt_R1_rstval1              2
    #define   MSK32DTILE_CTRL1_lineCnt_R1_rstval1                 0x0000000C
    ///////////////////////////////////////////////////////////
    #define     RA_DTILE_CTRL2                                 0x0008

    #define     BA_DTILE_CTRL2_read_sel_422SP                  0x0008
    #define     B16DTILE_CTRL2_read_sel_422SP                  0x0008
    #define   LSb32DTILE_CTRL2_read_sel_422SP                     0
    #define   LSb16DTILE_CTRL2_read_sel_422SP                     0
    #define       bDTILE_CTRL2_read_sel_422SP                  1
    #define   MSK32DTILE_CTRL2_read_sel_422SP                     0x00000001

    #define     BA_DTILE_CTRL2_wr_ctrl1                        0x0008
    #define     B16DTILE_CTRL2_wr_ctrl1                        0x0008
    #define   LSb32DTILE_CTRL2_wr_ctrl1                           1
    #define   LSb16DTILE_CTRL2_wr_ctrl1                           1
    #define       bDTILE_CTRL2_wr_ctrl1                        1
    #define   MSK32DTILE_CTRL2_wr_ctrl1                           0x00000002

    #define     BA_DTILE_CTRL2_wr_ctrl2                        0x0008
    #define     B16DTILE_CTRL2_wr_ctrl2                        0x0008
    #define   LSb32DTILE_CTRL2_wr_ctrl2                           2
    #define   LSb16DTILE_CTRL2_wr_ctrl2                           2
    #define       bDTILE_CTRL2_wr_ctrl2                        1
    #define   MSK32DTILE_CTRL2_wr_ctrl2                           0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_DTILE_CTRL4                                 0x000C

    #define     BA_DTILE_CTRL4_UPS420_4K_bypass                0x000C
    #define     B16DTILE_CTRL4_UPS420_4K_bypass                0x000C
    #define   LSb32DTILE_CTRL4_UPS420_4K_bypass                   0
    #define   LSb16DTILE_CTRL4_UPS420_4K_bypass                   0
    #define       bDTILE_CTRL4_UPS420_4K_bypass                1
    #define   MSK32DTILE_CTRL4_UPS420_4K_bypass                   0x00000001

    #define     BA_DTILE_CTRL4_bitmap40_bypass                 0x000C
    #define     B16DTILE_CTRL4_bitmap40_bypass                 0x000C
    #define   LSb32DTILE_CTRL4_bitmap40_bypass                    1
    #define   LSb16DTILE_CTRL4_bitmap40_bypass                    1
    #define       bDTILE_CTRL4_bitmap40_bypass                 1
    #define   MSK32DTILE_CTRL4_bitmap40_bypass                    0x00000002

    #define     BA_DTILE_CTRL4_dif_blk_en                      0x000C
    #define     B16DTILE_CTRL4_dif_blk_en                      0x000C
    #define   LSb32DTILE_CTRL4_dif_blk_en                         2
    #define   LSb16DTILE_CTRL4_dif_blk_en                         2
    #define       bDTILE_CTRL4_dif_blk_en                      1
    #define   MSK32DTILE_CTRL4_dif_blk_en                         0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_DTILE_INVSCAN                               0x0010

    #define     BA_DTILE_INVSCAN_bitmap128_Rd0_en              0x0010
    #define     B16DTILE_INVSCAN_bitmap128_Rd0_en              0x0010
    #define   LSb32DTILE_INVSCAN_bitmap128_Rd0_en                 0
    #define   LSb16DTILE_INVSCAN_bitmap128_Rd0_en                 0
    #define       bDTILE_INVSCAN_bitmap128_Rd0_en              1
    #define   MSK32DTILE_INVSCAN_bitmap128_Rd0_en                 0x00000001

    #define     BA_DTILE_INVSCAN_bitmap128_Rd1_en              0x0010
    #define     B16DTILE_INVSCAN_bitmap128_Rd1_en              0x0010
    #define   LSb32DTILE_INVSCAN_bitmap128_Rd1_en                 1
    #define   LSb16DTILE_INVSCAN_bitmap128_Rd1_en                 1
    #define       bDTILE_INVSCAN_bitmap128_Rd1_en              1
    #define   MSK32DTILE_INVSCAN_bitmap128_Rd1_en                 0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_DTILE_CTRL7                                 0x0014

    #define     BA_DTILE_CTRL7_crop_de1_en                     0x0014
    #define     B16DTILE_CTRL7_crop_de1_en                     0x0014
    #define   LSb32DTILE_CTRL7_crop_de1_en                        0
    #define   LSb16DTILE_CTRL7_crop_de1_en                        0
    #define       bDTILE_CTRL7_crop_de1_en                     1
    #define   MSK32DTILE_CTRL7_crop_de1_en                        0x00000001

    #define     BA_DTILE_CTRL7_sp_dwa_10b_normal_mode          0x0014
    #define     B16DTILE_CTRL7_sp_dwa_10b_normal_mode          0x0014
    #define   LSb32DTILE_CTRL7_sp_dwa_10b_normal_mode             1
    #define   LSb16DTILE_CTRL7_sp_dwa_10b_normal_mode             1
    #define       bDTILE_CTRL7_sp_dwa_10b_normal_mode          1
    #define   MSK32DTILE_CTRL7_sp_dwa_10b_normal_mode             0x00000002

    #define     BA_DTILE_CTRL7_sp_dwa_10b_inverse_mode         0x0014
    #define     B16DTILE_CTRL7_sp_dwa_10b_inverse_mode         0x0014
    #define   LSb32DTILE_CTRL7_sp_dwa_10b_inverse_mode            2
    #define   LSb16DTILE_CTRL7_sp_dwa_10b_inverse_mode            2
    #define       bDTILE_CTRL7_sp_dwa_10b_inverse_mode         1
    #define   MSK32DTILE_CTRL7_sp_dwa_10b_inverse_mode            0x00000004

    #define     BA_DTILE_CTRL7_uv_mask_val0                    0x0014
    #define     B16DTILE_CTRL7_uv_mask_val0                    0x0014
    #define   LSb32DTILE_CTRL7_uv_mask_val0                       3
    #define   LSb16DTILE_CTRL7_uv_mask_val0                       3
    #define       bDTILE_CTRL7_uv_mask_val0                    1
    #define   MSK32DTILE_CTRL7_uv_mask_val0                       0x00000008

    #define     BA_DTILE_CTRL7_uv_mask_val1                    0x0014
    #define     B16DTILE_CTRL7_uv_mask_val1                    0x0014
    #define   LSb32DTILE_CTRL7_uv_mask_val1                       4
    #define   LSb16DTILE_CTRL7_uv_mask_val1                       4
    #define       bDTILE_CTRL7_uv_mask_val1                    1
    #define   MSK32DTILE_CTRL7_uv_mask_val1                       0x00000010

    #define     BA_DTILE_CTRL7_uv_mask_disable                 0x0014
    #define     B16DTILE_CTRL7_uv_mask_disable                 0x0014
    #define   LSb32DTILE_CTRL7_uv_mask_disable                    5
    #define   LSb16DTILE_CTRL7_uv_mask_disable                    5
    #define       bDTILE_CTRL7_uv_mask_disable                 1
    #define   MSK32DTILE_CTRL7_uv_mask_disable                    0x00000020
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DTILE {
    ///////////////////////////////////////////////////////////
    #define   GET32DTILE_CTRL0_tgEn_rstEn(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32DTILE_CTRL0_tgEn_rstEn(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16DTILE_CTRL0_tgEn_rstEn(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16DTILE_CTRL0_tgEn_rstEn(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32DTILE_CTRL0_crop_de2_en(r32)                _BFGET_(r32, 1, 1)
    #define   SET32DTILE_CTRL0_crop_de2_en(r32,v)              _BFSET_(r32, 1, 1,v)
    #define   GET16DTILE_CTRL0_crop_de2_en(r16)                _BFGET_(r16, 1, 1)
    #define   SET16DTILE_CTRL0_crop_de2_en(r16,v)              _BFSET_(r16, 1, 1,v)

    #define   GET32DTILE_CTRL0_cr_line_cnt(r32)                _BFGET_(r32, 4, 2)
    #define   SET32DTILE_CTRL0_cr_line_cnt(r32,v)              _BFSET_(r32, 4, 2,v)
    #define   GET16DTILE_CTRL0_cr_line_cnt(r16)                _BFGET_(r16, 4, 2)
    #define   SET16DTILE_CTRL0_cr_line_cnt(r16,v)              _BFSET_(r16, 4, 2,v)

    #define   GET32DTILE_CTRL0_tgclken_sel(r32)                _BFGET_(r32, 5, 5)
    #define   SET32DTILE_CTRL0_tgclken_sel(r32,v)              _BFSET_(r32, 5, 5,v)
    #define   GET16DTILE_CTRL0_tgclken_sel(r16)                _BFGET_(r16, 5, 5)
    #define   SET16DTILE_CTRL0_tgclken_sel(r16,v)              _BFSET_(r16, 5, 5,v)

    #define   GET32DTILE_CTRL0_memlbUPS420_cgEnb(r32)          _BFGET_(r32, 6, 6)
    #define   SET32DTILE_CTRL0_memlbUPS420_cgEnb(r32,v)        _BFSET_(r32, 6, 6,v)
    #define   GET16DTILE_CTRL0_memlbUPS420_cgEnb(r16)          _BFGET_(r16, 6, 6)
    #define   SET16DTILE_CTRL0_memlbUPS420_cgEnb(r16,v)        _BFSET_(r16, 6, 6,v)

    #define   GET32DTILE_CTRL0_auto_flush(r32)                 _BFGET_(r32, 7, 7)
    #define   SET32DTILE_CTRL0_auto_flush(r32,v)               _BFSET_(r32, 7, 7,v)
    #define   GET16DTILE_CTRL0_auto_flush(r16)                 _BFGET_(r16, 7, 7)
    #define   SET16DTILE_CTRL0_auto_flush(r16,v)               _BFSET_(r16, 7, 7,v)

    #define     w32DTILE_CTRL0                                 {\
            UNSG32 uCTRL0_tgEn_rstEn                           :  1;\
            UNSG32 uCTRL0_crop_de2_en                          :  1;\
            UNSG32 uCTRL0_cr_line_cnt                          :  3;\
            UNSG32 uCTRL0_tgclken_sel                          :  1;\
            UNSG32 uCTRL0_memlbUPS420_cgEnb                    :  1;\
            UNSG32 uCTRL0_auto_flush                           :  1;\
            UNSG32 RSVDx0_b8                                   : 24;\
          }
    union { UNSG32 u32DTILE_CTRL0;
            struct w32DTILE_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DTILE_CTRL1_lineCnt_R1_rstval0(r32)         _BFGET_(r32, 1, 0)
    #define   SET32DTILE_CTRL1_lineCnt_R1_rstval0(r32,v)       _BFSET_(r32, 1, 0,v)
    #define   GET16DTILE_CTRL1_lineCnt_R1_rstval0(r16)         _BFGET_(r16, 1, 0)
    #define   SET16DTILE_CTRL1_lineCnt_R1_rstval0(r16,v)       _BFSET_(r16, 1, 0,v)

    #define   GET32DTILE_CTRL1_lineCnt_R1_rstval1(r32)         _BFGET_(r32, 3, 2)
    #define   SET32DTILE_CTRL1_lineCnt_R1_rstval1(r32,v)       _BFSET_(r32, 3, 2,v)
    #define   GET16DTILE_CTRL1_lineCnt_R1_rstval1(r16)         _BFGET_(r16, 3, 2)
    #define   SET16DTILE_CTRL1_lineCnt_R1_rstval1(r16,v)       _BFSET_(r16, 3, 2,v)

    #define     w32DTILE_CTRL1                                 {\
            UNSG32 uCTRL1_lineCnt_R1_rstval0                   :  2;\
            UNSG32 uCTRL1_lineCnt_R1_rstval1                   :  2;\
            UNSG32 RSVDx4_b4                                   : 28;\
          }
    union { UNSG32 u32DTILE_CTRL1;
            struct w32DTILE_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DTILE_CTRL2_read_sel_422SP(r32)             _BFGET_(r32, 0, 0)
    #define   SET32DTILE_CTRL2_read_sel_422SP(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16DTILE_CTRL2_read_sel_422SP(r16)             _BFGET_(r16, 0, 0)
    #define   SET16DTILE_CTRL2_read_sel_422SP(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32DTILE_CTRL2_wr_ctrl1(r32)                   _BFGET_(r32, 1, 1)
    #define   SET32DTILE_CTRL2_wr_ctrl1(r32,v)                 _BFSET_(r32, 1, 1,v)
    #define   GET16DTILE_CTRL2_wr_ctrl1(r16)                   _BFGET_(r16, 1, 1)
    #define   SET16DTILE_CTRL2_wr_ctrl1(r16,v)                 _BFSET_(r16, 1, 1,v)

    #define   GET32DTILE_CTRL2_wr_ctrl2(r32)                   _BFGET_(r32, 2, 2)
    #define   SET32DTILE_CTRL2_wr_ctrl2(r32,v)                 _BFSET_(r32, 2, 2,v)
    #define   GET16DTILE_CTRL2_wr_ctrl2(r16)                   _BFGET_(r16, 2, 2)
    #define   SET16DTILE_CTRL2_wr_ctrl2(r16,v)                 _BFSET_(r16, 2, 2,v)

    #define     w32DTILE_CTRL2                                 {\
            UNSG32 uCTRL2_read_sel_422SP                       :  1;\
            UNSG32 uCTRL2_wr_ctrl1                             :  1;\
            UNSG32 uCTRL2_wr_ctrl2                             :  1;\
            UNSG32 RSVDx8_b3                                   : 29;\
          }
    union { UNSG32 u32DTILE_CTRL2;
            struct w32DTILE_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DTILE_CTRL4_UPS420_4K_bypass(r32)           _BFGET_(r32, 0, 0)
    #define   SET32DTILE_CTRL4_UPS420_4K_bypass(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16DTILE_CTRL4_UPS420_4K_bypass(r16)           _BFGET_(r16, 0, 0)
    #define   SET16DTILE_CTRL4_UPS420_4K_bypass(r16,v)         _BFSET_(r16, 0, 0,v)

    #define   GET32DTILE_CTRL4_bitmap40_bypass(r32)            _BFGET_(r32, 1, 1)
    #define   SET32DTILE_CTRL4_bitmap40_bypass(r32,v)          _BFSET_(r32, 1, 1,v)
    #define   GET16DTILE_CTRL4_bitmap40_bypass(r16)            _BFGET_(r16, 1, 1)
    #define   SET16DTILE_CTRL4_bitmap40_bypass(r16,v)          _BFSET_(r16, 1, 1,v)

    #define   GET32DTILE_CTRL4_dif_blk_en(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32DTILE_CTRL4_dif_blk_en(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16DTILE_CTRL4_dif_blk_en(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16DTILE_CTRL4_dif_blk_en(r16,v)               _BFSET_(r16, 2, 2,v)

    #define     w32DTILE_CTRL4                                 {\
            UNSG32 uCTRL4_UPS420_4K_bypass                     :  1;\
            UNSG32 uCTRL4_bitmap40_bypass                      :  1;\
            UNSG32 uCTRL4_dif_blk_en                           :  1;\
            UNSG32 RSVDxC_b3                                   : 29;\
          }
    union { UNSG32 u32DTILE_CTRL4;
            struct w32DTILE_CTRL4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DTILE_INVSCAN_bitmap128_Rd0_en(r32)         _BFGET_(r32, 0, 0)
    #define   SET32DTILE_INVSCAN_bitmap128_Rd0_en(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16DTILE_INVSCAN_bitmap128_Rd0_en(r16)         _BFGET_(r16, 0, 0)
    #define   SET16DTILE_INVSCAN_bitmap128_Rd0_en(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32DTILE_INVSCAN_bitmap128_Rd1_en(r32)         _BFGET_(r32, 1, 1)
    #define   SET32DTILE_INVSCAN_bitmap128_Rd1_en(r32,v)       _BFSET_(r32, 1, 1,v)
    #define   GET16DTILE_INVSCAN_bitmap128_Rd1_en(r16)         _BFGET_(r16, 1, 1)
    #define   SET16DTILE_INVSCAN_bitmap128_Rd1_en(r16,v)       _BFSET_(r16, 1, 1,v)

    #define     w32DTILE_INVSCAN                               {\
            UNSG32 uINVSCAN_bitmap128_Rd0_en                   :  1;\
            UNSG32 uINVSCAN_bitmap128_Rd1_en                   :  1;\
            UNSG32 RSVDx10_b2                                  : 30;\
          }
    union { UNSG32 u32DTILE_INVSCAN;
            struct w32DTILE_INVSCAN;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DTILE_CTRL7_crop_de1_en(r32)                _BFGET_(r32, 0, 0)
    #define   SET32DTILE_CTRL7_crop_de1_en(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16DTILE_CTRL7_crop_de1_en(r16)                _BFGET_(r16, 0, 0)
    #define   SET16DTILE_CTRL7_crop_de1_en(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32DTILE_CTRL7_sp_dwa_10b_normal_mode(r32)     _BFGET_(r32, 1, 1)
    #define   SET32DTILE_CTRL7_sp_dwa_10b_normal_mode(r32,v)   _BFSET_(r32, 1, 1,v)
    #define   GET16DTILE_CTRL7_sp_dwa_10b_normal_mode(r16)     _BFGET_(r16, 1, 1)
    #define   SET16DTILE_CTRL7_sp_dwa_10b_normal_mode(r16,v)   _BFSET_(r16, 1, 1,v)

    #define   GET32DTILE_CTRL7_sp_dwa_10b_inverse_mode(r32)    _BFGET_(r32, 2, 2)
    #define   SET32DTILE_CTRL7_sp_dwa_10b_inverse_mode(r32,v)  _BFSET_(r32, 2, 2,v)
    #define   GET16DTILE_CTRL7_sp_dwa_10b_inverse_mode(r16)    _BFGET_(r16, 2, 2)
    #define   SET16DTILE_CTRL7_sp_dwa_10b_inverse_mode(r16,v)  _BFSET_(r16, 2, 2,v)

    #define   GET32DTILE_CTRL7_uv_mask_val0(r32)               _BFGET_(r32, 3, 3)
    #define   SET32DTILE_CTRL7_uv_mask_val0(r32,v)             _BFSET_(r32, 3, 3,v)
    #define   GET16DTILE_CTRL7_uv_mask_val0(r16)               _BFGET_(r16, 3, 3)
    #define   SET16DTILE_CTRL7_uv_mask_val0(r16,v)             _BFSET_(r16, 3, 3,v)

    #define   GET32DTILE_CTRL7_uv_mask_val1(r32)               _BFGET_(r32, 4, 4)
    #define   SET32DTILE_CTRL7_uv_mask_val1(r32,v)             _BFSET_(r32, 4, 4,v)
    #define   GET16DTILE_CTRL7_uv_mask_val1(r16)               _BFGET_(r16, 4, 4)
    #define   SET16DTILE_CTRL7_uv_mask_val1(r16,v)             _BFSET_(r16, 4, 4,v)

    #define   GET32DTILE_CTRL7_uv_mask_disable(r32)            _BFGET_(r32, 5, 5)
    #define   SET32DTILE_CTRL7_uv_mask_disable(r32,v)          _BFSET_(r32, 5, 5,v)
    #define   GET16DTILE_CTRL7_uv_mask_disable(r16)            _BFGET_(r16, 5, 5)
    #define   SET16DTILE_CTRL7_uv_mask_disable(r16,v)          _BFSET_(r16, 5, 5,v)

    #define     w32DTILE_CTRL7                                 {\
            UNSG32 uCTRL7_crop_de1_en                          :  1;\
            UNSG32 uCTRL7_sp_dwa_10b_normal_mode               :  1;\
            UNSG32 uCTRL7_sp_dwa_10b_inverse_mode              :  1;\
            UNSG32 uCTRL7_uv_mask_val0                         :  1;\
            UNSG32 uCTRL7_uv_mask_val1                         :  1;\
            UNSG32 uCTRL7_uv_mask_disable                      :  1;\
            UNSG32 RSVDx14_b6                                  : 26;\
          }
    union { UNSG32 u32DTILE_CTRL7;
            struct w32DTILE_CTRL7;
          };
    ///////////////////////////////////////////////////////////
    } SIE_DTILE;

    typedef union  T32DTILE_CTRL0
          { UNSG32 u32;
            struct w32DTILE_CTRL0;
                 } T32DTILE_CTRL0;
    typedef union  T32DTILE_CTRL1
          { UNSG32 u32;
            struct w32DTILE_CTRL1;
                 } T32DTILE_CTRL1;
    typedef union  T32DTILE_CTRL2
          { UNSG32 u32;
            struct w32DTILE_CTRL2;
                 } T32DTILE_CTRL2;
    typedef union  T32DTILE_CTRL4
          { UNSG32 u32;
            struct w32DTILE_CTRL4;
                 } T32DTILE_CTRL4;
    typedef union  T32DTILE_INVSCAN
          { UNSG32 u32;
            struct w32DTILE_INVSCAN;
                 } T32DTILE_INVSCAN;
    typedef union  T32DTILE_CTRL7
          { UNSG32 u32;
            struct w32DTILE_CTRL7;
                 } T32DTILE_CTRL7;
    ///////////////////////////////////////////////////////////

    typedef union  TDTILE_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32DTILE_CTRL0;
                   };
                 } TDTILE_CTRL0;
    typedef union  TDTILE_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32DTILE_CTRL1;
                   };
                 } TDTILE_CTRL1;
    typedef union  TDTILE_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32DTILE_CTRL2;
                   };
                 } TDTILE_CTRL2;
    typedef union  TDTILE_CTRL4
          { UNSG32 u32[1];
            struct {
            struct w32DTILE_CTRL4;
                   };
                 } TDTILE_CTRL4;
    typedef union  TDTILE_INVSCAN
          { UNSG32 u32[1];
            struct {
            struct w32DTILE_INVSCAN;
                   };
                 } TDTILE_INVSCAN;
    typedef union  TDTILE_CTRL7
          { UNSG32 u32[1];
            struct {
            struct w32DTILE_CTRL7;
                   };
                 } TDTILE_CTRL7;

    ///////////////////////////////////////////////////////////
     SIGN32 DTILE_drvrd(SIE_DTILE *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DTILE_drvwr(SIE_DTILE *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DTILE_reset(SIE_DTILE *p);
     SIGN32 DTILE_cmp  (SIE_DTILE *p, SIE_DTILE *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DTILE_check(p,pie,pfx,hLOG) DTILE_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DTILE_print(p,    pfx,hLOG) DTILE_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DTILE
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE TILE                                     (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL0                (P-)
///               %unsigned 1  isp_start                 0x0
///                                    ###
///                                    * Start bit for ISP data input. Also used to start feTG.
///                                    * 0 : No effect on hardware.
///                                    * 1 : start to recieve ISP data input.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  isp_clear                 0x0
///                                    ###
///                                    * 0 : Don't clear, normal state.
///                                    * 1 : Clear ISP data input
///                                    * Also used to clear feTG
///                                    ###
///               %unsigned 1  isp_fifo_clear0           0x0
///                                    ###
///                                    * Reserved bit (not used currently)
///                                    * 1 : Reset isp_async_fifo pointers
///                                    * 0 : Normal state
///                                    ###
///               %unsigned 1  isp_fifo_clear1           0x0
///                                    ###
///                                    * Control bit to reset isp_async_fifo0 status
///                                    * 1 : Reset isp_async_fifo status
///                                    * 0 : Normal state
///                                    ###
///               %unsigned 1  start_mask_reset          0x0
///                                    ###
///                                    * Reset for start mask at the ISP input interface
///                                    * 1 : Reset the start mask
///                                    * 0 : Normal state
///                                    ###
///               %unsigned 1  tiler_en                  0x1
///                                    ###
///                                    * Write 1 to enable rs2tile block when required output format is tile(V8H8 or V8H6) format
///                                    * Used as clock gating enable for rs2tile block clocking
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x00004 CTRL1                (P)
///               %unsigned 1  clken_ctrl0               0x1
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of ready status from Write Client0
///                                    ###
///               %unsigned 1  clken_ctrl1               0x1
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of ready status from Write Client1
///                                    ###
///               %unsigned 1  clken_ctrl2               0x1
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of fifo empty status from isp_async_fifo0.
///                                    ###
///               %unsigned 3  idata_sel                 0x0
///                                    ###
///                                    * Input data control for ISP FIFO read data
///                                    * Value : Data pattern at FIFO output
///                                    * [000] : LSB aligned 8bpc data(YUV422/YUV420)
///                                    * [001] : 10bpc or MSB aligned 8bpc data (YUV422/YUV420)
///                                    * [010] : 10bpc data (YUV422/YUV420)
///                                    * [011] : 8bpc data without padding (YUV444/YUV422/YUV420)
///                                    * [1xx] : *Not used
///                                    * This register should be programmed based on the idata_fifo_sel value.
///                                    * Use [000] when idata_fifo_sel = 0 and isp interface has LSB aligned 8bpc data.
///                                    * Use [001] when idata_fifo_sel = 0 and isp interface has 10bpc or MSB aligned 8bpc data.
///                                    * Use [010] when idata_fifo_sel = 2.
///                                    * Use [011] when idata_fifo_sel = 1 or 3.
///                                    ###
///               %unsigned 3  idata_fifo_sel            0x0
///                                    ###
///                                    * Input data control for ISP FIFO write data
///                                    * Value : Data pattern at ISP Interface
///                                    * [000] : YUV 420/422 10bpc or MSB/LSB aligned 8bpc data
///                                    * [001] : LSB aligned 8bpc data (YUV420/422/444)
///                                    * [010] : 10bpc data (YUV422 or YUV420)
///                                    * [011] : MSB aligned 8bpc data (YUV420/422/444)
///                                    * [1xx] : *Not used
///                                    ###
///               %unsigned 1  read_en_422SP             0x0
///                                    ###
///                                    * Write 1 to indicate the YUV422 format at the input of rs2tile module.
///                                    * 1 : YUV422 input for rs2tile/YUV444 input
///                                    * 0 : YUV420 input for rs2tile
///                                    * This bit should be 1 for YUV444/RGB888 inputs
///                                    ###
///               %unsigned 1  rd_initval0               0x0
///                                    ###
///                                    * Initialization value for read Mask at the input of rs2tile (YUV420 cases)
///                                    ###
///               %unsigned 1  rd_initval1               0x1
///                                    ###
///                                    * Initialization value for read Mask at the input of rs2tile (YUV420 cases)
///                                    ###
///               %unsigned 1  rd_mask_sftrst            0x0
///                                    ###
///                                    * Soft reset to initialize read mask. Write 1 to initialize read mask with rd_initval0
///                                    ###
///               %unsigned 1  read_sel                  0x0
///                                    ###
///                                    * Control bit to use isp_data valid for tg_clken.
///                                    * 0 – do not consider ISP valid for tg_clken
///                                    * 1 – Consider ISP data valid for tg_clken
///                                    ###
///               %unsigned 1  crop_de_en                0x0
///                                    ###
///                                    * Enable for cropped de's to be used for rs2tile input. Used when the frame resolution is non-multiple of tile_width and tile_height.
///                                    * Write 1 to enable it. Default disabled.
///                                    ###
///               %unsigned 1  bitmap30_en               0x0
///                                    ###
///                                    * Enable bit for Bitmap 32 module in tile path
///                                    * 1 – Enable bitmap32
///                                    * 0 – Disable bitmap32
///                                    ###
///               %unsigned 4  tile_width                0x8
///                                    ###
///                                    * Number of pixels in each line of a tile.
///                                    * Supported values are 8 and 6.
///                                    ###
///               %unsigned 4  tile_depth                0x8
///                                    ###
///                                    * Number of lines in a tile.
///                                    * Supported values are 8 and 6.
///                                    ###
///               %unsigned 5  vsync_cnt_val             0x0
///                                    ###
///                                    * Vsync count value
///                                    * Number of vsync's at ISP before start receiving the data
///                                    ###
///               %unsigned 1  tgEof_en                  0x0
///                                    ###
///                                    * Enable bit to consider tgEof for resetting the start mask at ISP input interface
///                                    * 1 : Reset the start mask with tgEof
///                                    * 0 : Do not reset start mask with tgEof
///                                    ###
///               %%        2          # Stuffing bits...
///     @ 0x00008 CTRL3                (P)
///               %unsigned 32 inPix_tot                 0x64
///                                    ###
///                                    * Specifies the total number of pixels expected at the input of isp_async_fifo0. should be programmed with (ivres*ihres).
///                                    ###
///     @ 0x0000C CTRL4                (P)
///               %unsigned 12 xres                      0x40
///                                    ###
///                                    * Number of pixels in a frame line (horizontal resolution) at the output of Tiler
///                                    ###
///               %unsigned 12 yres                      0x40
///                                    ###
///                                    * Number of lines in a frame (vertical resolution) at the output of Tiler
///                                    ###
///               %unsigned 1  uv_mask_disable           0x0
///                                    ###
///                                    * Control bit to diable uv_mask generation for rs2tile input
///                                    * Write 1 to disable UV mask generation. Default enabled.
///                                    * (Not in use currently)
///                                    ###
///               %unsigned 1  uv_mask_val0              0x0
///                                    ###
///                                    * Mask value for UV data at rs2tile input
///                                    * (Not in use currently)
///                                    ###
///               %unsigned 1  uv_mask_val1              0x1
///                                    ###
///                                    * Mask value for UV data at rs2tile input
///                                    * (Not in use currently)
///                                    ###
///               %unsigned 1  uv_swap_reg               0x0
///                                    ###
///                                    * Control bit to swap U & V during tiling.
///                                    * 1 – Swap U & V
///                                    * 0 – U & V in same order as in input interface
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00010 rst                  (P-)
///               %unsigned 1  tile                      0x1
///                                    ###
///                                    * 0 : Reset for all flops in pClk domain of rs2tile block alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  memlb                     0x1
///                                    ###
///                                    * 0 : Reset for memory buffer used in tile module
///                                    * 1 : reset de-asserted, normal state.
///                                    * (Currently not used)
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00014 status               (R-)
///               %unsigned 1  isp_fifo_underflow        0x0
///                                    ###
///                                    * ISP input buffer underflow status
///                                    ###
///               %unsigned 1  isp_fifo_overflow         0x0
///                                    ###
///                                    * ISP input buffer overflow status
///                                    ###
///               %%        30         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      24B, bits:     100b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_TILE
#define h_TILE (){}

    #define     RA_TILE_CTRL0                                  0x0000

    #define     BA_TILE_CTRL0_isp_start                        0x0000
    #define     B16TILE_CTRL0_isp_start                        0x0000
    #define   LSb32TILE_CTRL0_isp_start                           0
    #define   LSb16TILE_CTRL0_isp_start                           0
    #define       bTILE_CTRL0_isp_start                        1
    #define   MSK32TILE_CTRL0_isp_start                           0x00000001

    #define     BA_TILE_CTRL0_isp_clear                        0x0000
    #define     B16TILE_CTRL0_isp_clear                        0x0000
    #define   LSb32TILE_CTRL0_isp_clear                           1
    #define   LSb16TILE_CTRL0_isp_clear                           1
    #define       bTILE_CTRL0_isp_clear                        1
    #define   MSK32TILE_CTRL0_isp_clear                           0x00000002

    #define     BA_TILE_CTRL0_isp_fifo_clear0                  0x0000
    #define     B16TILE_CTRL0_isp_fifo_clear0                  0x0000
    #define   LSb32TILE_CTRL0_isp_fifo_clear0                     2
    #define   LSb16TILE_CTRL0_isp_fifo_clear0                     2
    #define       bTILE_CTRL0_isp_fifo_clear0                  1
    #define   MSK32TILE_CTRL0_isp_fifo_clear0                     0x00000004

    #define     BA_TILE_CTRL0_isp_fifo_clear1                  0x0000
    #define     B16TILE_CTRL0_isp_fifo_clear1                  0x0000
    #define   LSb32TILE_CTRL0_isp_fifo_clear1                     3
    #define   LSb16TILE_CTRL0_isp_fifo_clear1                     3
    #define       bTILE_CTRL0_isp_fifo_clear1                  1
    #define   MSK32TILE_CTRL0_isp_fifo_clear1                     0x00000008

    #define     BA_TILE_CTRL0_start_mask_reset                 0x0000
    #define     B16TILE_CTRL0_start_mask_reset                 0x0000
    #define   LSb32TILE_CTRL0_start_mask_reset                    4
    #define   LSb16TILE_CTRL0_start_mask_reset                    4
    #define       bTILE_CTRL0_start_mask_reset                 1
    #define   MSK32TILE_CTRL0_start_mask_reset                    0x00000010

    #define     BA_TILE_CTRL0_tiler_en                         0x0000
    #define     B16TILE_CTRL0_tiler_en                         0x0000
    #define   LSb32TILE_CTRL0_tiler_en                            5
    #define   LSb16TILE_CTRL0_tiler_en                            5
    #define       bTILE_CTRL0_tiler_en                         1
    #define   MSK32TILE_CTRL0_tiler_en                            0x00000020
    ///////////////////////////////////////////////////////////
    #define     RA_TILE_CTRL1                                  0x0004

    #define     BA_TILE_CTRL1_clken_ctrl0                      0x0004
    #define     B16TILE_CTRL1_clken_ctrl0                      0x0004
    #define   LSb32TILE_CTRL1_clken_ctrl0                         0
    #define   LSb16TILE_CTRL1_clken_ctrl0                         0
    #define       bTILE_CTRL1_clken_ctrl0                      1
    #define   MSK32TILE_CTRL1_clken_ctrl0                         0x00000001

    #define     BA_TILE_CTRL1_clken_ctrl1                      0x0004
    #define     B16TILE_CTRL1_clken_ctrl1                      0x0004
    #define   LSb32TILE_CTRL1_clken_ctrl1                         1
    #define   LSb16TILE_CTRL1_clken_ctrl1                         1
    #define       bTILE_CTRL1_clken_ctrl1                      1
    #define   MSK32TILE_CTRL1_clken_ctrl1                         0x00000002

    #define     BA_TILE_CTRL1_clken_ctrl2                      0x0004
    #define     B16TILE_CTRL1_clken_ctrl2                      0x0004
    #define   LSb32TILE_CTRL1_clken_ctrl2                         2
    #define   LSb16TILE_CTRL1_clken_ctrl2                         2
    #define       bTILE_CTRL1_clken_ctrl2                      1
    #define   MSK32TILE_CTRL1_clken_ctrl2                         0x00000004

    #define     BA_TILE_CTRL1_idata_sel                        0x0004
    #define     B16TILE_CTRL1_idata_sel                        0x0004
    #define   LSb32TILE_CTRL1_idata_sel                           3
    #define   LSb16TILE_CTRL1_idata_sel                           3
    #define       bTILE_CTRL1_idata_sel                        3
    #define   MSK32TILE_CTRL1_idata_sel                           0x00000038

    #define     BA_TILE_CTRL1_idata_fifo_sel                   0x0004
    #define     B16TILE_CTRL1_idata_fifo_sel                   0x0004
    #define   LSb32TILE_CTRL1_idata_fifo_sel                      6
    #define   LSb16TILE_CTRL1_idata_fifo_sel                      6
    #define       bTILE_CTRL1_idata_fifo_sel                   3
    #define   MSK32TILE_CTRL1_idata_fifo_sel                      0x000001C0

    #define     BA_TILE_CTRL1_read_en_422SP                    0x0005
    #define     B16TILE_CTRL1_read_en_422SP                    0x0004
    #define   LSb32TILE_CTRL1_read_en_422SP                       9
    #define   LSb16TILE_CTRL1_read_en_422SP                       9
    #define       bTILE_CTRL1_read_en_422SP                    1
    #define   MSK32TILE_CTRL1_read_en_422SP                       0x00000200

    #define     BA_TILE_CTRL1_rd_initval0                      0x0005
    #define     B16TILE_CTRL1_rd_initval0                      0x0004
    #define   LSb32TILE_CTRL1_rd_initval0                         10
    #define   LSb16TILE_CTRL1_rd_initval0                         10
    #define       bTILE_CTRL1_rd_initval0                      1
    #define   MSK32TILE_CTRL1_rd_initval0                         0x00000400

    #define     BA_TILE_CTRL1_rd_initval1                      0x0005
    #define     B16TILE_CTRL1_rd_initval1                      0x0004
    #define   LSb32TILE_CTRL1_rd_initval1                         11
    #define   LSb16TILE_CTRL1_rd_initval1                         11
    #define       bTILE_CTRL1_rd_initval1                      1
    #define   MSK32TILE_CTRL1_rd_initval1                         0x00000800

    #define     BA_TILE_CTRL1_rd_mask_sftrst                   0x0005
    #define     B16TILE_CTRL1_rd_mask_sftrst                   0x0004
    #define   LSb32TILE_CTRL1_rd_mask_sftrst                      12
    #define   LSb16TILE_CTRL1_rd_mask_sftrst                      12
    #define       bTILE_CTRL1_rd_mask_sftrst                   1
    #define   MSK32TILE_CTRL1_rd_mask_sftrst                      0x00001000

    #define     BA_TILE_CTRL1_read_sel                         0x0005
    #define     B16TILE_CTRL1_read_sel                         0x0004
    #define   LSb32TILE_CTRL1_read_sel                            13
    #define   LSb16TILE_CTRL1_read_sel                            13
    #define       bTILE_CTRL1_read_sel                         1
    #define   MSK32TILE_CTRL1_read_sel                            0x00002000

    #define     BA_TILE_CTRL1_crop_de_en                       0x0005
    #define     B16TILE_CTRL1_crop_de_en                       0x0004
    #define   LSb32TILE_CTRL1_crop_de_en                          14
    #define   LSb16TILE_CTRL1_crop_de_en                          14
    #define       bTILE_CTRL1_crop_de_en                       1
    #define   MSK32TILE_CTRL1_crop_de_en                          0x00004000

    #define     BA_TILE_CTRL1_bitmap30_en                      0x0005
    #define     B16TILE_CTRL1_bitmap30_en                      0x0004
    #define   LSb32TILE_CTRL1_bitmap30_en                         15
    #define   LSb16TILE_CTRL1_bitmap30_en                         15
    #define       bTILE_CTRL1_bitmap30_en                      1
    #define   MSK32TILE_CTRL1_bitmap30_en                         0x00008000

    #define     BA_TILE_CTRL1_tile_width                       0x0006
    #define     B16TILE_CTRL1_tile_width                       0x0006
    #define   LSb32TILE_CTRL1_tile_width                          16
    #define   LSb16TILE_CTRL1_tile_width                          0
    #define       bTILE_CTRL1_tile_width                       4
    #define   MSK32TILE_CTRL1_tile_width                          0x000F0000

    #define     BA_TILE_CTRL1_tile_depth                       0x0006
    #define     B16TILE_CTRL1_tile_depth                       0x0006
    #define   LSb32TILE_CTRL1_tile_depth                          20
    #define   LSb16TILE_CTRL1_tile_depth                          4
    #define       bTILE_CTRL1_tile_depth                       4
    #define   MSK32TILE_CTRL1_tile_depth                          0x00F00000

    #define     BA_TILE_CTRL1_vsync_cnt_val                    0x0007
    #define     B16TILE_CTRL1_vsync_cnt_val                    0x0006
    #define   LSb32TILE_CTRL1_vsync_cnt_val                       24
    #define   LSb16TILE_CTRL1_vsync_cnt_val                       8
    #define       bTILE_CTRL1_vsync_cnt_val                    5
    #define   MSK32TILE_CTRL1_vsync_cnt_val                       0x1F000000

    #define     BA_TILE_CTRL1_tgEof_en                         0x0007
    #define     B16TILE_CTRL1_tgEof_en                         0x0006
    #define   LSb32TILE_CTRL1_tgEof_en                            29
    #define   LSb16TILE_CTRL1_tgEof_en                            13
    #define       bTILE_CTRL1_tgEof_en                         1
    #define   MSK32TILE_CTRL1_tgEof_en                            0x20000000
    ///////////////////////////////////////////////////////////
    #define     RA_TILE_CTRL3                                  0x0008

    #define     BA_TILE_CTRL3_inPix_tot                        0x0008
    #define     B16TILE_CTRL3_inPix_tot                        0x0008
    #define   LSb32TILE_CTRL3_inPix_tot                           0
    #define   LSb16TILE_CTRL3_inPix_tot                           0
    #define       bTILE_CTRL3_inPix_tot                        32
    #define   MSK32TILE_CTRL3_inPix_tot                           0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_TILE_CTRL4                                  0x000C

    #define     BA_TILE_CTRL4_xres                             0x000C
    #define     B16TILE_CTRL4_xres                             0x000C
    #define   LSb32TILE_CTRL4_xres                                0
    #define   LSb16TILE_CTRL4_xres                                0
    #define       bTILE_CTRL4_xres                             12
    #define   MSK32TILE_CTRL4_xres                                0x00000FFF

    #define     BA_TILE_CTRL4_yres                             0x000D
    #define     B16TILE_CTRL4_yres                             0x000C
    #define   LSb32TILE_CTRL4_yres                                12
    #define   LSb16TILE_CTRL4_yres                                12
    #define       bTILE_CTRL4_yres                             12
    #define   MSK32TILE_CTRL4_yres                                0x00FFF000

    #define     BA_TILE_CTRL4_uv_mask_disable                  0x000F
    #define     B16TILE_CTRL4_uv_mask_disable                  0x000E
    #define   LSb32TILE_CTRL4_uv_mask_disable                     24
    #define   LSb16TILE_CTRL4_uv_mask_disable                     8
    #define       bTILE_CTRL4_uv_mask_disable                  1
    #define   MSK32TILE_CTRL4_uv_mask_disable                     0x01000000

    #define     BA_TILE_CTRL4_uv_mask_val0                     0x000F
    #define     B16TILE_CTRL4_uv_mask_val0                     0x000E
    #define   LSb32TILE_CTRL4_uv_mask_val0                        25
    #define   LSb16TILE_CTRL4_uv_mask_val0                        9
    #define       bTILE_CTRL4_uv_mask_val0                     1
    #define   MSK32TILE_CTRL4_uv_mask_val0                        0x02000000

    #define     BA_TILE_CTRL4_uv_mask_val1                     0x000F
    #define     B16TILE_CTRL4_uv_mask_val1                     0x000E
    #define   LSb32TILE_CTRL4_uv_mask_val1                        26
    #define   LSb16TILE_CTRL4_uv_mask_val1                        10
    #define       bTILE_CTRL4_uv_mask_val1                     1
    #define   MSK32TILE_CTRL4_uv_mask_val1                        0x04000000

    #define     BA_TILE_CTRL4_uv_swap_reg                      0x000F
    #define     B16TILE_CTRL4_uv_swap_reg                      0x000E
    #define   LSb32TILE_CTRL4_uv_swap_reg                         27
    #define   LSb16TILE_CTRL4_uv_swap_reg                         11
    #define       bTILE_CTRL4_uv_swap_reg                      1
    #define   MSK32TILE_CTRL4_uv_swap_reg                         0x08000000
    ///////////////////////////////////////////////////////////
    #define     RA_TILE_rst                                    0x0010

    #define     BA_TILE_rst_tile                               0x0010
    #define     B16TILE_rst_tile                               0x0010
    #define   LSb32TILE_rst_tile                                  0
    #define   LSb16TILE_rst_tile                                  0
    #define       bTILE_rst_tile                               1
    #define   MSK32TILE_rst_tile                                  0x00000001

    #define     BA_TILE_rst_memlb                              0x0010
    #define     B16TILE_rst_memlb                              0x0010
    #define   LSb32TILE_rst_memlb                                 1
    #define   LSb16TILE_rst_memlb                                 1
    #define       bTILE_rst_memlb                              1
    #define   MSK32TILE_rst_memlb                                 0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_TILE_status                                 0x0014

    #define     BA_TILE_status_isp_fifo_underflow              0x0014
    #define     B16TILE_status_isp_fifo_underflow              0x0014
    #define   LSb32TILE_status_isp_fifo_underflow                 0
    #define   LSb16TILE_status_isp_fifo_underflow                 0
    #define       bTILE_status_isp_fifo_underflow              1
    #define   MSK32TILE_status_isp_fifo_underflow                 0x00000001

    #define     BA_TILE_status_isp_fifo_overflow               0x0014
    #define     B16TILE_status_isp_fifo_overflow               0x0014
    #define   LSb32TILE_status_isp_fifo_overflow                  1
    #define   LSb16TILE_status_isp_fifo_overflow                  1
    #define       bTILE_status_isp_fifo_overflow               1
    #define   MSK32TILE_status_isp_fifo_overflow                  0x00000002
    ///////////////////////////////////////////////////////////

    typedef struct SIE_TILE {
    ///////////////////////////////////////////////////////////
    #define   GET32TILE_CTRL0_isp_start(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32TILE_CTRL0_isp_start(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16TILE_CTRL0_isp_start(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16TILE_CTRL0_isp_start(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define   GET32TILE_CTRL0_isp_clear(r32)                   _BFGET_(r32, 1, 1)
    #define   SET32TILE_CTRL0_isp_clear(r32,v)                 _BFSET_(r32, 1, 1,v)
    #define   GET16TILE_CTRL0_isp_clear(r16)                   _BFGET_(r16, 1, 1)
    #define   SET16TILE_CTRL0_isp_clear(r16,v)                 _BFSET_(r16, 1, 1,v)

    #define   GET32TILE_CTRL0_isp_fifo_clear0(r32)             _BFGET_(r32, 2, 2)
    #define   SET32TILE_CTRL0_isp_fifo_clear0(r32,v)           _BFSET_(r32, 2, 2,v)
    #define   GET16TILE_CTRL0_isp_fifo_clear0(r16)             _BFGET_(r16, 2, 2)
    #define   SET16TILE_CTRL0_isp_fifo_clear0(r16,v)           _BFSET_(r16, 2, 2,v)

    #define   GET32TILE_CTRL0_isp_fifo_clear1(r32)             _BFGET_(r32, 3, 3)
    #define   SET32TILE_CTRL0_isp_fifo_clear1(r32,v)           _BFSET_(r32, 3, 3,v)
    #define   GET16TILE_CTRL0_isp_fifo_clear1(r16)             _BFGET_(r16, 3, 3)
    #define   SET16TILE_CTRL0_isp_fifo_clear1(r16,v)           _BFSET_(r16, 3, 3,v)

    #define   GET32TILE_CTRL0_start_mask_reset(r32)            _BFGET_(r32, 4, 4)
    #define   SET32TILE_CTRL0_start_mask_reset(r32,v)          _BFSET_(r32, 4, 4,v)
    #define   GET16TILE_CTRL0_start_mask_reset(r16)            _BFGET_(r16, 4, 4)
    #define   SET16TILE_CTRL0_start_mask_reset(r16,v)          _BFSET_(r16, 4, 4,v)

    #define   GET32TILE_CTRL0_tiler_en(r32)                    _BFGET_(r32, 5, 5)
    #define   SET32TILE_CTRL0_tiler_en(r32,v)                  _BFSET_(r32, 5, 5,v)
    #define   GET16TILE_CTRL0_tiler_en(r16)                    _BFGET_(r16, 5, 5)
    #define   SET16TILE_CTRL0_tiler_en(r16,v)                  _BFSET_(r16, 5, 5,v)

    #define     w32TILE_CTRL0                                  {\
            UNSG32 uCTRL0_isp_start                            :  1;\
            UNSG32 uCTRL0_isp_clear                            :  1;\
            UNSG32 uCTRL0_isp_fifo_clear0                      :  1;\
            UNSG32 uCTRL0_isp_fifo_clear1                      :  1;\
            UNSG32 uCTRL0_start_mask_reset                     :  1;\
            UNSG32 uCTRL0_tiler_en                             :  1;\
            UNSG32 RSVDx0_b6                                   : 26;\
          }
    union { UNSG32 u32TILE_CTRL0;
            struct w32TILE_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TILE_CTRL1_clken_ctrl0(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32TILE_CTRL1_clken_ctrl0(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16TILE_CTRL1_clken_ctrl0(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16TILE_CTRL1_clken_ctrl0(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32TILE_CTRL1_clken_ctrl1(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32TILE_CTRL1_clken_ctrl1(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16TILE_CTRL1_clken_ctrl1(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16TILE_CTRL1_clken_ctrl1(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32TILE_CTRL1_clken_ctrl2(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32TILE_CTRL1_clken_ctrl2(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16TILE_CTRL1_clken_ctrl2(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16TILE_CTRL1_clken_ctrl2(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32TILE_CTRL1_idata_sel(r32)                   _BFGET_(r32, 5, 3)
    #define   SET32TILE_CTRL1_idata_sel(r32,v)                 _BFSET_(r32, 5, 3,v)
    #define   GET16TILE_CTRL1_idata_sel(r16)                   _BFGET_(r16, 5, 3)
    #define   SET16TILE_CTRL1_idata_sel(r16,v)                 _BFSET_(r16, 5, 3,v)

    #define   GET32TILE_CTRL1_idata_fifo_sel(r32)              _BFGET_(r32, 8, 6)
    #define   SET32TILE_CTRL1_idata_fifo_sel(r32,v)            _BFSET_(r32, 8, 6,v)
    #define   GET16TILE_CTRL1_idata_fifo_sel(r16)              _BFGET_(r16, 8, 6)
    #define   SET16TILE_CTRL1_idata_fifo_sel(r16,v)            _BFSET_(r16, 8, 6,v)

    #define   GET32TILE_CTRL1_read_en_422SP(r32)               _BFGET_(r32, 9, 9)
    #define   SET32TILE_CTRL1_read_en_422SP(r32,v)             _BFSET_(r32, 9, 9,v)
    #define   GET16TILE_CTRL1_read_en_422SP(r16)               _BFGET_(r16, 9, 9)
    #define   SET16TILE_CTRL1_read_en_422SP(r16,v)             _BFSET_(r16, 9, 9,v)

    #define   GET32TILE_CTRL1_rd_initval0(r32)                 _BFGET_(r32,10,10)
    #define   SET32TILE_CTRL1_rd_initval0(r32,v)               _BFSET_(r32,10,10,v)
    #define   GET16TILE_CTRL1_rd_initval0(r16)                 _BFGET_(r16,10,10)
    #define   SET16TILE_CTRL1_rd_initval0(r16,v)               _BFSET_(r16,10,10,v)

    #define   GET32TILE_CTRL1_rd_initval1(r32)                 _BFGET_(r32,11,11)
    #define   SET32TILE_CTRL1_rd_initval1(r32,v)               _BFSET_(r32,11,11,v)
    #define   GET16TILE_CTRL1_rd_initval1(r16)                 _BFGET_(r16,11,11)
    #define   SET16TILE_CTRL1_rd_initval1(r16,v)               _BFSET_(r16,11,11,v)

    #define   GET32TILE_CTRL1_rd_mask_sftrst(r32)              _BFGET_(r32,12,12)
    #define   SET32TILE_CTRL1_rd_mask_sftrst(r32,v)            _BFSET_(r32,12,12,v)
    #define   GET16TILE_CTRL1_rd_mask_sftrst(r16)              _BFGET_(r16,12,12)
    #define   SET16TILE_CTRL1_rd_mask_sftrst(r16,v)            _BFSET_(r16,12,12,v)

    #define   GET32TILE_CTRL1_read_sel(r32)                    _BFGET_(r32,13,13)
    #define   SET32TILE_CTRL1_read_sel(r32,v)                  _BFSET_(r32,13,13,v)
    #define   GET16TILE_CTRL1_read_sel(r16)                    _BFGET_(r16,13,13)
    #define   SET16TILE_CTRL1_read_sel(r16,v)                  _BFSET_(r16,13,13,v)

    #define   GET32TILE_CTRL1_crop_de_en(r32)                  _BFGET_(r32,14,14)
    #define   SET32TILE_CTRL1_crop_de_en(r32,v)                _BFSET_(r32,14,14,v)
    #define   GET16TILE_CTRL1_crop_de_en(r16)                  _BFGET_(r16,14,14)
    #define   SET16TILE_CTRL1_crop_de_en(r16,v)                _BFSET_(r16,14,14,v)

    #define   GET32TILE_CTRL1_bitmap30_en(r32)                 _BFGET_(r32,15,15)
    #define   SET32TILE_CTRL1_bitmap30_en(r32,v)               _BFSET_(r32,15,15,v)
    #define   GET16TILE_CTRL1_bitmap30_en(r16)                 _BFGET_(r16,15,15)
    #define   SET16TILE_CTRL1_bitmap30_en(r16,v)               _BFSET_(r16,15,15,v)

    #define   GET32TILE_CTRL1_tile_width(r32)                  _BFGET_(r32,19,16)
    #define   SET32TILE_CTRL1_tile_width(r32,v)                _BFSET_(r32,19,16,v)
    #define   GET16TILE_CTRL1_tile_width(r16)                  _BFGET_(r16, 3, 0)
    #define   SET16TILE_CTRL1_tile_width(r16,v)                _BFSET_(r16, 3, 0,v)

    #define   GET32TILE_CTRL1_tile_depth(r32)                  _BFGET_(r32,23,20)
    #define   SET32TILE_CTRL1_tile_depth(r32,v)                _BFSET_(r32,23,20,v)
    #define   GET16TILE_CTRL1_tile_depth(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16TILE_CTRL1_tile_depth(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32TILE_CTRL1_vsync_cnt_val(r32)               _BFGET_(r32,28,24)
    #define   SET32TILE_CTRL1_vsync_cnt_val(r32,v)             _BFSET_(r32,28,24,v)
    #define   GET16TILE_CTRL1_vsync_cnt_val(r16)               _BFGET_(r16,12, 8)
    #define   SET16TILE_CTRL1_vsync_cnt_val(r16,v)             _BFSET_(r16,12, 8,v)

    #define   GET32TILE_CTRL1_tgEof_en(r32)                    _BFGET_(r32,29,29)
    #define   SET32TILE_CTRL1_tgEof_en(r32,v)                  _BFSET_(r32,29,29,v)
    #define   GET16TILE_CTRL1_tgEof_en(r16)                    _BFGET_(r16,13,13)
    #define   SET16TILE_CTRL1_tgEof_en(r16,v)                  _BFSET_(r16,13,13,v)

    #define     w32TILE_CTRL1                                  {\
            UNSG32 uCTRL1_clken_ctrl0                          :  1;\
            UNSG32 uCTRL1_clken_ctrl1                          :  1;\
            UNSG32 uCTRL1_clken_ctrl2                          :  1;\
            UNSG32 uCTRL1_idata_sel                            :  3;\
            UNSG32 uCTRL1_idata_fifo_sel                       :  3;\
            UNSG32 uCTRL1_read_en_422SP                        :  1;\
            UNSG32 uCTRL1_rd_initval0                          :  1;\
            UNSG32 uCTRL1_rd_initval1                          :  1;\
            UNSG32 uCTRL1_rd_mask_sftrst                       :  1;\
            UNSG32 uCTRL1_read_sel                             :  1;\
            UNSG32 uCTRL1_crop_de_en                           :  1;\
            UNSG32 uCTRL1_bitmap30_en                          :  1;\
            UNSG32 uCTRL1_tile_width                           :  4;\
            UNSG32 uCTRL1_tile_depth                           :  4;\
            UNSG32 uCTRL1_vsync_cnt_val                        :  5;\
            UNSG32 uCTRL1_tgEof_en                             :  1;\
            UNSG32 RSVDx4_b30                                  :  2;\
          }
    union { UNSG32 u32TILE_CTRL1;
            struct w32TILE_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TILE_CTRL3_inPix_tot(r32)                   _BFGET_(r32,31, 0)
    #define   SET32TILE_CTRL3_inPix_tot(r32,v)                 _BFSET_(r32,31, 0,v)

    #define     w32TILE_CTRL3                                  {\
            UNSG32 uCTRL3_inPix_tot                            : 32;\
          }
    union { UNSG32 u32TILE_CTRL3;
            struct w32TILE_CTRL3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TILE_CTRL4_xres(r32)                        _BFGET_(r32,11, 0)
    #define   SET32TILE_CTRL4_xres(r32,v)                      _BFSET_(r32,11, 0,v)
    #define   GET16TILE_CTRL4_xres(r16)                        _BFGET_(r16,11, 0)
    #define   SET16TILE_CTRL4_xres(r16,v)                      _BFSET_(r16,11, 0,v)

    #define   GET32TILE_CTRL4_yres(r32)                        _BFGET_(r32,23,12)
    #define   SET32TILE_CTRL4_yres(r32,v)                      _BFSET_(r32,23,12,v)

    #define   GET32TILE_CTRL4_uv_mask_disable(r32)             _BFGET_(r32,24,24)
    #define   SET32TILE_CTRL4_uv_mask_disable(r32,v)           _BFSET_(r32,24,24,v)
    #define   GET16TILE_CTRL4_uv_mask_disable(r16)             _BFGET_(r16, 8, 8)
    #define   SET16TILE_CTRL4_uv_mask_disable(r16,v)           _BFSET_(r16, 8, 8,v)

    #define   GET32TILE_CTRL4_uv_mask_val0(r32)                _BFGET_(r32,25,25)
    #define   SET32TILE_CTRL4_uv_mask_val0(r32,v)              _BFSET_(r32,25,25,v)
    #define   GET16TILE_CTRL4_uv_mask_val0(r16)                _BFGET_(r16, 9, 9)
    #define   SET16TILE_CTRL4_uv_mask_val0(r16,v)              _BFSET_(r16, 9, 9,v)

    #define   GET32TILE_CTRL4_uv_mask_val1(r32)                _BFGET_(r32,26,26)
    #define   SET32TILE_CTRL4_uv_mask_val1(r32,v)              _BFSET_(r32,26,26,v)
    #define   GET16TILE_CTRL4_uv_mask_val1(r16)                _BFGET_(r16,10,10)
    #define   SET16TILE_CTRL4_uv_mask_val1(r16,v)              _BFSET_(r16,10,10,v)

    #define   GET32TILE_CTRL4_uv_swap_reg(r32)                 _BFGET_(r32,27,27)
    #define   SET32TILE_CTRL4_uv_swap_reg(r32,v)               _BFSET_(r32,27,27,v)
    #define   GET16TILE_CTRL4_uv_swap_reg(r16)                 _BFGET_(r16,11,11)
    #define   SET16TILE_CTRL4_uv_swap_reg(r16,v)               _BFSET_(r16,11,11,v)

    #define     w32TILE_CTRL4                                  {\
            UNSG32 uCTRL4_xres                                 : 12;\
            UNSG32 uCTRL4_yres                                 : 12;\
            UNSG32 uCTRL4_uv_mask_disable                      :  1;\
            UNSG32 uCTRL4_uv_mask_val0                         :  1;\
            UNSG32 uCTRL4_uv_mask_val1                         :  1;\
            UNSG32 uCTRL4_uv_swap_reg                          :  1;\
            UNSG32 RSVDxC_b28                                  :  4;\
          }
    union { UNSG32 u32TILE_CTRL4;
            struct w32TILE_CTRL4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TILE_rst_tile(r32)                          _BFGET_(r32, 0, 0)
    #define   SET32TILE_rst_tile(r32,v)                        _BFSET_(r32, 0, 0,v)
    #define   GET16TILE_rst_tile(r16)                          _BFGET_(r16, 0, 0)
    #define   SET16TILE_rst_tile(r16,v)                        _BFSET_(r16, 0, 0,v)

    #define   GET32TILE_rst_memlb(r32)                         _BFGET_(r32, 1, 1)
    #define   SET32TILE_rst_memlb(r32,v)                       _BFSET_(r32, 1, 1,v)
    #define   GET16TILE_rst_memlb(r16)                         _BFGET_(r16, 1, 1)
    #define   SET16TILE_rst_memlb(r16,v)                       _BFSET_(r16, 1, 1,v)

    #define     w32TILE_rst                                    {\
            UNSG32 urst_tile                                   :  1;\
            UNSG32 urst_memlb                                  :  1;\
            UNSG32 RSVDx10_b2                                  : 30;\
          }
    union { UNSG32 u32TILE_rst;
            struct w32TILE_rst;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TILE_status_isp_fifo_underflow(r32)         _BFGET_(r32, 0, 0)
    #define   SET32TILE_status_isp_fifo_underflow(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16TILE_status_isp_fifo_underflow(r16)         _BFGET_(r16, 0, 0)
    #define   SET16TILE_status_isp_fifo_underflow(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32TILE_status_isp_fifo_overflow(r32)          _BFGET_(r32, 1, 1)
    #define   SET32TILE_status_isp_fifo_overflow(r32,v)        _BFSET_(r32, 1, 1,v)
    #define   GET16TILE_status_isp_fifo_overflow(r16)          _BFGET_(r16, 1, 1)
    #define   SET16TILE_status_isp_fifo_overflow(r16,v)        _BFSET_(r16, 1, 1,v)

    #define     w32TILE_status                                 {\
            UNSG32 ustatus_isp_fifo_underflow                  :  1;\
            UNSG32 ustatus_isp_fifo_overflow                   :  1;\
            UNSG32 RSVDx14_b2                                  : 30;\
          }
    union { UNSG32 u32TILE_status;
            struct w32TILE_status;
          };
    ///////////////////////////////////////////////////////////
    } SIE_TILE;

    typedef union  T32TILE_CTRL0
          { UNSG32 u32;
            struct w32TILE_CTRL0;
                 } T32TILE_CTRL0;
    typedef union  T32TILE_CTRL1
          { UNSG32 u32;
            struct w32TILE_CTRL1;
                 } T32TILE_CTRL1;
    typedef union  T32TILE_CTRL3
          { UNSG32 u32;
            struct w32TILE_CTRL3;
                 } T32TILE_CTRL3;
    typedef union  T32TILE_CTRL4
          { UNSG32 u32;
            struct w32TILE_CTRL4;
                 } T32TILE_CTRL4;
    typedef union  T32TILE_rst
          { UNSG32 u32;
            struct w32TILE_rst;
                 } T32TILE_rst;
    typedef union  T32TILE_status
          { UNSG32 u32;
            struct w32TILE_status;
                 } T32TILE_status;
    ///////////////////////////////////////////////////////////

    typedef union  TTILE_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32TILE_CTRL0;
                   };
                 } TTILE_CTRL0;
    typedef union  TTILE_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32TILE_CTRL1;
                   };
                 } TTILE_CTRL1;
    typedef union  TTILE_CTRL3
          { UNSG32 u32[1];
            struct {
            struct w32TILE_CTRL3;
                   };
                 } TTILE_CTRL3;
    typedef union  TTILE_CTRL4
          { UNSG32 u32[1];
            struct {
            struct w32TILE_CTRL4;
                   };
                 } TTILE_CTRL4;
    typedef union  TTILE_rst
          { UNSG32 u32[1];
            struct {
            struct w32TILE_rst;
                   };
                 } TTILE_rst;
    typedef union  TTILE_status
          { UNSG32 u32[1];
            struct {
            struct w32TILE_status;
                   };
                 } TTILE_status;

    ///////////////////////////////////////////////////////////
     SIGN32 TILE_drvrd(SIE_TILE *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 TILE_drvwr(SIE_TILE *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void TILE_reset(SIE_TILE *p);
     SIGN32 TILE_cmp  (SIE_TILE *p, SIE_TILE *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define TILE_check(p,pie,pfx,hLOG) TILE_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define TILE_print(p,    pfx,hLOG) TILE_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: TILE
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE TILEWRAP                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P-)
///               %unsigned 1  wr0_start                 0x0
///                                    ###
///                                    * start bit for write Client 0 -
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the client.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  wr1_start                 0x0
///                                    ###
///                                    * start bit for write Client 1 -
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the client.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  wr0_clear                 0x0
///                                    ###
///                                    * Clear bit to reset write client 0.
///                                    ###
///               %unsigned 1  wr1_clear                 0x0
///                                    ###
///                                    * Clear bit to reset write client 1.
///                                    ###
///               %unsigned 1  chroma_data_sel           0x0
///                                    ###
///                                    * Chroma data bit control at writeClient1 input
///                                    * 1 : 8 bit data support
///                                    * 0 : 10 bit data support
///                                    ###
///               %unsigned 3  luma_data_sel             0x0
///                                    ###
///                                    * Luma data bit control at writeClient0 input
///                                    * 000: 10 bit 420SP luma support
///                                    * 001: 8 bit 420SP luma support
///                                    * 010: 10 bit 422Pack support
///                                    * 011: 8 bit 422Pack support
///                                    * 100: 8 bit 444Pack support (Only for tile path)
///                                    ###
///               %unsigned 1  420sp_wrbk                0x1
///                                    ###
///                                    * Control bit to clock gate the writeClient1 path
///                                    * 1: 420 sp supported
///                                    * 0: No support for write client 1.(tied with zero)
///                                    ###
///               %unsigned 1  422sp_wren                0x0
///                                    ###
///                                    * 1 : 422 SP support at write Client
///                                    * 0 (default) : No 422 SP support
///                                    * Should be 0 for 420 SP format and 422 packed formats
///                                    ###
///               %unsigned 1  420sp_dwa10b_en           0x0
///                                    ###
///                                    * 1 : Enable YUV420SP-10b-DWA format
///                                    * 0 (default) : Disable YUV420SP-10b-DWA format
///                                    ###
///               %%        21         # Stuffing bits...
///     @ 0x00004                      (P)
///     # 0x00004 WR0
///               $WriteClient         WR0               REG
///                                    ###
///                                    * Write client registers for Client0.
///                                    ###
///     @ 0x00014                      (P)
///     # 0x00014 WR1
///               $WriteClient         WR1               REG
///                                    ###
///                                    * Write client registers for Client1.
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      36B, bits:     115b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_TILEWRAP
#define h_TILEWRAP (){}

    #define     RA_TILEWRAP_CTRL                               0x0000

    #define     BA_TILEWRAP_CTRL_wr0_start                     0x0000
    #define     B16TILEWRAP_CTRL_wr0_start                     0x0000
    #define   LSb32TILEWRAP_CTRL_wr0_start                        0
    #define   LSb16TILEWRAP_CTRL_wr0_start                        0
    #define       bTILEWRAP_CTRL_wr0_start                     1
    #define   MSK32TILEWRAP_CTRL_wr0_start                        0x00000001

    #define     BA_TILEWRAP_CTRL_wr1_start                     0x0000
    #define     B16TILEWRAP_CTRL_wr1_start                     0x0000
    #define   LSb32TILEWRAP_CTRL_wr1_start                        1
    #define   LSb16TILEWRAP_CTRL_wr1_start                        1
    #define       bTILEWRAP_CTRL_wr1_start                     1
    #define   MSK32TILEWRAP_CTRL_wr1_start                        0x00000002

    #define     BA_TILEWRAP_CTRL_wr0_clear                     0x0000
    #define     B16TILEWRAP_CTRL_wr0_clear                     0x0000
    #define   LSb32TILEWRAP_CTRL_wr0_clear                        2
    #define   LSb16TILEWRAP_CTRL_wr0_clear                        2
    #define       bTILEWRAP_CTRL_wr0_clear                     1
    #define   MSK32TILEWRAP_CTRL_wr0_clear                        0x00000004

    #define     BA_TILEWRAP_CTRL_wr1_clear                     0x0000
    #define     B16TILEWRAP_CTRL_wr1_clear                     0x0000
    #define   LSb32TILEWRAP_CTRL_wr1_clear                        3
    #define   LSb16TILEWRAP_CTRL_wr1_clear                        3
    #define       bTILEWRAP_CTRL_wr1_clear                     1
    #define   MSK32TILEWRAP_CTRL_wr1_clear                        0x00000008

    #define     BA_TILEWRAP_CTRL_chroma_data_sel               0x0000
    #define     B16TILEWRAP_CTRL_chroma_data_sel               0x0000
    #define   LSb32TILEWRAP_CTRL_chroma_data_sel                  4
    #define   LSb16TILEWRAP_CTRL_chroma_data_sel                  4
    #define       bTILEWRAP_CTRL_chroma_data_sel               1
    #define   MSK32TILEWRAP_CTRL_chroma_data_sel                  0x00000010

    #define     BA_TILEWRAP_CTRL_luma_data_sel                 0x0000
    #define     B16TILEWRAP_CTRL_luma_data_sel                 0x0000
    #define   LSb32TILEWRAP_CTRL_luma_data_sel                    5
    #define   LSb16TILEWRAP_CTRL_luma_data_sel                    5
    #define       bTILEWRAP_CTRL_luma_data_sel                 3
    #define   MSK32TILEWRAP_CTRL_luma_data_sel                    0x000000E0

    #define     BA_TILEWRAP_CTRL_420sp_wrbk                    0x0001
    #define     B16TILEWRAP_CTRL_420sp_wrbk                    0x0000
    #define   LSb32TILEWRAP_CTRL_420sp_wrbk                       8
    #define   LSb16TILEWRAP_CTRL_420sp_wrbk                       8
    #define       bTILEWRAP_CTRL_420sp_wrbk                    1
    #define   MSK32TILEWRAP_CTRL_420sp_wrbk                       0x00000100

    #define     BA_TILEWRAP_CTRL_422sp_wren                    0x0001
    #define     B16TILEWRAP_CTRL_422sp_wren                    0x0000
    #define   LSb32TILEWRAP_CTRL_422sp_wren                       9
    #define   LSb16TILEWRAP_CTRL_422sp_wren                       9
    #define       bTILEWRAP_CTRL_422sp_wren                    1
    #define   MSK32TILEWRAP_CTRL_422sp_wren                       0x00000200

    #define     BA_TILEWRAP_CTRL_420sp_dwa10b_en               0x0001
    #define     B16TILEWRAP_CTRL_420sp_dwa10b_en               0x0000
    #define   LSb32TILEWRAP_CTRL_420sp_dwa10b_en                  10
    #define   LSb16TILEWRAP_CTRL_420sp_dwa10b_en                  10
    #define       bTILEWRAP_CTRL_420sp_dwa10b_en               1
    #define   MSK32TILEWRAP_CTRL_420sp_dwa10b_en                  0x00000400
    ///////////////////////////////////////////////////////////
    #define     RA_TILEWRAP_WR0                                0x0004
    ///////////////////////////////////////////////////////////
    #define     RA_TILEWRAP_WR1                                0x0014
    ///////////////////////////////////////////////////////////

    typedef struct SIE_TILEWRAP {
    ///////////////////////////////////////////////////////////
    #define   GET32TILEWRAP_CTRL_wr0_start(r32)                _BFGET_(r32, 0, 0)
    #define   SET32TILEWRAP_CTRL_wr0_start(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16TILEWRAP_CTRL_wr0_start(r16)                _BFGET_(r16, 0, 0)
    #define   SET16TILEWRAP_CTRL_wr0_start(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32TILEWRAP_CTRL_wr1_start(r32)                _BFGET_(r32, 1, 1)
    #define   SET32TILEWRAP_CTRL_wr1_start(r32,v)              _BFSET_(r32, 1, 1,v)
    #define   GET16TILEWRAP_CTRL_wr1_start(r16)                _BFGET_(r16, 1, 1)
    #define   SET16TILEWRAP_CTRL_wr1_start(r16,v)              _BFSET_(r16, 1, 1,v)

    #define   GET32TILEWRAP_CTRL_wr0_clear(r32)                _BFGET_(r32, 2, 2)
    #define   SET32TILEWRAP_CTRL_wr0_clear(r32,v)              _BFSET_(r32, 2, 2,v)
    #define   GET16TILEWRAP_CTRL_wr0_clear(r16)                _BFGET_(r16, 2, 2)
    #define   SET16TILEWRAP_CTRL_wr0_clear(r16,v)              _BFSET_(r16, 2, 2,v)

    #define   GET32TILEWRAP_CTRL_wr1_clear(r32)                _BFGET_(r32, 3, 3)
    #define   SET32TILEWRAP_CTRL_wr1_clear(r32,v)              _BFSET_(r32, 3, 3,v)
    #define   GET16TILEWRAP_CTRL_wr1_clear(r16)                _BFGET_(r16, 3, 3)
    #define   SET16TILEWRAP_CTRL_wr1_clear(r16,v)              _BFSET_(r16, 3, 3,v)

    #define   GET32TILEWRAP_CTRL_chroma_data_sel(r32)          _BFGET_(r32, 4, 4)
    #define   SET32TILEWRAP_CTRL_chroma_data_sel(r32,v)        _BFSET_(r32, 4, 4,v)
    #define   GET16TILEWRAP_CTRL_chroma_data_sel(r16)          _BFGET_(r16, 4, 4)
    #define   SET16TILEWRAP_CTRL_chroma_data_sel(r16,v)        _BFSET_(r16, 4, 4,v)

    #define   GET32TILEWRAP_CTRL_luma_data_sel(r32)            _BFGET_(r32, 7, 5)
    #define   SET32TILEWRAP_CTRL_luma_data_sel(r32,v)          _BFSET_(r32, 7, 5,v)
    #define   GET16TILEWRAP_CTRL_luma_data_sel(r16)            _BFGET_(r16, 7, 5)
    #define   SET16TILEWRAP_CTRL_luma_data_sel(r16,v)          _BFSET_(r16, 7, 5,v)

    #define   GET32TILEWRAP_CTRL_420sp_wrbk(r32)               _BFGET_(r32, 8, 8)
    #define   SET32TILEWRAP_CTRL_420sp_wrbk(r32,v)             _BFSET_(r32, 8, 8,v)
    #define   GET16TILEWRAP_CTRL_420sp_wrbk(r16)               _BFGET_(r16, 8, 8)
    #define   SET16TILEWRAP_CTRL_420sp_wrbk(r16,v)             _BFSET_(r16, 8, 8,v)

    #define   GET32TILEWRAP_CTRL_422sp_wren(r32)               _BFGET_(r32, 9, 9)
    #define   SET32TILEWRAP_CTRL_422sp_wren(r32,v)             _BFSET_(r32, 9, 9,v)
    #define   GET16TILEWRAP_CTRL_422sp_wren(r16)               _BFGET_(r16, 9, 9)
    #define   SET16TILEWRAP_CTRL_422sp_wren(r16,v)             _BFSET_(r16, 9, 9,v)

    #define   GET32TILEWRAP_CTRL_420sp_dwa10b_en(r32)          _BFGET_(r32,10,10)
    #define   SET32TILEWRAP_CTRL_420sp_dwa10b_en(r32,v)        _BFSET_(r32,10,10,v)
    #define   GET16TILEWRAP_CTRL_420sp_dwa10b_en(r16)          _BFGET_(r16,10,10)
    #define   SET16TILEWRAP_CTRL_420sp_dwa10b_en(r16,v)        _BFSET_(r16,10,10,v)

    #define     w32TILEWRAP_CTRL                               {\
            UNSG32 uCTRL_wr0_start                             :  1;\
            UNSG32 uCTRL_wr1_start                             :  1;\
            UNSG32 uCTRL_wr0_clear                             :  1;\
            UNSG32 uCTRL_wr1_clear                             :  1;\
            UNSG32 uCTRL_chroma_data_sel                       :  1;\
            UNSG32 uCTRL_luma_data_sel                         :  3;\
            UNSG32 uCTRL_420sp_wrbk                            :  1;\
            UNSG32 uCTRL_422sp_wren                            :  1;\
            UNSG32 uCTRL_420sp_dwa10b_en                       :  1;\
            UNSG32 RSVDx0_b11                                  : 21;\
          }
    union { UNSG32 u32TILEWRAP_CTRL;
            struct w32TILEWRAP_CTRL;
          };
    ///////////////////////////////////////////////////////////
              SIE_WriteClient                                  ie_WR0;
    ///////////////////////////////////////////////////////////
              SIE_WriteClient                                  ie_WR1;
    ///////////////////////////////////////////////////////////
    } SIE_TILEWRAP;

    typedef union  T32TILEWRAP_CTRL
          { UNSG32 u32;
            struct w32TILEWRAP_CTRL;
                 } T32TILEWRAP_CTRL;
    ///////////////////////////////////////////////////////////

    typedef union  TTILEWRAP_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32TILEWRAP_CTRL;
                   };
                 } TTILEWRAP_CTRL;

    ///////////////////////////////////////////////////////////
     SIGN32 TILEWRAP_drvrd(SIE_TILEWRAP *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 TILEWRAP_drvwr(SIE_TILEWRAP *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void TILEWRAP_reset(SIE_TILEWRAP *p);
     SIGN32 TILEWRAP_cmp  (SIE_TILEWRAP *p, SIE_TILEWRAP *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define TILEWRAP_check(p,pie,pfx,hLOG) TILEWRAP_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define TILEWRAP_print(p,    pfx,hLOG) TILEWRAP_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: TILEWRAP
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE TILEPROC                biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 VP_CLKEN_CTRL        (P)
///               %unsigned 1  toggle                    0x0
///                                    ###
///                                    * 1: Toggle the clken.
///                                    * 0: clken is not toggled.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00004 DUMMY0               (P)
///               %unsigned 32 ctrl                      0x0
///                                    ###
///                                    * Do nothing, dummy! May be used for ECOs.
///                                    ###
///     @ 0x00008 VCNTSTS0             (R-)
///               %unsigned 16 VCNTSTS_fetg              0x0
///                                    ###
///                                    * Vcounter status for feTG.
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x0000C rst                  (P-)
///               %unsigned 1  detile                    0x1
///                                    ###
///                                    * 0 : Reset for all flops in pClk domain of DETILE-UPS420 block alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  memlb_ups420              0x1
///                                    ###
///                                    * 0 : Reset for all flops in pClk domain of memory line buffer for detileups420 block alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  isp                       0x1
///                                    ###
///                                    * 0 : Reset for all flops in ispClk domain in tiler path
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x00010                      (P)
///     # 0x00010 ClientIFm
///               $ClientIF            ClientIFm         REG
///                                    ###
///                                    * Read Client Interface control registers for detile and rotate
///                                    ###
///     @ 0x00040                      (P)
///     # 0x00040 UPS420_422Main_Y
///               $UPS_420_422         UPS420_422Main_Y  REG
///                                    ###
///                                    * UPS registers for 420-> 422 UPS & coefficients for Luma Component
///                                    ###
///     @ 0x0006C                      (P)
///     # 0x0006C UPS420_422Main_C
///               $UPS_420_422         UPS420_422Main_C  REG
///                                    ###
///                                    * UPS registers for 420-> 422 UPS & coefficients for Croma Component
///                                    ###
///     @ 0x00098                      (P)
///     # 0x00098 DTILE
///               $DTILE               DTILE             REG
///                                    ###
///                                    * Control registers of Detile & Rotate path
///                                    ###
///     @ 0x000B0                      (P)
///     # 0x000B0 feTG
///               $TG_MAIN             feTG              REG
///                                    ###
///                                    * dummy TG for (front end Video path).
///                                    ###
///     @ 0x000F8                      (P)
///     # 0x000F8 TILE
///               $TILE                TILE              REG
///     @ 0x00110                      (P)
///     # 0x00110 bitmap40
///               $BITMAP40            bitmap40          REG
///                                    ###
///                                    * BITMAP registers for mapping 40bits of pixel data before giving to main video pipe
///                                    * Default [1:1] mapping.
///                                    ###
///     @ 0x00130                      (P)
///     # 0x00130 bitmap32
///               $BITMAP32            bitmap32          REG
///                                    ###
///                                    * BITMAP registers for mapping 32bits of pixel data before giving to main video pipe
///                                    * Default [1:1] mapping.
///                                    ###
///     @ 0x00148                      (W-)
///     #         # Stuffing bytes...
///               %% 1472
///     @ 0x00200                      (P)
///     # 0x00200 DIF_Y
///               $DIF_128             DIF_Y             REG
///                                    ###
///                                    * DeTile Input Formatter related registers for Luma
///                                    ###
///     @ 0x00600                      (P)
///     # 0x00600 DIF_C
///               $DIF_128             DIF_C             REG
///                                    ###
///                                    * DeTile Input Formatter related registers for Croma
///                                    ###
///     @ 0x00A00                      (P)
///     # 0x00A00 TILEWRAP
///               $TILEWRAP            TILEWRAP          REG
///                                    ###
///                                    * Control registers of Write data logic for Detile&Rotate or tile path
///                                    ###
///     @ 0x00A24                      (P)
///     # 0x00A24 SRAMPWR_LINE_BUF
///               $SRAMPWR             SRAMPWR_LINE_BUF  REG
///                                    ###
///                                    * SRAM power control registers for Detile/Tile line buffer
///                                    ###
///     @ 0x00A28                      (P)
///     # 0x00A28 SRAMPWR_DIF_MEM
///               $SRAMPWR             SRAMPWR_DIF_MEM   REG
///                                    ###
///                                    * SRAM power control registers for DIF memory (only in Detile&Rotation path)
///                                    ###
///     @ 0x00A2C                      (W-)
///     #         # Stuffing bytes...
///               %% 3744
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    3072B, bits:    1983b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_TILEPROC
#define h_TILEPROC (){}

    #define     RA_TILEPROC_VP_CLKEN_CTRL                      0x0000

    #define     BA_TILEPROC_VP_CLKEN_CTRL_toggle               0x0000
    #define     B16TILEPROC_VP_CLKEN_CTRL_toggle               0x0000
    #define   LSb32TILEPROC_VP_CLKEN_CTRL_toggle                  0
    #define   LSb16TILEPROC_VP_CLKEN_CTRL_toggle                  0
    #define       bTILEPROC_VP_CLKEN_CTRL_toggle               1
    #define   MSK32TILEPROC_VP_CLKEN_CTRL_toggle                  0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_DUMMY0                             0x0004

    #define     BA_TILEPROC_DUMMY0_ctrl                        0x0004
    #define     B16TILEPROC_DUMMY0_ctrl                        0x0004
    #define   LSb32TILEPROC_DUMMY0_ctrl                           0
    #define   LSb16TILEPROC_DUMMY0_ctrl                           0
    #define       bTILEPROC_DUMMY0_ctrl                        32
    #define   MSK32TILEPROC_DUMMY0_ctrl                           0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_VCNTSTS0                           0x0008

    #define     BA_TILEPROC_VCNTSTS0_VCNTSTS_fetg              0x0008
    #define     B16TILEPROC_VCNTSTS0_VCNTSTS_fetg              0x0008
    #define   LSb32TILEPROC_VCNTSTS0_VCNTSTS_fetg                 0
    #define   LSb16TILEPROC_VCNTSTS0_VCNTSTS_fetg                 0
    #define       bTILEPROC_VCNTSTS0_VCNTSTS_fetg              16
    #define   MSK32TILEPROC_VCNTSTS0_VCNTSTS_fetg                 0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_rst                                0x000C

    #define     BA_TILEPROC_rst_detile                         0x000C
    #define     B16TILEPROC_rst_detile                         0x000C
    #define   LSb32TILEPROC_rst_detile                            0
    #define   LSb16TILEPROC_rst_detile                            0
    #define       bTILEPROC_rst_detile                         1
    #define   MSK32TILEPROC_rst_detile                            0x00000001

    #define     BA_TILEPROC_rst_memlb_ups420                   0x000C
    #define     B16TILEPROC_rst_memlb_ups420                   0x000C
    #define   LSb32TILEPROC_rst_memlb_ups420                      1
    #define   LSb16TILEPROC_rst_memlb_ups420                      1
    #define       bTILEPROC_rst_memlb_ups420                   1
    #define   MSK32TILEPROC_rst_memlb_ups420                      0x00000002

    #define     BA_TILEPROC_rst_isp                            0x000C
    #define     B16TILEPROC_rst_isp                            0x000C
    #define   LSb32TILEPROC_rst_isp                               2
    #define   LSb16TILEPROC_rst_isp                               2
    #define       bTILEPROC_rst_isp                            1
    #define   MSK32TILEPROC_rst_isp                               0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_ClientIFm                          0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_UPS420_422Main_Y                   0x0040
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_UPS420_422Main_C                   0x006C
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_DTILE                              0x0098
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_feTG                               0x00B0
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_TILE                               0x00F8
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_bitmap40                           0x0110
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_bitmap32                           0x0130
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_DIF_Y                              0x0200
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_DIF_C                              0x0600
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_TILEWRAP                           0x0A00
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_SRAMPWR_LINE_BUF                   0x0A24
    ///////////////////////////////////////////////////////////
    #define     RA_TILEPROC_SRAMPWR_DIF_MEM                    0x0A28
    ///////////////////////////////////////////////////////////

    typedef struct SIE_TILEPROC {
    ///////////////////////////////////////////////////////////
    #define   GET32TILEPROC_VP_CLKEN_CTRL_toggle(r32)          _BFGET_(r32, 0, 0)
    #define   SET32TILEPROC_VP_CLKEN_CTRL_toggle(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16TILEPROC_VP_CLKEN_CTRL_toggle(r16)          _BFGET_(r16, 0, 0)
    #define   SET16TILEPROC_VP_CLKEN_CTRL_toggle(r16,v)        _BFSET_(r16, 0, 0,v)

    #define     w32TILEPROC_VP_CLKEN_CTRL                      {\
            UNSG32 uVP_CLKEN_CTRL_toggle                       :  1;\
            UNSG32 RSVDx0_b1                                   : 31;\
          }
    union { UNSG32 u32TILEPROC_VP_CLKEN_CTRL;
            struct w32TILEPROC_VP_CLKEN_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TILEPROC_DUMMY0_ctrl(r32)                   _BFGET_(r32,31, 0)
    #define   SET32TILEPROC_DUMMY0_ctrl(r32,v)                 _BFSET_(r32,31, 0,v)

    #define     w32TILEPROC_DUMMY0                             {\
            UNSG32 uDUMMY0_ctrl                                : 32;\
          }
    union { UNSG32 u32TILEPROC_DUMMY0;
            struct w32TILEPROC_DUMMY0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TILEPROC_VCNTSTS0_VCNTSTS_fetg(r32)         _BFGET_(r32,15, 0)
    #define   SET32TILEPROC_VCNTSTS0_VCNTSTS_fetg(r32,v)       _BFSET_(r32,15, 0,v)
    #define   GET16TILEPROC_VCNTSTS0_VCNTSTS_fetg(r16)         _BFGET_(r16,15, 0)
    #define   SET16TILEPROC_VCNTSTS0_VCNTSTS_fetg(r16,v)       _BFSET_(r16,15, 0,v)

    #define     w32TILEPROC_VCNTSTS0                           {\
            UNSG32 uVCNTSTS0_VCNTSTS_fetg                      : 16;\
            UNSG32 RSVDx8_b16                                  : 16;\
          }
    union { UNSG32 u32TILEPROC_VCNTSTS0;
            struct w32TILEPROC_VCNTSTS0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TILEPROC_rst_detile(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32TILEPROC_rst_detile(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16TILEPROC_rst_detile(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16TILEPROC_rst_detile(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32TILEPROC_rst_memlb_ups420(r32)              _BFGET_(r32, 1, 1)
    #define   SET32TILEPROC_rst_memlb_ups420(r32,v)            _BFSET_(r32, 1, 1,v)
    #define   GET16TILEPROC_rst_memlb_ups420(r16)              _BFGET_(r16, 1, 1)
    #define   SET16TILEPROC_rst_memlb_ups420(r16,v)            _BFSET_(r16, 1, 1,v)

    #define   GET32TILEPROC_rst_isp(r32)                       _BFGET_(r32, 2, 2)
    #define   SET32TILEPROC_rst_isp(r32,v)                     _BFSET_(r32, 2, 2,v)
    #define   GET16TILEPROC_rst_isp(r16)                       _BFGET_(r16, 2, 2)
    #define   SET16TILEPROC_rst_isp(r16,v)                     _BFSET_(r16, 2, 2,v)

    #define     w32TILEPROC_rst                                {\
            UNSG32 urst_detile                                 :  1;\
            UNSG32 urst_memlb_ups420                           :  1;\
            UNSG32 urst_isp                                    :  1;\
            UNSG32 RSVDxC_b3                                   : 29;\
          }
    union { UNSG32 u32TILEPROC_rst;
            struct w32TILEPROC_rst;
          };
    ///////////////////////////////////////////////////////////
              SIE_ClientIF                                     ie_ClientIFm;
    ///////////////////////////////////////////////////////////
              SIE_UPS_420_422                                  ie_UPS420_422Main_Y;
    ///////////////////////////////////////////////////////////
              SIE_UPS_420_422                                  ie_UPS420_422Main_C;
    ///////////////////////////////////////////////////////////
              SIE_DTILE                                        ie_DTILE;
    ///////////////////////////////////////////////////////////
              SIE_TG_MAIN                                      ie_feTG;
    ///////////////////////////////////////////////////////////
              SIE_TILE                                         ie_TILE;
    ///////////////////////////////////////////////////////////
              SIE_BITMAP40                                     ie_bitmap40;
    ///////////////////////////////////////////////////////////
              SIE_BITMAP32                                     ie_bitmap32;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx148                                    [184];
    ///////////////////////////////////////////////////////////
              SIE_DIF_128                                      ie_DIF_Y;
    ///////////////////////////////////////////////////////////
              SIE_DIF_128                                      ie_DIF_C;
    ///////////////////////////////////////////////////////////
              SIE_TILEWRAP                                     ie_TILEWRAP;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_LINE_BUF;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_DIF_MEM;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDxA2C                                    [468];
    ///////////////////////////////////////////////////////////
    } SIE_TILEPROC;

    typedef union  T32TILEPROC_VP_CLKEN_CTRL
          { UNSG32 u32;
            struct w32TILEPROC_VP_CLKEN_CTRL;
                 } T32TILEPROC_VP_CLKEN_CTRL;
    typedef union  T32TILEPROC_DUMMY0
          { UNSG32 u32;
            struct w32TILEPROC_DUMMY0;
                 } T32TILEPROC_DUMMY0;
    typedef union  T32TILEPROC_VCNTSTS0
          { UNSG32 u32;
            struct w32TILEPROC_VCNTSTS0;
                 } T32TILEPROC_VCNTSTS0;
    typedef union  T32TILEPROC_rst
          { UNSG32 u32;
            struct w32TILEPROC_rst;
                 } T32TILEPROC_rst;
    ///////////////////////////////////////////////////////////

    typedef union  TTILEPROC_VP_CLKEN_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32TILEPROC_VP_CLKEN_CTRL;
                   };
                 } TTILEPROC_VP_CLKEN_CTRL;
    typedef union  TTILEPROC_DUMMY0
          { UNSG32 u32[1];
            struct {
            struct w32TILEPROC_DUMMY0;
                   };
                 } TTILEPROC_DUMMY0;
    typedef union  TTILEPROC_VCNTSTS0
          { UNSG32 u32[1];
            struct {
            struct w32TILEPROC_VCNTSTS0;
                   };
                 } TTILEPROC_VCNTSTS0;
    typedef union  TTILEPROC_rst
          { UNSG32 u32[1];
            struct {
            struct w32TILEPROC_rst;
                   };
                 } TTILEPROC_rst;

    ///////////////////////////////////////////////////////////
     SIGN32 TILEPROC_drvrd(SIE_TILEPROC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 TILEPROC_drvwr(SIE_TILEPROC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void TILEPROC_reset(SIE_TILEPROC *p);
     SIGN32 TILEPROC_cmp  (SIE_TILEPROC *p, SIE_TILEPROC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define TILEPROC_check(p,pie,pfx,hLOG) TILEPROC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define TILEPROC_print(p,    pfx,hLOG) TILEPROC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: TILEPROC
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: tileproc.h
////////////////////////////////////////////////////////////

