//////
/// don't edit! auto-generated by docc: usb30Host.h
////////////////////////////////////////////////////////////
#ifndef usb30Host_h
#define usb30Host_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
///
/// $INTERFACE USB3_MAC                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 MAC_CTRL             (P)
///               %unsigned 1  bigendian_gs              0x0
///                                    ###
///                                    * Slave Big Endian Select. Selects Big Endian mode for the SoC bus
///                                    * Slave
///                                    ###
///               %unsigned 1  pme_en                    0x0
///                                    ###
///                                    * Enable signal for pme_generation. Enable the controller to
///                                    * assert pme_generation
///                                    ###
///               %unsigned 2  hub_port_overcurrent      0x0
///                                    ###
///                                    * This is one per port overcurrent indication of the root-hub
///                                    * ports.
///                                    * 0: No overcurrent
///                                    * 1: Overcurrent
///                                    * Lower bits are for USB 2.0 ports and higher bits are for USB3.0
///                                    * ports.
///                                    * Currently unused. Keep at 0.
///                                    ###
///               %unsigned 2  hub_port_perm_attach      0x0
///                                    ###
///                                    * Indicates if the device attached to a downstream port is
///                                    * permanently attached or not.
///                                    * 0: Not permanently attached
///                                    * 1: Permanently attached.
///                                    * Lower bits are for USB2.0 ports and higher bits are for USB3.0
///                                    * ports.
///                                    ###
///               %unsigned 1  host_u2_port_disable      0x0
///                                    ###
///                                    * USB2.0 Port Disable control.
///                                    * 0: Port Enabled
///                                    * 1: Port Disabled.
///                                    * When ‘1’, this signal stops reporting connect/disconnect events
///                                    * the port and keeps the port in disabled state.
///                                    * This signal should be either static or change only once from 0
///                                    * to 1 during operation and stay at 1 after that.
///                                    ###
///               %unsigned 1  host_u3_port_disable      0x0
///                                    ###
///                                    * USB3.0 Port Disable control.
///                                    * 0: Port Enabled
///                                    * 1: Port Disabled.
///                                    * When ‘1’, this signal stops reporting connect/disconnect events
///                                    * the port and keeps the port in disabled state.
///                                    * This signal should be either static or change only once from 0
///                                    * to 1 during operation and stay at 1 after that.
///                                    ###
///               %unsigned 1  host_port_power_control_present 0x0
///                                    ###
///                                    * This defines the bit [3] of the capability parameters
///                                    * (HCCPARAMS).
///                                    * 0: Indicates that the port does not have port power switches.
///                                    * 1: Indicates that the port has port power switches
///                                    ###
///               %unsigned 1  host_legacy_smi_pci_cmd_reg_wr 0x0
///                                    ###
///                                    * PCI command register write: one clock pulse.
///                                    * Keep this low if you are not using Legacy support
///                                    ###
///               %unsigned 1  host_legacy_smi_bar_wr    0x0
///                                    ###
///                                    * PCI Base Address register (BAR) write: one clock pulse.
///                                    * Keep this low if you are not using legacy support.
///                                    ###
///               %unsigned 1  host_msi_enable           0x0
///                                    ###
///                                    * This enables the pulse type interrupt signal (one bus clock
///                                    * cycle) ‘interrupt’ port instead of level sensitive interrupt.
///                                    ###
///               %unsigned 6  fladj_30mhz_reg           0x20
///                                    ###
///                                    * HS Jitter Adjustment. Connects to the FLADJ register defined in
///                                    * the xHCI spec.
///                                    ###
///               %unsigned 1  StartRxDetU3RxDet         0x0
///                                    ###
///                                    * This signal is the start receiver detection in U3/Rx.Detect.
///                                    ###
///               %unsigned 1  DisRxDetU3RxDet           0x0
///                                    ###
///                                    * This input signal requests the controller to stop issuing more
///                                    * PHY commands and release PIPE ownership. The controller
///                                    * acknowledges this request by deasserting the
///                                    * DisRxDetU3RxDet_ack signal. This signal is for Type-C support
///                                    ###
///               %unsigned 1  xhc_bme                   0x1
///                                    ###
///                                    * This signal is used to disable the bus mastering capability of
///                                    * xHC.
///                                    * 0: Bus mastering capability is disabled. The host controller
///                                    * cannot use the bus master interface
///                                    * 1: Bus mastering capability is enabled
///                                    ###
///               %unsigned 4  bus_filter_bypass         0xF
///                                    ###
///                                    * Disables the internal bus filters.
///                                    * [3:2] : Reserved
///                                    * [1] Bypass the filter for pipe3_PowerPresent for all U3 ports
///                                    * [0] Bypass the filter for utmiotg_vbusvalid all U2 ports
///                                    * In Host-only mode, internal bus filters are not needed therefore
///                                    * defaulted to 4'b1111
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x00004 MAC_STAT             (R-)
///               %unsigned 12 host_current_belt
///                                    ###
///                                    * Indicates the minimum value of all received BELT values and the
///                                    * BELT that is set by Set LTV command.
///                                    ###
///               %unsigned 1  pme_generation
///               %unsigned 2  hub_vbus_ctrl
///                                    ###
///                                    * Port power control for each downstream port
///                                    * 0: VBUS OFF
///                                    * 1: VBUS ON
///                                    * The lower bits are for USB2.0 ports and the higher bits are for
///                                    * USB3.0 SS ports.
///                                    ###
///               %unsigned 1  host_legacy_smi_interrupt
///                                    ###
///                                    * SMI interrupt: active high
///                                    ###
///               %unsigned 1  host_system_err
///                                    ###
///                                    * Indicates that a Host System Error has occurred as reflected in
///                                    * the USBSTS.HSE field. It can occur when the host controller
///                                    * encounters an ‘Error’ response in the AXI master bus. The
///                                    * typical software response to an HSE is to reset the controller.
///                                    * For more details refer to section 4.10.2.6 of the xHCI 1.0
///                                    * specification
///                                    ###
///               %unsigned 1  DisRxDetU3RxDet_ack
///                                    ###
///                                    * Acknowledgment of the DisRxDetU3RxDet. When this signal is 1’b1,
///                                    * the controller releases the ownership of the PIPE interface and
///                                    * does not issue PHY commands to the PIPE interface
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x00008 MAC_DEBUG0           (R-)
///               %unsigned 32 debug_31_0
///                                    ###
///                                    * Debug bus bits 31:0
///                                    ###
///     @ 0x0000C MAC_DEBUG1           (R-)
///               %unsigned 32 debug_63_32
///                                    ###
///                                    * Debug bus bits 63:32
///                                    ###
///     @ 0x00010 MAC_DEBUG2           (R-)
///               %unsigned 32 debug_95_64
///                                    ###
///                                    * Only debug [67:64] connected here for this specific MAC
///                                    * configuration
///                                    ###
///     @ 0x00014 MAC_LA0              (R-)
///               %unsigned 32 logic_analyzer_trace_31_0
///                                    ###
///                                    * Internal debug signals bits 31:0
///                                    ###
///     @ 0x00018 MAC_LA1              (R-)
///               %unsigned 32 logic_analyzer_trace_63_32
///                                    ###
///                                    * Internal debug signals bits 63:0
///                                    ###
///     @ 0x0001C MAC_DBG_SEL          (P)
///               %unsigned 4  dbg_sel
///                                    ###
///                                    * Selects which debug or logic_analyzer signals to send out to the
///                                    * pad dbg bus
///                                    * 4'b0000: debug[15:0]
///                                    * 4'b0001: debug[31:16]
///                                    * 4'b0010: debug[47:32]
///                                    * 4'b0011: debug[63:48]
///                                    * 4'b0100: debug[79:64]
///                                    * 4'b1000: logic_analyzer_trace[15:0]
///                                    * 4'b1001: logic_analyzer_trace[31:16]
///                                    * 4'b1010: logic_analyzer_trace[47:32]
///                                    * 4'b1011: logic_analyzer_trace[63:48]
///                                    * Others : debug[15:0]
///                                    ###
///               %%        28         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      32B, bits:     207b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_USB3_MAC
#define h_USB3_MAC (){}

    #define     RA_USB3_MAC_MAC_CTRL                           0x0000

    #define     BA_USB3_MAC_MAC_CTRL_bigendian_gs              0x0000
    #define     B16USB3_MAC_MAC_CTRL_bigendian_gs              0x0000
    #define   LSb32USB3_MAC_MAC_CTRL_bigendian_gs                 0
    #define   LSb16USB3_MAC_MAC_CTRL_bigendian_gs                 0
    #define       bUSB3_MAC_MAC_CTRL_bigendian_gs              1
    #define   MSK32USB3_MAC_MAC_CTRL_bigendian_gs                 0x00000001

    #define     BA_USB3_MAC_MAC_CTRL_pme_en                    0x0000
    #define     B16USB3_MAC_MAC_CTRL_pme_en                    0x0000
    #define   LSb32USB3_MAC_MAC_CTRL_pme_en                       1
    #define   LSb16USB3_MAC_MAC_CTRL_pme_en                       1
    #define       bUSB3_MAC_MAC_CTRL_pme_en                    1
    #define   MSK32USB3_MAC_MAC_CTRL_pme_en                       0x00000002

    #define     BA_USB3_MAC_MAC_CTRL_hub_port_overcurrent      0x0000
    #define     B16USB3_MAC_MAC_CTRL_hub_port_overcurrent      0x0000
    #define   LSb32USB3_MAC_MAC_CTRL_hub_port_overcurrent         2
    #define   LSb16USB3_MAC_MAC_CTRL_hub_port_overcurrent         2
    #define       bUSB3_MAC_MAC_CTRL_hub_port_overcurrent      2
    #define   MSK32USB3_MAC_MAC_CTRL_hub_port_overcurrent         0x0000000C

    #define     BA_USB3_MAC_MAC_CTRL_hub_port_perm_attach      0x0000
    #define     B16USB3_MAC_MAC_CTRL_hub_port_perm_attach      0x0000
    #define   LSb32USB3_MAC_MAC_CTRL_hub_port_perm_attach         4
    #define   LSb16USB3_MAC_MAC_CTRL_hub_port_perm_attach         4
    #define       bUSB3_MAC_MAC_CTRL_hub_port_perm_attach      2
    #define   MSK32USB3_MAC_MAC_CTRL_hub_port_perm_attach         0x00000030

    #define     BA_USB3_MAC_MAC_CTRL_host_u2_port_disable      0x0000
    #define     B16USB3_MAC_MAC_CTRL_host_u2_port_disable      0x0000
    #define   LSb32USB3_MAC_MAC_CTRL_host_u2_port_disable         6
    #define   LSb16USB3_MAC_MAC_CTRL_host_u2_port_disable         6
    #define       bUSB3_MAC_MAC_CTRL_host_u2_port_disable      1
    #define   MSK32USB3_MAC_MAC_CTRL_host_u2_port_disable         0x00000040

    #define     BA_USB3_MAC_MAC_CTRL_host_u3_port_disable      0x0000
    #define     B16USB3_MAC_MAC_CTRL_host_u3_port_disable      0x0000
    #define   LSb32USB3_MAC_MAC_CTRL_host_u3_port_disable         7
    #define   LSb16USB3_MAC_MAC_CTRL_host_u3_port_disable         7
    #define       bUSB3_MAC_MAC_CTRL_host_u3_port_disable      1
    #define   MSK32USB3_MAC_MAC_CTRL_host_u3_port_disable         0x00000080

    #define     BA_USB3_MAC_MAC_CTRL_host_port_power_control_present 0x0001
    #define     B16USB3_MAC_MAC_CTRL_host_port_power_control_present 0x0000
    #define   LSb32USB3_MAC_MAC_CTRL_host_port_power_control_present    8
    #define   LSb16USB3_MAC_MAC_CTRL_host_port_power_control_present    8
    #define       bUSB3_MAC_MAC_CTRL_host_port_power_control_present 1
    #define   MSK32USB3_MAC_MAC_CTRL_host_port_power_control_present    0x00000100

    #define     BA_USB3_MAC_MAC_CTRL_host_legacy_smi_pci_cmd_reg_wr 0x0001
    #define     B16USB3_MAC_MAC_CTRL_host_legacy_smi_pci_cmd_reg_wr 0x0000
    #define   LSb32USB3_MAC_MAC_CTRL_host_legacy_smi_pci_cmd_reg_wr    9
    #define   LSb16USB3_MAC_MAC_CTRL_host_legacy_smi_pci_cmd_reg_wr    9
    #define       bUSB3_MAC_MAC_CTRL_host_legacy_smi_pci_cmd_reg_wr 1
    #define   MSK32USB3_MAC_MAC_CTRL_host_legacy_smi_pci_cmd_reg_wr    0x00000200

    #define     BA_USB3_MAC_MAC_CTRL_host_legacy_smi_bar_wr    0x0001
    #define     B16USB3_MAC_MAC_CTRL_host_legacy_smi_bar_wr    0x0000
    #define   LSb32USB3_MAC_MAC_CTRL_host_legacy_smi_bar_wr       10
    #define   LSb16USB3_MAC_MAC_CTRL_host_legacy_smi_bar_wr       10
    #define       bUSB3_MAC_MAC_CTRL_host_legacy_smi_bar_wr    1
    #define   MSK32USB3_MAC_MAC_CTRL_host_legacy_smi_bar_wr       0x00000400

    #define     BA_USB3_MAC_MAC_CTRL_host_msi_enable           0x0001
    #define     B16USB3_MAC_MAC_CTRL_host_msi_enable           0x0000
    #define   LSb32USB3_MAC_MAC_CTRL_host_msi_enable              11
    #define   LSb16USB3_MAC_MAC_CTRL_host_msi_enable              11
    #define       bUSB3_MAC_MAC_CTRL_host_msi_enable           1
    #define   MSK32USB3_MAC_MAC_CTRL_host_msi_enable              0x00000800

    #define     BA_USB3_MAC_MAC_CTRL_fladj_30mhz_reg           0x0001
    #define     B16USB3_MAC_MAC_CTRL_fladj_30mhz_reg           0x0000
    #define   LSb32USB3_MAC_MAC_CTRL_fladj_30mhz_reg              12
    #define   LSb16USB3_MAC_MAC_CTRL_fladj_30mhz_reg              12
    #define       bUSB3_MAC_MAC_CTRL_fladj_30mhz_reg           6
    #define   MSK32USB3_MAC_MAC_CTRL_fladj_30mhz_reg              0x0003F000

    #define     BA_USB3_MAC_MAC_CTRL_StartRxDetU3RxDet         0x0002
    #define     B16USB3_MAC_MAC_CTRL_StartRxDetU3RxDet         0x0002
    #define   LSb32USB3_MAC_MAC_CTRL_StartRxDetU3RxDet            18
    #define   LSb16USB3_MAC_MAC_CTRL_StartRxDetU3RxDet            2
    #define       bUSB3_MAC_MAC_CTRL_StartRxDetU3RxDet         1
    #define   MSK32USB3_MAC_MAC_CTRL_StartRxDetU3RxDet            0x00040000

    #define     BA_USB3_MAC_MAC_CTRL_DisRxDetU3RxDet           0x0002
    #define     B16USB3_MAC_MAC_CTRL_DisRxDetU3RxDet           0x0002
    #define   LSb32USB3_MAC_MAC_CTRL_DisRxDetU3RxDet              19
    #define   LSb16USB3_MAC_MAC_CTRL_DisRxDetU3RxDet              3
    #define       bUSB3_MAC_MAC_CTRL_DisRxDetU3RxDet           1
    #define   MSK32USB3_MAC_MAC_CTRL_DisRxDetU3RxDet              0x00080000

    #define     BA_USB3_MAC_MAC_CTRL_xhc_bme                   0x0002
    #define     B16USB3_MAC_MAC_CTRL_xhc_bme                   0x0002
    #define   LSb32USB3_MAC_MAC_CTRL_xhc_bme                      20
    #define   LSb16USB3_MAC_MAC_CTRL_xhc_bme                      4
    #define       bUSB3_MAC_MAC_CTRL_xhc_bme                   1
    #define   MSK32USB3_MAC_MAC_CTRL_xhc_bme                      0x00100000

    #define     BA_USB3_MAC_MAC_CTRL_bus_filter_bypass         0x0002
    #define     B16USB3_MAC_MAC_CTRL_bus_filter_bypass         0x0002
    #define   LSb32USB3_MAC_MAC_CTRL_bus_filter_bypass            21
    #define   LSb16USB3_MAC_MAC_CTRL_bus_filter_bypass            5
    #define       bUSB3_MAC_MAC_CTRL_bus_filter_bypass         4
    #define   MSK32USB3_MAC_MAC_CTRL_bus_filter_bypass            0x01E00000
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_MAC_MAC_STAT                           0x0004

    #define     BA_USB3_MAC_MAC_STAT_host_current_belt         0x0004
    #define     B16USB3_MAC_MAC_STAT_host_current_belt         0x0004
    #define   LSb32USB3_MAC_MAC_STAT_host_current_belt            0
    #define   LSb16USB3_MAC_MAC_STAT_host_current_belt            0
    #define       bUSB3_MAC_MAC_STAT_host_current_belt         12
    #define   MSK32USB3_MAC_MAC_STAT_host_current_belt            0x00000FFF

    #define     BA_USB3_MAC_MAC_STAT_pme_generation            0x0005
    #define     B16USB3_MAC_MAC_STAT_pme_generation            0x0004
    #define   LSb32USB3_MAC_MAC_STAT_pme_generation               12
    #define   LSb16USB3_MAC_MAC_STAT_pme_generation               12
    #define       bUSB3_MAC_MAC_STAT_pme_generation            1
    #define   MSK32USB3_MAC_MAC_STAT_pme_generation               0x00001000

    #define     BA_USB3_MAC_MAC_STAT_hub_vbus_ctrl             0x0005
    #define     B16USB3_MAC_MAC_STAT_hub_vbus_ctrl             0x0004
    #define   LSb32USB3_MAC_MAC_STAT_hub_vbus_ctrl                13
    #define   LSb16USB3_MAC_MAC_STAT_hub_vbus_ctrl                13
    #define       bUSB3_MAC_MAC_STAT_hub_vbus_ctrl             2
    #define   MSK32USB3_MAC_MAC_STAT_hub_vbus_ctrl                0x00006000

    #define     BA_USB3_MAC_MAC_STAT_host_legacy_smi_interrupt 0x0005
    #define     B16USB3_MAC_MAC_STAT_host_legacy_smi_interrupt 0x0004
    #define   LSb32USB3_MAC_MAC_STAT_host_legacy_smi_interrupt    15
    #define   LSb16USB3_MAC_MAC_STAT_host_legacy_smi_interrupt    15
    #define       bUSB3_MAC_MAC_STAT_host_legacy_smi_interrupt 1
    #define   MSK32USB3_MAC_MAC_STAT_host_legacy_smi_interrupt    0x00008000

    #define     BA_USB3_MAC_MAC_STAT_host_system_err           0x0006
    #define     B16USB3_MAC_MAC_STAT_host_system_err           0x0006
    #define   LSb32USB3_MAC_MAC_STAT_host_system_err              16
    #define   LSb16USB3_MAC_MAC_STAT_host_system_err              0
    #define       bUSB3_MAC_MAC_STAT_host_system_err           1
    #define   MSK32USB3_MAC_MAC_STAT_host_system_err              0x00010000

    #define     BA_USB3_MAC_MAC_STAT_DisRxDetU3RxDet_ack       0x0006
    #define     B16USB3_MAC_MAC_STAT_DisRxDetU3RxDet_ack       0x0006
    #define   LSb32USB3_MAC_MAC_STAT_DisRxDetU3RxDet_ack          17
    #define   LSb16USB3_MAC_MAC_STAT_DisRxDetU3RxDet_ack          1
    #define       bUSB3_MAC_MAC_STAT_DisRxDetU3RxDet_ack       1
    #define   MSK32USB3_MAC_MAC_STAT_DisRxDetU3RxDet_ack          0x00020000
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_MAC_MAC_DEBUG0                         0x0008

    #define     BA_USB3_MAC_MAC_DEBUG0_debug_31_0              0x0008
    #define     B16USB3_MAC_MAC_DEBUG0_debug_31_0              0x0008
    #define   LSb32USB3_MAC_MAC_DEBUG0_debug_31_0                 0
    #define   LSb16USB3_MAC_MAC_DEBUG0_debug_31_0                 0
    #define       bUSB3_MAC_MAC_DEBUG0_debug_31_0              32
    #define   MSK32USB3_MAC_MAC_DEBUG0_debug_31_0                 0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_MAC_MAC_DEBUG1                         0x000C

    #define     BA_USB3_MAC_MAC_DEBUG1_debug_63_32             0x000C
    #define     B16USB3_MAC_MAC_DEBUG1_debug_63_32             0x000C
    #define   LSb32USB3_MAC_MAC_DEBUG1_debug_63_32                0
    #define   LSb16USB3_MAC_MAC_DEBUG1_debug_63_32                0
    #define       bUSB3_MAC_MAC_DEBUG1_debug_63_32             32
    #define   MSK32USB3_MAC_MAC_DEBUG1_debug_63_32                0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_MAC_MAC_DEBUG2                         0x0010

    #define     BA_USB3_MAC_MAC_DEBUG2_debug_95_64             0x0010
    #define     B16USB3_MAC_MAC_DEBUG2_debug_95_64             0x0010
    #define   LSb32USB3_MAC_MAC_DEBUG2_debug_95_64                0
    #define   LSb16USB3_MAC_MAC_DEBUG2_debug_95_64                0
    #define       bUSB3_MAC_MAC_DEBUG2_debug_95_64             32
    #define   MSK32USB3_MAC_MAC_DEBUG2_debug_95_64                0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_MAC_MAC_LA0                            0x0014

    #define     BA_USB3_MAC_MAC_LA0_logic_analyzer_trace_31_0  0x0014
    #define     B16USB3_MAC_MAC_LA0_logic_analyzer_trace_31_0  0x0014
    #define   LSb32USB3_MAC_MAC_LA0_logic_analyzer_trace_31_0     0
    #define   LSb16USB3_MAC_MAC_LA0_logic_analyzer_trace_31_0     0
    #define       bUSB3_MAC_MAC_LA0_logic_analyzer_trace_31_0  32
    #define   MSK32USB3_MAC_MAC_LA0_logic_analyzer_trace_31_0     0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_MAC_MAC_LA1                            0x0018

    #define     BA_USB3_MAC_MAC_LA1_logic_analyzer_trace_63_32 0x0018
    #define     B16USB3_MAC_MAC_LA1_logic_analyzer_trace_63_32 0x0018
    #define   LSb32USB3_MAC_MAC_LA1_logic_analyzer_trace_63_32    0
    #define   LSb16USB3_MAC_MAC_LA1_logic_analyzer_trace_63_32    0
    #define       bUSB3_MAC_MAC_LA1_logic_analyzer_trace_63_32 32
    #define   MSK32USB3_MAC_MAC_LA1_logic_analyzer_trace_63_32    0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_MAC_MAC_DBG_SEL                        0x001C

    #define     BA_USB3_MAC_MAC_DBG_SEL_dbg_sel                0x001C
    #define     B16USB3_MAC_MAC_DBG_SEL_dbg_sel                0x001C
    #define   LSb32USB3_MAC_MAC_DBG_SEL_dbg_sel                   0
    #define   LSb16USB3_MAC_MAC_DBG_SEL_dbg_sel                   0
    #define       bUSB3_MAC_MAC_DBG_SEL_dbg_sel                4
    #define   MSK32USB3_MAC_MAC_DBG_SEL_dbg_sel                   0x0000000F
    ///////////////////////////////////////////////////////////

    typedef struct SIE_USB3_MAC {
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_MAC_MAC_CTRL_bigendian_gs(r32)         _BFGET_(r32, 0, 0)
    #define   SET32USB3_MAC_MAC_CTRL_bigendian_gs(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16USB3_MAC_MAC_CTRL_bigendian_gs(r16)         _BFGET_(r16, 0, 0)
    #define   SET16USB3_MAC_MAC_CTRL_bigendian_gs(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32USB3_MAC_MAC_CTRL_pme_en(r32)               _BFGET_(r32, 1, 1)
    #define   SET32USB3_MAC_MAC_CTRL_pme_en(r32,v)             _BFSET_(r32, 1, 1,v)
    #define   GET16USB3_MAC_MAC_CTRL_pme_en(r16)               _BFGET_(r16, 1, 1)
    #define   SET16USB3_MAC_MAC_CTRL_pme_en(r16,v)             _BFSET_(r16, 1, 1,v)

    #define   GET32USB3_MAC_MAC_CTRL_hub_port_overcurrent(r32) _BFGET_(r32, 3, 2)
    #define   SET32USB3_MAC_MAC_CTRL_hub_port_overcurrent(r32,v) _BFSET_(r32, 3, 2,v)
    #define   GET16USB3_MAC_MAC_CTRL_hub_port_overcurrent(r16) _BFGET_(r16, 3, 2)
    #define   SET16USB3_MAC_MAC_CTRL_hub_port_overcurrent(r16,v) _BFSET_(r16, 3, 2,v)

    #define   GET32USB3_MAC_MAC_CTRL_hub_port_perm_attach(r32) _BFGET_(r32, 5, 4)
    #define   SET32USB3_MAC_MAC_CTRL_hub_port_perm_attach(r32,v) _BFSET_(r32, 5, 4,v)
    #define   GET16USB3_MAC_MAC_CTRL_hub_port_perm_attach(r16) _BFGET_(r16, 5, 4)
    #define   SET16USB3_MAC_MAC_CTRL_hub_port_perm_attach(r16,v) _BFSET_(r16, 5, 4,v)

    #define   GET32USB3_MAC_MAC_CTRL_host_u2_port_disable(r32) _BFGET_(r32, 6, 6)
    #define   SET32USB3_MAC_MAC_CTRL_host_u2_port_disable(r32,v) _BFSET_(r32, 6, 6,v)
    #define   GET16USB3_MAC_MAC_CTRL_host_u2_port_disable(r16) _BFGET_(r16, 6, 6)
    #define   SET16USB3_MAC_MAC_CTRL_host_u2_port_disable(r16,v) _BFSET_(r16, 6, 6,v)

    #define   GET32USB3_MAC_MAC_CTRL_host_u3_port_disable(r32) _BFGET_(r32, 7, 7)
    #define   SET32USB3_MAC_MAC_CTRL_host_u3_port_disable(r32,v) _BFSET_(r32, 7, 7,v)
    #define   GET16USB3_MAC_MAC_CTRL_host_u3_port_disable(r16) _BFGET_(r16, 7, 7)
    #define   SET16USB3_MAC_MAC_CTRL_host_u3_port_disable(r16,v) _BFSET_(r16, 7, 7,v)

    #define   GET32USB3_MAC_MAC_CTRL_host_port_power_control_present(r32) _BFGET_(r32, 8, 8)
    #define   SET32USB3_MAC_MAC_CTRL_host_port_power_control_present(r32,v) _BFSET_(r32, 8, 8,v)
    #define   GET16USB3_MAC_MAC_CTRL_host_port_power_control_present(r16) _BFGET_(r16, 8, 8)
    #define   SET16USB3_MAC_MAC_CTRL_host_port_power_control_present(r16,v) _BFSET_(r16, 8, 8,v)

    #define   GET32USB3_MAC_MAC_CTRL_host_legacy_smi_pci_cmd_reg_wr(r32) _BFGET_(r32, 9, 9)
    #define   SET32USB3_MAC_MAC_CTRL_host_legacy_smi_pci_cmd_reg_wr(r32,v) _BFSET_(r32, 9, 9,v)
    #define   GET16USB3_MAC_MAC_CTRL_host_legacy_smi_pci_cmd_reg_wr(r16) _BFGET_(r16, 9, 9)
    #define   SET16USB3_MAC_MAC_CTRL_host_legacy_smi_pci_cmd_reg_wr(r16,v) _BFSET_(r16, 9, 9,v)

    #define   GET32USB3_MAC_MAC_CTRL_host_legacy_smi_bar_wr(r32) _BFGET_(r32,10,10)
    #define   SET32USB3_MAC_MAC_CTRL_host_legacy_smi_bar_wr(r32,v) _BFSET_(r32,10,10,v)
    #define   GET16USB3_MAC_MAC_CTRL_host_legacy_smi_bar_wr(r16) _BFGET_(r16,10,10)
    #define   SET16USB3_MAC_MAC_CTRL_host_legacy_smi_bar_wr(r16,v) _BFSET_(r16,10,10,v)

    #define   GET32USB3_MAC_MAC_CTRL_host_msi_enable(r32)      _BFGET_(r32,11,11)
    #define   SET32USB3_MAC_MAC_CTRL_host_msi_enable(r32,v)    _BFSET_(r32,11,11,v)
    #define   GET16USB3_MAC_MAC_CTRL_host_msi_enable(r16)      _BFGET_(r16,11,11)
    #define   SET16USB3_MAC_MAC_CTRL_host_msi_enable(r16,v)    _BFSET_(r16,11,11,v)

    #define   GET32USB3_MAC_MAC_CTRL_fladj_30mhz_reg(r32)      _BFGET_(r32,17,12)
    #define   SET32USB3_MAC_MAC_CTRL_fladj_30mhz_reg(r32,v)    _BFSET_(r32,17,12,v)

    #define   GET32USB3_MAC_MAC_CTRL_StartRxDetU3RxDet(r32)    _BFGET_(r32,18,18)
    #define   SET32USB3_MAC_MAC_CTRL_StartRxDetU3RxDet(r32,v)  _BFSET_(r32,18,18,v)
    #define   GET16USB3_MAC_MAC_CTRL_StartRxDetU3RxDet(r16)    _BFGET_(r16, 2, 2)
    #define   SET16USB3_MAC_MAC_CTRL_StartRxDetU3RxDet(r16,v)  _BFSET_(r16, 2, 2,v)

    #define   GET32USB3_MAC_MAC_CTRL_DisRxDetU3RxDet(r32)      _BFGET_(r32,19,19)
    #define   SET32USB3_MAC_MAC_CTRL_DisRxDetU3RxDet(r32,v)    _BFSET_(r32,19,19,v)
    #define   GET16USB3_MAC_MAC_CTRL_DisRxDetU3RxDet(r16)      _BFGET_(r16, 3, 3)
    #define   SET16USB3_MAC_MAC_CTRL_DisRxDetU3RxDet(r16,v)    _BFSET_(r16, 3, 3,v)

    #define   GET32USB3_MAC_MAC_CTRL_xhc_bme(r32)              _BFGET_(r32,20,20)
    #define   SET32USB3_MAC_MAC_CTRL_xhc_bme(r32,v)            _BFSET_(r32,20,20,v)
    #define   GET16USB3_MAC_MAC_CTRL_xhc_bme(r16)              _BFGET_(r16, 4, 4)
    #define   SET16USB3_MAC_MAC_CTRL_xhc_bme(r16,v)            _BFSET_(r16, 4, 4,v)

    #define   GET32USB3_MAC_MAC_CTRL_bus_filter_bypass(r32)    _BFGET_(r32,24,21)
    #define   SET32USB3_MAC_MAC_CTRL_bus_filter_bypass(r32,v)  _BFSET_(r32,24,21,v)
    #define   GET16USB3_MAC_MAC_CTRL_bus_filter_bypass(r16)    _BFGET_(r16, 8, 5)
    #define   SET16USB3_MAC_MAC_CTRL_bus_filter_bypass(r16,v)  _BFSET_(r16, 8, 5,v)

    #define     w32USB3_MAC_MAC_CTRL                           {\
            UNSG32 uMAC_CTRL_bigendian_gs                      :  1;\
            UNSG32 uMAC_CTRL_pme_en                            :  1;\
            UNSG32 uMAC_CTRL_hub_port_overcurrent              :  2;\
            UNSG32 uMAC_CTRL_hub_port_perm_attach              :  2;\
            UNSG32 uMAC_CTRL_host_u2_port_disable              :  1;\
            UNSG32 uMAC_CTRL_host_u3_port_disable              :  1;\
            UNSG32 uMAC_CTRL_host_port_power_control_present   :  1;\
            UNSG32 uMAC_CTRL_host_legacy_smi_pci_cmd_reg_wr    :  1;\
            UNSG32 uMAC_CTRL_host_legacy_smi_bar_wr            :  1;\
            UNSG32 uMAC_CTRL_host_msi_enable                   :  1;\
            UNSG32 uMAC_CTRL_fladj_30mhz_reg                   :  6;\
            UNSG32 uMAC_CTRL_StartRxDetU3RxDet                 :  1;\
            UNSG32 uMAC_CTRL_DisRxDetU3RxDet                   :  1;\
            UNSG32 uMAC_CTRL_xhc_bme                           :  1;\
            UNSG32 uMAC_CTRL_bus_filter_bypass                 :  4;\
            UNSG32 RSVDx0_b25                                  :  7;\
          }
    union { UNSG32 u32USB3_MAC_MAC_CTRL;
            struct w32USB3_MAC_MAC_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_MAC_MAC_STAT_host_current_belt(r32)    _BFGET_(r32,11, 0)
    #define   SET32USB3_MAC_MAC_STAT_host_current_belt(r32,v)  _BFSET_(r32,11, 0,v)
    #define   GET16USB3_MAC_MAC_STAT_host_current_belt(r16)    _BFGET_(r16,11, 0)
    #define   SET16USB3_MAC_MAC_STAT_host_current_belt(r16,v)  _BFSET_(r16,11, 0,v)

    #define   GET32USB3_MAC_MAC_STAT_pme_generation(r32)       _BFGET_(r32,12,12)
    #define   SET32USB3_MAC_MAC_STAT_pme_generation(r32,v)     _BFSET_(r32,12,12,v)
    #define   GET16USB3_MAC_MAC_STAT_pme_generation(r16)       _BFGET_(r16,12,12)
    #define   SET16USB3_MAC_MAC_STAT_pme_generation(r16,v)     _BFSET_(r16,12,12,v)

    #define   GET32USB3_MAC_MAC_STAT_hub_vbus_ctrl(r32)        _BFGET_(r32,14,13)
    #define   SET32USB3_MAC_MAC_STAT_hub_vbus_ctrl(r32,v)      _BFSET_(r32,14,13,v)
    #define   GET16USB3_MAC_MAC_STAT_hub_vbus_ctrl(r16)        _BFGET_(r16,14,13)
    #define   SET16USB3_MAC_MAC_STAT_hub_vbus_ctrl(r16,v)      _BFSET_(r16,14,13,v)

    #define   GET32USB3_MAC_MAC_STAT_host_legacy_smi_interrupt(r32) _BFGET_(r32,15,15)
    #define   SET32USB3_MAC_MAC_STAT_host_legacy_smi_interrupt(r32,v) _BFSET_(r32,15,15,v)
    #define   GET16USB3_MAC_MAC_STAT_host_legacy_smi_interrupt(r16) _BFGET_(r16,15,15)
    #define   SET16USB3_MAC_MAC_STAT_host_legacy_smi_interrupt(r16,v) _BFSET_(r16,15,15,v)

    #define   GET32USB3_MAC_MAC_STAT_host_system_err(r32)      _BFGET_(r32,16,16)
    #define   SET32USB3_MAC_MAC_STAT_host_system_err(r32,v)    _BFSET_(r32,16,16,v)
    #define   GET16USB3_MAC_MAC_STAT_host_system_err(r16)      _BFGET_(r16, 0, 0)
    #define   SET16USB3_MAC_MAC_STAT_host_system_err(r16,v)    _BFSET_(r16, 0, 0,v)

    #define   GET32USB3_MAC_MAC_STAT_DisRxDetU3RxDet_ack(r32)  _BFGET_(r32,17,17)
    #define   SET32USB3_MAC_MAC_STAT_DisRxDetU3RxDet_ack(r32,v) _BFSET_(r32,17,17,v)
    #define   GET16USB3_MAC_MAC_STAT_DisRxDetU3RxDet_ack(r16)  _BFGET_(r16, 1, 1)
    #define   SET16USB3_MAC_MAC_STAT_DisRxDetU3RxDet_ack(r16,v) _BFSET_(r16, 1, 1,v)

    #define     w32USB3_MAC_MAC_STAT                           {\
            UNSG32 uMAC_STAT_host_current_belt                 : 12;\
            UNSG32 uMAC_STAT_pme_generation                    :  1;\
            UNSG32 uMAC_STAT_hub_vbus_ctrl                     :  2;\
            UNSG32 uMAC_STAT_host_legacy_smi_interrupt         :  1;\
            UNSG32 uMAC_STAT_host_system_err                   :  1;\
            UNSG32 uMAC_STAT_DisRxDetU3RxDet_ack               :  1;\
            UNSG32 RSVDx4_b18                                  : 14;\
          }
    union { UNSG32 u32USB3_MAC_MAC_STAT;
            struct w32USB3_MAC_MAC_STAT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_MAC_MAC_DEBUG0_debug_31_0(r32)         _BFGET_(r32,31, 0)
    #define   SET32USB3_MAC_MAC_DEBUG0_debug_31_0(r32,v)       _BFSET_(r32,31, 0,v)

    #define     w32USB3_MAC_MAC_DEBUG0                         {\
            UNSG32 uMAC_DEBUG0_debug_31_0                      : 32;\
          }
    union { UNSG32 u32USB3_MAC_MAC_DEBUG0;
            struct w32USB3_MAC_MAC_DEBUG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_MAC_MAC_DEBUG1_debug_63_32(r32)        _BFGET_(r32,31, 0)
    #define   SET32USB3_MAC_MAC_DEBUG1_debug_63_32(r32,v)      _BFSET_(r32,31, 0,v)

    #define     w32USB3_MAC_MAC_DEBUG1                         {\
            UNSG32 uMAC_DEBUG1_debug_63_32                     : 32;\
          }
    union { UNSG32 u32USB3_MAC_MAC_DEBUG1;
            struct w32USB3_MAC_MAC_DEBUG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_MAC_MAC_DEBUG2_debug_95_64(r32)        _BFGET_(r32,31, 0)
    #define   SET32USB3_MAC_MAC_DEBUG2_debug_95_64(r32,v)      _BFSET_(r32,31, 0,v)

    #define     w32USB3_MAC_MAC_DEBUG2                         {\
            UNSG32 uMAC_DEBUG2_debug_95_64                     : 32;\
          }
    union { UNSG32 u32USB3_MAC_MAC_DEBUG2;
            struct w32USB3_MAC_MAC_DEBUG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_MAC_MAC_LA0_logic_analyzer_trace_31_0(r32) _BFGET_(r32,31, 0)
    #define   SET32USB3_MAC_MAC_LA0_logic_analyzer_trace_31_0(r32,v) _BFSET_(r32,31, 0,v)

    #define     w32USB3_MAC_MAC_LA0                            {\
            UNSG32 uMAC_LA0_logic_analyzer_trace_31_0          : 32;\
          }
    union { UNSG32 u32USB3_MAC_MAC_LA0;
            struct w32USB3_MAC_MAC_LA0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_MAC_MAC_LA1_logic_analyzer_trace_63_32(r32) _BFGET_(r32,31, 0)
    #define   SET32USB3_MAC_MAC_LA1_logic_analyzer_trace_63_32(r32,v) _BFSET_(r32,31, 0,v)

    #define     w32USB3_MAC_MAC_LA1                            {\
            UNSG32 uMAC_LA1_logic_analyzer_trace_63_32         : 32;\
          }
    union { UNSG32 u32USB3_MAC_MAC_LA1;
            struct w32USB3_MAC_MAC_LA1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_MAC_MAC_DBG_SEL_dbg_sel(r32)           _BFGET_(r32, 3, 0)
    #define   SET32USB3_MAC_MAC_DBG_SEL_dbg_sel(r32,v)         _BFSET_(r32, 3, 0,v)
    #define   GET16USB3_MAC_MAC_DBG_SEL_dbg_sel(r16)           _BFGET_(r16, 3, 0)
    #define   SET16USB3_MAC_MAC_DBG_SEL_dbg_sel(r16,v)         _BFSET_(r16, 3, 0,v)

    #define     w32USB3_MAC_MAC_DBG_SEL                        {\
            UNSG32 uMAC_DBG_SEL_dbg_sel                        :  4;\
            UNSG32 RSVDx1C_b4                                  : 28;\
          }
    union { UNSG32 u32USB3_MAC_MAC_DBG_SEL;
            struct w32USB3_MAC_MAC_DBG_SEL;
          };
    ///////////////////////////////////////////////////////////
    } SIE_USB3_MAC;

    typedef union  T32USB3_MAC_MAC_CTRL
          { UNSG32 u32;
            struct w32USB3_MAC_MAC_CTRL;
                 } T32USB3_MAC_MAC_CTRL;
    typedef union  T32USB3_MAC_MAC_STAT
          { UNSG32 u32;
            struct w32USB3_MAC_MAC_STAT;
                 } T32USB3_MAC_MAC_STAT;
    typedef union  T32USB3_MAC_MAC_DEBUG0
          { UNSG32 u32;
            struct w32USB3_MAC_MAC_DEBUG0;
                 } T32USB3_MAC_MAC_DEBUG0;
    typedef union  T32USB3_MAC_MAC_DEBUG1
          { UNSG32 u32;
            struct w32USB3_MAC_MAC_DEBUG1;
                 } T32USB3_MAC_MAC_DEBUG1;
    typedef union  T32USB3_MAC_MAC_DEBUG2
          { UNSG32 u32;
            struct w32USB3_MAC_MAC_DEBUG2;
                 } T32USB3_MAC_MAC_DEBUG2;
    typedef union  T32USB3_MAC_MAC_LA0
          { UNSG32 u32;
            struct w32USB3_MAC_MAC_LA0;
                 } T32USB3_MAC_MAC_LA0;
    typedef union  T32USB3_MAC_MAC_LA1
          { UNSG32 u32;
            struct w32USB3_MAC_MAC_LA1;
                 } T32USB3_MAC_MAC_LA1;
    typedef union  T32USB3_MAC_MAC_DBG_SEL
          { UNSG32 u32;
            struct w32USB3_MAC_MAC_DBG_SEL;
                 } T32USB3_MAC_MAC_DBG_SEL;
    ///////////////////////////////////////////////////////////

    typedef union  TUSB3_MAC_MAC_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32USB3_MAC_MAC_CTRL;
                   };
                 } TUSB3_MAC_MAC_CTRL;
    typedef union  TUSB3_MAC_MAC_STAT
          { UNSG32 u32[1];
            struct {
            struct w32USB3_MAC_MAC_STAT;
                   };
                 } TUSB3_MAC_MAC_STAT;
    typedef union  TUSB3_MAC_MAC_DEBUG0
          { UNSG32 u32[1];
            struct {
            struct w32USB3_MAC_MAC_DEBUG0;
                   };
                 } TUSB3_MAC_MAC_DEBUG0;
    typedef union  TUSB3_MAC_MAC_DEBUG1
          { UNSG32 u32[1];
            struct {
            struct w32USB3_MAC_MAC_DEBUG1;
                   };
                 } TUSB3_MAC_MAC_DEBUG1;
    typedef union  TUSB3_MAC_MAC_DEBUG2
          { UNSG32 u32[1];
            struct {
            struct w32USB3_MAC_MAC_DEBUG2;
                   };
                 } TUSB3_MAC_MAC_DEBUG2;
    typedef union  TUSB3_MAC_MAC_LA0
          { UNSG32 u32[1];
            struct {
            struct w32USB3_MAC_MAC_LA0;
                   };
                 } TUSB3_MAC_MAC_LA0;
    typedef union  TUSB3_MAC_MAC_LA1
          { UNSG32 u32[1];
            struct {
            struct w32USB3_MAC_MAC_LA1;
                   };
                 } TUSB3_MAC_MAC_LA1;
    typedef union  TUSB3_MAC_MAC_DBG_SEL
          { UNSG32 u32[1];
            struct {
            struct w32USB3_MAC_MAC_DBG_SEL;
                   };
                 } TUSB3_MAC_MAC_DBG_SEL;

    ///////////////////////////////////////////////////////////
     SIGN32 USB3_MAC_drvrd(SIE_USB3_MAC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 USB3_MAC_drvwr(SIE_USB3_MAC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void USB3_MAC_reset(SIE_USB3_MAC *p);
     SIGN32 USB3_MAC_cmp  (SIE_USB3_MAC *p, SIE_USB3_MAC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define USB3_MAC_check(p,pie,pfx,hLOG) USB3_MAC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define USB3_MAC_print(p,    pfx,hLOG) USB3_MAC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: USB3_MAC
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE USB3_PHY                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 PIPE_CTRL            (P)
///               %unsigned 1  lane0_ext_pclk_req        0x0
///                                    ###
///                                    * Enables pipe_pclk output regardless of powerstate.
///                                    ###
///               %unsigned 1  lane0_tx2rx_loopbk        0x0
///                                    ###
///                                    * Data from the transmit predriver is looped back to the receiver
///                                    * slicers.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00004 PARAM_CTRL0          (P)
///               %unsigned 3  COMPDISTUNE               0x3
///                                    ###
///                                    * Disconnect Threshold Adjustment
///                                    * Adjusts the voltage level for the threshold used to detect a
///                                    * disconnect event at the host.
///                                    * 111 : +12%
///                                    * 110 : +10%
///                                    * 101 : +7%
///                                    * 100 : +3%
///                                    * 011 : +0%
///                                    * 010 : -4%
///                                    * 001 : -6%
///                                    * 000 : -9%
///                                    ###
///               %unsigned 3  SQRXTUNE                  0x3
///                                    ###
///                                    * Squelch Threshold Adjustment
///                                    * Adjusts the voltage level for the threshold used to detect valid
///                                    * high-speed data.
///                                    * 111 : -20%
///                                    * 110 : -15%
///                                    * 101 : -10%
///                                    * 100 : -5%
///                                    * 011 : +0%
///                                    * 010 : +5%
///                                    * 001 : +10%
///                                    * 000 : +15%
///                                    ###
///               %unsigned 4  TXFSLSTUNE                0x3
///                                    ###
///                                    * FS/LS Source Impedance Adjustment
///                                    * Adjusts the low- and full-speed single-ended source impedance
///                                    * while driving high.
///                                    * 1111 : -10.7%
///                                    * 0111 : --5.6%
///                                    * 0011 : 0%
///                                    * 0001 : +6.5%
///                                    * 0000 : +14%
///                                    ###
///               %unsigned 2  TXHSXVTUNE                0x3
///                                    ###
///                                    * Transmitter High-Speed Crossover Adjustment
///                                    * Adjusts at which the DP and DM signals cross while transmitting
///                                    * in HS mode.
///                                    * 11 : 0
///                                    * 10 : +15mV
///                                    * 01 : -15mV
///                                    * 00 : Reserved
///                                    ###
///               %unsigned 2  TXPREEMPAMPTUNE           0x0
///                                    ###
///                                    * HS Transmitter Pre-Emphasis Current Control
///                                    * Controls the amount of current sourced to DP and DM after J-to-K
///                                    * or K-to-J transition. The HS Transmitter pre-emphasis current is
///                                    * defined in terms of unit amounts. One unit amount is
///                                    * approximately 600uA and is defined as 1X pre-emphasis current.
///                                    * 11 : 3x pre-emphasis current
///                                    * 10 : 2x pre-emphasis current
///                                    * 01 : 1x pre-emphasis current
///                                    * 00 : Disabled
///                                    ###
///               %unsigned 1  TXPREEMPPULSETUNE         0x0
///                                    ###
///                                    * HS Transmitter Pre-Emphasis Duration Control
///                                    * Controls the duration for which the HS pre-emphasis current is
///                                    * sourced onto DP or DM. The HS Transmitter pre-emphasis duration
///                                    * is defined in terms of unit amounts. One unit of pre-emphasis
///                                    * duration is approximately 580 ps and is defined as 1X
///                                    * pre-emphasis duration. This signal is only valid if
///                                    * TXPREEMPAMPTUNE is not 0x0.
///                                    * 1 : Short
///                                    * 0 : Long
///                                    ###
///               %unsigned 2  TXRESTUNE                 0x1
///                                    ###
///                                    * USB Source Impedance Adjustment
///                                    * Some applications require additional devices to be added on the
///                                    * USB, such as a series switch, which can add significant series
///                                    * resistance. This adjusts the driver source impedance (for both
///                                    * pull-up/pull-down impedances in LS/FS mode and pull-down
///                                    * impedance in HS mode) to compensate for added series resistance
///                                    * on the USB.
///                                    * 11 : -5.6 ohm
///                                    * 10 : -3.6 ohm
///                                    * 01 : 0
///                                    * 00 : + 1.3 ohm
///                                    * Note: Any setting other than the default can result in source
///                                    * impedance variation across process, voltage and temperature
///                                    * conditions that does not meet USB 2.0 specification limits. Use
///                                    * the default setting unless the HS/FS/LS TX impedances are all
///                                    * skewed in the same direction away from the specification's
///                                    * nominal value (45 ohm) and are near or exceed the
///                                    * specification's limit (40.5 – 49.5 ohm)
///                                    ###
///               %unsigned 2  TXRISETUNE                0x1
///                                    ###
///                                    * HS Transmitter Rise/Fall Time Adjustment
///                                    * Adjusts the rise/fall times of the high-speed waveform.
///                                    * 11 : - 8.1%
///                                    * 10 : -7.2%
///                                    * 01 : 0
///                                    * 00 : +5.4%
///                                    ###
///               %unsigned 4  TXVREFTUNE                0x3
///                                    ###
///                                    * HS DC Voltage Level Adjustment
///                                    * Adjusts the high-speed DC level voltage.
///                                    * 1111 : +24%
///                                    * 1110 : +22%
///                                    * 1101 : +20%
///                                    * 1100 : +18%
///                                    * 1011 : +16%
///                                    * 1010 : +14%
///                                    * 1001 : +12%
///                                    * 1000 : +10%
///                                    * 0111 : +8%
///                                    * 0110 : +6%
///                                    * 0101 : +4%
///                                    * 0100 : +2%
///                                    * 0011 : +0%
///                                    * 0010 : -2%
///                                    * 0001 : -4%
///                                    * 0000 : -6%
///                                    ###
///               %unsigned 2  VDATREFTUNE               0x1
///                                    ###
///                                    * Data Detect Voltage Adjustment
///                                    * Adjusts the threshold voltage level (Vdat_ref) used to detect
///                                    * data during charger-type detection.
///                                    * 11 : -20%
///                                    * 10 : -10%
///                                    * 01 : 0
///                                    * 00 : +10%
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x00008 PARAM_CTRL1          (P)
///               %unsigned 3  los_bias                  0x2
///                                    ###
///                                    * Los-of-Signal Detector Threshold Level Control
///                                    * Sets the LOS detection threshold level.
///                                    * 111 : 135 mV
///                                    * 110 : 120 mV
///                                    * 101 : 105 mV
///                                    * 100 : 90 mV
///                                    * 011 : 75 mV
///                                    * 010 : 60 mV
///                                    * 001 : 45 mV
///                                    * 000 : Invalid
///                                    ###
///               %unsigned 5  los_level                 0x9
///                                    ###
///                                    * Loss-of-Signal Detector Sensitivity Level Control
///                                    * Reserved. Set to 0x9
///                                    ###
///               %unsigned 10 pcs_rx_los_mask_val       0x0
///                                    ###
///                                    * Configurable Loss-of-Signal Mask Width
///                                    * Sets the number of reference clock cycles to mask the incoming
///                                    * LFPS in U3 and U2 states. Masks the incoming LFPS for the
///                                    * number of reference clock cycles equal to the value of
///                                    * pcs_rx_los_mask_val[9:0]. This control filters out short,
///                                    * non-compliant LFPS glitches sent by a non-compliant host.
///                                    * For normal operation, set to a target mast interval of 10us
///                                    * (value = 10 us / Tref_clk). If the ref_clkdiv2 signal is used,
///                                    * the value = 10 us / (2*Tref_clk).
///                                    * Setting this  to 10'b0 disables masking.
///                                    ###
///               %unsigned 6  pcs_tx_deemph_3p5db       0x16
///                                    ###
///                                    * TX De-Emphasis at 3.5 dB
///                                    * This static value sets the TX driver de-emphasis value when
///                                    * pipe_tx_deemph[1:0] is set to 2'b01 (according to the PIPE
///                                    * specification). To enable tuning at the board level for RX eye
///                                    * compliance.
///                                    ###
///               %unsigned 6  pcs_tx_deemph_6db         0x17
///                                    ###
///                                    * TX De-Emphasis at 6 dB
///                                    * This static value sets the TX driver de-emphasis value when
///                                    * pipe_tx_deemph[1:0] is set to 2'b10 (according to the PIPE
///                                    * specification). Provided for completeness and as a second
///                                    * potential launch amplitude
///                                    ###
///               %%        2          # Stuffing bits...
///     @ 0x0000C PARAM_CTRL2          (P)
///               %unsigned 7  pcs_tx_swing_full         0x78
///                                    ###
///                                    * TX Amplitude (Full Swing Mode)
///                                    * This static value sets the launch amplitude of the transmitter.
///                                    * To enable tuning at the board level for RX eye compliance
///                                    ###
///               %unsigned 5  lane0_tx_term_offset      0x0
///                                    ###
///                                    * Transmitter Termination Offset
///                                    * Reserved. Set to 0x0
///                                    ###
///               %unsigned 3  tx_vboost_lvl             0x4
///                                    ###
///                                    * TX Voltage Boost Level
///                                    * Sets the boosted transmit launc amplitude (mVppd).
///                                    ###
///               %%        17         # Stuffing bits...
///     @ 0x00010 TERM_TUNE0           (P)
///               %unsigned 1  rtune_req                 0x0
///                                    ###
///                                    * Resistor Tune Request
///                                    * Assertion triggers a resistor tune request (if one is not
///                                    * already in progress). When this signal is asserted, rtune_ack
///                                    * goes high until calibration of the termination impedances is
///                                    * complete.
///                                    * Note that termination resistance tuning disrupts the normal flow
///                                    * of date; therefore, assert rtune_req only when the PHY is
///                                    * inactive. Because the PHY automatically performs a tune after
///                                    * coming out of a reset, rtune_req can be held low unless you
///                                    * want to be able to manually force a tuning.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00014 TERM_TUNE1           (R-)
///               %unsigned 1  rtune_ack                 0x0
///                                    ###
///                                    * Resistor Tune Acknowledge
///                                    * While asserted, indicates that a resistor tune is still in
///                                    * progress.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00018 MISC_CTRL            (P)
///               %unsigned 1  RX0LOSLFPSEN              0x1
///                                    ###
///                                    * RX LOS LFPS Filter Enable
///                                    * Enables the RX LOS LFPS filter. During USB 3.0 operation, set to
///                                    * 1'b1
///                                    * 1 : Enables RX LOS LFPS filter.
///                                    * 0 : Disables RX LOS LFPS filter.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0001C CLK_CTRL             (P)
///               %unsigned 2  REFCLKSEL                 0x2
///                                    ###
///                                    * Reference Clock Select for PLL Block
///                                    * Reserved. Set to 2'b10
///                                    ###
///               %unsigned 6  fsel                      0x2
///                                    ###
///                                    * Frequency Select
///                                    * Selects the reference clock frequency used for both SS and HS
///                                    * operations.
///                                    * The value for fsel combined with the other clock and enable
///                                    * signals determine the clock frequency used for SS and HS
///                                    * operations if a shared or separate reference clock is used.
///                                    * Please refer to the PHY databook for the setting table.
///                                    * Currently defaulted to work with 25MHz reference clock
///                                    ###
///               %unsigned 7  mpll_multiplier           0x64
///                                    ###
///                                    * MPLL Frequency Multiplier Control
///                                    * Multiplies the refrence clock to a frequency suitable for
///                                    * intended operating speed.
///                                    * Please refer to the PHY databook for the setting table.
///                                    * Currently defaulted to work with 25MHz reference clock
///                                    ###
///               %unsigned 1  ref_clkdiv2               0x0
///                                    ###
///                                    * Input Reference Clock Divider Control
///                                    * If the input reference clock frequency is greater than 100MHz,
///                                    * this bit must be asserted. The reference clock frequency is
///                                    * then divided by 2 to keep it in the range required by the MPLL
///                                    ###
///               %unsigned 1  ref_ssp_en                0x0
///                                    ###
///                                    * Reference Clock Enable for SS function
///                                    * Enables the reference clock to the prescaler. The bit must
///                                    * remain de-asserted until the reference clock is running at the
///                                    * appropriate frequency, at which point ref_ssp_en can be
///                                    * asserted.
///                                    ###
///               %unsigned 1  ref_use_pad               0x0
///                                    ###
///                                    * Select Reference Clock Connected to ref_pad_clock
///                                    * When asserted, selects the external ref_pad_clock inputs as the
///                                    * reference clock source. When ref_use_pad is de-asserted,
///                                    * ref_alt_clk are selected for an on-chip reference clock source.
///                                    * Note: ref_pad_clk is not bonded out on the package
///                                    ###
///               %unsigned 1  ssc_en                    0x1
///                                    ###
///                                    * Spread Spectrum Enable
///                                    * Enables spread spectrum clock production (0.5% down-spread at
///                                    * -31.5kHz) in the USB 3.0 femtoPHY
///                                    ###
///               %unsigned 3  ssc_range                 0x0
///                                    ###
///                                    * Spread Spectrum Clock Range
///                                    * Selects the range of spread spectrum modulation when ssc_en is
///                                    * asserted and the PHY is spreading the high-speed transmit
///                                    * clocks. Applies a fixed offset to the phase accumulator.
///                                    * 000 : -4980ppm
///                                    * 001 : -4492 ppm
///                                    * 001 : -4003 ppm
///                                    * Others: Reserved
///                                    * All settings above are within the USB 3.0 specification. The
///                                    * amount of EMI reduction might decrease as the ss_range
///                                    * increases.
///                                    ###
///               %unsigned 9  ssc_ref_clk_sel           0x0
///                                    ###
///                                    * Spread Spectrum Reference Clock Shifting
///                                    * Enables non-standard osscillator frequencies to generate
///                                    * targeted MPLL output rates. Input corresponds to
///                                    * frequency-synthesis coefficient.
///                                    * ss_ref_clk_sel[8:6] = modulus – 1
///                                    * ss_ref_clk_sel[5:0] = 2's complement push amount
///                                    * Please refer to the PHY databook for the setting table.
///                                    * Currently defaulted to work with 25MHz reference clock
///                                    ###
///               %%        1          # Stuffing bits...
///     @ 0x00020 TEST_CTRL            (P)
///               %unsigned 1  ATERESET                  0x0
///                                    ###
///                                    * Reset input from ATE
///                                    * When the USB3.0 femtoPHY is powered up (not in Suspend or Sleep
///                                    * mode), an automatic tester can use this test signal to disable
///                                    * PHYCLK and FREECLK, then re-enable them with an aligned phase
///                                    ###
///               %unsigned 1  LOOPBACKENB               0x0
///                                    ###
///                                    * This controller signal placces the USB3.0 femtoPHY in HS
///                                    * Loopback mode, which currently enables the HS receive and
///                                    * transmit logic.
///                                    ###
///               %unsigned 1  test_powerdown_hsp        0x0
///                                    ###
///                                    * HS function circuits power-down control
///                                    * Powers down all HS function circuitry in the PHY for IDDQ
///                                    * testing.
///                                    ###
///               %unsigned 1  test_powerdown_ssp        0x0
///                                    ###
///                                    * SS function circuits power-down control
///                                    * Powers down all SS function circuitry in the PHY for IDDQ
///                                    * testing.
///                                    ###
///               %unsigned 1  VATESTENB                 0x0
///                                    ###
///                                    * Analog Test Pin Select
///                                    * Enables analog test voltages to be placed on the ID pin
///                                    ###
///               %unsigned 1  test_burnin               0x0
///                                    ###
///                                    * Reserved. Signal tie to 0
///                                    ###
///               %%        26         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      36B, bits:     112b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_USB3_PHY
#define h_USB3_PHY (){}

    #define     RA_USB3_PHY_PIPE_CTRL                          0x0000

    #define     BA_USB3_PHY_PIPE_CTRL_lane0_ext_pclk_req       0x0000
    #define     B16USB3_PHY_PIPE_CTRL_lane0_ext_pclk_req       0x0000
    #define   LSb32USB3_PHY_PIPE_CTRL_lane0_ext_pclk_req          0
    #define   LSb16USB3_PHY_PIPE_CTRL_lane0_ext_pclk_req          0
    #define       bUSB3_PHY_PIPE_CTRL_lane0_ext_pclk_req       1
    #define   MSK32USB3_PHY_PIPE_CTRL_lane0_ext_pclk_req          0x00000001

    #define     BA_USB3_PHY_PIPE_CTRL_lane0_tx2rx_loopbk       0x0000
    #define     B16USB3_PHY_PIPE_CTRL_lane0_tx2rx_loopbk       0x0000
    #define   LSb32USB3_PHY_PIPE_CTRL_lane0_tx2rx_loopbk          1
    #define   LSb16USB3_PHY_PIPE_CTRL_lane0_tx2rx_loopbk          1
    #define       bUSB3_PHY_PIPE_CTRL_lane0_tx2rx_loopbk       1
    #define   MSK32USB3_PHY_PIPE_CTRL_lane0_tx2rx_loopbk          0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_PHY_PARAM_CTRL0                        0x0004

    #define     BA_USB3_PHY_PARAM_CTRL0_COMPDISTUNE            0x0004
    #define     B16USB3_PHY_PARAM_CTRL0_COMPDISTUNE            0x0004
    #define   LSb32USB3_PHY_PARAM_CTRL0_COMPDISTUNE               0
    #define   LSb16USB3_PHY_PARAM_CTRL0_COMPDISTUNE               0
    #define       bUSB3_PHY_PARAM_CTRL0_COMPDISTUNE            3
    #define   MSK32USB3_PHY_PARAM_CTRL0_COMPDISTUNE               0x00000007

    #define     BA_USB3_PHY_PARAM_CTRL0_SQRXTUNE               0x0004
    #define     B16USB3_PHY_PARAM_CTRL0_SQRXTUNE               0x0004
    #define   LSb32USB3_PHY_PARAM_CTRL0_SQRXTUNE                  3
    #define   LSb16USB3_PHY_PARAM_CTRL0_SQRXTUNE                  3
    #define       bUSB3_PHY_PARAM_CTRL0_SQRXTUNE               3
    #define   MSK32USB3_PHY_PARAM_CTRL0_SQRXTUNE                  0x00000038

    #define     BA_USB3_PHY_PARAM_CTRL0_TXFSLSTUNE             0x0004
    #define     B16USB3_PHY_PARAM_CTRL0_TXFSLSTUNE             0x0004
    #define   LSb32USB3_PHY_PARAM_CTRL0_TXFSLSTUNE                6
    #define   LSb16USB3_PHY_PARAM_CTRL0_TXFSLSTUNE                6
    #define       bUSB3_PHY_PARAM_CTRL0_TXFSLSTUNE             4
    #define   MSK32USB3_PHY_PARAM_CTRL0_TXFSLSTUNE                0x000003C0

    #define     BA_USB3_PHY_PARAM_CTRL0_TXHSXVTUNE             0x0005
    #define     B16USB3_PHY_PARAM_CTRL0_TXHSXVTUNE             0x0004
    #define   LSb32USB3_PHY_PARAM_CTRL0_TXHSXVTUNE                10
    #define   LSb16USB3_PHY_PARAM_CTRL0_TXHSXVTUNE                10
    #define       bUSB3_PHY_PARAM_CTRL0_TXHSXVTUNE             2
    #define   MSK32USB3_PHY_PARAM_CTRL0_TXHSXVTUNE                0x00000C00

    #define     BA_USB3_PHY_PARAM_CTRL0_TXPREEMPAMPTUNE        0x0005
    #define     B16USB3_PHY_PARAM_CTRL0_TXPREEMPAMPTUNE        0x0004
    #define   LSb32USB3_PHY_PARAM_CTRL0_TXPREEMPAMPTUNE           12
    #define   LSb16USB3_PHY_PARAM_CTRL0_TXPREEMPAMPTUNE           12
    #define       bUSB3_PHY_PARAM_CTRL0_TXPREEMPAMPTUNE        2
    #define   MSK32USB3_PHY_PARAM_CTRL0_TXPREEMPAMPTUNE           0x00003000

    #define     BA_USB3_PHY_PARAM_CTRL0_TXPREEMPPULSETUNE      0x0005
    #define     B16USB3_PHY_PARAM_CTRL0_TXPREEMPPULSETUNE      0x0004
    #define   LSb32USB3_PHY_PARAM_CTRL0_TXPREEMPPULSETUNE         14
    #define   LSb16USB3_PHY_PARAM_CTRL0_TXPREEMPPULSETUNE         14
    #define       bUSB3_PHY_PARAM_CTRL0_TXPREEMPPULSETUNE      1
    #define   MSK32USB3_PHY_PARAM_CTRL0_TXPREEMPPULSETUNE         0x00004000

    #define     BA_USB3_PHY_PARAM_CTRL0_TXRESTUNE              0x0005
    #define     B16USB3_PHY_PARAM_CTRL0_TXRESTUNE              0x0004
    #define   LSb32USB3_PHY_PARAM_CTRL0_TXRESTUNE                 15
    #define   LSb16USB3_PHY_PARAM_CTRL0_TXRESTUNE                 15
    #define       bUSB3_PHY_PARAM_CTRL0_TXRESTUNE              2
    #define   MSK32USB3_PHY_PARAM_CTRL0_TXRESTUNE                 0x00018000

    #define     BA_USB3_PHY_PARAM_CTRL0_TXRISETUNE             0x0006
    #define     B16USB3_PHY_PARAM_CTRL0_TXRISETUNE             0x0006
    #define   LSb32USB3_PHY_PARAM_CTRL0_TXRISETUNE                17
    #define   LSb16USB3_PHY_PARAM_CTRL0_TXRISETUNE                1
    #define       bUSB3_PHY_PARAM_CTRL0_TXRISETUNE             2
    #define   MSK32USB3_PHY_PARAM_CTRL0_TXRISETUNE                0x00060000

    #define     BA_USB3_PHY_PARAM_CTRL0_TXVREFTUNE             0x0006
    #define     B16USB3_PHY_PARAM_CTRL0_TXVREFTUNE             0x0006
    #define   LSb32USB3_PHY_PARAM_CTRL0_TXVREFTUNE                19
    #define   LSb16USB3_PHY_PARAM_CTRL0_TXVREFTUNE                3
    #define       bUSB3_PHY_PARAM_CTRL0_TXVREFTUNE             4
    #define   MSK32USB3_PHY_PARAM_CTRL0_TXVREFTUNE                0x00780000

    #define     BA_USB3_PHY_PARAM_CTRL0_VDATREFTUNE            0x0006
    #define     B16USB3_PHY_PARAM_CTRL0_VDATREFTUNE            0x0006
    #define   LSb32USB3_PHY_PARAM_CTRL0_VDATREFTUNE               23
    #define   LSb16USB3_PHY_PARAM_CTRL0_VDATREFTUNE               7
    #define       bUSB3_PHY_PARAM_CTRL0_VDATREFTUNE            2
    #define   MSK32USB3_PHY_PARAM_CTRL0_VDATREFTUNE               0x01800000
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_PHY_PARAM_CTRL1                        0x0008

    #define     BA_USB3_PHY_PARAM_CTRL1_los_bias               0x0008
    #define     B16USB3_PHY_PARAM_CTRL1_los_bias               0x0008
    #define   LSb32USB3_PHY_PARAM_CTRL1_los_bias                  0
    #define   LSb16USB3_PHY_PARAM_CTRL1_los_bias                  0
    #define       bUSB3_PHY_PARAM_CTRL1_los_bias               3
    #define   MSK32USB3_PHY_PARAM_CTRL1_los_bias                  0x00000007

    #define     BA_USB3_PHY_PARAM_CTRL1_los_level              0x0008
    #define     B16USB3_PHY_PARAM_CTRL1_los_level              0x0008
    #define   LSb32USB3_PHY_PARAM_CTRL1_los_level                 3
    #define   LSb16USB3_PHY_PARAM_CTRL1_los_level                 3
    #define       bUSB3_PHY_PARAM_CTRL1_los_level              5
    #define   MSK32USB3_PHY_PARAM_CTRL1_los_level                 0x000000F8

    #define     BA_USB3_PHY_PARAM_CTRL1_pcs_rx_los_mask_val    0x0009
    #define     B16USB3_PHY_PARAM_CTRL1_pcs_rx_los_mask_val    0x0008
    #define   LSb32USB3_PHY_PARAM_CTRL1_pcs_rx_los_mask_val       8
    #define   LSb16USB3_PHY_PARAM_CTRL1_pcs_rx_los_mask_val       8
    #define       bUSB3_PHY_PARAM_CTRL1_pcs_rx_los_mask_val    10
    #define   MSK32USB3_PHY_PARAM_CTRL1_pcs_rx_los_mask_val       0x0003FF00

    #define     BA_USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_3p5db    0x000A
    #define     B16USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_3p5db    0x000A
    #define   LSb32USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_3p5db       18
    #define   LSb16USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_3p5db       2
    #define       bUSB3_PHY_PARAM_CTRL1_pcs_tx_deemph_3p5db    6
    #define   MSK32USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_3p5db       0x00FC0000

    #define     BA_USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_6db      0x000B
    #define     B16USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_6db      0x000A
    #define   LSb32USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_6db         24
    #define   LSb16USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_6db         8
    #define       bUSB3_PHY_PARAM_CTRL1_pcs_tx_deemph_6db      6
    #define   MSK32USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_6db         0x3F000000
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_PHY_PARAM_CTRL2                        0x000C

    #define     BA_USB3_PHY_PARAM_CTRL2_pcs_tx_swing_full      0x000C
    #define     B16USB3_PHY_PARAM_CTRL2_pcs_tx_swing_full      0x000C
    #define   LSb32USB3_PHY_PARAM_CTRL2_pcs_tx_swing_full         0
    #define   LSb16USB3_PHY_PARAM_CTRL2_pcs_tx_swing_full         0
    #define       bUSB3_PHY_PARAM_CTRL2_pcs_tx_swing_full      7
    #define   MSK32USB3_PHY_PARAM_CTRL2_pcs_tx_swing_full         0x0000007F

    #define     BA_USB3_PHY_PARAM_CTRL2_lane0_tx_term_offset   0x000C
    #define     B16USB3_PHY_PARAM_CTRL2_lane0_tx_term_offset   0x000C
    #define   LSb32USB3_PHY_PARAM_CTRL2_lane0_tx_term_offset      7
    #define   LSb16USB3_PHY_PARAM_CTRL2_lane0_tx_term_offset      7
    #define       bUSB3_PHY_PARAM_CTRL2_lane0_tx_term_offset   5
    #define   MSK32USB3_PHY_PARAM_CTRL2_lane0_tx_term_offset      0x00000F80

    #define     BA_USB3_PHY_PARAM_CTRL2_tx_vboost_lvl          0x000D
    #define     B16USB3_PHY_PARAM_CTRL2_tx_vboost_lvl          0x000C
    #define   LSb32USB3_PHY_PARAM_CTRL2_tx_vboost_lvl             12
    #define   LSb16USB3_PHY_PARAM_CTRL2_tx_vboost_lvl             12
    #define       bUSB3_PHY_PARAM_CTRL2_tx_vboost_lvl          3
    #define   MSK32USB3_PHY_PARAM_CTRL2_tx_vboost_lvl             0x00007000
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_PHY_TERM_TUNE0                         0x0010

    #define     BA_USB3_PHY_TERM_TUNE0_rtune_req               0x0010
    #define     B16USB3_PHY_TERM_TUNE0_rtune_req               0x0010
    #define   LSb32USB3_PHY_TERM_TUNE0_rtune_req                  0
    #define   LSb16USB3_PHY_TERM_TUNE0_rtune_req                  0
    #define       bUSB3_PHY_TERM_TUNE0_rtune_req               1
    #define   MSK32USB3_PHY_TERM_TUNE0_rtune_req                  0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_PHY_TERM_TUNE1                         0x0014

    #define     BA_USB3_PHY_TERM_TUNE1_rtune_ack               0x0014
    #define     B16USB3_PHY_TERM_TUNE1_rtune_ack               0x0014
    #define   LSb32USB3_PHY_TERM_TUNE1_rtune_ack                  0
    #define   LSb16USB3_PHY_TERM_TUNE1_rtune_ack                  0
    #define       bUSB3_PHY_TERM_TUNE1_rtune_ack               1
    #define   MSK32USB3_PHY_TERM_TUNE1_rtune_ack                  0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_PHY_MISC_CTRL                          0x0018

    #define     BA_USB3_PHY_MISC_CTRL_RX0LOSLFPSEN             0x0018
    #define     B16USB3_PHY_MISC_CTRL_RX0LOSLFPSEN             0x0018
    #define   LSb32USB3_PHY_MISC_CTRL_RX0LOSLFPSEN                0
    #define   LSb16USB3_PHY_MISC_CTRL_RX0LOSLFPSEN                0
    #define       bUSB3_PHY_MISC_CTRL_RX0LOSLFPSEN             1
    #define   MSK32USB3_PHY_MISC_CTRL_RX0LOSLFPSEN                0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_PHY_CLK_CTRL                           0x001C

    #define     BA_USB3_PHY_CLK_CTRL_REFCLKSEL                 0x001C
    #define     B16USB3_PHY_CLK_CTRL_REFCLKSEL                 0x001C
    #define   LSb32USB3_PHY_CLK_CTRL_REFCLKSEL                    0
    #define   LSb16USB3_PHY_CLK_CTRL_REFCLKSEL                    0
    #define       bUSB3_PHY_CLK_CTRL_REFCLKSEL                 2
    #define   MSK32USB3_PHY_CLK_CTRL_REFCLKSEL                    0x00000003

    #define     BA_USB3_PHY_CLK_CTRL_fsel                      0x001C
    #define     B16USB3_PHY_CLK_CTRL_fsel                      0x001C
    #define   LSb32USB3_PHY_CLK_CTRL_fsel                         2
    #define   LSb16USB3_PHY_CLK_CTRL_fsel                         2
    #define       bUSB3_PHY_CLK_CTRL_fsel                      6
    #define   MSK32USB3_PHY_CLK_CTRL_fsel                         0x000000FC

    #define     BA_USB3_PHY_CLK_CTRL_mpll_multiplier           0x001D
    #define     B16USB3_PHY_CLK_CTRL_mpll_multiplier           0x001C
    #define   LSb32USB3_PHY_CLK_CTRL_mpll_multiplier              8
    #define   LSb16USB3_PHY_CLK_CTRL_mpll_multiplier              8
    #define       bUSB3_PHY_CLK_CTRL_mpll_multiplier           7
    #define   MSK32USB3_PHY_CLK_CTRL_mpll_multiplier              0x00007F00

    #define     BA_USB3_PHY_CLK_CTRL_ref_clkdiv2               0x001D
    #define     B16USB3_PHY_CLK_CTRL_ref_clkdiv2               0x001C
    #define   LSb32USB3_PHY_CLK_CTRL_ref_clkdiv2                  15
    #define   LSb16USB3_PHY_CLK_CTRL_ref_clkdiv2                  15
    #define       bUSB3_PHY_CLK_CTRL_ref_clkdiv2               1
    #define   MSK32USB3_PHY_CLK_CTRL_ref_clkdiv2                  0x00008000

    #define     BA_USB3_PHY_CLK_CTRL_ref_ssp_en                0x001E
    #define     B16USB3_PHY_CLK_CTRL_ref_ssp_en                0x001E
    #define   LSb32USB3_PHY_CLK_CTRL_ref_ssp_en                   16
    #define   LSb16USB3_PHY_CLK_CTRL_ref_ssp_en                   0
    #define       bUSB3_PHY_CLK_CTRL_ref_ssp_en                1
    #define   MSK32USB3_PHY_CLK_CTRL_ref_ssp_en                   0x00010000

    #define     BA_USB3_PHY_CLK_CTRL_ref_use_pad               0x001E
    #define     B16USB3_PHY_CLK_CTRL_ref_use_pad               0x001E
    #define   LSb32USB3_PHY_CLK_CTRL_ref_use_pad                  17
    #define   LSb16USB3_PHY_CLK_CTRL_ref_use_pad                  1
    #define       bUSB3_PHY_CLK_CTRL_ref_use_pad               1
    #define   MSK32USB3_PHY_CLK_CTRL_ref_use_pad                  0x00020000

    #define     BA_USB3_PHY_CLK_CTRL_ssc_en                    0x001E
    #define     B16USB3_PHY_CLK_CTRL_ssc_en                    0x001E
    #define   LSb32USB3_PHY_CLK_CTRL_ssc_en                       18
    #define   LSb16USB3_PHY_CLK_CTRL_ssc_en                       2
    #define       bUSB3_PHY_CLK_CTRL_ssc_en                    1
    #define   MSK32USB3_PHY_CLK_CTRL_ssc_en                       0x00040000

    #define     BA_USB3_PHY_CLK_CTRL_ssc_range                 0x001E
    #define     B16USB3_PHY_CLK_CTRL_ssc_range                 0x001E
    #define   LSb32USB3_PHY_CLK_CTRL_ssc_range                    19
    #define   LSb16USB3_PHY_CLK_CTRL_ssc_range                    3
    #define       bUSB3_PHY_CLK_CTRL_ssc_range                 3
    #define   MSK32USB3_PHY_CLK_CTRL_ssc_range                    0x00380000

    #define     BA_USB3_PHY_CLK_CTRL_ssc_ref_clk_sel           0x001E
    #define     B16USB3_PHY_CLK_CTRL_ssc_ref_clk_sel           0x001E
    #define   LSb32USB3_PHY_CLK_CTRL_ssc_ref_clk_sel              22
    #define   LSb16USB3_PHY_CLK_CTRL_ssc_ref_clk_sel              6
    #define       bUSB3_PHY_CLK_CTRL_ssc_ref_clk_sel           9
    #define   MSK32USB3_PHY_CLK_CTRL_ssc_ref_clk_sel              0x7FC00000
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_PHY_TEST_CTRL                          0x0020

    #define     BA_USB3_PHY_TEST_CTRL_ATERESET                 0x0020
    #define     B16USB3_PHY_TEST_CTRL_ATERESET                 0x0020
    #define   LSb32USB3_PHY_TEST_CTRL_ATERESET                    0
    #define   LSb16USB3_PHY_TEST_CTRL_ATERESET                    0
    #define       bUSB3_PHY_TEST_CTRL_ATERESET                 1
    #define   MSK32USB3_PHY_TEST_CTRL_ATERESET                    0x00000001

    #define     BA_USB3_PHY_TEST_CTRL_LOOPBACKENB              0x0020
    #define     B16USB3_PHY_TEST_CTRL_LOOPBACKENB              0x0020
    #define   LSb32USB3_PHY_TEST_CTRL_LOOPBACKENB                 1
    #define   LSb16USB3_PHY_TEST_CTRL_LOOPBACKENB                 1
    #define       bUSB3_PHY_TEST_CTRL_LOOPBACKENB              1
    #define   MSK32USB3_PHY_TEST_CTRL_LOOPBACKENB                 0x00000002

    #define     BA_USB3_PHY_TEST_CTRL_test_powerdown_hsp       0x0020
    #define     B16USB3_PHY_TEST_CTRL_test_powerdown_hsp       0x0020
    #define   LSb32USB3_PHY_TEST_CTRL_test_powerdown_hsp          2
    #define   LSb16USB3_PHY_TEST_CTRL_test_powerdown_hsp          2
    #define       bUSB3_PHY_TEST_CTRL_test_powerdown_hsp       1
    #define   MSK32USB3_PHY_TEST_CTRL_test_powerdown_hsp          0x00000004

    #define     BA_USB3_PHY_TEST_CTRL_test_powerdown_ssp       0x0020
    #define     B16USB3_PHY_TEST_CTRL_test_powerdown_ssp       0x0020
    #define   LSb32USB3_PHY_TEST_CTRL_test_powerdown_ssp          3
    #define   LSb16USB3_PHY_TEST_CTRL_test_powerdown_ssp          3
    #define       bUSB3_PHY_TEST_CTRL_test_powerdown_ssp       1
    #define   MSK32USB3_PHY_TEST_CTRL_test_powerdown_ssp          0x00000008

    #define     BA_USB3_PHY_TEST_CTRL_VATESTENB                0x0020
    #define     B16USB3_PHY_TEST_CTRL_VATESTENB                0x0020
    #define   LSb32USB3_PHY_TEST_CTRL_VATESTENB                   4
    #define   LSb16USB3_PHY_TEST_CTRL_VATESTENB                   4
    #define       bUSB3_PHY_TEST_CTRL_VATESTENB                1
    #define   MSK32USB3_PHY_TEST_CTRL_VATESTENB                   0x00000010

    #define     BA_USB3_PHY_TEST_CTRL_test_burnin              0x0020
    #define     B16USB3_PHY_TEST_CTRL_test_burnin              0x0020
    #define   LSb32USB3_PHY_TEST_CTRL_test_burnin                 5
    #define   LSb16USB3_PHY_TEST_CTRL_test_burnin                 5
    #define       bUSB3_PHY_TEST_CTRL_test_burnin              1
    #define   MSK32USB3_PHY_TEST_CTRL_test_burnin                 0x00000020
    ///////////////////////////////////////////////////////////

    typedef struct SIE_USB3_PHY {
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_PHY_PIPE_CTRL_lane0_ext_pclk_req(r32)  _BFGET_(r32, 0, 0)
    #define   SET32USB3_PHY_PIPE_CTRL_lane0_ext_pclk_req(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16USB3_PHY_PIPE_CTRL_lane0_ext_pclk_req(r16)  _BFGET_(r16, 0, 0)
    #define   SET16USB3_PHY_PIPE_CTRL_lane0_ext_pclk_req(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32USB3_PHY_PIPE_CTRL_lane0_tx2rx_loopbk(r32)  _BFGET_(r32, 1, 1)
    #define   SET32USB3_PHY_PIPE_CTRL_lane0_tx2rx_loopbk(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16USB3_PHY_PIPE_CTRL_lane0_tx2rx_loopbk(r16)  _BFGET_(r16, 1, 1)
    #define   SET16USB3_PHY_PIPE_CTRL_lane0_tx2rx_loopbk(r16,v) _BFSET_(r16, 1, 1,v)

    #define     w32USB3_PHY_PIPE_CTRL                          {\
            UNSG32 uPIPE_CTRL_lane0_ext_pclk_req               :  1;\
            UNSG32 uPIPE_CTRL_lane0_tx2rx_loopbk               :  1;\
            UNSG32 RSVDx0_b2                                   : 30;\
          }
    union { UNSG32 u32USB3_PHY_PIPE_CTRL;
            struct w32USB3_PHY_PIPE_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_PHY_PARAM_CTRL0_COMPDISTUNE(r32)       _BFGET_(r32, 2, 0)
    #define   SET32USB3_PHY_PARAM_CTRL0_COMPDISTUNE(r32,v)     _BFSET_(r32, 2, 0,v)
    #define   GET16USB3_PHY_PARAM_CTRL0_COMPDISTUNE(r16)       _BFGET_(r16, 2, 0)
    #define   SET16USB3_PHY_PARAM_CTRL0_COMPDISTUNE(r16,v)     _BFSET_(r16, 2, 0,v)

    #define   GET32USB3_PHY_PARAM_CTRL0_SQRXTUNE(r32)          _BFGET_(r32, 5, 3)
    #define   SET32USB3_PHY_PARAM_CTRL0_SQRXTUNE(r32,v)        _BFSET_(r32, 5, 3,v)
    #define   GET16USB3_PHY_PARAM_CTRL0_SQRXTUNE(r16)          _BFGET_(r16, 5, 3)
    #define   SET16USB3_PHY_PARAM_CTRL0_SQRXTUNE(r16,v)        _BFSET_(r16, 5, 3,v)

    #define   GET32USB3_PHY_PARAM_CTRL0_TXFSLSTUNE(r32)        _BFGET_(r32, 9, 6)
    #define   SET32USB3_PHY_PARAM_CTRL0_TXFSLSTUNE(r32,v)      _BFSET_(r32, 9, 6,v)
    #define   GET16USB3_PHY_PARAM_CTRL0_TXFSLSTUNE(r16)        _BFGET_(r16, 9, 6)
    #define   SET16USB3_PHY_PARAM_CTRL0_TXFSLSTUNE(r16,v)      _BFSET_(r16, 9, 6,v)

    #define   GET32USB3_PHY_PARAM_CTRL0_TXHSXVTUNE(r32)        _BFGET_(r32,11,10)
    #define   SET32USB3_PHY_PARAM_CTRL0_TXHSXVTUNE(r32,v)      _BFSET_(r32,11,10,v)
    #define   GET16USB3_PHY_PARAM_CTRL0_TXHSXVTUNE(r16)        _BFGET_(r16,11,10)
    #define   SET16USB3_PHY_PARAM_CTRL0_TXHSXVTUNE(r16,v)      _BFSET_(r16,11,10,v)

    #define   GET32USB3_PHY_PARAM_CTRL0_TXPREEMPAMPTUNE(r32)   _BFGET_(r32,13,12)
    #define   SET32USB3_PHY_PARAM_CTRL0_TXPREEMPAMPTUNE(r32,v) _BFSET_(r32,13,12,v)
    #define   GET16USB3_PHY_PARAM_CTRL0_TXPREEMPAMPTUNE(r16)   _BFGET_(r16,13,12)
    #define   SET16USB3_PHY_PARAM_CTRL0_TXPREEMPAMPTUNE(r16,v) _BFSET_(r16,13,12,v)

    #define   GET32USB3_PHY_PARAM_CTRL0_TXPREEMPPULSETUNE(r32) _BFGET_(r32,14,14)
    #define   SET32USB3_PHY_PARAM_CTRL0_TXPREEMPPULSETUNE(r32,v) _BFSET_(r32,14,14,v)
    #define   GET16USB3_PHY_PARAM_CTRL0_TXPREEMPPULSETUNE(r16) _BFGET_(r16,14,14)
    #define   SET16USB3_PHY_PARAM_CTRL0_TXPREEMPPULSETUNE(r16,v) _BFSET_(r16,14,14,v)

    #define   GET32USB3_PHY_PARAM_CTRL0_TXRESTUNE(r32)         _BFGET_(r32,16,15)
    #define   SET32USB3_PHY_PARAM_CTRL0_TXRESTUNE(r32,v)       _BFSET_(r32,16,15,v)

    #define   GET32USB3_PHY_PARAM_CTRL0_TXRISETUNE(r32)        _BFGET_(r32,18,17)
    #define   SET32USB3_PHY_PARAM_CTRL0_TXRISETUNE(r32,v)      _BFSET_(r32,18,17,v)
    #define   GET16USB3_PHY_PARAM_CTRL0_TXRISETUNE(r16)        _BFGET_(r16, 2, 1)
    #define   SET16USB3_PHY_PARAM_CTRL0_TXRISETUNE(r16,v)      _BFSET_(r16, 2, 1,v)

    #define   GET32USB3_PHY_PARAM_CTRL0_TXVREFTUNE(r32)        _BFGET_(r32,22,19)
    #define   SET32USB3_PHY_PARAM_CTRL0_TXVREFTUNE(r32,v)      _BFSET_(r32,22,19,v)
    #define   GET16USB3_PHY_PARAM_CTRL0_TXVREFTUNE(r16)        _BFGET_(r16, 6, 3)
    #define   SET16USB3_PHY_PARAM_CTRL0_TXVREFTUNE(r16,v)      _BFSET_(r16, 6, 3,v)

    #define   GET32USB3_PHY_PARAM_CTRL0_VDATREFTUNE(r32)       _BFGET_(r32,24,23)
    #define   SET32USB3_PHY_PARAM_CTRL0_VDATREFTUNE(r32,v)     _BFSET_(r32,24,23,v)
    #define   GET16USB3_PHY_PARAM_CTRL0_VDATREFTUNE(r16)       _BFGET_(r16, 8, 7)
    #define   SET16USB3_PHY_PARAM_CTRL0_VDATREFTUNE(r16,v)     _BFSET_(r16, 8, 7,v)

    #define     w32USB3_PHY_PARAM_CTRL0                        {\
            UNSG32 uPARAM_CTRL0_COMPDISTUNE                    :  3;\
            UNSG32 uPARAM_CTRL0_SQRXTUNE                       :  3;\
            UNSG32 uPARAM_CTRL0_TXFSLSTUNE                     :  4;\
            UNSG32 uPARAM_CTRL0_TXHSXVTUNE                     :  2;\
            UNSG32 uPARAM_CTRL0_TXPREEMPAMPTUNE                :  2;\
            UNSG32 uPARAM_CTRL0_TXPREEMPPULSETUNE              :  1;\
            UNSG32 uPARAM_CTRL0_TXRESTUNE                      :  2;\
            UNSG32 uPARAM_CTRL0_TXRISETUNE                     :  2;\
            UNSG32 uPARAM_CTRL0_TXVREFTUNE                     :  4;\
            UNSG32 uPARAM_CTRL0_VDATREFTUNE                    :  2;\
            UNSG32 RSVDx4_b25                                  :  7;\
          }
    union { UNSG32 u32USB3_PHY_PARAM_CTRL0;
            struct w32USB3_PHY_PARAM_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_PHY_PARAM_CTRL1_los_bias(r32)          _BFGET_(r32, 2, 0)
    #define   SET32USB3_PHY_PARAM_CTRL1_los_bias(r32,v)        _BFSET_(r32, 2, 0,v)
    #define   GET16USB3_PHY_PARAM_CTRL1_los_bias(r16)          _BFGET_(r16, 2, 0)
    #define   SET16USB3_PHY_PARAM_CTRL1_los_bias(r16,v)        _BFSET_(r16, 2, 0,v)

    #define   GET32USB3_PHY_PARAM_CTRL1_los_level(r32)         _BFGET_(r32, 7, 3)
    #define   SET32USB3_PHY_PARAM_CTRL1_los_level(r32,v)       _BFSET_(r32, 7, 3,v)
    #define   GET16USB3_PHY_PARAM_CTRL1_los_level(r16)         _BFGET_(r16, 7, 3)
    #define   SET16USB3_PHY_PARAM_CTRL1_los_level(r16,v)       _BFSET_(r16, 7, 3,v)

    #define   GET32USB3_PHY_PARAM_CTRL1_pcs_rx_los_mask_val(r32) _BFGET_(r32,17, 8)
    #define   SET32USB3_PHY_PARAM_CTRL1_pcs_rx_los_mask_val(r32,v) _BFSET_(r32,17, 8,v)

    #define   GET32USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_3p5db(r32) _BFGET_(r32,23,18)
    #define   SET32USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_3p5db(r32,v) _BFSET_(r32,23,18,v)
    #define   GET16USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_3p5db(r16) _BFGET_(r16, 7, 2)
    #define   SET16USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_3p5db(r16,v) _BFSET_(r16, 7, 2,v)

    #define   GET32USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_6db(r32) _BFGET_(r32,29,24)
    #define   SET32USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_6db(r32,v) _BFSET_(r32,29,24,v)
    #define   GET16USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_6db(r16) _BFGET_(r16,13, 8)
    #define   SET16USB3_PHY_PARAM_CTRL1_pcs_tx_deemph_6db(r16,v) _BFSET_(r16,13, 8,v)

    #define     w32USB3_PHY_PARAM_CTRL1                        {\
            UNSG32 uPARAM_CTRL1_los_bias                       :  3;\
            UNSG32 uPARAM_CTRL1_los_level                      :  5;\
            UNSG32 uPARAM_CTRL1_pcs_rx_los_mask_val            : 10;\
            UNSG32 uPARAM_CTRL1_pcs_tx_deemph_3p5db            :  6;\
            UNSG32 uPARAM_CTRL1_pcs_tx_deemph_6db              :  6;\
            UNSG32 RSVDx8_b30                                  :  2;\
          }
    union { UNSG32 u32USB3_PHY_PARAM_CTRL1;
            struct w32USB3_PHY_PARAM_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_PHY_PARAM_CTRL2_pcs_tx_swing_full(r32) _BFGET_(r32, 6, 0)
    #define   SET32USB3_PHY_PARAM_CTRL2_pcs_tx_swing_full(r32,v) _BFSET_(r32, 6, 0,v)
    #define   GET16USB3_PHY_PARAM_CTRL2_pcs_tx_swing_full(r16) _BFGET_(r16, 6, 0)
    #define   SET16USB3_PHY_PARAM_CTRL2_pcs_tx_swing_full(r16,v) _BFSET_(r16, 6, 0,v)

    #define   GET32USB3_PHY_PARAM_CTRL2_lane0_tx_term_offset(r32) _BFGET_(r32,11, 7)
    #define   SET32USB3_PHY_PARAM_CTRL2_lane0_tx_term_offset(r32,v) _BFSET_(r32,11, 7,v)
    #define   GET16USB3_PHY_PARAM_CTRL2_lane0_tx_term_offset(r16) _BFGET_(r16,11, 7)
    #define   SET16USB3_PHY_PARAM_CTRL2_lane0_tx_term_offset(r16,v) _BFSET_(r16,11, 7,v)

    #define   GET32USB3_PHY_PARAM_CTRL2_tx_vboost_lvl(r32)     _BFGET_(r32,14,12)
    #define   SET32USB3_PHY_PARAM_CTRL2_tx_vboost_lvl(r32,v)   _BFSET_(r32,14,12,v)
    #define   GET16USB3_PHY_PARAM_CTRL2_tx_vboost_lvl(r16)     _BFGET_(r16,14,12)
    #define   SET16USB3_PHY_PARAM_CTRL2_tx_vboost_lvl(r16,v)   _BFSET_(r16,14,12,v)

    #define     w32USB3_PHY_PARAM_CTRL2                        {\
            UNSG32 uPARAM_CTRL2_pcs_tx_swing_full              :  7;\
            UNSG32 uPARAM_CTRL2_lane0_tx_term_offset           :  5;\
            UNSG32 uPARAM_CTRL2_tx_vboost_lvl                  :  3;\
            UNSG32 RSVDxC_b15                                  : 17;\
          }
    union { UNSG32 u32USB3_PHY_PARAM_CTRL2;
            struct w32USB3_PHY_PARAM_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_PHY_TERM_TUNE0_rtune_req(r32)          _BFGET_(r32, 0, 0)
    #define   SET32USB3_PHY_TERM_TUNE0_rtune_req(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16USB3_PHY_TERM_TUNE0_rtune_req(r16)          _BFGET_(r16, 0, 0)
    #define   SET16USB3_PHY_TERM_TUNE0_rtune_req(r16,v)        _BFSET_(r16, 0, 0,v)

    #define     w32USB3_PHY_TERM_TUNE0                         {\
            UNSG32 uTERM_TUNE0_rtune_req                       :  1;\
            UNSG32 RSVDx10_b1                                  : 31;\
          }
    union { UNSG32 u32USB3_PHY_TERM_TUNE0;
            struct w32USB3_PHY_TERM_TUNE0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_PHY_TERM_TUNE1_rtune_ack(r32)          _BFGET_(r32, 0, 0)
    #define   SET32USB3_PHY_TERM_TUNE1_rtune_ack(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16USB3_PHY_TERM_TUNE1_rtune_ack(r16)          _BFGET_(r16, 0, 0)
    #define   SET16USB3_PHY_TERM_TUNE1_rtune_ack(r16,v)        _BFSET_(r16, 0, 0,v)

    #define     w32USB3_PHY_TERM_TUNE1                         {\
            UNSG32 uTERM_TUNE1_rtune_ack                       :  1;\
            UNSG32 RSVDx14_b1                                  : 31;\
          }
    union { UNSG32 u32USB3_PHY_TERM_TUNE1;
            struct w32USB3_PHY_TERM_TUNE1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_PHY_MISC_CTRL_RX0LOSLFPSEN(r32)        _BFGET_(r32, 0, 0)
    #define   SET32USB3_PHY_MISC_CTRL_RX0LOSLFPSEN(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16USB3_PHY_MISC_CTRL_RX0LOSLFPSEN(r16)        _BFGET_(r16, 0, 0)
    #define   SET16USB3_PHY_MISC_CTRL_RX0LOSLFPSEN(r16,v)      _BFSET_(r16, 0, 0,v)

    #define     w32USB3_PHY_MISC_CTRL                          {\
            UNSG32 uMISC_CTRL_RX0LOSLFPSEN                     :  1;\
            UNSG32 RSVDx18_b1                                  : 31;\
          }
    union { UNSG32 u32USB3_PHY_MISC_CTRL;
            struct w32USB3_PHY_MISC_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_PHY_CLK_CTRL_REFCLKSEL(r32)            _BFGET_(r32, 1, 0)
    #define   SET32USB3_PHY_CLK_CTRL_REFCLKSEL(r32,v)          _BFSET_(r32, 1, 0,v)
    #define   GET16USB3_PHY_CLK_CTRL_REFCLKSEL(r16)            _BFGET_(r16, 1, 0)
    #define   SET16USB3_PHY_CLK_CTRL_REFCLKSEL(r16,v)          _BFSET_(r16, 1, 0,v)

    #define   GET32USB3_PHY_CLK_CTRL_fsel(r32)                 _BFGET_(r32, 7, 2)
    #define   SET32USB3_PHY_CLK_CTRL_fsel(r32,v)               _BFSET_(r32, 7, 2,v)
    #define   GET16USB3_PHY_CLK_CTRL_fsel(r16)                 _BFGET_(r16, 7, 2)
    #define   SET16USB3_PHY_CLK_CTRL_fsel(r16,v)               _BFSET_(r16, 7, 2,v)

    #define   GET32USB3_PHY_CLK_CTRL_mpll_multiplier(r32)      _BFGET_(r32,14, 8)
    #define   SET32USB3_PHY_CLK_CTRL_mpll_multiplier(r32,v)    _BFSET_(r32,14, 8,v)
    #define   GET16USB3_PHY_CLK_CTRL_mpll_multiplier(r16)      _BFGET_(r16,14, 8)
    #define   SET16USB3_PHY_CLK_CTRL_mpll_multiplier(r16,v)    _BFSET_(r16,14, 8,v)

    #define   GET32USB3_PHY_CLK_CTRL_ref_clkdiv2(r32)          _BFGET_(r32,15,15)
    #define   SET32USB3_PHY_CLK_CTRL_ref_clkdiv2(r32,v)        _BFSET_(r32,15,15,v)
    #define   GET16USB3_PHY_CLK_CTRL_ref_clkdiv2(r16)          _BFGET_(r16,15,15)
    #define   SET16USB3_PHY_CLK_CTRL_ref_clkdiv2(r16,v)        _BFSET_(r16,15,15,v)

    #define   GET32USB3_PHY_CLK_CTRL_ref_ssp_en(r32)           _BFGET_(r32,16,16)
    #define   SET32USB3_PHY_CLK_CTRL_ref_ssp_en(r32,v)         _BFSET_(r32,16,16,v)
    #define   GET16USB3_PHY_CLK_CTRL_ref_ssp_en(r16)           _BFGET_(r16, 0, 0)
    #define   SET16USB3_PHY_CLK_CTRL_ref_ssp_en(r16,v)         _BFSET_(r16, 0, 0,v)

    #define   GET32USB3_PHY_CLK_CTRL_ref_use_pad(r32)          _BFGET_(r32,17,17)
    #define   SET32USB3_PHY_CLK_CTRL_ref_use_pad(r32,v)        _BFSET_(r32,17,17,v)
    #define   GET16USB3_PHY_CLK_CTRL_ref_use_pad(r16)          _BFGET_(r16, 1, 1)
    #define   SET16USB3_PHY_CLK_CTRL_ref_use_pad(r16,v)        _BFSET_(r16, 1, 1,v)

    #define   GET32USB3_PHY_CLK_CTRL_ssc_en(r32)               _BFGET_(r32,18,18)
    #define   SET32USB3_PHY_CLK_CTRL_ssc_en(r32,v)             _BFSET_(r32,18,18,v)
    #define   GET16USB3_PHY_CLK_CTRL_ssc_en(r16)               _BFGET_(r16, 2, 2)
    #define   SET16USB3_PHY_CLK_CTRL_ssc_en(r16,v)             _BFSET_(r16, 2, 2,v)

    #define   GET32USB3_PHY_CLK_CTRL_ssc_range(r32)            _BFGET_(r32,21,19)
    #define   SET32USB3_PHY_CLK_CTRL_ssc_range(r32,v)          _BFSET_(r32,21,19,v)
    #define   GET16USB3_PHY_CLK_CTRL_ssc_range(r16)            _BFGET_(r16, 5, 3)
    #define   SET16USB3_PHY_CLK_CTRL_ssc_range(r16,v)          _BFSET_(r16, 5, 3,v)

    #define   GET32USB3_PHY_CLK_CTRL_ssc_ref_clk_sel(r32)      _BFGET_(r32,30,22)
    #define   SET32USB3_PHY_CLK_CTRL_ssc_ref_clk_sel(r32,v)    _BFSET_(r32,30,22,v)
    #define   GET16USB3_PHY_CLK_CTRL_ssc_ref_clk_sel(r16)      _BFGET_(r16,14, 6)
    #define   SET16USB3_PHY_CLK_CTRL_ssc_ref_clk_sel(r16,v)    _BFSET_(r16,14, 6,v)

    #define     w32USB3_PHY_CLK_CTRL                           {\
            UNSG32 uCLK_CTRL_REFCLKSEL                         :  2;\
            UNSG32 uCLK_CTRL_fsel                              :  6;\
            UNSG32 uCLK_CTRL_mpll_multiplier                   :  7;\
            UNSG32 uCLK_CTRL_ref_clkdiv2                       :  1;\
            UNSG32 uCLK_CTRL_ref_ssp_en                        :  1;\
            UNSG32 uCLK_CTRL_ref_use_pad                       :  1;\
            UNSG32 uCLK_CTRL_ssc_en                            :  1;\
            UNSG32 uCLK_CTRL_ssc_range                         :  3;\
            UNSG32 uCLK_CTRL_ssc_ref_clk_sel                   :  9;\
            UNSG32 RSVDx1C_b31                                 :  1;\
          }
    union { UNSG32 u32USB3_PHY_CLK_CTRL;
            struct w32USB3_PHY_CLK_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32USB3_PHY_TEST_CTRL_ATERESET(r32)            _BFGET_(r32, 0, 0)
    #define   SET32USB3_PHY_TEST_CTRL_ATERESET(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16USB3_PHY_TEST_CTRL_ATERESET(r16)            _BFGET_(r16, 0, 0)
    #define   SET16USB3_PHY_TEST_CTRL_ATERESET(r16,v)          _BFSET_(r16, 0, 0,v)

    #define   GET32USB3_PHY_TEST_CTRL_LOOPBACKENB(r32)         _BFGET_(r32, 1, 1)
    #define   SET32USB3_PHY_TEST_CTRL_LOOPBACKENB(r32,v)       _BFSET_(r32, 1, 1,v)
    #define   GET16USB3_PHY_TEST_CTRL_LOOPBACKENB(r16)         _BFGET_(r16, 1, 1)
    #define   SET16USB3_PHY_TEST_CTRL_LOOPBACKENB(r16,v)       _BFSET_(r16, 1, 1,v)

    #define   GET32USB3_PHY_TEST_CTRL_test_powerdown_hsp(r32)  _BFGET_(r32, 2, 2)
    #define   SET32USB3_PHY_TEST_CTRL_test_powerdown_hsp(r32,v) _BFSET_(r32, 2, 2,v)
    #define   GET16USB3_PHY_TEST_CTRL_test_powerdown_hsp(r16)  _BFGET_(r16, 2, 2)
    #define   SET16USB3_PHY_TEST_CTRL_test_powerdown_hsp(r16,v) _BFSET_(r16, 2, 2,v)

    #define   GET32USB3_PHY_TEST_CTRL_test_powerdown_ssp(r32)  _BFGET_(r32, 3, 3)
    #define   SET32USB3_PHY_TEST_CTRL_test_powerdown_ssp(r32,v) _BFSET_(r32, 3, 3,v)
    #define   GET16USB3_PHY_TEST_CTRL_test_powerdown_ssp(r16)  _BFGET_(r16, 3, 3)
    #define   SET16USB3_PHY_TEST_CTRL_test_powerdown_ssp(r16,v) _BFSET_(r16, 3, 3,v)

    #define   GET32USB3_PHY_TEST_CTRL_VATESTENB(r32)           _BFGET_(r32, 4, 4)
    #define   SET32USB3_PHY_TEST_CTRL_VATESTENB(r32,v)         _BFSET_(r32, 4, 4,v)
    #define   GET16USB3_PHY_TEST_CTRL_VATESTENB(r16)           _BFGET_(r16, 4, 4)
    #define   SET16USB3_PHY_TEST_CTRL_VATESTENB(r16,v)         _BFSET_(r16, 4, 4,v)

    #define   GET32USB3_PHY_TEST_CTRL_test_burnin(r32)         _BFGET_(r32, 5, 5)
    #define   SET32USB3_PHY_TEST_CTRL_test_burnin(r32,v)       _BFSET_(r32, 5, 5,v)
    #define   GET16USB3_PHY_TEST_CTRL_test_burnin(r16)         _BFGET_(r16, 5, 5)
    #define   SET16USB3_PHY_TEST_CTRL_test_burnin(r16,v)       _BFSET_(r16, 5, 5,v)

    #define     w32USB3_PHY_TEST_CTRL                          {\
            UNSG32 uTEST_CTRL_ATERESET                         :  1;\
            UNSG32 uTEST_CTRL_LOOPBACKENB                      :  1;\
            UNSG32 uTEST_CTRL_test_powerdown_hsp               :  1;\
            UNSG32 uTEST_CTRL_test_powerdown_ssp               :  1;\
            UNSG32 uTEST_CTRL_VATESTENB                        :  1;\
            UNSG32 uTEST_CTRL_test_burnin                      :  1;\
            UNSG32 RSVDx20_b6                                  : 26;\
          }
    union { UNSG32 u32USB3_PHY_TEST_CTRL;
            struct w32USB3_PHY_TEST_CTRL;
          };
    ///////////////////////////////////////////////////////////
    } SIE_USB3_PHY;

    typedef union  T32USB3_PHY_PIPE_CTRL
          { UNSG32 u32;
            struct w32USB3_PHY_PIPE_CTRL;
                 } T32USB3_PHY_PIPE_CTRL;
    typedef union  T32USB3_PHY_PARAM_CTRL0
          { UNSG32 u32;
            struct w32USB3_PHY_PARAM_CTRL0;
                 } T32USB3_PHY_PARAM_CTRL0;
    typedef union  T32USB3_PHY_PARAM_CTRL1
          { UNSG32 u32;
            struct w32USB3_PHY_PARAM_CTRL1;
                 } T32USB3_PHY_PARAM_CTRL1;
    typedef union  T32USB3_PHY_PARAM_CTRL2
          { UNSG32 u32;
            struct w32USB3_PHY_PARAM_CTRL2;
                 } T32USB3_PHY_PARAM_CTRL2;
    typedef union  T32USB3_PHY_TERM_TUNE0
          { UNSG32 u32;
            struct w32USB3_PHY_TERM_TUNE0;
                 } T32USB3_PHY_TERM_TUNE0;
    typedef union  T32USB3_PHY_TERM_TUNE1
          { UNSG32 u32;
            struct w32USB3_PHY_TERM_TUNE1;
                 } T32USB3_PHY_TERM_TUNE1;
    typedef union  T32USB3_PHY_MISC_CTRL
          { UNSG32 u32;
            struct w32USB3_PHY_MISC_CTRL;
                 } T32USB3_PHY_MISC_CTRL;
    typedef union  T32USB3_PHY_CLK_CTRL
          { UNSG32 u32;
            struct w32USB3_PHY_CLK_CTRL;
                 } T32USB3_PHY_CLK_CTRL;
    typedef union  T32USB3_PHY_TEST_CTRL
          { UNSG32 u32;
            struct w32USB3_PHY_TEST_CTRL;
                 } T32USB3_PHY_TEST_CTRL;
    ///////////////////////////////////////////////////////////

    typedef union  TUSB3_PHY_PIPE_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32USB3_PHY_PIPE_CTRL;
                   };
                 } TUSB3_PHY_PIPE_CTRL;
    typedef union  TUSB3_PHY_PARAM_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32USB3_PHY_PARAM_CTRL0;
                   };
                 } TUSB3_PHY_PARAM_CTRL0;
    typedef union  TUSB3_PHY_PARAM_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32USB3_PHY_PARAM_CTRL1;
                   };
                 } TUSB3_PHY_PARAM_CTRL1;
    typedef union  TUSB3_PHY_PARAM_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32USB3_PHY_PARAM_CTRL2;
                   };
                 } TUSB3_PHY_PARAM_CTRL2;
    typedef union  TUSB3_PHY_TERM_TUNE0
          { UNSG32 u32[1];
            struct {
            struct w32USB3_PHY_TERM_TUNE0;
                   };
                 } TUSB3_PHY_TERM_TUNE0;
    typedef union  TUSB3_PHY_TERM_TUNE1
          { UNSG32 u32[1];
            struct {
            struct w32USB3_PHY_TERM_TUNE1;
                   };
                 } TUSB3_PHY_TERM_TUNE1;
    typedef union  TUSB3_PHY_MISC_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32USB3_PHY_MISC_CTRL;
                   };
                 } TUSB3_PHY_MISC_CTRL;
    typedef union  TUSB3_PHY_CLK_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32USB3_PHY_CLK_CTRL;
                   };
                 } TUSB3_PHY_CLK_CTRL;
    typedef union  TUSB3_PHY_TEST_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32USB3_PHY_TEST_CTRL;
                   };
                 } TUSB3_PHY_TEST_CTRL;

    ///////////////////////////////////////////////////////////
     SIGN32 USB3_PHY_drvrd(SIE_USB3_PHY *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 USB3_PHY_drvwr(SIE_USB3_PHY *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void USB3_PHY_reset(SIE_USB3_PHY *p);
     SIGN32 USB3_PHY_cmp  (SIE_USB3_PHY *p, SIE_USB3_PHY *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define USB3_PHY_check(p,pie,pfx,hLOG) USB3_PHY_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define USB3_PHY_print(p,    pfx,hLOG) USB3_PHY_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: USB3_PHY
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE oneReg                                   (4,4)
///     ###
///     * To create SRAM-like interface. Creating one 32-bit register
///     * (Hier:1)
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (R-)
///               %unsigned 32 0x00000000
///                                    ###
///                                    * One Register in an external IP block
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      32b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_oneReg
#define h_oneReg (){}

    #define     BA_oneReg_0x00000000                           0x0000
    #define     B16oneReg_0x00000000                           0x0000
    #define   LSb32oneReg_0x00000000                              0
    #define   LSb16oneReg_0x00000000                              0
    #define       boneReg_0x00000000                           32
    #define   MSK32oneReg_0x00000000                              0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_oneReg {
    ///////////////////////////////////////////////////////////
    #define   GET32oneReg_0x00000000(r32)                      _BFGET_(r32,31, 0)
    #define   SET32oneReg_0x00000000(r32,v)                    _BFSET_(r32,31, 0,v)

            UNSG32 u_0x00000000                                : 32;
    ///////////////////////////////////////////////////////////
    } SIE_oneReg;

    ///////////////////////////////////////////////////////////
     SIGN32 oneReg_drvrd(SIE_oneReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 oneReg_drvwr(SIE_oneReg *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void oneReg_reset(SIE_oneReg *p);
     SIGN32 oneReg_cmp  (SIE_oneReg *p, SIE_oneReg *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define oneReg_check(p,pie,pfx,hLOG) oneReg_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define oneReg_print(p,    pfx,hLOG) oneReg_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: oneReg
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE IP_REGSP                                 (4,4)
///     ###
///     * To create SRAM-like interface to USB30 PHY CR registers –
///     * Creating 64KB space (Hier:2)
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 dummy
///               $oneReg              dummy             REG   [16383]
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:   65532B, bits:  524256b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_IP_REGSP
#define h_IP_REGSP (){}

    #define     RA_IP_REGSP_dummy                              0x0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_IP_REGSP {
    ///////////////////////////////////////////////////////////
              SIE_oneReg                                       ie_dummy[16383];
    ///////////////////////////////////////////////////////////
    } SIE_IP_REGSP;

    ///////////////////////////////////////////////////////////
     SIGN32 IP_REGSP_drvrd(SIE_IP_REGSP *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 IP_REGSP_drvwr(SIE_IP_REGSP *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void IP_REGSP_reset(SIE_IP_REGSP *p);
     SIGN32 IP_REGSP_cmp  (SIE_IP_REGSP *p, SIE_IP_REGSP *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define IP_REGSP_check(p,pie,pfx,hLOG) IP_REGSP_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define IP_REGSP_print(p,    pfx,hLOG) IP_REGSP_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: IP_REGSP
////////////////////////////////////////////////////////////

//////
///
/// $INTERFACE USB3_Wrapper            biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 USB3_MAC             (P)
///     # 0x00000 USB3_MAC
///               $USB3_MAC            USB3_MAC          REG
///     @ 0x00020                      (W-)
///     #         # Stuffing bytes...
///               %% 1792
///     @ 0x00100 USB3_PHY             (P)
///     # 0x00100 USB3_PHY
///               $USB3_PHY            USB3_PHY          REG
///     @ 0x00124                      (W-)
///     #         # Stuffing bytes...
///               %% 521952
///     @ 0x10000                      (P)
///     # 0x10000 IP_REGSP
///               $IP_REGSP            IP_REGSP          MEM
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:  131072B, bits:     351b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_USB3_Wrapper
#define h_USB3_Wrapper (){}

    #define     RA_USB3_Wrapper_USB3_MAC                       0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_Wrapper_USB3_PHY                       0x0100
    ///////////////////////////////////////////////////////////
    #define     RA_USB3_Wrapper_IP_REGSP                       0x10000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_USB3_Wrapper {
    ///////////////////////////////////////////////////////////
              SIE_USB3_MAC                                     ie_USB3_MAC;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx20                                     [224];
    ///////////////////////////////////////////////////////////
              SIE_USB3_PHY                                     ie_USB3_PHY;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx124                                    [65244];
    ///////////////////////////////////////////////////////////
              SIE_IP_REGSP                                     ie_IP_REGSP;
             UNSG8 RSVD_IP_REGSP                               [4];
    ///////////////////////////////////////////////////////////
    } SIE_USB3_Wrapper;

    ///////////////////////////////////////////////////////////
     SIGN32 USB3_Wrapper_drvrd(SIE_USB3_Wrapper *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 USB3_Wrapper_drvwr(SIE_USB3_Wrapper *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void USB3_Wrapper_reset(SIE_USB3_Wrapper *p);
     SIGN32 USB3_Wrapper_cmp  (SIE_USB3_Wrapper *p, SIE_USB3_Wrapper *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define USB3_Wrapper_check(p,pie,pfx,hLOG) USB3_Wrapper_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define USB3_Wrapper_print(p,    pfx,hLOG) USB3_Wrapper_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: USB3_Wrapper
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: usb30Host.h
////////////////////////////////////////////////////////////

