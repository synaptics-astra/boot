//////
/// don't edit! auto-generated by docc: usbPHY.h
////////////////////////////////////////////////////////////
#ifndef usbPHY_h
#define usbPHY_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
///
/// $INTERFACE usbPHY                  biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 USB_CTRL0            (P)
///               %unsigned 2  PLLITUNE                  0x0
///                                    ###
///                                    * PLL Integral Path Tune
///                                    * This signal should be set to the design default
///                                    * 11: 2.0x
///                                    * 10: 1.5x
///                                    * 01: 1.0x
///                                    * 00: 0.5x, Design default
///                                    ###
///               %unsigned 4  PLLPTUNE                  0xC
///                                    ###
///                                    * PLL Proportional Path Tune
///                                    * This signal should be set to the design default
///                                    * 1111: 5.5x
///                                    * 1110: 5x
///                                    * 1101: 4.5x
///                                    * 1100: 4x, Design default
///                                    * 1011: 4.5x
///                                    * 1010: 4x
///                                    * 1001: 3.5x
///                                    * 1000: 3x
///                                    * 0111: 3.5x
///                                    * 0110: 3x
///                                    * 0101: 2.5x
///                                    * 0100: 2x
///                                    * 0011: 2.5x
///                                    * 0010: 2x
///                                    * 0001: 1.5x
///                                    * 0000: 1x
///                                    ###
///               %unsigned 1  PLLBTUNE                  0x1
///                                    ###
///                                    * PLL Bandwidth adjustment
///                                    * This adjustment doubles the bandwidth of the PLL as needed for some input reference clock frequencies.
///                                    ###
///               %unsigned 3  COMPDISTUNE0              0x3
///                                    ###
///                                    * Disconnect Threshold Adjustment
///                                    * This bus adjusts the voltage level for the threshold used to detect a disconnect event at the host.
///                                    * 111: +12%
///                                    * 110: +10%
///                                    * 101: +7%
///                                    * 100: +3%
///                                    * 011: 0, Design default
///                                    * 010: -4%
///                                    * 001: -6%
///                                    * 000: -9%
///                                    * When the PHY is in a HOST role where the HOSTDISCONNECT0 signal is used, any adjustment of the HS transmit voltage level tune bits (TXVREFTUNE0[3:0]) might also necessitate a change to the HS disconnect detection threshold tune bit (COMPDISTUNE0[2:0]). This change might be required because the HS disconnect detection threshold might need to be increased (or decreased) if the HS transmit voltage level is increased (or decreased).
///                                    ###
///               %unsigned 3  SQRXTUNE0                 0x3
///                                    ###
///                                    * Squelch Threshold Adjustment
///                                    * This bus adjusts the voltage level for threshold used to detect valid high-speed data.
///                                    * 111: -20%
///                                    * 110: -15%
///                                    * 101: -10%
///                                    * 100: -5%
///                                    * 011: 0, Design default
///                                    * 010: +5%
///                                    * 001: +10%
///                                    * 000: +15%
///                                    ###
///               %unsigned 2  VDATREFTUNE0              0x1
///                                    ###
///                                    * Data Detect Voltage Adjustment
///                                    * This bus adjusts the threshold voltage level (Vdat_ref) used to detect data during charger type detection.
///                                    * 11: -20%
///                                    * 10: -10%
///                                    * 01: 0, Design default
///                                    * 00: +10%
///                                    ###
///               %unsigned 3  OTGTUNE0                  0x3
///                                    ###
///                                    * VBUS Valid Threshold Adjustment
///                                    * This bus adjusts the voltage level for the VBUS valid threshold
///                                    * 111: +12%
///                                    * 110: +9%
///                                    * 101: +6%
///                                    * 100: +3%
///                                    * 011: 0, Design default
///                                    * 010: -3%
///                                    * 001: -6%
///                                    * 000: -9%
///                                    ###
///               %unsigned 2  TXHSXVTUNE0               0x3
///                                    ###
///                                    * Transmitter High-Speed Crossover Adjustment
///                                    * This bus adjusts the voltage at which the DP0 and DM0 signals cross while transmitting in HS mode.
///                                    * 11: 0, default setting
///                                    * 10: +15 mV
///                                    * 01: -15 mV
///                                    * 00: Reserved
///                                    ###
///               %unsigned 4  TXFSLSTUNE0               0x3
///                                    ###
///                                    * FS/LS Source Impedance Adjustment
///                                    * This bus adjusts the low- and full-speed single-ended source impedance while driving high. The following adjustment values are based on norminal process, voltage and temporature.
///                                    * 1111: -10.7%
///                                    * 0111: -5.6%
///                                    * 0011: 0, design default
///                                    * 0001: +6.5%
///                                    * 0000: +14%
///                                    * All other bit settings are reserved.
///                                    ###
///               %unsigned 4  TXVREFTUNE0               0x3
///                                    ###
///                                    * HS DC Voltage Level Adjustment
///                                    * This bus adjust the high-speed DC level voltage.
///                                    * 1111: +24%
///                                    * 1110: +22%
///                                    * 1101: +20%
///                                    * 1100: +18%
///                                    * 1011: +16%
///                                    * 1010: +14%
///                                    * 1001: +12%
///                                    * 1000: +10%
///                                    * 0111: +8%
///                                    * 0110: +6%
///                                    * 0101: +4%
///                                    * 0100: +2%
///                                    * 0011: 0, Design default
///                                    * 0010: -2%
///                                    * 0001: -4%
///                                    * 0000: -6%
///                                    * When the PHY is in a HOST role where the HOSTDISCONNECT0 signal is used, any adjustment of the HS transmit voltage level tune bits (TXVREFTUNE0[3:0]) might also necessitate a change to the HS disconnect detection threshold tune bit (COMPDISTUNE0[2:0]). This change might be required because the HS disconnect detection threshold might need to be increased (or decreased) if the HS transmit voltage level is increased (or decreased).
///                                    ###
///               %unsigned 2  TXRISETUNE0               0x1
///                                    ###
///                                    * HS Transmitter Rise/Fall Time Adjustment
///                                    * This bus adjust the rise/fall times of the high-speed waveform.
///                                    * 11: -8.1%
///                                    * 10: -7.2%
///                                    * 01: 0, design default
///                                    * 00: +5.4%
///                                    ###
///               %unsigned 2  TXRESTUNE0                0x1
///                                    ###
///                                    * USB Source Impedance Adjustment
///                                    * In some applications, there can be significant series resistance on the D+ and D- paths between the transceiver and cable. This bus adjusts the driver source impedance to compensate for added series resistance on the USB.
///                                    * 11: Source impedance is decreased by approximately 5.6 ohm.
///                                    * 10: Source impedance is decreased by approximately 3.6Ohm.
///                                    * 01: 0, design default.
///                                    * 00: Source impedance is increased by approximately 1.3 Ohm.
///                                    ###
///     @ 0x00004 USB_CTRL1            (P)
///               %unsigned 2  TXPREEMPAMPTUNE0          0x0
///                                    ###
///                                    * HS Transmitter Pre-Emphasis Current Control
///                                    * This signal controls the amount of current sourced to DP0 and DM0 after a J-to-K or K-to-J transition. The HS Transmitter pre- emphasis current is defined in terms of unit amounts. One unit amount is approximately 600 uA and is defined as 1X pre-emphasis current.
///                                    * 11: HS Transmitter pre-emphasis circuit sources 3x pre-emphasis current.
///                                    * 10: HS Transmitter pre-emphasis circuit sources 2x pre-emphasis current.
///                                    * 01: HS Transmitter pre-emphasis circuit sources 1x pre-emphasis current.
///                                    * 00: (design default) HS Transmitter pre-emphasis circuit is disable.
///                                    ###
///               %unsigned 1  TXPREEMPPULSETUNE0        0x0
///                                    ###
///                                    * HS Transmitter Pre-Emphasis Duration Control
///                                    * This signal controls the duration for which the HS pre-emphasis current is sourced onto DP0 or DM0. The HS Transmitter pre-emphasis duration is defined in terms fo unit amounts. One unit of pre-emphasis duration is approximately 580 ps and is defined as 1x pre-emphasis duration. This signal is valid only if either TXPREEMPAMTUNE0[1] or TXPREEMPAMPTUNE0[0] is set to 1'b1.
///                                    * 1: 1x, short pre-emphasis current duration.
///                                    * 0: (design default): 2x, long pre-emphasis current duration.
///                                    ###
///               %unsigned 1  VBUSVLDEXTSEL0            0x0
///                                    ###
///                                    * External VBUS Valid Select
///                                    * This signal selects either the VBUSVLDEXT0 input or the internal Session Valid comparator to detect whether the VBUS signal on the USB cable is valid and assert the DP0 pull-up resistor. The activation of the DP0 pull-up resistor also depends on the state of XCVRSEL0[1:0], OPMODE[1:0], TERMSEL0, DPPULLDOWN0 and DMPULLDOWN0.
///                                    * 1: The VBUSVLDEXT0 input is used to assert the DP0 pull-up resistor.
///                                    * 0: The internal Session Valid comparator is used to assert the DP0 pull-up resistor.
///                                    ###
///               %unsigned 1  OTGDISABLE0               0x0
///                                    ###
///                                    * OTG Block Disable
///                                    * This signal powers down the VBUS Valid comparator, but not the Session Valid comparator, nor the ID detection circuitry. To save power, if the application does not use the OTG function, this input can be set high.
///                                    * 1: The OTG block is powered down.
///                                    * 0: The OTG block is powered up.
///                                    ###
///               %unsigned 1  TXBITSTUFFEN0             0x0
///                                    ###
///                                    * Low-Byte Transmit Bit-Stuffing Enable
///                                    * This controller signal controls bit-stuffing on DATAIN0[7:0] when OPMODE0[1:0] = 2'b11.
///                                    * 1: Bit stuffing is enable.
///                                    * 0: Bit stuffing is disabled.
///                                    ###
///               %unsigned 1  TXBITSTUFFENH0            0x0
///                                    ###
///                                    * High-Byte Transmit Bit-Stuffing Enable
///                                    * This controller signal controls bit-stuffing on DATAIN0[15:8] when OPMODE0[1:0] = 2'b11.
///                                    * 1: Bit stuffing is enable.
///                                    * 0: Bit stuffing is disabled.
///                                    ###
///               %unsigned 1  CHRGSEL0                  0x0
///                                    ###
///                                    * Battery Charging Source Select
///                                    * Determines whether current is sourced onto or sunk from DP0 or DM0.
///                                    * The definitions shown below apply when
///                                    * CHRGSRCPUENB0[1:0] = 2'b00.
///                                    * 1: Data source voltage (VDAT_SRC) is sourced onto DM0 and sunk from DP0.
///                                    * 0: Data source voltage (VDAT_SRC) is sourced onto DP0 and sunk from DM0.
///                                    ###
///               %unsigned 1  VDATDETENB0               0x0
///                                    ###
///                                    * Battery Charging Attach/Connect Detection Enable
///                                    * Enables or disables attach/connect detection.
///                                    * 1: Data detect voltage (CHG_DET) is enabled.
///                                    * 0: Data detect voltage (CHG_DET) is disabled.
///                                    ###
///               %unsigned 1  VDATSRCENB0               0x0
///                                    ###
///                                    * Battery Charging Source Select
///                                    * Enables or disables sourcing for battery charging.
///                                    * 1: Data source voltage (VDAT_SRC) is enabled.
///                                    * 0: Data source voltage (VDAT_SRC) is disabled.
///                                    ###
///               %unsigned 1  DCDENB0                   0x0
///                                    ###
///                                    * Enhanced Data Contact Detection Enable
///                                    * Enable current sourcing on the D+ line. For special applications, the IDP_SRC control and the RDM_DWN control are separated. For standard DCD operation in accordance with the Battery Charger v1.2 specification, simultaneously set DCDENB0=1'b1 (to enable IDP_SRC) and set DMPULLDOWN0=1'b1 (to enable RDM_DWN). Set both signals to 1'b0 when DCD is completed.
///                                    * 1: IDP_SRC current is sourced onto DP0.
///                                    * 0: IDP_SRC current is disabled.
///                                    ###
///               %unsigned 1  BYPASSDPDATA0             0x0
///                                    ###
///                                    * Data for DP0 Transmitter Digital Bypass
///                                    * In Transmitter Digital Bypass mode, this signal provides the data that is transmitted on DP0 (when HSXCVREXTCTL0 = 1'b0), or DP0 and DM0 (when HSXCVREXTCTL0 = 1'b1). To use this signal, the BYPASSSEL0 must be 1'b1. When HSXCVREXTCTL0 = 1'b0, the FS/LS driver is used and outputs the following FS/LS states:
///                                    * 1: DP0 FS/LS driver drives to a high state.
///                                    * 0: DP0 FS/LS driver drives to a low state.
///                                    * When HSXCVREXTCTL0 = 1'b1, this signal controls the HS driver on both DP0 and DM0. The HS driver is used and outputs the following HS state:.
///                                    * 1: HS driver transmits J.
///                                    * 0: HS driver transmits K.
///                                    ###
///               %unsigned 1  BYPASSDMDATA0             0x0
///                                    ###
///                                    * Data for DM0 Transmitter Digital Bypass
///                                    * In Transmitter Digital Bypass mode, this signal provides the data that is transmitted on DM0 (when HSXCVREXTCTL0 = 1'b0), or DP0 and DM0 (when HSXCVREXTCTL0 = 1'b1). To use this signal, the BYPASSSEL0 must be 1'b1. When HSXCVREXTCTL0 = 1'b0, the FS/LS driver is used and outputs the following FS/LS states:
///                                    * 1: DP0 FS/LS driver drives to a high state.
///                                    * 0: DP0 FS/LS driver drives to a low state.
///                                    * When HSXCVREXTCTL0 = 1'b1, set this signal to 0. If Transmitter Digital Bypass mode is not used, tie this input to 0.
///                                    ###
///               %unsigned 1  BYPASSDPEN0               0x0
///                                    ###
///                                    * DP0 Transmitter Digital Bypass Enable
///                                    * Enables/disables the DP0 FS/LS driver (if HSXCVREXTCTL0 = 1'b0), or the DP0 and DM0 HS driver (if HSXCVREXTCTL0 = 1'b1) in Transmitter Digital Bypass mode. FS mode is standard UART mode. HS mode is provided for proprietary HS tests. To use either of these modes, BYPASSEL0 must be 1'b1.
///                                    * 1: DP0 FS/LS driver (if HSXCVREXTCTL0 = 1'b0), or DP0 and DM0 HS driver (if HSXCVREXTCTL0 = 1'b1) is enabled and driven with the BYPASSDPDATA0 signal.
///                                    * 0: DP0 FS/LS driver (if HSXCVREXTCTL0 = 1'b0), or DP0 and DM0 HS driver (if HSXCVREXTCTL0 = 1'b1) is disable in Transmitter Digital Bypass mode.
///                                    * The PHY does not re-clock the transmit data before outputting on DP0 or DM0.
///                                    ###
///               %unsigned 1  BYPASSDMEN0               0x0
///                                    ###
///                                    * DM0 Transmitter Digital Bypass Enable
///                                    * Enables/disables the DM0 FS/LS driver (if HSXCVREXTCTL0 = 1'b0), or the DP0 and DM0 HS driver (if HSXCVREXTCTL0 = 1'b1) in Transmitter Digital Bypass mode. FS mode is standard UART mode. HS mode is provided for proprietary HS tests. To use either of these modes, BYPASSEL0 must be 1'b1.
///                                    * 1: DM0 FS/LS driver (if HSXCVREXTCTL0 = 1'b0), or DP0 and DM0 HS driver (if HSXCVREXTCTL0 = 1'b1) is enabled and driven with the BYPASSDPDATA0 signal.
///                                    * 0: DM0 FS/LS driver (if HSXCVREXTCTL0 = 1'b0), or DP0 and DM0 HS driver (if HSXCVREXTCTL0 = 1'b1) is disable in Transmitter Digital Bypass mode.
///                                    * The PHY does not re-clock the transmit data before outputting on DP0 or DM0.
///                                    ###
///               %unsigned 1  BYPASSSEL0                0x0
///                                    ###
///                                    * Transmitter Digital Bypass Select
///                                    * Enables/disables Transmitter Digital Bypass mode.
///                                    * The standard FS UART mode is selected by setting HSXCVREXTCTL0 = 1'b0, and a proprietary HS test mode is selected by setting HSXCVREXTCTL0 = 1'b1.
///                                    * 1: Transmitter Digital Bypass mode is enabled.
///                                    * 0: Transmitter Digital Bypass mode is disabled.
///                                    ###
///               %unsigned 3  FSEL                      0x1
///                                    ###
///                                    * Reference Clock Frequency Select
///                                    * Selects the USB 2.0 femtoPHY reference clock frequency.
///                                    ###
///               %unsigned 2  REFCLKSEL                 0x2
///                                    ###
///                                    * Reference Clock Select for PLL Block
///                                    * 11: The PLL uses EXTREFCLK as reference.
///                                    * 10: The PLL uses CLKCORE as reference.
///                                    * 01: Reserved.
///                                    * 00: Reserved.
///                                    ###
///               %unsigned 1  COMMONONN                 0x1
///                                    ###
///                                    * Common Block Power-Down Control
///                                    * This signal controls the power-down signals in the REFCLK_LOGIC, Bias, and PLL blocks when the USB 2.0 femtoPHY is in Suspend, or sleep mode.
///                                    * 1: In Suspend mode, the REFCLK_LOGIC, Bias, and PLL blocks are powered down. In Sleep mode, the Bias and PLL blocks are powered down.
///                                    * 0: In Suspend mode or Sleep mode, the REFCLK_LOGIC, Bias, and PLL blocks remain powered. With this setting, the input reference clock must remain on and valid during suspend or sleep.
///                                    ###
///               %unsigned 1  PORTRESET0                0x0
///                                    ###
///                                    * Per-Port ResetWhen asserted, this signal resets the corresponding port's transmit and receive logic without disabling the clocks within the USB 2.0 femtoPHY.■ 1: The transmit and receive finite state machines (FSMs) are reset, and the line_state logic combinatorially reflects the state of the single-ended receivers.■ 0: The transmit and receive FSMs are operational, and the line_state logic becomes sequential after 11 PHYCLOCK0 cycles.
///                                    ###
///               %unsigned 1  VBUSVLDEXT0               0x1
///                                    ###
///                                    * External VBUS Valid indicator.
///                                    * This signal is valid in Device mode and only when the VBUSVLDEXTSEL0 signal is set to 1'b1. VBUSVLDEXT0 indicates whether the VBUS signal on the USB cable is valid. In addition, VBUSVLDEXT0 enables the pull-up resistor on the D+ line. VBUSVLDEXT0 does not change the OTGSESSVLD0 output.
///                                    * 1: The VBUS signal is valid, and the pull-up resistor on D+ is enabled.
///                                    * 0: The VBUS signal is not valid, and the pull-up resistor on D+ is disabled. In Host Mode, this input is not used and can be tie to 0.
///                                    ###
///               %unsigned 1  RETENABLEN                0x1
///                                    ###
///                                    * Retention Mode Enable
///                                    * Retention mode allows the USB 2.0 femtoPHY to retain internal digital core signal states when the femtoPHY DVDD supply is lowered to a process specific retention voltage level. Retention mode also forces all internal DVDD-to-VDD18 level translators into a pre-defined state based on the femtoPHY operating mode.
///                                    * Before entering Retention mode, RETENABLEN must be asserted to 1'b0. This signal must be set to 1'b1 at all times when the femtoPHY DVDD supply is powered, and is meant to be asserted to 1'b0 only when decreasing the DVDD voltage to an intermediate level that is not supported by the PHY in normal operating modes. Asserting this signal powers down all analog blocks; however, the high-voltage interrupt signals are still valid outputs.
///                                    ###
///               %unsigned 1  AUTORSMENB0               0x0
///                                    ###
///                                    * Autoresume Mode Enable
///                                    * Autoresume mode can be used when the USB 2.0 femtoPHY is operating in a host role. This mode enables the autoresume logic in the PHY, so that the PHY will automatically response to a remote wake-up resume-k from a peripheral, without initial involvement from the host controller. The PHY will respond to a remote wake-up resume-k by driving out its own resume-k. The PHY resume-k will be held until the host controller takes over and configures the PHY to continue driving the resume-k.
///                                    ###
///               %unsigned 1  HSXCVREXTCTL0             0x0
///                                    ###
///                                    * HS Transceiver Asynchronous Control
///                                    * This signal asynchronously selects the HS transceiver Tx/Rx path. This signal can be used with bypass signals in “UART/Autoresume Signals”.The PHY must be in an HS state with XCVRSEL0[1:0] = 2'b00 and TERMSEL0 = 1'b0.
///                                    * 1: HS Tx/Rx path is selected
///                                    * 0: FS Tx/Rx path is selected.
///                                    ###
///               %%        5          # Stuffing bits...
///     @ 0x00008 USB_CTRL2            (P)
///               %unsigned 1  ATERESET                  0x0
///               %unsigned 1  SIDDQ                     0x0
///                                    ###
///                                    * IDDQ Test Enable/Retention Mode
///                                    * This test signal enables you to perform IDDQ testing/retention mode by powering down all analog blocks. Before asserting SIDDQ, ensure that TESTBURNIN is set to 1'b0, and RETENABLEN is set to 1'b1.
///                                    * 1: The analog blocks are powered down.
///                                    * 0: The analog blocks are powered up.
///                                    ###
///               %unsigned 2  VATESTENB                 0x0
///                                    ###
///                                    * Analog Test Pin Select
///                                    * Enable analog test voltages to be placed on either the ANALOGTEST or ID0 pin.
///                                    * 11: Reserved. Invalid setting.
///                                    * 10: Analog test voltage can be viewed or applied on ANALOGTEST.
///                                    * 01: Analog test voltages can be viewed or applied on ID0.
///                                    * 00: Analog test voltage cannot be viewed or applied on either ANALOGTEST or ID0.
///                                    ###
///               %unsigned 1  LOOPBACKENB0              0x0
///                                    ###
///                                    * Loopback Test Enable
///                                    * This signal places the USB 2.0 femtoPHY in Loopback mode, which enables the receive and transmit logic concurrently.
///                                    * 1: During data transmission, the receive logic is enabled.
///                                    * 0: During data transmission, the receive logic is disabled.
///                                    ###
///               %unsigned 1  TESTBURNIN                0x0
///                                    ###
///                                    * Burn-in Test Enable
///                                    * This iput enables the build-in, self-burn-in testing function of the PHY. At assertion of this signal, the PHY performs a power-on-reset sequence and then enters HS Loopback mode. In HS Loopback mode, the PHY continues to transmit alternating 1's and 0's at the maximum bit rate until TETSBURNIN is deasserted.
///                                    ###
///               %unsigned 1  iTestPhy                  0x0
///                                    ###
///                                    * 1: enable LPBK_* control registers to USB PHY interface for production test.
///                                    * 0: Normal operation. Connect controller with PHY.
///                                    ###
///               %%        25         # Stuffing bits...
///     @ 0x0000C USB_CTRL3            (P)
///               %unsigned 2  ss_scaledown_mode         0x0
///                                    ###
///                                    * This is a USB Controller register.
///                                    * Used to enable simulation acceleration features. Encoded as:0x0: Normal operation0x1: Scales down timers except suspend/resume.0x2: Scales down suspend/resume timers only0x3: Scales down all timers
///                                    ###
///               %unsigned 1  M_HBigEndian              0x0
///                                    ###
///                                    * This is a USB Controller register.
///                                    * AHB Master Big Endian Mode. Indicates the AHB Endian Mode:0x0: Little Endian.0x1: Big Endian.
///                                    ###
///               %unsigned 1  S_HBigEndian              0x0
///                                    ###
///                                    * This is a USB Controller register.
///                                    * AHB Slaver Big Endian Mode. Indicates the AHB Endian Mode:0x0: Little Endian.0x1: Big Endian.
///                                    ###
///               %unsigned 1  sel_debug_clk             0x0
///                                    ###
///                                    * 0: 1'b0
///                                    * 1: utmi_clk;
///                                    ###
///               %unsigned 5  sel_debug_data            0x0
///                                    ###
///                                    * 0: 16'b0;
///                                    * 1~31: debug signals of utmi interface.
///                                    ###
///               %unsigned 1  SYS_DMA_DONE              0x1
///                                    ###
///                                    * System DMA Done.
///                                    * 0 Data write not complete
///                                    * 1 Data write complete in the system memory for the current DMA write-transfer from the controller.
///                                    ###
///               %unsigned 1  dbnce_fltr_bypass         0x0
///                                    ###
///                                    * Bypass Debounce filters for avalid, bvalid, vbusvalid, sessend, iddig signals when enable.
///                                    * 1: Enabled.
///                                    * 0: Disabled.
///                                    ###
///               %%        20         # Stuffing bits...
///     @ 0x00010 USB_CTRL4            (P)
///               %unsigned 18 dev_chirp_time_16b        0xEA60
///                                    ###
///                                    * For VELOCE validation, this register is set to 45000
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x00014 USB_CTRL5            (P)
///               %unsigned 18 dev_chirp_time_8b         0x1D4C0
///                                    ###
///                                    * For VELOCE validation, this register is set to 90000
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x00018 USB_CTRL6            (P)
///               %unsigned 1  LPBK_SUSPENDM0            0x1
///                                    ###
///                                    * Suspend AssertionAsserting this signal suspends the USB 2.0 femtoPHY by tri-statingthe transmitter and powering down the USB 2.0 femtoPHY circuits.■ 1: Normal operating mode■ 0: Suspend mode
///                                    ###
///               %unsigned 1  LPBK_FSXCVROWNER0         0x0
///                                    ###
///                                    * UTMI+/Serial Interface SelectThis controller signal enables the UTMI+ or serial interface.■ 1: The TXENABLEN0, FSDATAEXT0, and FSSE0EXT0 inputs drive USB 2.0 femtoPHY data output onto the D+ and D- lines. Data that the USB 2.0 femtoPHY receives from the D+ and D lines appears on the FSVMINUS0 and FSVPLUS0 outputs.■ 0: Data on the D+ and D- lines is transmitted and receivedthrough the UTMI+. If FSXCVROWNER0 is not used, set it to 1'b0.
///                                    ###
///               %unsigned 1  LPBK_WORDINTERFACE0       0x0
///                                    ###
///                                    * UTMI+ Data Bus Width and Clock SelectThis controller signal selects the data bus width of the UTMI+ data buses.■ 1: 16-bit data interface (PHYCLOCK0 frequency is 30 MHz)■ 0: 8-bit data interface (PHYCLOCK0 frequency is 60 MHz)
///                                    ###
///               %unsigned 1  LPBK_DPPULLDOWN0          0x0
///                                    ###
///                                    * D+ Pull-Down Resistor EnableThis controller signal controls the pull-down resistance on the D+ line.■ 1: The pull-down resistance on D+ is enabled.■ 0: The pull-down resistance on D+ is disabled.
///                                    ###
///               %unsigned 1  LPBK_DMPULLDOWN0          0x0
///                                    ###
///                                    * D- Pull-Down Resistor EnableThis controller signal controls the pull-down resistance on the D- line.■ 1: The pull-down resistance on D- is enabled.■ 0: The pull-down resistance on D- is disabled.
///                                    ###
///               %unsigned 1  LPBK_DRVVBUS0             0x1
///                                    ###
///                                    * DDrive VBUSThis controller signal controls the VBUS Valid comparator. This signal drives 5 V on VBUS through an external charge pump. When OTGDISABLE0 is set to 1'b0 and DRVVBUS0 is asserted, the Bandgap circuitry and VBUS Valid comparator are powered, even in Suspend or Sleep mode.■ 1: The VBUS Valid comparator is enabled.■ 0: The VBUS Valid comparator is disabled.
///                                    ###
///               %unsigned 1  LPBK_IDPULLUP0            0x0
///                                    ###
///                                    * Analog ID Input Sample EnableThis controller signal controls ID line sampling.■ 1: ID pin sampling is enabled, and the IDDIG0 output is valid.■ 0: ID pin sampling is disabled, and the IDDIG0 output is not valid.
///                                    ###
///               %%        25         # Stuffing bits...
///     @ 0x0001C USB_CTRL7            (P)
///               %unsigned 8  LPBK_DATAIN0              0x0
///                                    ###
///                                    * UTMI+ Data Input Bus, Low ByteIf WORDINTERFACE0 = 1'b1, this controller bus receives the low byte of the 16-bit word of transmit data on the UTMI+. If WORDINTERFACE0 = 1'b0, this bus receives the entire 8-bit word of transmit data on the UTMI+. This data is sampled on the next rising edge of PHYCLOCK0 after both TXREADY0 and TXVALID0 are set to 1'b1.
///                                    ###
///               %unsigned 8  LPBK_DATAINH0             0x0
///                                    ###
///                                    * UTMI+ Data Input Bus, High ByteIf WORDINTERFACE0 = 1'b1, this controller bus receives the high byte of the 16-bit transmit data on the UTMI+. If WORDINTERFACE0 = 1'b0, this bus is not valid and must be ignored. This data is sampled on the next rising edge of PHYCLOCK0 after both TXREADY0 and TXVALIDH0 are set to 1'b1.
///                                    ###
///               %unsigned 1  LPBK_TXVALID0             0x0
///                                    ###
///                                    * UTMI+ Transmit Valid Indicator, Low Byte This controller signal indicates that data on the DATAIN0[7:0] bus is valid.The assertion of TXVALID0 initiates a SYNC pattern on the USB.The deassertion of TXVALID0 initiates an EOP on the USB. The SYNC pattern must be initiated on the USB between one and two PHYCLOCK0 cycles after the assertion of TXVALID0. To enable the FSLSRCV0, FSVPLUS0, and FSVMINUS0 outputs, TXVALID0 must be set to 1'b0
///                                    ###
///               %unsigned 1  LPBK_TXVALIDH0            0x0
///                                    ###
///                                    * UTMI+ Transmit Valid Indicator, High ByteThis controller signal indicates that data on the DATAINH0[7:0] bus (high byte) is valid.This signal is valid only in 16-bit Data mode (WORDINTERFACE0 =1'b1). If this signal is not used, tie it low.
///                                    ###
///               %unsigned 2  LPBK_OPMODE               0x0
///                                    ###
///                                    * Set OPMODE for USB PHY in BIST mode.
///                                    ###
///               %unsigned 2  LPBK_XCVRSEL0             0x0
///                                    ###
///                                    * Transceiver SelectThis controller bus selects the HS, FS, or LS Transceiver.■ 11: Sends an LS packet on an FS bus or receives an LS packet.■ 10: LS Transceiver■ 01: FS Transceiver■ 00: HS Transceiver
///                                    ###
///               %unsigned 1  LPBK_TERMSEL0             0x0
///                                    ###
///                                    * USB Termination SelectThis controller signal sets the USB 2.0 femtoPHY's terminations to FS or HS.■ 1: Full-speed terminations are enabled.■ 0: High-speed terminations are enabled.
///                                    ###
///               %%        9          # Stuffing bits...
///     @ 0x00020 USB_CTRL8            (P)
///               %unsigned 1  LPBK_update               0x0
///               %%        31         # Stuffing bits...
///     @ 0x00024 USB_PHY_RB           (R-)
///               %unsigned 1  CHGDET0
///                                    ###
///                                    * Battery Charger Detection Output
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00028 TESTCLK0             (P)
///               %unsigned 1  TESTCLK0                  0x0
///                                    ###
///                                    * Clocking Signal for TESTDATAIN0[7:0]
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0002C TESTDATAOUTSEL0      (P)
///               %unsigned 1  TESTDATAOUTSEL0           0x0
///                                    ###
///                                    * Test Data Out Select
///                                    * This test signal determines which signals appear on TESTDATAOUT[3:0].
///                                    * 1: Mode-defined test register contents are output.
///                                    * 0: Mode-defined, internally generated signals are output.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00030 TESTDATAIN0          (P)
///               %unsigned 8  TESTDATAIN0               0x0
///                                    ###
///                                    * Test Data Write Bus
///                                    * This test bus holds test data to be written to the USB 2.0 femtoPHY. Test data is presented on bits[3:0], and the corresponding write enable is presented on bits[7:4].
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00034 TESTADDR             (P)
///               %unsigned 4  TESTADDR                  0x0
///                                    ###
///                                    * Test interface Register Address
///                                    * This bus specifies the register address for writing to or reading from test interface register.
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00038 TESTDATAOUT0         (R-)
///               %unsigned 4  TESTDATAOUT0
///                                    ###
///                                    * Test Data Read Bus.
///                                    ###
///               %%        28         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      60B, bits:     164b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_usbPHY
#define h_usbPHY (){}

    #define     RA_usbPHY_USB_CTRL0                            0x0000

    #define     BA_usbPHY_USB_CTRL0_PLLITUNE                   0x0000
    #define     B16usbPHY_USB_CTRL0_PLLITUNE                   0x0000
    #define   LSb32usbPHY_USB_CTRL0_PLLITUNE                      0
    #define   LSb16usbPHY_USB_CTRL0_PLLITUNE                      0
    #define       busbPHY_USB_CTRL0_PLLITUNE                   2
    #define   MSK32usbPHY_USB_CTRL0_PLLITUNE                      0x00000003

    #define     BA_usbPHY_USB_CTRL0_PLLPTUNE                   0x0000
    #define     B16usbPHY_USB_CTRL0_PLLPTUNE                   0x0000
    #define   LSb32usbPHY_USB_CTRL0_PLLPTUNE                      2
    #define   LSb16usbPHY_USB_CTRL0_PLLPTUNE                      2
    #define       busbPHY_USB_CTRL0_PLLPTUNE                   4
    #define   MSK32usbPHY_USB_CTRL0_PLLPTUNE                      0x0000003C

    #define     BA_usbPHY_USB_CTRL0_PLLBTUNE                   0x0000
    #define     B16usbPHY_USB_CTRL0_PLLBTUNE                   0x0000
    #define   LSb32usbPHY_USB_CTRL0_PLLBTUNE                      6
    #define   LSb16usbPHY_USB_CTRL0_PLLBTUNE                      6
    #define       busbPHY_USB_CTRL0_PLLBTUNE                   1
    #define   MSK32usbPHY_USB_CTRL0_PLLBTUNE                      0x00000040

    #define     BA_usbPHY_USB_CTRL0_COMPDISTUNE0               0x0000
    #define     B16usbPHY_USB_CTRL0_COMPDISTUNE0               0x0000
    #define   LSb32usbPHY_USB_CTRL0_COMPDISTUNE0                  7
    #define   LSb16usbPHY_USB_CTRL0_COMPDISTUNE0                  7
    #define       busbPHY_USB_CTRL0_COMPDISTUNE0               3
    #define   MSK32usbPHY_USB_CTRL0_COMPDISTUNE0                  0x00000380

    #define     BA_usbPHY_USB_CTRL0_SQRXTUNE0                  0x0001
    #define     B16usbPHY_USB_CTRL0_SQRXTUNE0                  0x0000
    #define   LSb32usbPHY_USB_CTRL0_SQRXTUNE0                     10
    #define   LSb16usbPHY_USB_CTRL0_SQRXTUNE0                     10
    #define       busbPHY_USB_CTRL0_SQRXTUNE0                  3
    #define   MSK32usbPHY_USB_CTRL0_SQRXTUNE0                     0x00001C00

    #define     BA_usbPHY_USB_CTRL0_VDATREFTUNE0               0x0001
    #define     B16usbPHY_USB_CTRL0_VDATREFTUNE0               0x0000
    #define   LSb32usbPHY_USB_CTRL0_VDATREFTUNE0                  13
    #define   LSb16usbPHY_USB_CTRL0_VDATREFTUNE0                  13
    #define       busbPHY_USB_CTRL0_VDATREFTUNE0               2
    #define   MSK32usbPHY_USB_CTRL0_VDATREFTUNE0                  0x00006000

    #define     BA_usbPHY_USB_CTRL0_OTGTUNE0                   0x0001
    #define     B16usbPHY_USB_CTRL0_OTGTUNE0                   0x0000
    #define   LSb32usbPHY_USB_CTRL0_OTGTUNE0                      15
    #define   LSb16usbPHY_USB_CTRL0_OTGTUNE0                      15
    #define       busbPHY_USB_CTRL0_OTGTUNE0                   3
    #define   MSK32usbPHY_USB_CTRL0_OTGTUNE0                      0x00038000

    #define     BA_usbPHY_USB_CTRL0_TXHSXVTUNE0                0x0002
    #define     B16usbPHY_USB_CTRL0_TXHSXVTUNE0                0x0002
    #define   LSb32usbPHY_USB_CTRL0_TXHSXVTUNE0                   18
    #define   LSb16usbPHY_USB_CTRL0_TXHSXVTUNE0                   2
    #define       busbPHY_USB_CTRL0_TXHSXVTUNE0                2
    #define   MSK32usbPHY_USB_CTRL0_TXHSXVTUNE0                   0x000C0000

    #define     BA_usbPHY_USB_CTRL0_TXFSLSTUNE0                0x0002
    #define     B16usbPHY_USB_CTRL0_TXFSLSTUNE0                0x0002
    #define   LSb32usbPHY_USB_CTRL0_TXFSLSTUNE0                   20
    #define   LSb16usbPHY_USB_CTRL0_TXFSLSTUNE0                   4
    #define       busbPHY_USB_CTRL0_TXFSLSTUNE0                4
    #define   MSK32usbPHY_USB_CTRL0_TXFSLSTUNE0                   0x00F00000

    #define     BA_usbPHY_USB_CTRL0_TXVREFTUNE0                0x0003
    #define     B16usbPHY_USB_CTRL0_TXVREFTUNE0                0x0002
    #define   LSb32usbPHY_USB_CTRL0_TXVREFTUNE0                   24
    #define   LSb16usbPHY_USB_CTRL0_TXVREFTUNE0                   8
    #define       busbPHY_USB_CTRL0_TXVREFTUNE0                4
    #define   MSK32usbPHY_USB_CTRL0_TXVREFTUNE0                   0x0F000000

    #define     BA_usbPHY_USB_CTRL0_TXRISETUNE0                0x0003
    #define     B16usbPHY_USB_CTRL0_TXRISETUNE0                0x0002
    #define   LSb32usbPHY_USB_CTRL0_TXRISETUNE0                   28
    #define   LSb16usbPHY_USB_CTRL0_TXRISETUNE0                   12
    #define       busbPHY_USB_CTRL0_TXRISETUNE0                2
    #define   MSK32usbPHY_USB_CTRL0_TXRISETUNE0                   0x30000000

    #define     BA_usbPHY_USB_CTRL0_TXRESTUNE0                 0x0003
    #define     B16usbPHY_USB_CTRL0_TXRESTUNE0                 0x0002
    #define   LSb32usbPHY_USB_CTRL0_TXRESTUNE0                    30
    #define   LSb16usbPHY_USB_CTRL0_TXRESTUNE0                    14
    #define       busbPHY_USB_CTRL0_TXRESTUNE0                 2
    #define   MSK32usbPHY_USB_CTRL0_TXRESTUNE0                    0xC0000000
    ///////////////////////////////////////////////////////////
    #define     RA_usbPHY_USB_CTRL1                            0x0004

    #define     BA_usbPHY_USB_CTRL1_TXPREEMPAMPTUNE0           0x0004
    #define     B16usbPHY_USB_CTRL1_TXPREEMPAMPTUNE0           0x0004
    #define   LSb32usbPHY_USB_CTRL1_TXPREEMPAMPTUNE0              0
    #define   LSb16usbPHY_USB_CTRL1_TXPREEMPAMPTUNE0              0
    #define       busbPHY_USB_CTRL1_TXPREEMPAMPTUNE0           2
    #define   MSK32usbPHY_USB_CTRL1_TXPREEMPAMPTUNE0              0x00000003

    #define     BA_usbPHY_USB_CTRL1_TXPREEMPPULSETUNE0         0x0004
    #define     B16usbPHY_USB_CTRL1_TXPREEMPPULSETUNE0         0x0004
    #define   LSb32usbPHY_USB_CTRL1_TXPREEMPPULSETUNE0            2
    #define   LSb16usbPHY_USB_CTRL1_TXPREEMPPULSETUNE0            2
    #define       busbPHY_USB_CTRL1_TXPREEMPPULSETUNE0         1
    #define   MSK32usbPHY_USB_CTRL1_TXPREEMPPULSETUNE0            0x00000004

    #define     BA_usbPHY_USB_CTRL1_VBUSVLDEXTSEL0             0x0004
    #define     B16usbPHY_USB_CTRL1_VBUSVLDEXTSEL0             0x0004
    #define   LSb32usbPHY_USB_CTRL1_VBUSVLDEXTSEL0                3
    #define   LSb16usbPHY_USB_CTRL1_VBUSVLDEXTSEL0                3
    #define       busbPHY_USB_CTRL1_VBUSVLDEXTSEL0             1
    #define   MSK32usbPHY_USB_CTRL1_VBUSVLDEXTSEL0                0x00000008

    #define     BA_usbPHY_USB_CTRL1_OTGDISABLE0                0x0004
    #define     B16usbPHY_USB_CTRL1_OTGDISABLE0                0x0004
    #define   LSb32usbPHY_USB_CTRL1_OTGDISABLE0                   4
    #define   LSb16usbPHY_USB_CTRL1_OTGDISABLE0                   4
    #define       busbPHY_USB_CTRL1_OTGDISABLE0                1
    #define   MSK32usbPHY_USB_CTRL1_OTGDISABLE0                   0x00000010

    #define     BA_usbPHY_USB_CTRL1_TXBITSTUFFEN0              0x0004
    #define     B16usbPHY_USB_CTRL1_TXBITSTUFFEN0              0x0004
    #define   LSb32usbPHY_USB_CTRL1_TXBITSTUFFEN0                 5
    #define   LSb16usbPHY_USB_CTRL1_TXBITSTUFFEN0                 5
    #define       busbPHY_USB_CTRL1_TXBITSTUFFEN0              1
    #define   MSK32usbPHY_USB_CTRL1_TXBITSTUFFEN0                 0x00000020

    #define     BA_usbPHY_USB_CTRL1_TXBITSTUFFENH0             0x0004
    #define     B16usbPHY_USB_CTRL1_TXBITSTUFFENH0             0x0004
    #define   LSb32usbPHY_USB_CTRL1_TXBITSTUFFENH0                6
    #define   LSb16usbPHY_USB_CTRL1_TXBITSTUFFENH0                6
    #define       busbPHY_USB_CTRL1_TXBITSTUFFENH0             1
    #define   MSK32usbPHY_USB_CTRL1_TXBITSTUFFENH0                0x00000040

    #define     BA_usbPHY_USB_CTRL1_CHRGSEL0                   0x0004
    #define     B16usbPHY_USB_CTRL1_CHRGSEL0                   0x0004
    #define   LSb32usbPHY_USB_CTRL1_CHRGSEL0                      7
    #define   LSb16usbPHY_USB_CTRL1_CHRGSEL0                      7
    #define       busbPHY_USB_CTRL1_CHRGSEL0                   1
    #define   MSK32usbPHY_USB_CTRL1_CHRGSEL0                      0x00000080

    #define     BA_usbPHY_USB_CTRL1_VDATDETENB0                0x0005
    #define     B16usbPHY_USB_CTRL1_VDATDETENB0                0x0004
    #define   LSb32usbPHY_USB_CTRL1_VDATDETENB0                   8
    #define   LSb16usbPHY_USB_CTRL1_VDATDETENB0                   8
    #define       busbPHY_USB_CTRL1_VDATDETENB0                1
    #define   MSK32usbPHY_USB_CTRL1_VDATDETENB0                   0x00000100

    #define     BA_usbPHY_USB_CTRL1_VDATSRCENB0                0x0005
    #define     B16usbPHY_USB_CTRL1_VDATSRCENB0                0x0004
    #define   LSb32usbPHY_USB_CTRL1_VDATSRCENB0                   9
    #define   LSb16usbPHY_USB_CTRL1_VDATSRCENB0                   9
    #define       busbPHY_USB_CTRL1_VDATSRCENB0                1
    #define   MSK32usbPHY_USB_CTRL1_VDATSRCENB0                   0x00000200

    #define     BA_usbPHY_USB_CTRL1_DCDENB0                    0x0005
    #define     B16usbPHY_USB_CTRL1_DCDENB0                    0x0004
    #define   LSb32usbPHY_USB_CTRL1_DCDENB0                       10
    #define   LSb16usbPHY_USB_CTRL1_DCDENB0                       10
    #define       busbPHY_USB_CTRL1_DCDENB0                    1
    #define   MSK32usbPHY_USB_CTRL1_DCDENB0                       0x00000400

    #define     BA_usbPHY_USB_CTRL1_BYPASSDPDATA0              0x0005
    #define     B16usbPHY_USB_CTRL1_BYPASSDPDATA0              0x0004
    #define   LSb32usbPHY_USB_CTRL1_BYPASSDPDATA0                 11
    #define   LSb16usbPHY_USB_CTRL1_BYPASSDPDATA0                 11
    #define       busbPHY_USB_CTRL1_BYPASSDPDATA0              1
    #define   MSK32usbPHY_USB_CTRL1_BYPASSDPDATA0                 0x00000800

    #define     BA_usbPHY_USB_CTRL1_BYPASSDMDATA0              0x0005
    #define     B16usbPHY_USB_CTRL1_BYPASSDMDATA0              0x0004
    #define   LSb32usbPHY_USB_CTRL1_BYPASSDMDATA0                 12
    #define   LSb16usbPHY_USB_CTRL1_BYPASSDMDATA0                 12
    #define       busbPHY_USB_CTRL1_BYPASSDMDATA0              1
    #define   MSK32usbPHY_USB_CTRL1_BYPASSDMDATA0                 0x00001000

    #define     BA_usbPHY_USB_CTRL1_BYPASSDPEN0                0x0005
    #define     B16usbPHY_USB_CTRL1_BYPASSDPEN0                0x0004
    #define   LSb32usbPHY_USB_CTRL1_BYPASSDPEN0                   13
    #define   LSb16usbPHY_USB_CTRL1_BYPASSDPEN0                   13
    #define       busbPHY_USB_CTRL1_BYPASSDPEN0                1
    #define   MSK32usbPHY_USB_CTRL1_BYPASSDPEN0                   0x00002000

    #define     BA_usbPHY_USB_CTRL1_BYPASSDMEN0                0x0005
    #define     B16usbPHY_USB_CTRL1_BYPASSDMEN0                0x0004
    #define   LSb32usbPHY_USB_CTRL1_BYPASSDMEN0                   14
    #define   LSb16usbPHY_USB_CTRL1_BYPASSDMEN0                   14
    #define       busbPHY_USB_CTRL1_BYPASSDMEN0                1
    #define   MSK32usbPHY_USB_CTRL1_BYPASSDMEN0                   0x00004000

    #define     BA_usbPHY_USB_CTRL1_BYPASSSEL0                 0x0005
    #define     B16usbPHY_USB_CTRL1_BYPASSSEL0                 0x0004
    #define   LSb32usbPHY_USB_CTRL1_BYPASSSEL0                    15
    #define   LSb16usbPHY_USB_CTRL1_BYPASSSEL0                    15
    #define       busbPHY_USB_CTRL1_BYPASSSEL0                 1
    #define   MSK32usbPHY_USB_CTRL1_BYPASSSEL0                    0x00008000

    #define     BA_usbPHY_USB_CTRL1_FSEL                       0x0006
    #define     B16usbPHY_USB_CTRL1_FSEL                       0x0006
    #define   LSb32usbPHY_USB_CTRL1_FSEL                          16
    #define   LSb16usbPHY_USB_CTRL1_FSEL                          0
    #define       busbPHY_USB_CTRL1_FSEL                       3
    #define   MSK32usbPHY_USB_CTRL1_FSEL                          0x00070000

    #define     BA_usbPHY_USB_CTRL1_REFCLKSEL                  0x0006
    #define     B16usbPHY_USB_CTRL1_REFCLKSEL                  0x0006
    #define   LSb32usbPHY_USB_CTRL1_REFCLKSEL                     19
    #define   LSb16usbPHY_USB_CTRL1_REFCLKSEL                     3
    #define       busbPHY_USB_CTRL1_REFCLKSEL                  2
    #define   MSK32usbPHY_USB_CTRL1_REFCLKSEL                     0x00180000

    #define     BA_usbPHY_USB_CTRL1_COMMONONN                  0x0006
    #define     B16usbPHY_USB_CTRL1_COMMONONN                  0x0006
    #define   LSb32usbPHY_USB_CTRL1_COMMONONN                     21
    #define   LSb16usbPHY_USB_CTRL1_COMMONONN                     5
    #define       busbPHY_USB_CTRL1_COMMONONN                  1
    #define   MSK32usbPHY_USB_CTRL1_COMMONONN                     0x00200000

    #define     BA_usbPHY_USB_CTRL1_PORTRESET0                 0x0006
    #define     B16usbPHY_USB_CTRL1_PORTRESET0                 0x0006
    #define   LSb32usbPHY_USB_CTRL1_PORTRESET0                    22
    #define   LSb16usbPHY_USB_CTRL1_PORTRESET0                    6
    #define       busbPHY_USB_CTRL1_PORTRESET0                 1
    #define   MSK32usbPHY_USB_CTRL1_PORTRESET0                    0x00400000

    #define     BA_usbPHY_USB_CTRL1_VBUSVLDEXT0                0x0006
    #define     B16usbPHY_USB_CTRL1_VBUSVLDEXT0                0x0006
    #define   LSb32usbPHY_USB_CTRL1_VBUSVLDEXT0                   23
    #define   LSb16usbPHY_USB_CTRL1_VBUSVLDEXT0                   7
    #define       busbPHY_USB_CTRL1_VBUSVLDEXT0                1
    #define   MSK32usbPHY_USB_CTRL1_VBUSVLDEXT0                   0x00800000

    #define     BA_usbPHY_USB_CTRL1_RETENABLEN                 0x0007
    #define     B16usbPHY_USB_CTRL1_RETENABLEN                 0x0006
    #define   LSb32usbPHY_USB_CTRL1_RETENABLEN                    24
    #define   LSb16usbPHY_USB_CTRL1_RETENABLEN                    8
    #define       busbPHY_USB_CTRL1_RETENABLEN                 1
    #define   MSK32usbPHY_USB_CTRL1_RETENABLEN                    0x01000000

    #define     BA_usbPHY_USB_CTRL1_AUTORSMENB0                0x0007
    #define     B16usbPHY_USB_CTRL1_AUTORSMENB0                0x0006
    #define   LSb32usbPHY_USB_CTRL1_AUTORSMENB0                   25
    #define   LSb16usbPHY_USB_CTRL1_AUTORSMENB0                   9
    #define       busbPHY_USB_CTRL1_AUTORSMENB0                1
    #define   MSK32usbPHY_USB_CTRL1_AUTORSMENB0                   0x02000000

    #define     BA_usbPHY_USB_CTRL1_HSXCVREXTCTL0              0x0007
    #define     B16usbPHY_USB_CTRL1_HSXCVREXTCTL0              0x0006
    #define   LSb32usbPHY_USB_CTRL1_HSXCVREXTCTL0                 26
    #define   LSb16usbPHY_USB_CTRL1_HSXCVREXTCTL0                 10
    #define       busbPHY_USB_CTRL1_HSXCVREXTCTL0              1
    #define   MSK32usbPHY_USB_CTRL1_HSXCVREXTCTL0                 0x04000000
    ///////////////////////////////////////////////////////////
    #define     RA_usbPHY_USB_CTRL2                            0x0008

    #define     BA_usbPHY_USB_CTRL2_ATERESET                   0x0008
    #define     B16usbPHY_USB_CTRL2_ATERESET                   0x0008
    #define   LSb32usbPHY_USB_CTRL2_ATERESET                      0
    #define   LSb16usbPHY_USB_CTRL2_ATERESET                      0
    #define       busbPHY_USB_CTRL2_ATERESET                   1
    #define   MSK32usbPHY_USB_CTRL2_ATERESET                      0x00000001

    #define     BA_usbPHY_USB_CTRL2_SIDDQ                      0x0008
    #define     B16usbPHY_USB_CTRL2_SIDDQ                      0x0008
    #define   LSb32usbPHY_USB_CTRL2_SIDDQ                         1
    #define   LSb16usbPHY_USB_CTRL2_SIDDQ                         1
    #define       busbPHY_USB_CTRL2_SIDDQ                      1
    #define   MSK32usbPHY_USB_CTRL2_SIDDQ                         0x00000002

    #define     BA_usbPHY_USB_CTRL2_VATESTENB                  0x0008
    #define     B16usbPHY_USB_CTRL2_VATESTENB                  0x0008
    #define   LSb32usbPHY_USB_CTRL2_VATESTENB                     2
    #define   LSb16usbPHY_USB_CTRL2_VATESTENB                     2
    #define       busbPHY_USB_CTRL2_VATESTENB                  2
    #define   MSK32usbPHY_USB_CTRL2_VATESTENB                     0x0000000C

    #define     BA_usbPHY_USB_CTRL2_LOOPBACKENB0               0x0008
    #define     B16usbPHY_USB_CTRL2_LOOPBACKENB0               0x0008
    #define   LSb32usbPHY_USB_CTRL2_LOOPBACKENB0                  4
    #define   LSb16usbPHY_USB_CTRL2_LOOPBACKENB0                  4
    #define       busbPHY_USB_CTRL2_LOOPBACKENB0               1
    #define   MSK32usbPHY_USB_CTRL2_LOOPBACKENB0                  0x00000010

    #define     BA_usbPHY_USB_CTRL2_TESTBURNIN                 0x0008
    #define     B16usbPHY_USB_CTRL2_TESTBURNIN                 0x0008
    #define   LSb32usbPHY_USB_CTRL2_TESTBURNIN                    5
    #define   LSb16usbPHY_USB_CTRL2_TESTBURNIN                    5
    #define       busbPHY_USB_CTRL2_TESTBURNIN                 1
    #define   MSK32usbPHY_USB_CTRL2_TESTBURNIN                    0x00000020

    #define     BA_usbPHY_USB_CTRL2_iTestPhy                   0x0008
    #define     B16usbPHY_USB_CTRL2_iTestPhy                   0x0008
    #define   LSb32usbPHY_USB_CTRL2_iTestPhy                      6
    #define   LSb16usbPHY_USB_CTRL2_iTestPhy                      6
    #define       busbPHY_USB_CTRL2_iTestPhy                   1
    #define   MSK32usbPHY_USB_CTRL2_iTestPhy                      0x00000040
    ///////////////////////////////////////////////////////////
    #define     RA_usbPHY_USB_CTRL3                            0x000C

    #define     BA_usbPHY_USB_CTRL3_ss_scaledown_mode          0x000C
    #define     B16usbPHY_USB_CTRL3_ss_scaledown_mode          0x000C
    #define   LSb32usbPHY_USB_CTRL3_ss_scaledown_mode             0
    #define   LSb16usbPHY_USB_CTRL3_ss_scaledown_mode             0
    #define       busbPHY_USB_CTRL3_ss_scaledown_mode          2
    #define   MSK32usbPHY_USB_CTRL3_ss_scaledown_mode             0x00000003

    #define     BA_usbPHY_USB_CTRL3_M_HBigEndian               0x000C
    #define     B16usbPHY_USB_CTRL3_M_HBigEndian               0x000C
    #define   LSb32usbPHY_USB_CTRL3_M_HBigEndian                  2
    #define   LSb16usbPHY_USB_CTRL3_M_HBigEndian                  2
    #define       busbPHY_USB_CTRL3_M_HBigEndian               1
    #define   MSK32usbPHY_USB_CTRL3_M_HBigEndian                  0x00000004

    #define     BA_usbPHY_USB_CTRL3_S_HBigEndian               0x000C
    #define     B16usbPHY_USB_CTRL3_S_HBigEndian               0x000C
    #define   LSb32usbPHY_USB_CTRL3_S_HBigEndian                  3
    #define   LSb16usbPHY_USB_CTRL3_S_HBigEndian                  3
    #define       busbPHY_USB_CTRL3_S_HBigEndian               1
    #define   MSK32usbPHY_USB_CTRL3_S_HBigEndian                  0x00000008

    #define     BA_usbPHY_USB_CTRL3_sel_debug_clk              0x000C
    #define     B16usbPHY_USB_CTRL3_sel_debug_clk              0x000C
    #define   LSb32usbPHY_USB_CTRL3_sel_debug_clk                 4
    #define   LSb16usbPHY_USB_CTRL3_sel_debug_clk                 4
    #define       busbPHY_USB_CTRL3_sel_debug_clk              1
    #define   MSK32usbPHY_USB_CTRL3_sel_debug_clk                 0x00000010

    #define     BA_usbPHY_USB_CTRL3_sel_debug_data             0x000C
    #define     B16usbPHY_USB_CTRL3_sel_debug_data             0x000C
    #define   LSb32usbPHY_USB_CTRL3_sel_debug_data                5
    #define   LSb16usbPHY_USB_CTRL3_sel_debug_data                5
    #define       busbPHY_USB_CTRL3_sel_debug_data             5
    #define   MSK32usbPHY_USB_CTRL3_sel_debug_data                0x000003E0

    #define     BA_usbPHY_USB_CTRL3_SYS_DMA_DONE               0x000D
    #define     B16usbPHY_USB_CTRL3_SYS_DMA_DONE               0x000C
    #define   LSb32usbPHY_USB_CTRL3_SYS_DMA_DONE                  10
    #define   LSb16usbPHY_USB_CTRL3_SYS_DMA_DONE                  10
    #define       busbPHY_USB_CTRL3_SYS_DMA_DONE               1
    #define   MSK32usbPHY_USB_CTRL3_SYS_DMA_DONE                  0x00000400

    #define     BA_usbPHY_USB_CTRL3_dbnce_fltr_bypass          0x000D
    #define     B16usbPHY_USB_CTRL3_dbnce_fltr_bypass          0x000C
    #define   LSb32usbPHY_USB_CTRL3_dbnce_fltr_bypass             11
    #define   LSb16usbPHY_USB_CTRL3_dbnce_fltr_bypass             11
    #define       busbPHY_USB_CTRL3_dbnce_fltr_bypass          1
    #define   MSK32usbPHY_USB_CTRL3_dbnce_fltr_bypass             0x00000800
    ///////////////////////////////////////////////////////////
    #define     RA_usbPHY_USB_CTRL4                            0x0010

    #define     BA_usbPHY_USB_CTRL4_dev_chirp_time_16b         0x0010
    #define     B16usbPHY_USB_CTRL4_dev_chirp_time_16b         0x0010
    #define   LSb32usbPHY_USB_CTRL4_dev_chirp_time_16b            0
    #define   LSb16usbPHY_USB_CTRL4_dev_chirp_time_16b            0
    #define       busbPHY_USB_CTRL4_dev_chirp_time_16b         18
    #define   MSK32usbPHY_USB_CTRL4_dev_chirp_time_16b            0x0003FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_usbPHY_USB_CTRL5                            0x0014

    #define     BA_usbPHY_USB_CTRL5_dev_chirp_time_8b          0x0014
    #define     B16usbPHY_USB_CTRL5_dev_chirp_time_8b          0x0014
    #define   LSb32usbPHY_USB_CTRL5_dev_chirp_time_8b             0
    #define   LSb16usbPHY_USB_CTRL5_dev_chirp_time_8b             0
    #define       busbPHY_USB_CTRL5_dev_chirp_time_8b          18
    #define   MSK32usbPHY_USB_CTRL5_dev_chirp_time_8b             0x0003FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_usbPHY_USB_CTRL6                            0x0018

    #define     BA_usbPHY_USB_CTRL6_LPBK_SUSPENDM0             0x0018
    #define     B16usbPHY_USB_CTRL6_LPBK_SUSPENDM0             0x0018
    #define   LSb32usbPHY_USB_CTRL6_LPBK_SUSPENDM0                0
    #define   LSb16usbPHY_USB_CTRL6_LPBK_SUSPENDM0                0
    #define       busbPHY_USB_CTRL6_LPBK_SUSPENDM0             1
    #define   MSK32usbPHY_USB_CTRL6_LPBK_SUSPENDM0                0x00000001

    #define     BA_usbPHY_USB_CTRL6_LPBK_FSXCVROWNER0          0x0018
    #define     B16usbPHY_USB_CTRL6_LPBK_FSXCVROWNER0          0x0018
    #define   LSb32usbPHY_USB_CTRL6_LPBK_FSXCVROWNER0             1
    #define   LSb16usbPHY_USB_CTRL6_LPBK_FSXCVROWNER0             1
    #define       busbPHY_USB_CTRL6_LPBK_FSXCVROWNER0          1
    #define   MSK32usbPHY_USB_CTRL6_LPBK_FSXCVROWNER0             0x00000002

    #define     BA_usbPHY_USB_CTRL6_LPBK_WORDINTERFACE0        0x0018
    #define     B16usbPHY_USB_CTRL6_LPBK_WORDINTERFACE0        0x0018
    #define   LSb32usbPHY_USB_CTRL6_LPBK_WORDINTERFACE0           2
    #define   LSb16usbPHY_USB_CTRL6_LPBK_WORDINTERFACE0           2
    #define       busbPHY_USB_CTRL6_LPBK_WORDINTERFACE0        1
    #define   MSK32usbPHY_USB_CTRL6_LPBK_WORDINTERFACE0           0x00000004

    #define     BA_usbPHY_USB_CTRL6_LPBK_DPPULLDOWN0           0x0018
    #define     B16usbPHY_USB_CTRL6_LPBK_DPPULLDOWN0           0x0018
    #define   LSb32usbPHY_USB_CTRL6_LPBK_DPPULLDOWN0              3
    #define   LSb16usbPHY_USB_CTRL6_LPBK_DPPULLDOWN0              3
    #define       busbPHY_USB_CTRL6_LPBK_DPPULLDOWN0           1
    #define   MSK32usbPHY_USB_CTRL6_LPBK_DPPULLDOWN0              0x00000008

    #define     BA_usbPHY_USB_CTRL6_LPBK_DMPULLDOWN0           0x0018
    #define     B16usbPHY_USB_CTRL6_LPBK_DMPULLDOWN0           0x0018
    #define   LSb32usbPHY_USB_CTRL6_LPBK_DMPULLDOWN0              4
    #define   LSb16usbPHY_USB_CTRL6_LPBK_DMPULLDOWN0              4
    #define       busbPHY_USB_CTRL6_LPBK_DMPULLDOWN0           1
    #define   MSK32usbPHY_USB_CTRL6_LPBK_DMPULLDOWN0              0x00000010

    #define     BA_usbPHY_USB_CTRL6_LPBK_DRVVBUS0              0x0018
    #define     B16usbPHY_USB_CTRL6_LPBK_DRVVBUS0              0x0018
    #define   LSb32usbPHY_USB_CTRL6_LPBK_DRVVBUS0                 5
    #define   LSb16usbPHY_USB_CTRL6_LPBK_DRVVBUS0                 5
    #define       busbPHY_USB_CTRL6_LPBK_DRVVBUS0              1
    #define   MSK32usbPHY_USB_CTRL6_LPBK_DRVVBUS0                 0x00000020

    #define     BA_usbPHY_USB_CTRL6_LPBK_IDPULLUP0             0x0018
    #define     B16usbPHY_USB_CTRL6_LPBK_IDPULLUP0             0x0018
    #define   LSb32usbPHY_USB_CTRL6_LPBK_IDPULLUP0                6
    #define   LSb16usbPHY_USB_CTRL6_LPBK_IDPULLUP0                6
    #define       busbPHY_USB_CTRL6_LPBK_IDPULLUP0             1
    #define   MSK32usbPHY_USB_CTRL6_LPBK_IDPULLUP0                0x00000040
    ///////////////////////////////////////////////////////////
    #define     RA_usbPHY_USB_CTRL7                            0x001C

    #define     BA_usbPHY_USB_CTRL7_LPBK_DATAIN0               0x001C
    #define     B16usbPHY_USB_CTRL7_LPBK_DATAIN0               0x001C
    #define   LSb32usbPHY_USB_CTRL7_LPBK_DATAIN0                  0
    #define   LSb16usbPHY_USB_CTRL7_LPBK_DATAIN0                  0
    #define       busbPHY_USB_CTRL7_LPBK_DATAIN0               8
    #define   MSK32usbPHY_USB_CTRL7_LPBK_DATAIN0                  0x000000FF

    #define     BA_usbPHY_USB_CTRL7_LPBK_DATAINH0              0x001D
    #define     B16usbPHY_USB_CTRL7_LPBK_DATAINH0              0x001C
    #define   LSb32usbPHY_USB_CTRL7_LPBK_DATAINH0                 8
    #define   LSb16usbPHY_USB_CTRL7_LPBK_DATAINH0                 8
    #define       busbPHY_USB_CTRL7_LPBK_DATAINH0              8
    #define   MSK32usbPHY_USB_CTRL7_LPBK_DATAINH0                 0x0000FF00

    #define     BA_usbPHY_USB_CTRL7_LPBK_TXVALID0              0x001E
    #define     B16usbPHY_USB_CTRL7_LPBK_TXVALID0              0x001E
    #define   LSb32usbPHY_USB_CTRL7_LPBK_TXVALID0                 16
    #define   LSb16usbPHY_USB_CTRL7_LPBK_TXVALID0                 0
    #define       busbPHY_USB_CTRL7_LPBK_TXVALID0              1
    #define   MSK32usbPHY_USB_CTRL7_LPBK_TXVALID0                 0x00010000

    #define     BA_usbPHY_USB_CTRL7_LPBK_TXVALIDH0             0x001E
    #define     B16usbPHY_USB_CTRL7_LPBK_TXVALIDH0             0x001E
    #define   LSb32usbPHY_USB_CTRL7_LPBK_TXVALIDH0                17
    #define   LSb16usbPHY_USB_CTRL7_LPBK_TXVALIDH0                1
    #define       busbPHY_USB_CTRL7_LPBK_TXVALIDH0             1
    #define   MSK32usbPHY_USB_CTRL7_LPBK_TXVALIDH0                0x00020000

    #define     BA_usbPHY_USB_CTRL7_LPBK_OPMODE                0x001E
    #define     B16usbPHY_USB_CTRL7_LPBK_OPMODE                0x001E
    #define   LSb32usbPHY_USB_CTRL7_LPBK_OPMODE                   18
    #define   LSb16usbPHY_USB_CTRL7_LPBK_OPMODE                   2
    #define       busbPHY_USB_CTRL7_LPBK_OPMODE                2
    #define   MSK32usbPHY_USB_CTRL7_LPBK_OPMODE                   0x000C0000

    #define     BA_usbPHY_USB_CTRL7_LPBK_XCVRSEL0              0x001E
    #define     B16usbPHY_USB_CTRL7_LPBK_XCVRSEL0              0x001E
    #define   LSb32usbPHY_USB_CTRL7_LPBK_XCVRSEL0                 20
    #define   LSb16usbPHY_USB_CTRL7_LPBK_XCVRSEL0                 4
    #define       busbPHY_USB_CTRL7_LPBK_XCVRSEL0              2
    #define   MSK32usbPHY_USB_CTRL7_LPBK_XCVRSEL0                 0x00300000

    #define     BA_usbPHY_USB_CTRL7_LPBK_TERMSEL0              0x001E
    #define     B16usbPHY_USB_CTRL7_LPBK_TERMSEL0              0x001E
    #define   LSb32usbPHY_USB_CTRL7_LPBK_TERMSEL0                 22
    #define   LSb16usbPHY_USB_CTRL7_LPBK_TERMSEL0                 6
    #define       busbPHY_USB_CTRL7_LPBK_TERMSEL0              1
    #define   MSK32usbPHY_USB_CTRL7_LPBK_TERMSEL0                 0x00400000
    ///////////////////////////////////////////////////////////
    #define     RA_usbPHY_USB_CTRL8                            0x0020

    #define     BA_usbPHY_USB_CTRL8_LPBK_update                0x0020
    #define     B16usbPHY_USB_CTRL8_LPBK_update                0x0020
    #define   LSb32usbPHY_USB_CTRL8_LPBK_update                   0
    #define   LSb16usbPHY_USB_CTRL8_LPBK_update                   0
    #define       busbPHY_USB_CTRL8_LPBK_update                1
    #define   MSK32usbPHY_USB_CTRL8_LPBK_update                   0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_usbPHY_USB_PHY_RB                           0x0024

    #define     BA_usbPHY_USB_PHY_RB_CHGDET0                   0x0024
    #define     B16usbPHY_USB_PHY_RB_CHGDET0                   0x0024
    #define   LSb32usbPHY_USB_PHY_RB_CHGDET0                      0
    #define   LSb16usbPHY_USB_PHY_RB_CHGDET0                      0
    #define       busbPHY_USB_PHY_RB_CHGDET0                   1
    #define   MSK32usbPHY_USB_PHY_RB_CHGDET0                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_usbPHY_TESTCLK0                             0x0028

    #define     BA_usbPHY_TESTCLK0_TESTCLK0                    0x0028
    #define     B16usbPHY_TESTCLK0_TESTCLK0                    0x0028
    #define   LSb32usbPHY_TESTCLK0_TESTCLK0                       0
    #define   LSb16usbPHY_TESTCLK0_TESTCLK0                       0
    #define       busbPHY_TESTCLK0_TESTCLK0                    1
    #define   MSK32usbPHY_TESTCLK0_TESTCLK0                       0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_usbPHY_TESTDATAOUTSEL0                      0x002C

    #define     BA_usbPHY_TESTDATAOUTSEL0_TESTDATAOUTSEL0      0x002C
    #define     B16usbPHY_TESTDATAOUTSEL0_TESTDATAOUTSEL0      0x002C
    #define   LSb32usbPHY_TESTDATAOUTSEL0_TESTDATAOUTSEL0         0
    #define   LSb16usbPHY_TESTDATAOUTSEL0_TESTDATAOUTSEL0         0
    #define       busbPHY_TESTDATAOUTSEL0_TESTDATAOUTSEL0      1
    #define   MSK32usbPHY_TESTDATAOUTSEL0_TESTDATAOUTSEL0         0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_usbPHY_TESTDATAIN0                          0x0030

    #define     BA_usbPHY_TESTDATAIN0_TESTDATAIN0              0x0030
    #define     B16usbPHY_TESTDATAIN0_TESTDATAIN0              0x0030
    #define   LSb32usbPHY_TESTDATAIN0_TESTDATAIN0                 0
    #define   LSb16usbPHY_TESTDATAIN0_TESTDATAIN0                 0
    #define       busbPHY_TESTDATAIN0_TESTDATAIN0              8
    #define   MSK32usbPHY_TESTDATAIN0_TESTDATAIN0                 0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_usbPHY_TESTADDR                             0x0034

    #define     BA_usbPHY_TESTADDR_TESTADDR                    0x0034
    #define     B16usbPHY_TESTADDR_TESTADDR                    0x0034
    #define   LSb32usbPHY_TESTADDR_TESTADDR                       0
    #define   LSb16usbPHY_TESTADDR_TESTADDR                       0
    #define       busbPHY_TESTADDR_TESTADDR                    4
    #define   MSK32usbPHY_TESTADDR_TESTADDR                       0x0000000F
    ///////////////////////////////////////////////////////////
    #define     RA_usbPHY_TESTDATAOUT0                         0x0038

    #define     BA_usbPHY_TESTDATAOUT0_TESTDATAOUT0            0x0038
    #define     B16usbPHY_TESTDATAOUT0_TESTDATAOUT0            0x0038
    #define   LSb32usbPHY_TESTDATAOUT0_TESTDATAOUT0               0
    #define   LSb16usbPHY_TESTDATAOUT0_TESTDATAOUT0               0
    #define       busbPHY_TESTDATAOUT0_TESTDATAOUT0            4
    #define   MSK32usbPHY_TESTDATAOUT0_TESTDATAOUT0               0x0000000F
    ///////////////////////////////////////////////////////////

    typedef struct SIE_usbPHY {
    ///////////////////////////////////////////////////////////
    #define   GET32usbPHY_USB_CTRL0_PLLITUNE(r32)              _BFGET_(r32, 1, 0)
    #define   SET32usbPHY_USB_CTRL0_PLLITUNE(r32,v)            _BFSET_(r32, 1, 0,v)
    #define   GET16usbPHY_USB_CTRL0_PLLITUNE(r16)              _BFGET_(r16, 1, 0)
    #define   SET16usbPHY_USB_CTRL0_PLLITUNE(r16,v)            _BFSET_(r16, 1, 0,v)

    #define   GET32usbPHY_USB_CTRL0_PLLPTUNE(r32)              _BFGET_(r32, 5, 2)
    #define   SET32usbPHY_USB_CTRL0_PLLPTUNE(r32,v)            _BFSET_(r32, 5, 2,v)
    #define   GET16usbPHY_USB_CTRL0_PLLPTUNE(r16)              _BFGET_(r16, 5, 2)
    #define   SET16usbPHY_USB_CTRL0_PLLPTUNE(r16,v)            _BFSET_(r16, 5, 2,v)

    #define   GET32usbPHY_USB_CTRL0_PLLBTUNE(r32)              _BFGET_(r32, 6, 6)
    #define   SET32usbPHY_USB_CTRL0_PLLBTUNE(r32,v)            _BFSET_(r32, 6, 6,v)
    #define   GET16usbPHY_USB_CTRL0_PLLBTUNE(r16)              _BFGET_(r16, 6, 6)
    #define   SET16usbPHY_USB_CTRL0_PLLBTUNE(r16,v)            _BFSET_(r16, 6, 6,v)

    #define   GET32usbPHY_USB_CTRL0_COMPDISTUNE0(r32)          _BFGET_(r32, 9, 7)
    #define   SET32usbPHY_USB_CTRL0_COMPDISTUNE0(r32,v)        _BFSET_(r32, 9, 7,v)
    #define   GET16usbPHY_USB_CTRL0_COMPDISTUNE0(r16)          _BFGET_(r16, 9, 7)
    #define   SET16usbPHY_USB_CTRL0_COMPDISTUNE0(r16,v)        _BFSET_(r16, 9, 7,v)

    #define   GET32usbPHY_USB_CTRL0_SQRXTUNE0(r32)             _BFGET_(r32,12,10)
    #define   SET32usbPHY_USB_CTRL0_SQRXTUNE0(r32,v)           _BFSET_(r32,12,10,v)
    #define   GET16usbPHY_USB_CTRL0_SQRXTUNE0(r16)             _BFGET_(r16,12,10)
    #define   SET16usbPHY_USB_CTRL0_SQRXTUNE0(r16,v)           _BFSET_(r16,12,10,v)

    #define   GET32usbPHY_USB_CTRL0_VDATREFTUNE0(r32)          _BFGET_(r32,14,13)
    #define   SET32usbPHY_USB_CTRL0_VDATREFTUNE0(r32,v)        _BFSET_(r32,14,13,v)
    #define   GET16usbPHY_USB_CTRL0_VDATREFTUNE0(r16)          _BFGET_(r16,14,13)
    #define   SET16usbPHY_USB_CTRL0_VDATREFTUNE0(r16,v)        _BFSET_(r16,14,13,v)

    #define   GET32usbPHY_USB_CTRL0_OTGTUNE0(r32)              _BFGET_(r32,17,15)
    #define   SET32usbPHY_USB_CTRL0_OTGTUNE0(r32,v)            _BFSET_(r32,17,15,v)

    #define   GET32usbPHY_USB_CTRL0_TXHSXVTUNE0(r32)           _BFGET_(r32,19,18)
    #define   SET32usbPHY_USB_CTRL0_TXHSXVTUNE0(r32,v)         _BFSET_(r32,19,18,v)
    #define   GET16usbPHY_USB_CTRL0_TXHSXVTUNE0(r16)           _BFGET_(r16, 3, 2)
    #define   SET16usbPHY_USB_CTRL0_TXHSXVTUNE0(r16,v)         _BFSET_(r16, 3, 2,v)

    #define   GET32usbPHY_USB_CTRL0_TXFSLSTUNE0(r32)           _BFGET_(r32,23,20)
    #define   SET32usbPHY_USB_CTRL0_TXFSLSTUNE0(r32,v)         _BFSET_(r32,23,20,v)
    #define   GET16usbPHY_USB_CTRL0_TXFSLSTUNE0(r16)           _BFGET_(r16, 7, 4)
    #define   SET16usbPHY_USB_CTRL0_TXFSLSTUNE0(r16,v)         _BFSET_(r16, 7, 4,v)

    #define   GET32usbPHY_USB_CTRL0_TXVREFTUNE0(r32)           _BFGET_(r32,27,24)
    #define   SET32usbPHY_USB_CTRL0_TXVREFTUNE0(r32,v)         _BFSET_(r32,27,24,v)
    #define   GET16usbPHY_USB_CTRL0_TXVREFTUNE0(r16)           _BFGET_(r16,11, 8)
    #define   SET16usbPHY_USB_CTRL0_TXVREFTUNE0(r16,v)         _BFSET_(r16,11, 8,v)

    #define   GET32usbPHY_USB_CTRL0_TXRISETUNE0(r32)           _BFGET_(r32,29,28)
    #define   SET32usbPHY_USB_CTRL0_TXRISETUNE0(r32,v)         _BFSET_(r32,29,28,v)
    #define   GET16usbPHY_USB_CTRL0_TXRISETUNE0(r16)           _BFGET_(r16,13,12)
    #define   SET16usbPHY_USB_CTRL0_TXRISETUNE0(r16,v)         _BFSET_(r16,13,12,v)

    #define   GET32usbPHY_USB_CTRL0_TXRESTUNE0(r32)            _BFGET_(r32,31,30)
    #define   SET32usbPHY_USB_CTRL0_TXRESTUNE0(r32,v)          _BFSET_(r32,31,30,v)
    #define   GET16usbPHY_USB_CTRL0_TXRESTUNE0(r16)            _BFGET_(r16,15,14)
    #define   SET16usbPHY_USB_CTRL0_TXRESTUNE0(r16,v)          _BFSET_(r16,15,14,v)

    #define     w32usbPHY_USB_CTRL0                            {\
            UNSG32 uUSB_CTRL0_PLLITUNE                         :  2;\
            UNSG32 uUSB_CTRL0_PLLPTUNE                         :  4;\
            UNSG32 uUSB_CTRL0_PLLBTUNE                         :  1;\
            UNSG32 uUSB_CTRL0_COMPDISTUNE0                     :  3;\
            UNSG32 uUSB_CTRL0_SQRXTUNE0                        :  3;\
            UNSG32 uUSB_CTRL0_VDATREFTUNE0                     :  2;\
            UNSG32 uUSB_CTRL0_OTGTUNE0                         :  3;\
            UNSG32 uUSB_CTRL0_TXHSXVTUNE0                      :  2;\
            UNSG32 uUSB_CTRL0_TXFSLSTUNE0                      :  4;\
            UNSG32 uUSB_CTRL0_TXVREFTUNE0                      :  4;\
            UNSG32 uUSB_CTRL0_TXRISETUNE0                      :  2;\
            UNSG32 uUSB_CTRL0_TXRESTUNE0                       :  2;\
          }
    union { UNSG32 u32usbPHY_USB_CTRL0;
            struct w32usbPHY_USB_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32usbPHY_USB_CTRL1_TXPREEMPAMPTUNE0(r32)      _BFGET_(r32, 1, 0)
    #define   SET32usbPHY_USB_CTRL1_TXPREEMPAMPTUNE0(r32,v)    _BFSET_(r32, 1, 0,v)
    #define   GET16usbPHY_USB_CTRL1_TXPREEMPAMPTUNE0(r16)      _BFGET_(r16, 1, 0)
    #define   SET16usbPHY_USB_CTRL1_TXPREEMPAMPTUNE0(r16,v)    _BFSET_(r16, 1, 0,v)

    #define   GET32usbPHY_USB_CTRL1_TXPREEMPPULSETUNE0(r32)    _BFGET_(r32, 2, 2)
    #define   SET32usbPHY_USB_CTRL1_TXPREEMPPULSETUNE0(r32,v)  _BFSET_(r32, 2, 2,v)
    #define   GET16usbPHY_USB_CTRL1_TXPREEMPPULSETUNE0(r16)    _BFGET_(r16, 2, 2)
    #define   SET16usbPHY_USB_CTRL1_TXPREEMPPULSETUNE0(r16,v)  _BFSET_(r16, 2, 2,v)

    #define   GET32usbPHY_USB_CTRL1_VBUSVLDEXTSEL0(r32)        _BFGET_(r32, 3, 3)
    #define   SET32usbPHY_USB_CTRL1_VBUSVLDEXTSEL0(r32,v)      _BFSET_(r32, 3, 3,v)
    #define   GET16usbPHY_USB_CTRL1_VBUSVLDEXTSEL0(r16)        _BFGET_(r16, 3, 3)
    #define   SET16usbPHY_USB_CTRL1_VBUSVLDEXTSEL0(r16,v)      _BFSET_(r16, 3, 3,v)

    #define   GET32usbPHY_USB_CTRL1_OTGDISABLE0(r32)           _BFGET_(r32, 4, 4)
    #define   SET32usbPHY_USB_CTRL1_OTGDISABLE0(r32,v)         _BFSET_(r32, 4, 4,v)
    #define   GET16usbPHY_USB_CTRL1_OTGDISABLE0(r16)           _BFGET_(r16, 4, 4)
    #define   SET16usbPHY_USB_CTRL1_OTGDISABLE0(r16,v)         _BFSET_(r16, 4, 4,v)

    #define   GET32usbPHY_USB_CTRL1_TXBITSTUFFEN0(r32)         _BFGET_(r32, 5, 5)
    #define   SET32usbPHY_USB_CTRL1_TXBITSTUFFEN0(r32,v)       _BFSET_(r32, 5, 5,v)
    #define   GET16usbPHY_USB_CTRL1_TXBITSTUFFEN0(r16)         _BFGET_(r16, 5, 5)
    #define   SET16usbPHY_USB_CTRL1_TXBITSTUFFEN0(r16,v)       _BFSET_(r16, 5, 5,v)

    #define   GET32usbPHY_USB_CTRL1_TXBITSTUFFENH0(r32)        _BFGET_(r32, 6, 6)
    #define   SET32usbPHY_USB_CTRL1_TXBITSTUFFENH0(r32,v)      _BFSET_(r32, 6, 6,v)
    #define   GET16usbPHY_USB_CTRL1_TXBITSTUFFENH0(r16)        _BFGET_(r16, 6, 6)
    #define   SET16usbPHY_USB_CTRL1_TXBITSTUFFENH0(r16,v)      _BFSET_(r16, 6, 6,v)

    #define   GET32usbPHY_USB_CTRL1_CHRGSEL0(r32)              _BFGET_(r32, 7, 7)
    #define   SET32usbPHY_USB_CTRL1_CHRGSEL0(r32,v)            _BFSET_(r32, 7, 7,v)
    #define   GET16usbPHY_USB_CTRL1_CHRGSEL0(r16)              _BFGET_(r16, 7, 7)
    #define   SET16usbPHY_USB_CTRL1_CHRGSEL0(r16,v)            _BFSET_(r16, 7, 7,v)

    #define   GET32usbPHY_USB_CTRL1_VDATDETENB0(r32)           _BFGET_(r32, 8, 8)
    #define   SET32usbPHY_USB_CTRL1_VDATDETENB0(r32,v)         _BFSET_(r32, 8, 8,v)
    #define   GET16usbPHY_USB_CTRL1_VDATDETENB0(r16)           _BFGET_(r16, 8, 8)
    #define   SET16usbPHY_USB_CTRL1_VDATDETENB0(r16,v)         _BFSET_(r16, 8, 8,v)

    #define   GET32usbPHY_USB_CTRL1_VDATSRCENB0(r32)           _BFGET_(r32, 9, 9)
    #define   SET32usbPHY_USB_CTRL1_VDATSRCENB0(r32,v)         _BFSET_(r32, 9, 9,v)
    #define   GET16usbPHY_USB_CTRL1_VDATSRCENB0(r16)           _BFGET_(r16, 9, 9)
    #define   SET16usbPHY_USB_CTRL1_VDATSRCENB0(r16,v)         _BFSET_(r16, 9, 9,v)

    #define   GET32usbPHY_USB_CTRL1_DCDENB0(r32)               _BFGET_(r32,10,10)
    #define   SET32usbPHY_USB_CTRL1_DCDENB0(r32,v)             _BFSET_(r32,10,10,v)
    #define   GET16usbPHY_USB_CTRL1_DCDENB0(r16)               _BFGET_(r16,10,10)
    #define   SET16usbPHY_USB_CTRL1_DCDENB0(r16,v)             _BFSET_(r16,10,10,v)

    #define   GET32usbPHY_USB_CTRL1_BYPASSDPDATA0(r32)         _BFGET_(r32,11,11)
    #define   SET32usbPHY_USB_CTRL1_BYPASSDPDATA0(r32,v)       _BFSET_(r32,11,11,v)
    #define   GET16usbPHY_USB_CTRL1_BYPASSDPDATA0(r16)         _BFGET_(r16,11,11)
    #define   SET16usbPHY_USB_CTRL1_BYPASSDPDATA0(r16,v)       _BFSET_(r16,11,11,v)

    #define   GET32usbPHY_USB_CTRL1_BYPASSDMDATA0(r32)         _BFGET_(r32,12,12)
    #define   SET32usbPHY_USB_CTRL1_BYPASSDMDATA0(r32,v)       _BFSET_(r32,12,12,v)
    #define   GET16usbPHY_USB_CTRL1_BYPASSDMDATA0(r16)         _BFGET_(r16,12,12)
    #define   SET16usbPHY_USB_CTRL1_BYPASSDMDATA0(r16,v)       _BFSET_(r16,12,12,v)

    #define   GET32usbPHY_USB_CTRL1_BYPASSDPEN0(r32)           _BFGET_(r32,13,13)
    #define   SET32usbPHY_USB_CTRL1_BYPASSDPEN0(r32,v)         _BFSET_(r32,13,13,v)
    #define   GET16usbPHY_USB_CTRL1_BYPASSDPEN0(r16)           _BFGET_(r16,13,13)
    #define   SET16usbPHY_USB_CTRL1_BYPASSDPEN0(r16,v)         _BFSET_(r16,13,13,v)

    #define   GET32usbPHY_USB_CTRL1_BYPASSDMEN0(r32)           _BFGET_(r32,14,14)
    #define   SET32usbPHY_USB_CTRL1_BYPASSDMEN0(r32,v)         _BFSET_(r32,14,14,v)
    #define   GET16usbPHY_USB_CTRL1_BYPASSDMEN0(r16)           _BFGET_(r16,14,14)
    #define   SET16usbPHY_USB_CTRL1_BYPASSDMEN0(r16,v)         _BFSET_(r16,14,14,v)

    #define   GET32usbPHY_USB_CTRL1_BYPASSSEL0(r32)            _BFGET_(r32,15,15)
    #define   SET32usbPHY_USB_CTRL1_BYPASSSEL0(r32,v)          _BFSET_(r32,15,15,v)
    #define   GET16usbPHY_USB_CTRL1_BYPASSSEL0(r16)            _BFGET_(r16,15,15)
    #define   SET16usbPHY_USB_CTRL1_BYPASSSEL0(r16,v)          _BFSET_(r16,15,15,v)

    #define   GET32usbPHY_USB_CTRL1_FSEL(r32)                  _BFGET_(r32,18,16)
    #define   SET32usbPHY_USB_CTRL1_FSEL(r32,v)                _BFSET_(r32,18,16,v)
    #define   GET16usbPHY_USB_CTRL1_FSEL(r16)                  _BFGET_(r16, 2, 0)
    #define   SET16usbPHY_USB_CTRL1_FSEL(r16,v)                _BFSET_(r16, 2, 0,v)

    #define   GET32usbPHY_USB_CTRL1_REFCLKSEL(r32)             _BFGET_(r32,20,19)
    #define   SET32usbPHY_USB_CTRL1_REFCLKSEL(r32,v)           _BFSET_(r32,20,19,v)
    #define   GET16usbPHY_USB_CTRL1_REFCLKSEL(r16)             _BFGET_(r16, 4, 3)
    #define   SET16usbPHY_USB_CTRL1_REFCLKSEL(r16,v)           _BFSET_(r16, 4, 3,v)

    #define   GET32usbPHY_USB_CTRL1_COMMONONN(r32)             _BFGET_(r32,21,21)
    #define   SET32usbPHY_USB_CTRL1_COMMONONN(r32,v)           _BFSET_(r32,21,21,v)
    #define   GET16usbPHY_USB_CTRL1_COMMONONN(r16)             _BFGET_(r16, 5, 5)
    #define   SET16usbPHY_USB_CTRL1_COMMONONN(r16,v)           _BFSET_(r16, 5, 5,v)

    #define   GET32usbPHY_USB_CTRL1_PORTRESET0(r32)            _BFGET_(r32,22,22)
    #define   SET32usbPHY_USB_CTRL1_PORTRESET0(r32,v)          _BFSET_(r32,22,22,v)
    #define   GET16usbPHY_USB_CTRL1_PORTRESET0(r16)            _BFGET_(r16, 6, 6)
    #define   SET16usbPHY_USB_CTRL1_PORTRESET0(r16,v)          _BFSET_(r16, 6, 6,v)

    #define   GET32usbPHY_USB_CTRL1_VBUSVLDEXT0(r32)           _BFGET_(r32,23,23)
    #define   SET32usbPHY_USB_CTRL1_VBUSVLDEXT0(r32,v)         _BFSET_(r32,23,23,v)
    #define   GET16usbPHY_USB_CTRL1_VBUSVLDEXT0(r16)           _BFGET_(r16, 7, 7)
    #define   SET16usbPHY_USB_CTRL1_VBUSVLDEXT0(r16,v)         _BFSET_(r16, 7, 7,v)

    #define   GET32usbPHY_USB_CTRL1_RETENABLEN(r32)            _BFGET_(r32,24,24)
    #define   SET32usbPHY_USB_CTRL1_RETENABLEN(r32,v)          _BFSET_(r32,24,24,v)
    #define   GET16usbPHY_USB_CTRL1_RETENABLEN(r16)            _BFGET_(r16, 8, 8)
    #define   SET16usbPHY_USB_CTRL1_RETENABLEN(r16,v)          _BFSET_(r16, 8, 8,v)

    #define   GET32usbPHY_USB_CTRL1_AUTORSMENB0(r32)           _BFGET_(r32,25,25)
    #define   SET32usbPHY_USB_CTRL1_AUTORSMENB0(r32,v)         _BFSET_(r32,25,25,v)
    #define   GET16usbPHY_USB_CTRL1_AUTORSMENB0(r16)           _BFGET_(r16, 9, 9)
    #define   SET16usbPHY_USB_CTRL1_AUTORSMENB0(r16,v)         _BFSET_(r16, 9, 9,v)

    #define   GET32usbPHY_USB_CTRL1_HSXCVREXTCTL0(r32)         _BFGET_(r32,26,26)
    #define   SET32usbPHY_USB_CTRL1_HSXCVREXTCTL0(r32,v)       _BFSET_(r32,26,26,v)
    #define   GET16usbPHY_USB_CTRL1_HSXCVREXTCTL0(r16)         _BFGET_(r16,10,10)
    #define   SET16usbPHY_USB_CTRL1_HSXCVREXTCTL0(r16,v)       _BFSET_(r16,10,10,v)

    #define     w32usbPHY_USB_CTRL1                            {\
            UNSG32 uUSB_CTRL1_TXPREEMPAMPTUNE0                 :  2;\
            UNSG32 uUSB_CTRL1_TXPREEMPPULSETUNE0               :  1;\
            UNSG32 uUSB_CTRL1_VBUSVLDEXTSEL0                   :  1;\
            UNSG32 uUSB_CTRL1_OTGDISABLE0                      :  1;\
            UNSG32 uUSB_CTRL1_TXBITSTUFFEN0                    :  1;\
            UNSG32 uUSB_CTRL1_TXBITSTUFFENH0                   :  1;\
            UNSG32 uUSB_CTRL1_CHRGSEL0                         :  1;\
            UNSG32 uUSB_CTRL1_VDATDETENB0                      :  1;\
            UNSG32 uUSB_CTRL1_VDATSRCENB0                      :  1;\
            UNSG32 uUSB_CTRL1_DCDENB0                          :  1;\
            UNSG32 uUSB_CTRL1_BYPASSDPDATA0                    :  1;\
            UNSG32 uUSB_CTRL1_BYPASSDMDATA0                    :  1;\
            UNSG32 uUSB_CTRL1_BYPASSDPEN0                      :  1;\
            UNSG32 uUSB_CTRL1_BYPASSDMEN0                      :  1;\
            UNSG32 uUSB_CTRL1_BYPASSSEL0                       :  1;\
            UNSG32 uUSB_CTRL1_FSEL                             :  3;\
            UNSG32 uUSB_CTRL1_REFCLKSEL                        :  2;\
            UNSG32 uUSB_CTRL1_COMMONONN                        :  1;\
            UNSG32 uUSB_CTRL1_PORTRESET0                       :  1;\
            UNSG32 uUSB_CTRL1_VBUSVLDEXT0                      :  1;\
            UNSG32 uUSB_CTRL1_RETENABLEN                       :  1;\
            UNSG32 uUSB_CTRL1_AUTORSMENB0                      :  1;\
            UNSG32 uUSB_CTRL1_HSXCVREXTCTL0                    :  1;\
            UNSG32 RSVDx4_b27                                  :  5;\
          }
    union { UNSG32 u32usbPHY_USB_CTRL1;
            struct w32usbPHY_USB_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32usbPHY_USB_CTRL2_ATERESET(r32)              _BFGET_(r32, 0, 0)
    #define   SET32usbPHY_USB_CTRL2_ATERESET(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16usbPHY_USB_CTRL2_ATERESET(r16)              _BFGET_(r16, 0, 0)
    #define   SET16usbPHY_USB_CTRL2_ATERESET(r16,v)            _BFSET_(r16, 0, 0,v)

    #define   GET32usbPHY_USB_CTRL2_SIDDQ(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32usbPHY_USB_CTRL2_SIDDQ(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16usbPHY_USB_CTRL2_SIDDQ(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16usbPHY_USB_CTRL2_SIDDQ(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32usbPHY_USB_CTRL2_VATESTENB(r32)             _BFGET_(r32, 3, 2)
    #define   SET32usbPHY_USB_CTRL2_VATESTENB(r32,v)           _BFSET_(r32, 3, 2,v)
    #define   GET16usbPHY_USB_CTRL2_VATESTENB(r16)             _BFGET_(r16, 3, 2)
    #define   SET16usbPHY_USB_CTRL2_VATESTENB(r16,v)           _BFSET_(r16, 3, 2,v)

    #define   GET32usbPHY_USB_CTRL2_LOOPBACKENB0(r32)          _BFGET_(r32, 4, 4)
    #define   SET32usbPHY_USB_CTRL2_LOOPBACKENB0(r32,v)        _BFSET_(r32, 4, 4,v)
    #define   GET16usbPHY_USB_CTRL2_LOOPBACKENB0(r16)          _BFGET_(r16, 4, 4)
    #define   SET16usbPHY_USB_CTRL2_LOOPBACKENB0(r16,v)        _BFSET_(r16, 4, 4,v)

    #define   GET32usbPHY_USB_CTRL2_TESTBURNIN(r32)            _BFGET_(r32, 5, 5)
    #define   SET32usbPHY_USB_CTRL2_TESTBURNIN(r32,v)          _BFSET_(r32, 5, 5,v)
    #define   GET16usbPHY_USB_CTRL2_TESTBURNIN(r16)            _BFGET_(r16, 5, 5)
    #define   SET16usbPHY_USB_CTRL2_TESTBURNIN(r16,v)          _BFSET_(r16, 5, 5,v)

    #define   GET32usbPHY_USB_CTRL2_iTestPhy(r32)              _BFGET_(r32, 6, 6)
    #define   SET32usbPHY_USB_CTRL2_iTestPhy(r32,v)            _BFSET_(r32, 6, 6,v)
    #define   GET16usbPHY_USB_CTRL2_iTestPhy(r16)              _BFGET_(r16, 6, 6)
    #define   SET16usbPHY_USB_CTRL2_iTestPhy(r16,v)            _BFSET_(r16, 6, 6,v)

    #define     w32usbPHY_USB_CTRL2                            {\
            UNSG32 uUSB_CTRL2_ATERESET                         :  1;\
            UNSG32 uUSB_CTRL2_SIDDQ                            :  1;\
            UNSG32 uUSB_CTRL2_VATESTENB                        :  2;\
            UNSG32 uUSB_CTRL2_LOOPBACKENB0                     :  1;\
            UNSG32 uUSB_CTRL2_TESTBURNIN                       :  1;\
            UNSG32 uUSB_CTRL2_iTestPhy                         :  1;\
            UNSG32 RSVDx8_b7                                   : 25;\
          }
    union { UNSG32 u32usbPHY_USB_CTRL2;
            struct w32usbPHY_USB_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32usbPHY_USB_CTRL3_ss_scaledown_mode(r32)     _BFGET_(r32, 1, 0)
    #define   SET32usbPHY_USB_CTRL3_ss_scaledown_mode(r32,v)   _BFSET_(r32, 1, 0,v)
    #define   GET16usbPHY_USB_CTRL3_ss_scaledown_mode(r16)     _BFGET_(r16, 1, 0)
    #define   SET16usbPHY_USB_CTRL3_ss_scaledown_mode(r16,v)   _BFSET_(r16, 1, 0,v)

    #define   GET32usbPHY_USB_CTRL3_M_HBigEndian(r32)          _BFGET_(r32, 2, 2)
    #define   SET32usbPHY_USB_CTRL3_M_HBigEndian(r32,v)        _BFSET_(r32, 2, 2,v)
    #define   GET16usbPHY_USB_CTRL3_M_HBigEndian(r16)          _BFGET_(r16, 2, 2)
    #define   SET16usbPHY_USB_CTRL3_M_HBigEndian(r16,v)        _BFSET_(r16, 2, 2,v)

    #define   GET32usbPHY_USB_CTRL3_S_HBigEndian(r32)          _BFGET_(r32, 3, 3)
    #define   SET32usbPHY_USB_CTRL3_S_HBigEndian(r32,v)        _BFSET_(r32, 3, 3,v)
    #define   GET16usbPHY_USB_CTRL3_S_HBigEndian(r16)          _BFGET_(r16, 3, 3)
    #define   SET16usbPHY_USB_CTRL3_S_HBigEndian(r16,v)        _BFSET_(r16, 3, 3,v)

    #define   GET32usbPHY_USB_CTRL3_sel_debug_clk(r32)         _BFGET_(r32, 4, 4)
    #define   SET32usbPHY_USB_CTRL3_sel_debug_clk(r32,v)       _BFSET_(r32, 4, 4,v)
    #define   GET16usbPHY_USB_CTRL3_sel_debug_clk(r16)         _BFGET_(r16, 4, 4)
    #define   SET16usbPHY_USB_CTRL3_sel_debug_clk(r16,v)       _BFSET_(r16, 4, 4,v)

    #define   GET32usbPHY_USB_CTRL3_sel_debug_data(r32)        _BFGET_(r32, 9, 5)
    #define   SET32usbPHY_USB_CTRL3_sel_debug_data(r32,v)      _BFSET_(r32, 9, 5,v)
    #define   GET16usbPHY_USB_CTRL3_sel_debug_data(r16)        _BFGET_(r16, 9, 5)
    #define   SET16usbPHY_USB_CTRL3_sel_debug_data(r16,v)      _BFSET_(r16, 9, 5,v)

    #define   GET32usbPHY_USB_CTRL3_SYS_DMA_DONE(r32)          _BFGET_(r32,10,10)
    #define   SET32usbPHY_USB_CTRL3_SYS_DMA_DONE(r32,v)        _BFSET_(r32,10,10,v)
    #define   GET16usbPHY_USB_CTRL3_SYS_DMA_DONE(r16)          _BFGET_(r16,10,10)
    #define   SET16usbPHY_USB_CTRL3_SYS_DMA_DONE(r16,v)        _BFSET_(r16,10,10,v)

    #define   GET32usbPHY_USB_CTRL3_dbnce_fltr_bypass(r32)     _BFGET_(r32,11,11)
    #define   SET32usbPHY_USB_CTRL3_dbnce_fltr_bypass(r32,v)   _BFSET_(r32,11,11,v)
    #define   GET16usbPHY_USB_CTRL3_dbnce_fltr_bypass(r16)     _BFGET_(r16,11,11)
    #define   SET16usbPHY_USB_CTRL3_dbnce_fltr_bypass(r16,v)   _BFSET_(r16,11,11,v)

    #define     w32usbPHY_USB_CTRL3                            {\
            UNSG32 uUSB_CTRL3_ss_scaledown_mode                :  2;\
            UNSG32 uUSB_CTRL3_M_HBigEndian                     :  1;\
            UNSG32 uUSB_CTRL3_S_HBigEndian                     :  1;\
            UNSG32 uUSB_CTRL3_sel_debug_clk                    :  1;\
            UNSG32 uUSB_CTRL3_sel_debug_data                   :  5;\
            UNSG32 uUSB_CTRL3_SYS_DMA_DONE                     :  1;\
            UNSG32 uUSB_CTRL3_dbnce_fltr_bypass                :  1;\
            UNSG32 RSVDxC_b12                                  : 20;\
          }
    union { UNSG32 u32usbPHY_USB_CTRL3;
            struct w32usbPHY_USB_CTRL3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32usbPHY_USB_CTRL4_dev_chirp_time_16b(r32)    _BFGET_(r32,17, 0)
    #define   SET32usbPHY_USB_CTRL4_dev_chirp_time_16b(r32,v)  _BFSET_(r32,17, 0,v)

    #define     w32usbPHY_USB_CTRL4                            {\
            UNSG32 uUSB_CTRL4_dev_chirp_time_16b               : 18;\
            UNSG32 RSVDx10_b18                                 : 14;\
          }
    union { UNSG32 u32usbPHY_USB_CTRL4;
            struct w32usbPHY_USB_CTRL4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32usbPHY_USB_CTRL5_dev_chirp_time_8b(r32)     _BFGET_(r32,17, 0)
    #define   SET32usbPHY_USB_CTRL5_dev_chirp_time_8b(r32,v)   _BFSET_(r32,17, 0,v)

    #define     w32usbPHY_USB_CTRL5                            {\
            UNSG32 uUSB_CTRL5_dev_chirp_time_8b                : 18;\
            UNSG32 RSVDx14_b18                                 : 14;\
          }
    union { UNSG32 u32usbPHY_USB_CTRL5;
            struct w32usbPHY_USB_CTRL5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32usbPHY_USB_CTRL6_LPBK_SUSPENDM0(r32)        _BFGET_(r32, 0, 0)
    #define   SET32usbPHY_USB_CTRL6_LPBK_SUSPENDM0(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16usbPHY_USB_CTRL6_LPBK_SUSPENDM0(r16)        _BFGET_(r16, 0, 0)
    #define   SET16usbPHY_USB_CTRL6_LPBK_SUSPENDM0(r16,v)      _BFSET_(r16, 0, 0,v)

    #define   GET32usbPHY_USB_CTRL6_LPBK_FSXCVROWNER0(r32)     _BFGET_(r32, 1, 1)
    #define   SET32usbPHY_USB_CTRL6_LPBK_FSXCVROWNER0(r32,v)   _BFSET_(r32, 1, 1,v)
    #define   GET16usbPHY_USB_CTRL6_LPBK_FSXCVROWNER0(r16)     _BFGET_(r16, 1, 1)
    #define   SET16usbPHY_USB_CTRL6_LPBK_FSXCVROWNER0(r16,v)   _BFSET_(r16, 1, 1,v)

    #define   GET32usbPHY_USB_CTRL6_LPBK_WORDINTERFACE0(r32)   _BFGET_(r32, 2, 2)
    #define   SET32usbPHY_USB_CTRL6_LPBK_WORDINTERFACE0(r32,v) _BFSET_(r32, 2, 2,v)
    #define   GET16usbPHY_USB_CTRL6_LPBK_WORDINTERFACE0(r16)   _BFGET_(r16, 2, 2)
    #define   SET16usbPHY_USB_CTRL6_LPBK_WORDINTERFACE0(r16,v) _BFSET_(r16, 2, 2,v)

    #define   GET32usbPHY_USB_CTRL6_LPBK_DPPULLDOWN0(r32)      _BFGET_(r32, 3, 3)
    #define   SET32usbPHY_USB_CTRL6_LPBK_DPPULLDOWN0(r32,v)    _BFSET_(r32, 3, 3,v)
    #define   GET16usbPHY_USB_CTRL6_LPBK_DPPULLDOWN0(r16)      _BFGET_(r16, 3, 3)
    #define   SET16usbPHY_USB_CTRL6_LPBK_DPPULLDOWN0(r16,v)    _BFSET_(r16, 3, 3,v)

    #define   GET32usbPHY_USB_CTRL6_LPBK_DMPULLDOWN0(r32)      _BFGET_(r32, 4, 4)
    #define   SET32usbPHY_USB_CTRL6_LPBK_DMPULLDOWN0(r32,v)    _BFSET_(r32, 4, 4,v)
    #define   GET16usbPHY_USB_CTRL6_LPBK_DMPULLDOWN0(r16)      _BFGET_(r16, 4, 4)
    #define   SET16usbPHY_USB_CTRL6_LPBK_DMPULLDOWN0(r16,v)    _BFSET_(r16, 4, 4,v)

    #define   GET32usbPHY_USB_CTRL6_LPBK_DRVVBUS0(r32)         _BFGET_(r32, 5, 5)
    #define   SET32usbPHY_USB_CTRL6_LPBK_DRVVBUS0(r32,v)       _BFSET_(r32, 5, 5,v)
    #define   GET16usbPHY_USB_CTRL6_LPBK_DRVVBUS0(r16)         _BFGET_(r16, 5, 5)
    #define   SET16usbPHY_USB_CTRL6_LPBK_DRVVBUS0(r16,v)       _BFSET_(r16, 5, 5,v)

    #define   GET32usbPHY_USB_CTRL6_LPBK_IDPULLUP0(r32)        _BFGET_(r32, 6, 6)
    #define   SET32usbPHY_USB_CTRL6_LPBK_IDPULLUP0(r32,v)      _BFSET_(r32, 6, 6,v)
    #define   GET16usbPHY_USB_CTRL6_LPBK_IDPULLUP0(r16)        _BFGET_(r16, 6, 6)
    #define   SET16usbPHY_USB_CTRL6_LPBK_IDPULLUP0(r16,v)      _BFSET_(r16, 6, 6,v)

    #define     w32usbPHY_USB_CTRL6                            {\
            UNSG32 uUSB_CTRL6_LPBK_SUSPENDM0                   :  1;\
            UNSG32 uUSB_CTRL6_LPBK_FSXCVROWNER0                :  1;\
            UNSG32 uUSB_CTRL6_LPBK_WORDINTERFACE0              :  1;\
            UNSG32 uUSB_CTRL6_LPBK_DPPULLDOWN0                 :  1;\
            UNSG32 uUSB_CTRL6_LPBK_DMPULLDOWN0                 :  1;\
            UNSG32 uUSB_CTRL6_LPBK_DRVVBUS0                    :  1;\
            UNSG32 uUSB_CTRL6_LPBK_IDPULLUP0                   :  1;\
            UNSG32 RSVDx18_b7                                  : 25;\
          }
    union { UNSG32 u32usbPHY_USB_CTRL6;
            struct w32usbPHY_USB_CTRL6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32usbPHY_USB_CTRL7_LPBK_DATAIN0(r32)          _BFGET_(r32, 7, 0)
    #define   SET32usbPHY_USB_CTRL7_LPBK_DATAIN0(r32,v)        _BFSET_(r32, 7, 0,v)
    #define   GET16usbPHY_USB_CTRL7_LPBK_DATAIN0(r16)          _BFGET_(r16, 7, 0)
    #define   SET16usbPHY_USB_CTRL7_LPBK_DATAIN0(r16,v)        _BFSET_(r16, 7, 0,v)

    #define   GET32usbPHY_USB_CTRL7_LPBK_DATAINH0(r32)         _BFGET_(r32,15, 8)
    #define   SET32usbPHY_USB_CTRL7_LPBK_DATAINH0(r32,v)       _BFSET_(r32,15, 8,v)
    #define   GET16usbPHY_USB_CTRL7_LPBK_DATAINH0(r16)         _BFGET_(r16,15, 8)
    #define   SET16usbPHY_USB_CTRL7_LPBK_DATAINH0(r16,v)       _BFSET_(r16,15, 8,v)

    #define   GET32usbPHY_USB_CTRL7_LPBK_TXVALID0(r32)         _BFGET_(r32,16,16)
    #define   SET32usbPHY_USB_CTRL7_LPBK_TXVALID0(r32,v)       _BFSET_(r32,16,16,v)
    #define   GET16usbPHY_USB_CTRL7_LPBK_TXVALID0(r16)         _BFGET_(r16, 0, 0)
    #define   SET16usbPHY_USB_CTRL7_LPBK_TXVALID0(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32usbPHY_USB_CTRL7_LPBK_TXVALIDH0(r32)        _BFGET_(r32,17,17)
    #define   SET32usbPHY_USB_CTRL7_LPBK_TXVALIDH0(r32,v)      _BFSET_(r32,17,17,v)
    #define   GET16usbPHY_USB_CTRL7_LPBK_TXVALIDH0(r16)        _BFGET_(r16, 1, 1)
    #define   SET16usbPHY_USB_CTRL7_LPBK_TXVALIDH0(r16,v)      _BFSET_(r16, 1, 1,v)

    #define   GET32usbPHY_USB_CTRL7_LPBK_OPMODE(r32)           _BFGET_(r32,19,18)
    #define   SET32usbPHY_USB_CTRL7_LPBK_OPMODE(r32,v)         _BFSET_(r32,19,18,v)
    #define   GET16usbPHY_USB_CTRL7_LPBK_OPMODE(r16)           _BFGET_(r16, 3, 2)
    #define   SET16usbPHY_USB_CTRL7_LPBK_OPMODE(r16,v)         _BFSET_(r16, 3, 2,v)

    #define   GET32usbPHY_USB_CTRL7_LPBK_XCVRSEL0(r32)         _BFGET_(r32,21,20)
    #define   SET32usbPHY_USB_CTRL7_LPBK_XCVRSEL0(r32,v)       _BFSET_(r32,21,20,v)
    #define   GET16usbPHY_USB_CTRL7_LPBK_XCVRSEL0(r16)         _BFGET_(r16, 5, 4)
    #define   SET16usbPHY_USB_CTRL7_LPBK_XCVRSEL0(r16,v)       _BFSET_(r16, 5, 4,v)

    #define   GET32usbPHY_USB_CTRL7_LPBK_TERMSEL0(r32)         _BFGET_(r32,22,22)
    #define   SET32usbPHY_USB_CTRL7_LPBK_TERMSEL0(r32,v)       _BFSET_(r32,22,22,v)
    #define   GET16usbPHY_USB_CTRL7_LPBK_TERMSEL0(r16)         _BFGET_(r16, 6, 6)
    #define   SET16usbPHY_USB_CTRL7_LPBK_TERMSEL0(r16,v)       _BFSET_(r16, 6, 6,v)

    #define     w32usbPHY_USB_CTRL7                            {\
            UNSG32 uUSB_CTRL7_LPBK_DATAIN0                     :  8;\
            UNSG32 uUSB_CTRL7_LPBK_DATAINH0                    :  8;\
            UNSG32 uUSB_CTRL7_LPBK_TXVALID0                    :  1;\
            UNSG32 uUSB_CTRL7_LPBK_TXVALIDH0                   :  1;\
            UNSG32 uUSB_CTRL7_LPBK_OPMODE                      :  2;\
            UNSG32 uUSB_CTRL7_LPBK_XCVRSEL0                    :  2;\
            UNSG32 uUSB_CTRL7_LPBK_TERMSEL0                    :  1;\
            UNSG32 RSVDx1C_b23                                 :  9;\
          }
    union { UNSG32 u32usbPHY_USB_CTRL7;
            struct w32usbPHY_USB_CTRL7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32usbPHY_USB_CTRL8_LPBK_update(r32)           _BFGET_(r32, 0, 0)
    #define   SET32usbPHY_USB_CTRL8_LPBK_update(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16usbPHY_USB_CTRL8_LPBK_update(r16)           _BFGET_(r16, 0, 0)
    #define   SET16usbPHY_USB_CTRL8_LPBK_update(r16,v)         _BFSET_(r16, 0, 0,v)

    #define     w32usbPHY_USB_CTRL8                            {\
            UNSG32 uUSB_CTRL8_LPBK_update                      :  1;\
            UNSG32 RSVDx20_b1                                  : 31;\
          }
    union { UNSG32 u32usbPHY_USB_CTRL8;
            struct w32usbPHY_USB_CTRL8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32usbPHY_USB_PHY_RB_CHGDET0(r32)              _BFGET_(r32, 0, 0)
    #define   SET32usbPHY_USB_PHY_RB_CHGDET0(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16usbPHY_USB_PHY_RB_CHGDET0(r16)              _BFGET_(r16, 0, 0)
    #define   SET16usbPHY_USB_PHY_RB_CHGDET0(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32usbPHY_USB_PHY_RB                           {\
            UNSG32 uUSB_PHY_RB_CHGDET0                         :  1;\
            UNSG32 RSVDx24_b1                                  : 31;\
          }
    union { UNSG32 u32usbPHY_USB_PHY_RB;
            struct w32usbPHY_USB_PHY_RB;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32usbPHY_TESTCLK0_TESTCLK0(r32)               _BFGET_(r32, 0, 0)
    #define   SET32usbPHY_TESTCLK0_TESTCLK0(r32,v)             _BFSET_(r32, 0, 0,v)
    #define   GET16usbPHY_TESTCLK0_TESTCLK0(r16)               _BFGET_(r16, 0, 0)
    #define   SET16usbPHY_TESTCLK0_TESTCLK0(r16,v)             _BFSET_(r16, 0, 0,v)

    #define     w32usbPHY_TESTCLK0                             {\
            UNSG32 uTESTCLK0_TESTCLK0                          :  1;\
            UNSG32 RSVDx28_b1                                  : 31;\
          }
    union { UNSG32 u32usbPHY_TESTCLK0;
            struct w32usbPHY_TESTCLK0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32usbPHY_TESTDATAOUTSEL0_TESTDATAOUTSEL0(r32) _BFGET_(r32, 0, 0)
    #define   SET32usbPHY_TESTDATAOUTSEL0_TESTDATAOUTSEL0(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16usbPHY_TESTDATAOUTSEL0_TESTDATAOUTSEL0(r16) _BFGET_(r16, 0, 0)
    #define   SET16usbPHY_TESTDATAOUTSEL0_TESTDATAOUTSEL0(r16,v) _BFSET_(r16, 0, 0,v)

    #define     w32usbPHY_TESTDATAOUTSEL0                      {\
            UNSG32 uTESTDATAOUTSEL0_TESTDATAOUTSEL0            :  1;\
            UNSG32 RSVDx2C_b1                                  : 31;\
          }
    union { UNSG32 u32usbPHY_TESTDATAOUTSEL0;
            struct w32usbPHY_TESTDATAOUTSEL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32usbPHY_TESTDATAIN0_TESTDATAIN0(r32)         _BFGET_(r32, 7, 0)
    #define   SET32usbPHY_TESTDATAIN0_TESTDATAIN0(r32,v)       _BFSET_(r32, 7, 0,v)
    #define   GET16usbPHY_TESTDATAIN0_TESTDATAIN0(r16)         _BFGET_(r16, 7, 0)
    #define   SET16usbPHY_TESTDATAIN0_TESTDATAIN0(r16,v)       _BFSET_(r16, 7, 0,v)

    #define     w32usbPHY_TESTDATAIN0                          {\
            UNSG32 uTESTDATAIN0_TESTDATAIN0                    :  8;\
            UNSG32 RSVDx30_b8                                  : 24;\
          }
    union { UNSG32 u32usbPHY_TESTDATAIN0;
            struct w32usbPHY_TESTDATAIN0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32usbPHY_TESTADDR_TESTADDR(r32)               _BFGET_(r32, 3, 0)
    #define   SET32usbPHY_TESTADDR_TESTADDR(r32,v)             _BFSET_(r32, 3, 0,v)
    #define   GET16usbPHY_TESTADDR_TESTADDR(r16)               _BFGET_(r16, 3, 0)
    #define   SET16usbPHY_TESTADDR_TESTADDR(r16,v)             _BFSET_(r16, 3, 0,v)

    #define     w32usbPHY_TESTADDR                             {\
            UNSG32 uTESTADDR_TESTADDR                          :  4;\
            UNSG32 RSVDx34_b4                                  : 28;\
          }
    union { UNSG32 u32usbPHY_TESTADDR;
            struct w32usbPHY_TESTADDR;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32usbPHY_TESTDATAOUT0_TESTDATAOUT0(r32)       _BFGET_(r32, 3, 0)
    #define   SET32usbPHY_TESTDATAOUT0_TESTDATAOUT0(r32,v)     _BFSET_(r32, 3, 0,v)
    #define   GET16usbPHY_TESTDATAOUT0_TESTDATAOUT0(r16)       _BFGET_(r16, 3, 0)
    #define   SET16usbPHY_TESTDATAOUT0_TESTDATAOUT0(r16,v)     _BFSET_(r16, 3, 0,v)

    #define     w32usbPHY_TESTDATAOUT0                         {\
            UNSG32 uTESTDATAOUT0_TESTDATAOUT0                  :  4;\
            UNSG32 RSVDx38_b4                                  : 28;\
          }
    union { UNSG32 u32usbPHY_TESTDATAOUT0;
            struct w32usbPHY_TESTDATAOUT0;
          };
    ///////////////////////////////////////////////////////////
    } SIE_usbPHY;

    typedef union  T32usbPHY_USB_CTRL0
          { UNSG32 u32;
            struct w32usbPHY_USB_CTRL0;
                 } T32usbPHY_USB_CTRL0;
    typedef union  T32usbPHY_USB_CTRL1
          { UNSG32 u32;
            struct w32usbPHY_USB_CTRL1;
                 } T32usbPHY_USB_CTRL1;
    typedef union  T32usbPHY_USB_CTRL2
          { UNSG32 u32;
            struct w32usbPHY_USB_CTRL2;
                 } T32usbPHY_USB_CTRL2;
    typedef union  T32usbPHY_USB_CTRL3
          { UNSG32 u32;
            struct w32usbPHY_USB_CTRL3;
                 } T32usbPHY_USB_CTRL3;
    typedef union  T32usbPHY_USB_CTRL4
          { UNSG32 u32;
            struct w32usbPHY_USB_CTRL4;
                 } T32usbPHY_USB_CTRL4;
    typedef union  T32usbPHY_USB_CTRL5
          { UNSG32 u32;
            struct w32usbPHY_USB_CTRL5;
                 } T32usbPHY_USB_CTRL5;
    typedef union  T32usbPHY_USB_CTRL6
          { UNSG32 u32;
            struct w32usbPHY_USB_CTRL6;
                 } T32usbPHY_USB_CTRL6;
    typedef union  T32usbPHY_USB_CTRL7
          { UNSG32 u32;
            struct w32usbPHY_USB_CTRL7;
                 } T32usbPHY_USB_CTRL7;
    typedef union  T32usbPHY_USB_CTRL8
          { UNSG32 u32;
            struct w32usbPHY_USB_CTRL8;
                 } T32usbPHY_USB_CTRL8;
    typedef union  T32usbPHY_USB_PHY_RB
          { UNSG32 u32;
            struct w32usbPHY_USB_PHY_RB;
                 } T32usbPHY_USB_PHY_RB;
    typedef union  T32usbPHY_TESTCLK0
          { UNSG32 u32;
            struct w32usbPHY_TESTCLK0;
                 } T32usbPHY_TESTCLK0;
    typedef union  T32usbPHY_TESTDATAOUTSEL0
          { UNSG32 u32;
            struct w32usbPHY_TESTDATAOUTSEL0;
                 } T32usbPHY_TESTDATAOUTSEL0;
    typedef union  T32usbPHY_TESTDATAIN0
          { UNSG32 u32;
            struct w32usbPHY_TESTDATAIN0;
                 } T32usbPHY_TESTDATAIN0;
    typedef union  T32usbPHY_TESTADDR
          { UNSG32 u32;
            struct w32usbPHY_TESTADDR;
                 } T32usbPHY_TESTADDR;
    typedef union  T32usbPHY_TESTDATAOUT0
          { UNSG32 u32;
            struct w32usbPHY_TESTDATAOUT0;
                 } T32usbPHY_TESTDATAOUT0;
    ///////////////////////////////////////////////////////////

    typedef union  TusbPHY_USB_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32usbPHY_USB_CTRL0;
                   };
                 } TusbPHY_USB_CTRL0;
    typedef union  TusbPHY_USB_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32usbPHY_USB_CTRL1;
                   };
                 } TusbPHY_USB_CTRL1;
    typedef union  TusbPHY_USB_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32usbPHY_USB_CTRL2;
                   };
                 } TusbPHY_USB_CTRL2;
    typedef union  TusbPHY_USB_CTRL3
          { UNSG32 u32[1];
            struct {
            struct w32usbPHY_USB_CTRL3;
                   };
                 } TusbPHY_USB_CTRL3;
    typedef union  TusbPHY_USB_CTRL4
          { UNSG32 u32[1];
            struct {
            struct w32usbPHY_USB_CTRL4;
                   };
                 } TusbPHY_USB_CTRL4;
    typedef union  TusbPHY_USB_CTRL5
          { UNSG32 u32[1];
            struct {
            struct w32usbPHY_USB_CTRL5;
                   };
                 } TusbPHY_USB_CTRL5;
    typedef union  TusbPHY_USB_CTRL6
          { UNSG32 u32[1];
            struct {
            struct w32usbPHY_USB_CTRL6;
                   };
                 } TusbPHY_USB_CTRL6;
    typedef union  TusbPHY_USB_CTRL7
          { UNSG32 u32[1];
            struct {
            struct w32usbPHY_USB_CTRL7;
                   };
                 } TusbPHY_USB_CTRL7;
    typedef union  TusbPHY_USB_CTRL8
          { UNSG32 u32[1];
            struct {
            struct w32usbPHY_USB_CTRL8;
                   };
                 } TusbPHY_USB_CTRL8;
    typedef union  TusbPHY_USB_PHY_RB
          { UNSG32 u32[1];
            struct {
            struct w32usbPHY_USB_PHY_RB;
                   };
                 } TusbPHY_USB_PHY_RB;
    typedef union  TusbPHY_TESTCLK0
          { UNSG32 u32[1];
            struct {
            struct w32usbPHY_TESTCLK0;
                   };
                 } TusbPHY_TESTCLK0;
    typedef union  TusbPHY_TESTDATAOUTSEL0
          { UNSG32 u32[1];
            struct {
            struct w32usbPHY_TESTDATAOUTSEL0;
                   };
                 } TusbPHY_TESTDATAOUTSEL0;
    typedef union  TusbPHY_TESTDATAIN0
          { UNSG32 u32[1];
            struct {
            struct w32usbPHY_TESTDATAIN0;
                   };
                 } TusbPHY_TESTDATAIN0;
    typedef union  TusbPHY_TESTADDR
          { UNSG32 u32[1];
            struct {
            struct w32usbPHY_TESTADDR;
                   };
                 } TusbPHY_TESTADDR;
    typedef union  TusbPHY_TESTDATAOUT0
          { UNSG32 u32[1];
            struct {
            struct w32usbPHY_TESTDATAOUT0;
                   };
                 } TusbPHY_TESTDATAOUT0;

    ///////////////////////////////////////////////////////////
     SIGN32 usbPHY_drvrd(SIE_usbPHY *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 usbPHY_drvwr(SIE_usbPHY *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void usbPHY_reset(SIE_usbPHY *p);
     SIGN32 usbPHY_cmp  (SIE_usbPHY *p, SIE_usbPHY *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define usbPHY_check(p,pie,pfx,hLOG) usbPHY_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define usbPHY_print(p,    pfx,hLOG) usbPHY_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: usbPHY
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: usbPHY.h
////////////////////////////////////////////////////////////

